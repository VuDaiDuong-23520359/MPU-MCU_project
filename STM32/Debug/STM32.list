
STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007730  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013558  080078c0  080078c0  000088c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ae18  0801ae18  0001c070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801ae18  0801ae18  0001be18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ae20  0801ae20  0001c070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ae20  0801ae20  0001be20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801ae24  0801ae24  0001be24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  0801ae28  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001c070  2**0
                  CONTENTS
 10 .bss          00004f80  20000070  20000070  0001c070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004ff0  20004ff0  0001c070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001c070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f38b  00000000  00000000  0001c0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002604  00000000  00000000  0002b42b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000de0  00000000  00000000  0002da30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a21  00000000  00000000  0002e810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000232f6  00000000  00000000  0002f231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000102fb  00000000  00000000  00052527  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d93bb  00000000  00000000  00062822  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000b3  00000000  00000000  0013bbdd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000042b4  00000000  00000000  0013bc90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  0013ff44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00002a79  00000000  00000000  0013ffa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00000060  00000000  00000000  00142a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080078a8 	.word	0x080078a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080078a8 	.word	0x080078a8

080001d0 <arm_bitreversal_32>:
 80001d0:	1c4b      	adds	r3, r1, #1
 80001d2:	2b01      	cmp	r3, #1
 80001d4:	bf98      	it	ls
 80001d6:	4770      	bxls	lr
 80001d8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001dc:	1c91      	adds	r1, r2, #2
 80001de:	089b      	lsrs	r3, r3, #2

080001e0 <arm_bitreversal_32_0>:
 80001e0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001e4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001e8:	880a      	ldrh	r2, [r1, #0]
 80001ea:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001ee:	4480      	add	r8, r0
 80001f0:	4481      	add	r9, r0
 80001f2:	4402      	add	r2, r0
 80001f4:	4484      	add	ip, r0
 80001f6:	f8d9 7000 	ldr.w	r7, [r9]
 80001fa:	f8d8 6000 	ldr.w	r6, [r8]
 80001fe:	6815      	ldr	r5, [r2, #0]
 8000200:	f8dc 4000 	ldr.w	r4, [ip]
 8000204:	f8c9 6000 	str.w	r6, [r9]
 8000208:	f8c8 7000 	str.w	r7, [r8]
 800020c:	f8cc 5000 	str.w	r5, [ip]
 8000210:	6014      	str	r4, [r2, #0]
 8000212:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000216:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800021a:	6855      	ldr	r5, [r2, #4]
 800021c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000220:	f8c9 6004 	str.w	r6, [r9, #4]
 8000224:	f8c8 7004 	str.w	r7, [r8, #4]
 8000228:	f8cc 5004 	str.w	r5, [ip, #4]
 800022c:	6054      	str	r4, [r2, #4]
 800022e:	3108      	adds	r1, #8
 8000230:	3b01      	subs	r3, #1
 8000232:	d1d5      	bne.n	80001e0 <arm_bitreversal_32_0>
 8000234:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000238:	4770      	bx	lr

0800023a <arm_bitreversal_16>:
 800023a:	1c4b      	adds	r3, r1, #1
 800023c:	2b01      	cmp	r3, #1
 800023e:	bf98      	it	ls
 8000240:	4770      	bxls	lr
 8000242:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000246:	1c91      	adds	r1, r2, #2
 8000248:	089b      	lsrs	r3, r3, #2

0800024a <arm_bitreversal_16_0>:
 800024a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800024e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000252:	880a      	ldrh	r2, [r1, #0]
 8000254:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000258:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800025c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000260:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000264:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000268:	f8d9 7000 	ldr.w	r7, [r9]
 800026c:	f8d8 6000 	ldr.w	r6, [r8]
 8000270:	6815      	ldr	r5, [r2, #0]
 8000272:	f8dc 4000 	ldr.w	r4, [ip]
 8000276:	f8c9 6000 	str.w	r6, [r9]
 800027a:	f8c8 7000 	str.w	r7, [r8]
 800027e:	f8cc 5000 	str.w	r5, [ip]
 8000282:	6014      	str	r4, [r2, #0]
 8000284:	3108      	adds	r1, #8
 8000286:	3b01      	subs	r3, #1
 8000288:	d1df      	bne.n	800024a <arm_bitreversal_16_0>
 800028a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800028e:	4770      	bx	lr

08000290 <memchr>:
 8000290:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000294:	2a10      	cmp	r2, #16
 8000296:	db2b      	blt.n	80002f0 <memchr+0x60>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	d008      	beq.n	80002b0 <memchr+0x20>
 800029e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a2:	3a01      	subs	r2, #1
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d02d      	beq.n	8000304 <memchr+0x74>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	b342      	cbz	r2, 8000300 <memchr+0x70>
 80002ae:	d1f6      	bne.n	800029e <memchr+0xe>
 80002b0:	b4f0      	push	{r4, r5, r6, r7}
 80002b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ba:	f022 0407 	bic.w	r4, r2, #7
 80002be:	f07f 0700 	mvns.w	r7, #0
 80002c2:	2300      	movs	r3, #0
 80002c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002c8:	3c08      	subs	r4, #8
 80002ca:	ea85 0501 	eor.w	r5, r5, r1
 80002ce:	ea86 0601 	eor.w	r6, r6, r1
 80002d2:	fa85 f547 	uadd8	r5, r5, r7
 80002d6:	faa3 f587 	sel	r5, r3, r7
 80002da:	fa86 f647 	uadd8	r6, r6, r7
 80002de:	faa5 f687 	sel	r6, r5, r7
 80002e2:	b98e      	cbnz	r6, 8000308 <memchr+0x78>
 80002e4:	d1ee      	bne.n	80002c4 <memchr+0x34>
 80002e6:	bcf0      	pop	{r4, r5, r6, r7}
 80002e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ec:	f002 0207 	and.w	r2, r2, #7
 80002f0:	b132      	cbz	r2, 8000300 <memchr+0x70>
 80002f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f6:	3a01      	subs	r2, #1
 80002f8:	ea83 0301 	eor.w	r3, r3, r1
 80002fc:	b113      	cbz	r3, 8000304 <memchr+0x74>
 80002fe:	d1f8      	bne.n	80002f2 <memchr+0x62>
 8000300:	2000      	movs	r0, #0
 8000302:	4770      	bx	lr
 8000304:	3801      	subs	r0, #1
 8000306:	4770      	bx	lr
 8000308:	2d00      	cmp	r5, #0
 800030a:	bf06      	itte	eq
 800030c:	4635      	moveq	r5, r6
 800030e:	3803      	subeq	r0, #3
 8000310:	3807      	subne	r0, #7
 8000312:	f015 0f01 	tst.w	r5, #1
 8000316:	d107      	bne.n	8000328 <memchr+0x98>
 8000318:	3001      	adds	r0, #1
 800031a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800031e:	bf02      	ittt	eq
 8000320:	3001      	addeq	r0, #1
 8000322:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000326:	3001      	addeq	r0, #1
 8000328:	bcf0      	pop	{r4, r5, r6, r7}
 800032a:	3801      	subs	r0, #1
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop

08000330 <__aeabi_uldivmod>:
 8000330:	b953      	cbnz	r3, 8000348 <__aeabi_uldivmod+0x18>
 8000332:	b94a      	cbnz	r2, 8000348 <__aeabi_uldivmod+0x18>
 8000334:	2900      	cmp	r1, #0
 8000336:	bf08      	it	eq
 8000338:	2800      	cmpeq	r0, #0
 800033a:	bf1c      	itt	ne
 800033c:	f04f 31ff 	movne.w	r1, #4294967295
 8000340:	f04f 30ff 	movne.w	r0, #4294967295
 8000344:	f000 b988 	b.w	8000658 <__aeabi_idiv0>
 8000348:	f1ad 0c08 	sub.w	ip, sp, #8
 800034c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000350:	f000 f806 	bl	8000360 <__udivmoddi4>
 8000354:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000358:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800035c:	b004      	add	sp, #16
 800035e:	4770      	bx	lr

08000360 <__udivmoddi4>:
 8000360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000364:	9d08      	ldr	r5, [sp, #32]
 8000366:	468e      	mov	lr, r1
 8000368:	4604      	mov	r4, r0
 800036a:	4688      	mov	r8, r1
 800036c:	2b00      	cmp	r3, #0
 800036e:	d14a      	bne.n	8000406 <__udivmoddi4+0xa6>
 8000370:	428a      	cmp	r2, r1
 8000372:	4617      	mov	r7, r2
 8000374:	d962      	bls.n	800043c <__udivmoddi4+0xdc>
 8000376:	fab2 f682 	clz	r6, r2
 800037a:	b14e      	cbz	r6, 8000390 <__udivmoddi4+0x30>
 800037c:	f1c6 0320 	rsb	r3, r6, #32
 8000380:	fa01 f806 	lsl.w	r8, r1, r6
 8000384:	fa20 f303 	lsr.w	r3, r0, r3
 8000388:	40b7      	lsls	r7, r6
 800038a:	ea43 0808 	orr.w	r8, r3, r8
 800038e:	40b4      	lsls	r4, r6
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fbb8 f1fe 	udiv	r1, r8, lr
 800039c:	0c23      	lsrs	r3, r4, #16
 800039e:	fb0e 8811 	mls	r8, lr, r1, r8
 80003a2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003a6:	fb01 f20c 	mul.w	r2, r1, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0x62>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f101 30ff 	add.w	r0, r1, #4294967295
 80003b4:	f080 80ea 	bcs.w	800058c <__udivmoddi4+0x22c>
 80003b8:	429a      	cmp	r2, r3
 80003ba:	f240 80e7 	bls.w	800058c <__udivmoddi4+0x22c>
 80003be:	3902      	subs	r1, #2
 80003c0:	443b      	add	r3, r7
 80003c2:	1a9a      	subs	r2, r3, r2
 80003c4:	b2a3      	uxth	r3, r4
 80003c6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003ca:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003d2:	fb00 fc0c 	mul.w	ip, r0, ip
 80003d6:	459c      	cmp	ip, r3
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x8e>
 80003da:	18fb      	adds	r3, r7, r3
 80003dc:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e0:	f080 80d6 	bcs.w	8000590 <__udivmoddi4+0x230>
 80003e4:	459c      	cmp	ip, r3
 80003e6:	f240 80d3 	bls.w	8000590 <__udivmoddi4+0x230>
 80003ea:	443b      	add	r3, r7
 80003ec:	3802      	subs	r0, #2
 80003ee:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003f2:	eba3 030c 	sub.w	r3, r3, ip
 80003f6:	2100      	movs	r1, #0
 80003f8:	b11d      	cbz	r5, 8000402 <__udivmoddi4+0xa2>
 80003fa:	40f3      	lsrs	r3, r6
 80003fc:	2200      	movs	r2, #0
 80003fe:	e9c5 3200 	strd	r3, r2, [r5]
 8000402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000406:	428b      	cmp	r3, r1
 8000408:	d905      	bls.n	8000416 <__udivmoddi4+0xb6>
 800040a:	b10d      	cbz	r5, 8000410 <__udivmoddi4+0xb0>
 800040c:	e9c5 0100 	strd	r0, r1, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	4608      	mov	r0, r1
 8000414:	e7f5      	b.n	8000402 <__udivmoddi4+0xa2>
 8000416:	fab3 f183 	clz	r1, r3
 800041a:	2900      	cmp	r1, #0
 800041c:	d146      	bne.n	80004ac <__udivmoddi4+0x14c>
 800041e:	4573      	cmp	r3, lr
 8000420:	d302      	bcc.n	8000428 <__udivmoddi4+0xc8>
 8000422:	4282      	cmp	r2, r0
 8000424:	f200 8105 	bhi.w	8000632 <__udivmoddi4+0x2d2>
 8000428:	1a84      	subs	r4, r0, r2
 800042a:	eb6e 0203 	sbc.w	r2, lr, r3
 800042e:	2001      	movs	r0, #1
 8000430:	4690      	mov	r8, r2
 8000432:	2d00      	cmp	r5, #0
 8000434:	d0e5      	beq.n	8000402 <__udivmoddi4+0xa2>
 8000436:	e9c5 4800 	strd	r4, r8, [r5]
 800043a:	e7e2      	b.n	8000402 <__udivmoddi4+0xa2>
 800043c:	2a00      	cmp	r2, #0
 800043e:	f000 8090 	beq.w	8000562 <__udivmoddi4+0x202>
 8000442:	fab2 f682 	clz	r6, r2
 8000446:	2e00      	cmp	r6, #0
 8000448:	f040 80a4 	bne.w	8000594 <__udivmoddi4+0x234>
 800044c:	1a8a      	subs	r2, r1, r2
 800044e:	0c03      	lsrs	r3, r0, #16
 8000450:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000454:	b280      	uxth	r0, r0
 8000456:	b2bc      	uxth	r4, r7
 8000458:	2101      	movs	r1, #1
 800045a:	fbb2 fcfe 	udiv	ip, r2, lr
 800045e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000462:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000466:	fb04 f20c 	mul.w	r2, r4, ip
 800046a:	429a      	cmp	r2, r3
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x11e>
 800046e:	18fb      	adds	r3, r7, r3
 8000470:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000474:	d202      	bcs.n	800047c <__udivmoddi4+0x11c>
 8000476:	429a      	cmp	r2, r3
 8000478:	f200 80e0 	bhi.w	800063c <__udivmoddi4+0x2dc>
 800047c:	46c4      	mov	ip, r8
 800047e:	1a9b      	subs	r3, r3, r2
 8000480:	fbb3 f2fe 	udiv	r2, r3, lr
 8000484:	fb0e 3312 	mls	r3, lr, r2, r3
 8000488:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800048c:	fb02 f404 	mul.w	r4, r2, r4
 8000490:	429c      	cmp	r4, r3
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x144>
 8000494:	18fb      	adds	r3, r7, r3
 8000496:	f102 30ff 	add.w	r0, r2, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0x142>
 800049c:	429c      	cmp	r4, r3
 800049e:	f200 80ca 	bhi.w	8000636 <__udivmoddi4+0x2d6>
 80004a2:	4602      	mov	r2, r0
 80004a4:	1b1b      	subs	r3, r3, r4
 80004a6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004aa:	e7a5      	b.n	80003f8 <__udivmoddi4+0x98>
 80004ac:	f1c1 0620 	rsb	r6, r1, #32
 80004b0:	408b      	lsls	r3, r1
 80004b2:	fa22 f706 	lsr.w	r7, r2, r6
 80004b6:	431f      	orrs	r7, r3
 80004b8:	fa0e f401 	lsl.w	r4, lr, r1
 80004bc:	fa20 f306 	lsr.w	r3, r0, r6
 80004c0:	fa2e fe06 	lsr.w	lr, lr, r6
 80004c4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80004c8:	4323      	orrs	r3, r4
 80004ca:	fa00 f801 	lsl.w	r8, r0, r1
 80004ce:	fa1f fc87 	uxth.w	ip, r7
 80004d2:	fbbe f0f9 	udiv	r0, lr, r9
 80004d6:	0c1c      	lsrs	r4, r3, #16
 80004d8:	fb09 ee10 	mls	lr, r9, r0, lr
 80004dc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004e0:	fb00 fe0c 	mul.w	lr, r0, ip
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ea:	d909      	bls.n	8000500 <__udivmoddi4+0x1a0>
 80004ec:	193c      	adds	r4, r7, r4
 80004ee:	f100 3aff 	add.w	sl, r0, #4294967295
 80004f2:	f080 809c 	bcs.w	800062e <__udivmoddi4+0x2ce>
 80004f6:	45a6      	cmp	lr, r4
 80004f8:	f240 8099 	bls.w	800062e <__udivmoddi4+0x2ce>
 80004fc:	3802      	subs	r0, #2
 80004fe:	443c      	add	r4, r7
 8000500:	eba4 040e 	sub.w	r4, r4, lr
 8000504:	fa1f fe83 	uxth.w	lr, r3
 8000508:	fbb4 f3f9 	udiv	r3, r4, r9
 800050c:	fb09 4413 	mls	r4, r9, r3, r4
 8000510:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000514:	fb03 fc0c 	mul.w	ip, r3, ip
 8000518:	45a4      	cmp	ip, r4
 800051a:	d908      	bls.n	800052e <__udivmoddi4+0x1ce>
 800051c:	193c      	adds	r4, r7, r4
 800051e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000522:	f080 8082 	bcs.w	800062a <__udivmoddi4+0x2ca>
 8000526:	45a4      	cmp	ip, r4
 8000528:	d97f      	bls.n	800062a <__udivmoddi4+0x2ca>
 800052a:	3b02      	subs	r3, #2
 800052c:	443c      	add	r4, r7
 800052e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000532:	eba4 040c 	sub.w	r4, r4, ip
 8000536:	fba0 ec02 	umull	lr, ip, r0, r2
 800053a:	4564      	cmp	r4, ip
 800053c:	4673      	mov	r3, lr
 800053e:	46e1      	mov	r9, ip
 8000540:	d362      	bcc.n	8000608 <__udivmoddi4+0x2a8>
 8000542:	d05f      	beq.n	8000604 <__udivmoddi4+0x2a4>
 8000544:	b15d      	cbz	r5, 800055e <__udivmoddi4+0x1fe>
 8000546:	ebb8 0203 	subs.w	r2, r8, r3
 800054a:	eb64 0409 	sbc.w	r4, r4, r9
 800054e:	fa04 f606 	lsl.w	r6, r4, r6
 8000552:	fa22 f301 	lsr.w	r3, r2, r1
 8000556:	431e      	orrs	r6, r3
 8000558:	40cc      	lsrs	r4, r1
 800055a:	e9c5 6400 	strd	r6, r4, [r5]
 800055e:	2100      	movs	r1, #0
 8000560:	e74f      	b.n	8000402 <__udivmoddi4+0xa2>
 8000562:	fbb1 fcf2 	udiv	ip, r1, r2
 8000566:	0c01      	lsrs	r1, r0, #16
 8000568:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800056c:	b280      	uxth	r0, r0
 800056e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000572:	463b      	mov	r3, r7
 8000574:	4638      	mov	r0, r7
 8000576:	463c      	mov	r4, r7
 8000578:	46b8      	mov	r8, r7
 800057a:	46be      	mov	lr, r7
 800057c:	2620      	movs	r6, #32
 800057e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000582:	eba2 0208 	sub.w	r2, r2, r8
 8000586:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800058a:	e766      	b.n	800045a <__udivmoddi4+0xfa>
 800058c:	4601      	mov	r1, r0
 800058e:	e718      	b.n	80003c2 <__udivmoddi4+0x62>
 8000590:	4610      	mov	r0, r2
 8000592:	e72c      	b.n	80003ee <__udivmoddi4+0x8e>
 8000594:	f1c6 0220 	rsb	r2, r6, #32
 8000598:	fa2e f302 	lsr.w	r3, lr, r2
 800059c:	40b7      	lsls	r7, r6
 800059e:	40b1      	lsls	r1, r6
 80005a0:	fa20 f202 	lsr.w	r2, r0, r2
 80005a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005a8:	430a      	orrs	r2, r1
 80005aa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005ae:	b2bc      	uxth	r4, r7
 80005b0:	fb0e 3318 	mls	r3, lr, r8, r3
 80005b4:	0c11      	lsrs	r1, r2, #16
 80005b6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ba:	fb08 f904 	mul.w	r9, r8, r4
 80005be:	40b0      	lsls	r0, r6
 80005c0:	4589      	cmp	r9, r1
 80005c2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80005c6:	b280      	uxth	r0, r0
 80005c8:	d93e      	bls.n	8000648 <__udivmoddi4+0x2e8>
 80005ca:	1879      	adds	r1, r7, r1
 80005cc:	f108 3cff 	add.w	ip, r8, #4294967295
 80005d0:	d201      	bcs.n	80005d6 <__udivmoddi4+0x276>
 80005d2:	4589      	cmp	r9, r1
 80005d4:	d81f      	bhi.n	8000616 <__udivmoddi4+0x2b6>
 80005d6:	eba1 0109 	sub.w	r1, r1, r9
 80005da:	fbb1 f9fe 	udiv	r9, r1, lr
 80005de:	fb09 f804 	mul.w	r8, r9, r4
 80005e2:	fb0e 1119 	mls	r1, lr, r9, r1
 80005e6:	b292      	uxth	r2, r2
 80005e8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005ec:	4542      	cmp	r2, r8
 80005ee:	d229      	bcs.n	8000644 <__udivmoddi4+0x2e4>
 80005f0:	18ba      	adds	r2, r7, r2
 80005f2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005f6:	d2c4      	bcs.n	8000582 <__udivmoddi4+0x222>
 80005f8:	4542      	cmp	r2, r8
 80005fa:	d2c2      	bcs.n	8000582 <__udivmoddi4+0x222>
 80005fc:	f1a9 0102 	sub.w	r1, r9, #2
 8000600:	443a      	add	r2, r7
 8000602:	e7be      	b.n	8000582 <__udivmoddi4+0x222>
 8000604:	45f0      	cmp	r8, lr
 8000606:	d29d      	bcs.n	8000544 <__udivmoddi4+0x1e4>
 8000608:	ebbe 0302 	subs.w	r3, lr, r2
 800060c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000610:	3801      	subs	r0, #1
 8000612:	46e1      	mov	r9, ip
 8000614:	e796      	b.n	8000544 <__udivmoddi4+0x1e4>
 8000616:	eba7 0909 	sub.w	r9, r7, r9
 800061a:	4449      	add	r1, r9
 800061c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000620:	fbb1 f9fe 	udiv	r9, r1, lr
 8000624:	fb09 f804 	mul.w	r8, r9, r4
 8000628:	e7db      	b.n	80005e2 <__udivmoddi4+0x282>
 800062a:	4673      	mov	r3, lr
 800062c:	e77f      	b.n	800052e <__udivmoddi4+0x1ce>
 800062e:	4650      	mov	r0, sl
 8000630:	e766      	b.n	8000500 <__udivmoddi4+0x1a0>
 8000632:	4608      	mov	r0, r1
 8000634:	e6fd      	b.n	8000432 <__udivmoddi4+0xd2>
 8000636:	443b      	add	r3, r7
 8000638:	3a02      	subs	r2, #2
 800063a:	e733      	b.n	80004a4 <__udivmoddi4+0x144>
 800063c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000640:	443b      	add	r3, r7
 8000642:	e71c      	b.n	800047e <__udivmoddi4+0x11e>
 8000644:	4649      	mov	r1, r9
 8000646:	e79c      	b.n	8000582 <__udivmoddi4+0x222>
 8000648:	eba1 0109 	sub.w	r1, r1, r9
 800064c:	46c4      	mov	ip, r8
 800064e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000652:	fb09 f804 	mul.w	r8, r9, r4
 8000656:	e7c4      	b.n	80005e2 <__udivmoddi4+0x282>

08000658 <__aeabi_idiv0>:
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop

0800065c <record_sample_and_maybe_runFFT>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void record_sample_and_maybe_runFFT(uint16_t raw) {
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af00      	add	r7, sp, #0
 8000662:	4603      	mov	r3, r0
 8000664:	80fb      	strh	r3, [r7, #6]
    // Convert raw 12‐bit ADC (0..4095) to float in [-1,+1], after centering around middle_point

    float centered = ((float)(raw - (uint16_t)(middle_point))) * UINT16_TO_FLOAT;
 8000666:	88fb      	ldrh	r3, [r7, #6]
 8000668:	4a17      	ldr	r2, [pc, #92]	@ (80006c8 <record_sample_and_maybe_runFFT+0x6c>)
 800066a:	6812      	ldr	r2, [r2, #0]
 800066c:	b292      	uxth	r2, r2
 800066e:	1a9b      	subs	r3, r3, r2
 8000670:	ee07 3a90 	vmov	s15, r3
 8000674:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000678:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80006cc <record_sample_and_maybe_runFFT+0x70>
 800067c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000680:	edc7 7a03 	vstr	s15, [r7, #12]
    fftBufIn[fftIndex] = centered;
 8000684:	4b12      	ldr	r3, [pc, #72]	@ (80006d0 <record_sample_and_maybe_runFFT+0x74>)
 8000686:	881b      	ldrh	r3, [r3, #0]
 8000688:	4a12      	ldr	r2, [pc, #72]	@ (80006d4 <record_sample_and_maybe_runFFT+0x78>)
 800068a:	009b      	lsls	r3, r3, #2
 800068c:	4413      	add	r3, r2
 800068e:	68fa      	ldr	r2, [r7, #12]
 8000690:	601a      	str	r2, [r3, #0]
    fftIndex++;
 8000692:	4b0f      	ldr	r3, [pc, #60]	@ (80006d0 <record_sample_and_maybe_runFFT+0x74>)
 8000694:	881b      	ldrh	r3, [r3, #0]
 8000696:	3301      	adds	r3, #1
 8000698:	b29a      	uxth	r2, r3
 800069a:	4b0d      	ldr	r3, [pc, #52]	@ (80006d0 <record_sample_and_maybe_runFFT+0x74>)
 800069c:	801a      	strh	r2, [r3, #0]

    if (fftIndex >= FFT_BUFFER_SIZE) {
 800069e:	4b0c      	ldr	r3, [pc, #48]	@ (80006d0 <record_sample_and_maybe_runFFT+0x74>)
 80006a0:	881b      	ldrh	r3, [r3, #0]
 80006a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80006a6:	d30b      	bcc.n	80006c0 <record_sample_and_maybe_runFFT+0x64>
        // Run the RFFT in place: fftBufIn → fftBufOut
        arm_rfft_fast_f32(&fftHandler, fftBufIn, fftBufOut, 0);
 80006a8:	2300      	movs	r3, #0
 80006aa:	4a0b      	ldr	r2, [pc, #44]	@ (80006d8 <record_sample_and_maybe_runFFT+0x7c>)
 80006ac:	4909      	ldr	r1, [pc, #36]	@ (80006d4 <record_sample_and_maybe_runFFT+0x78>)
 80006ae:	480b      	ldr	r0, [pc, #44]	@ (80006dc <record_sample_and_maybe_runFFT+0x80>)
 80006b0:	f005 f8dc 	bl	800586c <arm_rfft_fast_f32>

        fftReady = 1;
 80006b4:	4b0a      	ldr	r3, [pc, #40]	@ (80006e0 <record_sample_and_maybe_runFFT+0x84>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	701a      	strb	r2, [r3, #0]
        fftIndex = 0; // reset buffer index to record next block
 80006ba:	4b05      	ldr	r3, [pc, #20]	@ (80006d0 <record_sample_and_maybe_runFFT+0x74>)
 80006bc:	2200      	movs	r2, #0
 80006be:	801a      	strh	r2, [r3, #0]
    }
}
 80006c0:	bf00      	nop
 80006c2:	3710      	adds	r7, #16
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	20000e00 	.word	0x20000e00
 80006cc:	37800001 	.word	0x37800001
 80006d0:	20004e20 	.word	0x20004e20
 80006d4:	20000e20 	.word	0x20000e20
 80006d8:	20002e20 	.word	0x20002e20
 80006dc:	20000e08 	.word	0x20000e08
 80006e0:	20004e22 	.word	0x20004e22

080006e4 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
    if (htim == &htim1) {
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	4a07      	ldr	r2, [pc, #28]	@ (800070c <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 80006f0:	4293      	cmp	r3, r2
 80006f2:	d106      	bne.n	8000702 <HAL_TIM_PWM_PulseFinishedCallback+0x1e>
        HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 80006f4:	2100      	movs	r1, #0
 80006f6:	4805      	ldr	r0, [pc, #20]	@ (800070c <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 80006f8:	f003 ffe4 	bl	80046c4 <HAL_TIM_PWM_Stop_DMA>
        datasentflag = 1;
 80006fc:	4b04      	ldr	r3, [pc, #16]	@ (8000710 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>)
 80006fe:	2201      	movs	r2, #1
 8000700:	601a      	str	r2, [r3, #0]
    }
}
 8000702:	bf00      	nop
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	200000d4 	.word	0x200000d4
 8000710:	20000378 	.word	0x20000378

08000714 <Set_LED>:


void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 8000714:	b480      	push	{r7}
 8000716:	b085      	sub	sp, #20
 8000718:	af00      	add	r7, sp, #0
 800071a:	60f8      	str	r0, [r7, #12]
 800071c:	60b9      	str	r1, [r7, #8]
 800071e:	607a      	str	r2, [r7, #4]
 8000720:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	b2d9      	uxtb	r1, r3
 8000726:	4a11      	ldr	r2, [pc, #68]	@ (800076c <Set_LED+0x58>)
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	b2d9      	uxtb	r1, r3
 8000732:	4a0e      	ldr	r2, [pc, #56]	@ (800076c <Set_LED+0x58>)
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	009b      	lsls	r3, r3, #2
 8000738:	4413      	add	r3, r2
 800073a:	460a      	mov	r2, r1
 800073c:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 800073e:	68bb      	ldr	r3, [r7, #8]
 8000740:	b2d9      	uxtb	r1, r3
 8000742:	4a0a      	ldr	r2, [pc, #40]	@ (800076c <Set_LED+0x58>)
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	009b      	lsls	r3, r3, #2
 8000748:	4413      	add	r3, r2
 800074a:	460a      	mov	r2, r1
 800074c:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	b2d9      	uxtb	r1, r3
 8000752:	4a06      	ldr	r2, [pc, #24]	@ (800076c <Set_LED+0x58>)
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	009b      	lsls	r3, r3, #2
 8000758:	4413      	add	r3, r2
 800075a:	460a      	mov	r2, r1
 800075c:	70da      	strb	r2, [r3, #3]
}
 800075e:	bf00      	nop
 8000760:	3714      	adds	r7, #20
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	200001c8 	.word	0x200001c8

08000770 <Set_Brightness>:

void Set_Brightness (int brightness)
{
 8000770:	b480      	push	{r7}
 8000772:	b085      	sub	sp, #20
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS
    if (brightness > MAX_BRIGHTNESS) brightness = MAX_BRIGHTNESS;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	2bff      	cmp	r3, #255	@ 0xff
 800077c:	dd01      	ble.n	8000782 <Set_Brightness+0x12>
 800077e:	23ff      	movs	r3, #255	@ 0xff
 8000780:	607b      	str	r3, [r7, #4]
    float scale = brightness / (float)MAX_BRIGHTNESS;
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	ee07 3a90 	vmov	s15, r3
 8000788:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800078c:	eddf 6a34 	vldr	s13, [pc, #208]	@ 8000860 <Set_Brightness+0xf0>
 8000790:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000794:	edc7 7a02 	vstr	s15, [r7, #8]

    for (int i = 0; i < MAX_LED; i++)
 8000798:	2300      	movs	r3, #0
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	e055      	b.n	800084a <Set_Brightness+0xda>
    {
        // preserve the “LED number” byte
        LED_Mod[i][0] = LED_Data[i][0];
 800079e:	4a31      	ldr	r2, [pc, #196]	@ (8000864 <Set_Brightness+0xf4>)
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 80007a6:	4a30      	ldr	r2, [pc, #192]	@ (8000868 <Set_Brightness+0xf8>)
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
        // scale each color channel linearly
        LED_Mod[i][1] = (uint8_t)(LED_Data[i][1] * scale);
 80007ae:	4a2d      	ldr	r2, [pc, #180]	@ (8000864 <Set_Brightness+0xf4>)
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	009b      	lsls	r3, r3, #2
 80007b4:	4413      	add	r3, r2
 80007b6:	785b      	ldrb	r3, [r3, #1]
 80007b8:	ee07 3a90 	vmov	s15, r3
 80007bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80007c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007cc:	edc7 7a00 	vstr	s15, [r7]
 80007d0:	783b      	ldrb	r3, [r7, #0]
 80007d2:	b2d9      	uxtb	r1, r3
 80007d4:	4a24      	ldr	r2, [pc, #144]	@ (8000868 <Set_Brightness+0xf8>)
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	009b      	lsls	r3, r3, #2
 80007da:	4413      	add	r3, r2
 80007dc:	460a      	mov	r2, r1
 80007de:	705a      	strb	r2, [r3, #1]
        LED_Mod[i][2] = (uint8_t)(LED_Data[i][2] * scale);
 80007e0:	4a20      	ldr	r2, [pc, #128]	@ (8000864 <Set_Brightness+0xf4>)
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	009b      	lsls	r3, r3, #2
 80007e6:	4413      	add	r3, r2
 80007e8:	789b      	ldrb	r3, [r3, #2]
 80007ea:	ee07 3a90 	vmov	s15, r3
 80007ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80007f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007fe:	edc7 7a00 	vstr	s15, [r7]
 8000802:	783b      	ldrb	r3, [r7, #0]
 8000804:	b2d9      	uxtb	r1, r3
 8000806:	4a18      	ldr	r2, [pc, #96]	@ (8000868 <Set_Brightness+0xf8>)
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	009b      	lsls	r3, r3, #2
 800080c:	4413      	add	r3, r2
 800080e:	460a      	mov	r2, r1
 8000810:	709a      	strb	r2, [r3, #2]
        LED_Mod[i][3] = (uint8_t)(LED_Data[i][3] * scale);
 8000812:	4a14      	ldr	r2, [pc, #80]	@ (8000864 <Set_Brightness+0xf4>)
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	009b      	lsls	r3, r3, #2
 8000818:	4413      	add	r3, r2
 800081a:	78db      	ldrb	r3, [r3, #3]
 800081c:	ee07 3a90 	vmov	s15, r3
 8000820:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000824:	edd7 7a02 	vldr	s15, [r7, #8]
 8000828:	ee67 7a27 	vmul.f32	s15, s14, s15
 800082c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000830:	edc7 7a00 	vstr	s15, [r7]
 8000834:	783b      	ldrb	r3, [r7, #0]
 8000836:	b2d9      	uxtb	r1, r3
 8000838:	4a0b      	ldr	r2, [pc, #44]	@ (8000868 <Set_Brightness+0xf8>)
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	009b      	lsls	r3, r3, #2
 800083e:	4413      	add	r3, r2
 8000840:	460a      	mov	r2, r1
 8000842:	70da      	strb	r2, [r3, #3]
    for (int i = 0; i < MAX_LED; i++)
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	3301      	adds	r3, #1
 8000848:	60fb      	str	r3, [r7, #12]
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	2b35      	cmp	r3, #53	@ 0x35
 800084e:	dda6      	ble.n	800079e <Set_Brightness+0x2e>
    }
#endif
}
 8000850:	bf00      	nop
 8000852:	bf00      	nop
 8000854:	3714      	adds	r7, #20
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	437f0000 	.word	0x437f0000
 8000864:	200001c8 	.word	0x200001c8
 8000868:	200002a0 	.word	0x200002a0

0800086c <WS2812_Send>:

void WS2812_Send (void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b086      	sub	sp, #24
 8000870:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 8000872:	2300      	movs	r3, #0
 8000874:	617b      	str	r3, [r7, #20]
	uint32_t color;


	for (int i= 0; i<MAX_LED; i++)
 8000876:	2300      	movs	r3, #0
 8000878:	613b      	str	r3, [r7, #16]
 800087a:	e036      	b.n	80008ea <WS2812_Send+0x7e>
	{
#if USE_BRIGHTNESS
		color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
 800087c:	4a2e      	ldr	r2, [pc, #184]	@ (8000938 <WS2812_Send+0xcc>)
 800087e:	693b      	ldr	r3, [r7, #16]
 8000880:	009b      	lsls	r3, r3, #2
 8000882:	4413      	add	r3, r2
 8000884:	785b      	ldrb	r3, [r3, #1]
 8000886:	041a      	lsls	r2, r3, #16
 8000888:	492b      	ldr	r1, [pc, #172]	@ (8000938 <WS2812_Send+0xcc>)
 800088a:	693b      	ldr	r3, [r7, #16]
 800088c:	009b      	lsls	r3, r3, #2
 800088e:	440b      	add	r3, r1
 8000890:	789b      	ldrb	r3, [r3, #2]
 8000892:	021b      	lsls	r3, r3, #8
 8000894:	431a      	orrs	r2, r3
 8000896:	4928      	ldr	r1, [pc, #160]	@ (8000938 <WS2812_Send+0xcc>)
 8000898:	693b      	ldr	r3, [r7, #16]
 800089a:	009b      	lsls	r3, r3, #2
 800089c:	440b      	add	r3, r1
 800089e:	78db      	ldrb	r3, [r3, #3]
 80008a0:	4313      	orrs	r3, r2
 80008a2:	607b      	str	r3, [r7, #4]
#else
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
#endif

		for (int i=23; i>=0; i--)
 80008a4:	2317      	movs	r3, #23
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	e019      	b.n	80008de <WS2812_Send+0x72>
		{
			if (color&(1<<i))
 80008aa:	2201      	movs	r2, #1
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	fa02 f303 	lsl.w	r3, r2, r3
 80008b2:	461a      	mov	r2, r3
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	4013      	ands	r3, r2
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d005      	beq.n	80008c8 <WS2812_Send+0x5c>
			{
				pwmData[indx] = 60;  // 2/3 of 90
 80008bc:	4a1f      	ldr	r2, [pc, #124]	@ (800093c <WS2812_Send+0xd0>)
 80008be:	697b      	ldr	r3, [r7, #20]
 80008c0:	213c      	movs	r1, #60	@ 0x3c
 80008c2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80008c6:	e004      	b.n	80008d2 <WS2812_Send+0x66>
			}

			else pwmData[indx] = 30;  // 1/3 of 90
 80008c8:	4a1c      	ldr	r2, [pc, #112]	@ (800093c <WS2812_Send+0xd0>)
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	211e      	movs	r1, #30
 80008ce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			indx++;
 80008d2:	697b      	ldr	r3, [r7, #20]
 80008d4:	3301      	adds	r3, #1
 80008d6:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	3b01      	subs	r3, #1
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	dae2      	bge.n	80008aa <WS2812_Send+0x3e>
	for (int i= 0; i<MAX_LED; i++)
 80008e4:	693b      	ldr	r3, [r7, #16]
 80008e6:	3301      	adds	r3, #1
 80008e8:	613b      	str	r3, [r7, #16]
 80008ea:	693b      	ldr	r3, [r7, #16]
 80008ec:	2b35      	cmp	r3, #53	@ 0x35
 80008ee:	ddc5      	ble.n	800087c <WS2812_Send+0x10>
		}

	}

	for (int i=0; i<50; i++)
 80008f0:	2300      	movs	r3, #0
 80008f2:	60bb      	str	r3, [r7, #8]
 80008f4:	e00a      	b.n	800090c <WS2812_Send+0xa0>
	{
		pwmData[indx] = 0;
 80008f6:	4a11      	ldr	r2, [pc, #68]	@ (800093c <WS2812_Send+0xd0>)
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	2100      	movs	r1, #0
 80008fc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	3301      	adds	r3, #1
 8000904:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	3301      	adds	r3, #1
 800090a:	60bb      	str	r3, [r7, #8]
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	2b31      	cmp	r3, #49	@ 0x31
 8000910:	ddf1      	ble.n	80008f6 <WS2812_Send+0x8a>
	}

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	b29b      	uxth	r3, r3
 8000916:	4a09      	ldr	r2, [pc, #36]	@ (800093c <WS2812_Send+0xd0>)
 8000918:	2100      	movs	r1, #0
 800091a:	4809      	ldr	r0, [pc, #36]	@ (8000940 <WS2812_Send+0xd4>)
 800091c:	f003 fd0a 	bl	8004334 <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag){};
 8000920:	bf00      	nop
 8000922:	4b08      	ldr	r3, [pc, #32]	@ (8000944 <WS2812_Send+0xd8>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d0fb      	beq.n	8000922 <WS2812_Send+0xb6>
	datasentflag = 0;
 800092a:	4b06      	ldr	r3, [pc, #24]	@ (8000944 <WS2812_Send+0xd8>)
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
}
 8000930:	bf00      	nop
 8000932:	3718      	adds	r7, #24
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	200002a0 	.word	0x200002a0
 800093c:	2000037c 	.word	0x2000037c
 8000940:	200000d4 	.word	0x200000d4
 8000944:	20000378 	.word	0x20000378

08000948 <HSV_to_RGB>:

void HSV_to_RGB(float h, float s, float v, uint8_t* r, uint8_t* g, uint8_t* b) {
 8000948:	b480      	push	{r7}
 800094a:	b091      	sub	sp, #68	@ 0x44
 800094c:	af00      	add	r7, sp, #0
 800094e:	ed87 0a07 	vstr	s0, [r7, #28]
 8000952:	edc7 0a06 	vstr	s1, [r7, #24]
 8000956:	ed87 1a05 	vstr	s2, [r7, #20]
 800095a:	6138      	str	r0, [r7, #16]
 800095c:	60f9      	str	r1, [r7, #12]
 800095e:	60ba      	str	r2, [r7, #8]
    int i = (int)(h / 60.0f) % 6;
 8000960:	ed97 7a07 	vldr	s14, [r7, #28]
 8000964:	eddf 6a5d 	vldr	s13, [pc, #372]	@ 8000adc <HSV_to_RGB+0x194>
 8000968:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800096c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000970:	ee17 2a90 	vmov	r2, s15
 8000974:	4b5a      	ldr	r3, [pc, #360]	@ (8000ae0 <HSV_to_RGB+0x198>)
 8000976:	fb83 3102 	smull	r3, r1, r3, r2
 800097a:	17d3      	asrs	r3, r2, #31
 800097c:	1ac9      	subs	r1, r1, r3
 800097e:	460b      	mov	r3, r1
 8000980:	005b      	lsls	r3, r3, #1
 8000982:	440b      	add	r3, r1
 8000984:	005b      	lsls	r3, r3, #1
 8000986:	1ad3      	subs	r3, r2, r3
 8000988:	633b      	str	r3, [r7, #48]	@ 0x30
    float f = (h / 60.0f) - i;
 800098a:	edd7 7a07 	vldr	s15, [r7, #28]
 800098e:	eddf 6a53 	vldr	s13, [pc, #332]	@ 8000adc <HSV_to_RGB+0x194>
 8000992:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000998:	ee07 3a90 	vmov	s15, r3
 800099c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009a4:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float p = v * (1.0f - s);
 80009a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80009ac:	edd7 7a06 	vldr	s15, [r7, #24]
 80009b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009b4:	ed97 7a05 	vldr	s14, [r7, #20]
 80009b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009bc:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    float q = v * (1.0f - f * s);
 80009c0:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80009c4:	edd7 7a06 	vldr	s15, [r7, #24]
 80009c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009cc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80009d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009d4:	ed97 7a05 	vldr	s14, [r7, #20]
 80009d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009dc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float t = v * (1.0f - (1.0f - f) * s);
 80009e0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80009e4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80009e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80009ec:	edd7 7a06 	vldr	s15, [r7, #24]
 80009f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80009f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009fc:	ed97 7a05 	vldr	s14, [r7, #20]
 8000a00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a04:	edc7 7a08 	vstr	s15, [r7, #32]

    float r_, g_, b_;

    switch (i) {
 8000a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a0a:	2b04      	cmp	r3, #4
 8000a0c:	d82f      	bhi.n	8000a6e <HSV_to_RGB+0x126>
 8000a0e:	a201      	add	r2, pc, #4	@ (adr r2, 8000a14 <HSV_to_RGB+0xcc>)
 8000a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a14:	08000a29 	.word	0x08000a29
 8000a18:	08000a37 	.word	0x08000a37
 8000a1c:	08000a45 	.word	0x08000a45
 8000a20:	08000a53 	.word	0x08000a53
 8000a24:	08000a61 	.word	0x08000a61
        case 0: r_ = v; g_ = t; b_ = p; break;
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000a2c:	6a3b      	ldr	r3, [r7, #32]
 8000a2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a32:	637b      	str	r3, [r7, #52]	@ 0x34
 8000a34:	e022      	b.n	8000a7c <HSV_to_RGB+0x134>
        case 1: r_ = q; g_ = v; b_ = p; break;
 8000a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a40:	637b      	str	r3, [r7, #52]	@ 0x34
 8000a42:	e01b      	b.n	8000a7c <HSV_to_RGB+0x134>
        case 2: r_ = p; g_ = v; b_ = t; break;
 8000a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000a4c:	6a3b      	ldr	r3, [r7, #32]
 8000a4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8000a50:	e014      	b.n	8000a7c <HSV_to_RGB+0x134>
        case 3: r_ = p; g_ = q; b_ = v; break;
 8000a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a58:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8000a5e:	e00d      	b.n	8000a7c <HSV_to_RGB+0x134>
        case 4: r_ = t; g_ = p; b_ = v; break;
 8000a60:	6a3b      	ldr	r3, [r7, #32]
 8000a62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000a64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a66:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8000a6c:	e006      	b.n	8000a7c <HSV_to_RGB+0x134>
        default: r_ = v; g_ = p; b_ = q; break;
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a74:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a78:	637b      	str	r3, [r7, #52]	@ 0x34
 8000a7a:	bf00      	nop
    }

    *r = (uint8_t)(r_ * 255);
 8000a7c:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8000a80:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8000ae4 <HSV_to_RGB+0x19c>
 8000a84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a8c:	edc7 7a01 	vstr	s15, [r7, #4]
 8000a90:	793b      	ldrb	r3, [r7, #4]
 8000a92:	b2da      	uxtb	r2, r3
 8000a94:	693b      	ldr	r3, [r7, #16]
 8000a96:	701a      	strb	r2, [r3, #0]
    *g = (uint8_t)(g_ * 255);
 8000a98:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8000a9c:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8000ae4 <HSV_to_RGB+0x19c>
 8000aa0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000aa4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000aa8:	edc7 7a01 	vstr	s15, [r7, #4]
 8000aac:	793b      	ldrb	r3, [r7, #4]
 8000aae:	b2da      	uxtb	r2, r3
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	701a      	strb	r2, [r3, #0]
    *b = (uint8_t)(b_ * 255);
 8000ab4:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000ab8:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8000ae4 <HSV_to_RGB+0x19c>
 8000abc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ac0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ac4:	edc7 7a01 	vstr	s15, [r7, #4]
 8000ac8:	793b      	ldrb	r3, [r7, #4]
 8000aca:	b2da      	uxtb	r2, r3
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	701a      	strb	r2, [r3, #0]
}
 8000ad0:	bf00      	nop
 8000ad2:	3744      	adds	r7, #68	@ 0x44
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	42700000 	.word	0x42700000
 8000ae0:	2aaaaaab 	.word	0x2aaaaaab
 8000ae4:	437f0000 	.word	0x437f0000

08000ae8 <Set_LEDs_color_at_once>:

//effect
void Set_LEDs_color_at_once(int start, int end, int step, int r, int g, int b){
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	60b9      	str	r1, [r7, #8]
 8000af2:	607a      	str	r2, [r7, #4]
 8000af4:	603b      	str	r3, [r7, #0]
	for (int pos = start; pos < end; pos += step){
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	617b      	str	r3, [r7, #20]
 8000afa:	e009      	b.n	8000b10 <Set_LEDs_color_at_once+0x28>
		Set_LED(pos, r, g, b);		// purple
 8000afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000afe:	6a3a      	ldr	r2, [r7, #32]
 8000b00:	6839      	ldr	r1, [r7, #0]
 8000b02:	6978      	ldr	r0, [r7, #20]
 8000b04:	f7ff fe06 	bl	8000714 <Set_LED>
	for (int pos = start; pos < end; pos += step){
 8000b08:	697a      	ldr	r2, [r7, #20]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	617b      	str	r3, [r7, #20]
 8000b10:	697a      	ldr	r2, [r7, #20]
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	dbf1      	blt.n	8000afc <Set_LEDs_color_at_once+0x14>
	}
}
 8000b18:	bf00      	nop
 8000b1a:	bf00      	nop
 8000b1c:	3718      	adds	r7, #24
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <Turn_off_all_at_once>:
	Set_LEDs_color_at_once(0, to_led, 1, r, g, b);
	Set_Brightness(NORMAL_BRIGHTNESS);
	WS2812_Send();
}

void Turn_off_all_at_once(void){
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b082      	sub	sp, #8
 8000b26:	af02      	add	r7, sp, #8
	Set_LEDs_color_at_once(0, MAX_LED, 1, 0, 0, 0);
 8000b28:	2300      	movs	r3, #0
 8000b2a:	9301      	str	r3, [sp, #4]
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	9300      	str	r3, [sp, #0]
 8000b30:	2300      	movs	r3, #0
 8000b32:	2201      	movs	r2, #1
 8000b34:	2136      	movs	r1, #54	@ 0x36
 8000b36:	2000      	movs	r0, #0
 8000b38:	f7ff ffd6 	bl	8000ae8 <Set_LEDs_color_at_once>
	Set_Brightness(NORMAL_BRIGHTNESS);
 8000b3c:	2080      	movs	r0, #128	@ 0x80
 8000b3e:	f7ff fe17 	bl	8000770 <Set_Brightness>
	WS2812_Send();
 8000b42:	f7ff fe93 	bl	800086c <WS2812_Send>
}
 8000b46:	bf00      	nop
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <frequency_to_full_spectrum>:
        }
    }
}

// Helper function to map frequency to full spectrum (Red to Violet)
void frequency_to_full_spectrum(uint16_t freq, uint8_t* r, uint8_t* g, uint8_t* b) {
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60b9      	str	r1, [r7, #8]
 8000b54:	607a      	str	r2, [r7, #4]
 8000b56:	603b      	str	r3, [r7, #0]
 8000b58:	4603      	mov	r3, r0
 8000b5a:	81fb      	strh	r3, [r7, #14]
    // Map frequency to hue (0-300 degrees)
    float hue = (float)freq / 7000.0f * 300.0f; // 0-7kHz mapped to 0-300°
 8000b5c:	89fb      	ldrh	r3, [r7, #14]
 8000b5e:	ee07 3a90 	vmov	s15, r3
 8000b62:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000b66:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8000bb0 <frequency_to_full_spectrum+0x64>
 8000b6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b6e:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8000bb4 <frequency_to_full_spectrum+0x68>
 8000b72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b76:	edc7 7a05 	vstr	s15, [r7, #20]
    if (hue > 300.0f) hue = 300.0f;
 8000b7a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b7e:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8000bb4 <frequency_to_full_spectrum+0x68>
 8000b82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b8a:	dd01      	ble.n	8000b90 <frequency_to_full_spectrum+0x44>
 8000b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb8 <frequency_to_full_spectrum+0x6c>)
 8000b8e:	617b      	str	r3, [r7, #20]

    HSV_to_RGB(hue, 1.0f, 1.0f, r, g, b);
 8000b90:	683a      	ldr	r2, [r7, #0]
 8000b92:	6879      	ldr	r1, [r7, #4]
 8000b94:	68b8      	ldr	r0, [r7, #8]
 8000b96:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8000b9a:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8000b9e:	ed97 0a05 	vldr	s0, [r7, #20]
 8000ba2:	f7ff fed1 	bl	8000948 <HSV_to_RGB>

}
 8000ba6:	bf00      	nop
 8000ba8:	3718      	adds	r7, #24
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	45dac000 	.word	0x45dac000
 8000bb4:	43960000 	.word	0x43960000
 8000bb8:	43960000 	.word	0x43960000

08000bbc <effect_flash_fade_random_color>:

#define AMP_THRESHOLD 1000     // Amplitude threshold to detect a beat
#define FADE_DURATION_MS 500   // Fade duration in milliseconds
void effect_flash_fade_random_color(uint16_t amp, uint16_t peakHz, uint8_t brightness_mode) {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b088      	sub	sp, #32
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	80fb      	strh	r3, [r7, #6]
 8000bc6:	460b      	mov	r3, r1
 8000bc8:	80bb      	strh	r3, [r7, #4]
 8000bca:	4613      	mov	r3, r2
 8000bcc:	70fb      	strb	r3, [r7, #3]
    static uint32_t last_flash_time = 0;  // Time of the last flash

    uint32_t current_time = HAL_GetTick();  // Current time in milliseconds
 8000bce:	f001 fb37 	bl	8002240 <HAL_GetTick>
 8000bd2:	6178      	str	r0, [r7, #20]

    // Beat detection: Check if amplitude exceeds threshold
    if (amp > AMP_THRESHOLD) {
 8000bd4:	88fb      	ldrh	r3, [r7, #6]
 8000bd6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000bda:	d92c      	bls.n	8000c36 <effect_flash_fade_random_color+0x7a>
        // Generate a random RGB color (0-255)
        uint8_t r = rand() % 256;
 8000bdc:	f005 fdc4 	bl	8006768 <rand>
 8000be0:	4603      	mov	r3, r0
 8000be2:	425a      	negs	r2, r3
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	b2d2      	uxtb	r2, r2
 8000be8:	bf58      	it	pl
 8000bea:	4253      	negpl	r3, r2
 8000bec:	74fb      	strb	r3, [r7, #19]
        uint8_t g = rand() % 256;
 8000bee:	f005 fdbb 	bl	8006768 <rand>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	425a      	negs	r2, r3
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	b2d2      	uxtb	r2, r2
 8000bfa:	bf58      	it	pl
 8000bfc:	4253      	negpl	r3, r2
 8000bfe:	74bb      	strb	r3, [r7, #18]
        uint8_t b = rand() % 256;
 8000c00:	f005 fdb2 	bl	8006768 <rand>
 8000c04:	4603      	mov	r3, r0
 8000c06:	425a      	negs	r2, r3
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	b2d2      	uxtb	r2, r2
 8000c0c:	bf58      	it	pl
 8000c0e:	4253      	negpl	r3, r2
 8000c10:	747b      	strb	r3, [r7, #17]

        // Set all LEDs to the new random color
        for (int i = 0; i < MAX_LED; i++) {
 8000c12:	2300      	movs	r3, #0
 8000c14:	61fb      	str	r3, [r7, #28]
 8000c16:	e008      	b.n	8000c2a <effect_flash_fade_random_color+0x6e>
            Set_LED(i, r, g, b);
 8000c18:	7cf9      	ldrb	r1, [r7, #19]
 8000c1a:	7cba      	ldrb	r2, [r7, #18]
 8000c1c:	7c7b      	ldrb	r3, [r7, #17]
 8000c1e:	69f8      	ldr	r0, [r7, #28]
 8000c20:	f7ff fd78 	bl	8000714 <Set_LED>
        for (int i = 0; i < MAX_LED; i++) {
 8000c24:	69fb      	ldr	r3, [r7, #28]
 8000c26:	3301      	adds	r3, #1
 8000c28:	61fb      	str	r3, [r7, #28]
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	2b35      	cmp	r3, #53	@ 0x35
 8000c2e:	ddf3      	ble.n	8000c18 <effect_flash_fade_random_color+0x5c>
        }

        // Update the last flash time to start a new fade cycle
        last_flash_time = current_time;
 8000c30:	4a11      	ldr	r2, [pc, #68]	@ (8000c78 <effect_flash_fade_random_color+0xbc>)
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	6013      	str	r3, [r2, #0]
    }

    // Calculate elapsed time since the last flash
    uint32_t elapsed_time = current_time - last_flash_time;
 8000c36:	4b10      	ldr	r3, [pc, #64]	@ (8000c78 <effect_flash_fade_random_color+0xbc>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	697a      	ldr	r2, [r7, #20]
 8000c3c:	1ad3      	subs	r3, r2, r3
 8000c3e:	60fb      	str	r3, [r7, #12]

    // Calculate brightness based on elapsed time
    int brightness;
    if (elapsed_time >= FADE_DURATION_MS) {
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000c46:	d302      	bcc.n	8000c4e <effect_flash_fade_random_color+0x92>
        brightness = 0;  // Fully faded out
 8000c48:	2300      	movs	r3, #0
 8000c4a:	61bb      	str	r3, [r7, #24]
 8000c4c:	e00a      	b.n	8000c64 <effect_flash_fade_random_color+0xa8>
    } else {
        // Linear fade: brightness decreases from BRIGHTNESS_MODE to 0
        brightness = brightness_mode - (brightness_mode * elapsed_time) / FADE_DURATION_MS;
 8000c4e:	78fa      	ldrb	r2, [r7, #3]
 8000c50:	78fb      	ldrb	r3, [r7, #3]
 8000c52:	68f9      	ldr	r1, [r7, #12]
 8000c54:	fb01 f303 	mul.w	r3, r1, r3
 8000c58:	4908      	ldr	r1, [pc, #32]	@ (8000c7c <effect_flash_fade_random_color+0xc0>)
 8000c5a:	fba1 1303 	umull	r1, r3, r1, r3
 8000c5e:	095b      	lsrs	r3, r3, #5
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	61bb      	str	r3, [r7, #24]
    }

    // Apply the calculated brightness to the LEDs
    Set_Brightness(brightness);
 8000c64:	69b8      	ldr	r0, [r7, #24]
 8000c66:	f7ff fd83 	bl	8000770 <Set_Brightness>

    // Update the LED strip
    WS2812_Send();
 8000c6a:	f7ff fdff 	bl	800086c <WS2812_Send>
}
 8000c6e:	bf00      	nop
 8000c70:	3720      	adds	r7, #32
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20004e8c 	.word	0x20004e8c
 8000c7c:	10624dd3 	.word	0x10624dd3

08000c80 <effect_dynamic_vu_meter>:

void effect_dynamic_vu_meter(uint16_t amplitude, uint16_t peak_freq, uint8_t brightness_mode) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b08a      	sub	sp, #40	@ 0x28
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	80fb      	strh	r3, [r7, #6]
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	80bb      	strh	r3, [r7, #4]
 8000c8e:	4613      	mov	r3, r2
 8000c90:	70fb      	strb	r3, [r7, #3]
    // Calculate ratio and number of LEDs to light
    float ratio = (float)amplitude / amp_maxn;
 8000c92:	88fb      	ldrh	r3, [r7, #6]
 8000c94:	ee07 3a90 	vmov	s15, r3
 8000c98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000c9c:	4b49      	ldr	r3, [pc, #292]	@ (8000dc4 <effect_dynamic_vu_meter+0x144>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	ee07 3a90 	vmov	s15, r3
 8000ca4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ca8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cac:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    if (ratio > 1.0f) ratio = 1.0f;
 8000cb0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000cb4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000cb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cc0:	dd02      	ble.n	8000cc8 <effect_dynamic_vu_meter+0x48>
 8000cc2:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000cc6:	627b      	str	r3, [r7, #36]	@ 0x24

    if (ratio <= 0.05f) {
 8000cc8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000ccc:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8000dc8 <effect_dynamic_vu_meter+0x148>
 8000cd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cd8:	d802      	bhi.n	8000ce0 <effect_dynamic_vu_meter+0x60>
        Turn_off_all_at_once();
 8000cda:	f7ff ff22 	bl	8000b22 <Turn_off_all_at_once>
 8000cde:	e06e      	b.n	8000dbe <effect_dynamic_vu_meter+0x13e>
        return;
    }

    int total_leds_to_light = (int)(ratio * MAX_LED);
 8000ce0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000ce4:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8000dcc <effect_dynamic_vu_meter+0x14c>
 8000ce8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000cf0:	ee17 3a90 	vmov	r3, s15
 8000cf4:	623b      	str	r3, [r7, #32]
    if (total_leds_to_light < 1) total_leds_to_light = 1;
 8000cf6:	6a3b      	ldr	r3, [r7, #32]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	dc01      	bgt.n	8000d00 <effect_dynamic_vu_meter+0x80>
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	623b      	str	r3, [r7, #32]

    // Get color based on frequency
    uint8_t r, g, b;
    frequency_to_full_spectrum(peak_freq, &r, &g, &b);
 8000d00:	f107 030d 	add.w	r3, r7, #13
 8000d04:	f107 020e 	add.w	r2, r7, #14
 8000d08:	f107 010f 	add.w	r1, r7, #15
 8000d0c:	88b8      	ldrh	r0, [r7, #4]
 8000d0e:	f7ff ff1d 	bl	8000b4c <frequency_to_full_spectrum>

    // Clear all LEDs first
    Turn_off_all_at_once();
 8000d12:	f7ff ff06 	bl	8000b22 <Turn_off_all_at_once>

    // Light LEDs from center outward
    int center = MAX_LED / 2;
 8000d16:	231b      	movs	r3, #27
 8000d18:	61bb      	str	r3, [r7, #24]
    int leds_per_side = total_leds_to_light / 2;
 8000d1a:	6a3b      	ldr	r3, [r7, #32]
 8000d1c:	0fda      	lsrs	r2, r3, #31
 8000d1e:	4413      	add	r3, r2
 8000d20:	105b      	asrs	r3, r3, #1
 8000d22:	617b      	str	r3, [r7, #20]

    // Light center LED if odd number
    if (total_leds_to_light % 2 == 1) {
 8000d24:	6a3b      	ldr	r3, [r7, #32]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	f003 0301 	and.w	r3, r3, #1
 8000d2c:	bfb8      	it	lt
 8000d2e:	425b      	neglt	r3, r3
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d107      	bne.n	8000d44 <effect_dynamic_vu_meter+0xc4>
        Set_LED(center, r, g, b);
 8000d34:	7bfb      	ldrb	r3, [r7, #15]
 8000d36:	4619      	mov	r1, r3
 8000d38:	7bbb      	ldrb	r3, [r7, #14]
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	7b7b      	ldrb	r3, [r7, #13]
 8000d3e:	69b8      	ldr	r0, [r7, #24]
 8000d40:	f7ff fce8 	bl	8000714 <Set_LED>
    }

    // Light LEDs on both sides of center
    for (int i = 1; i <= leds_per_side; i++) {
 8000d44:	2301      	movs	r3, #1
 8000d46:	61fb      	str	r3, [r7, #28]
 8000d48:	e020      	b.n	8000d8c <effect_dynamic_vu_meter+0x10c>
        if (center - i >= 0) {
 8000d4a:	69ba      	ldr	r2, [r7, #24]
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	1ad3      	subs	r3, r2, r3
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	db09      	blt.n	8000d68 <effect_dynamic_vu_meter+0xe8>
            Set_LED(center - i, r, g, b);
 8000d54:	69ba      	ldr	r2, [r7, #24]
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	1ad0      	subs	r0, r2, r3
 8000d5a:	7bfb      	ldrb	r3, [r7, #15]
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	7bbb      	ldrb	r3, [r7, #14]
 8000d60:	461a      	mov	r2, r3
 8000d62:	7b7b      	ldrb	r3, [r7, #13]
 8000d64:	f7ff fcd6 	bl	8000714 <Set_LED>
        }
        if (center + i < MAX_LED) {
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	2b35      	cmp	r3, #53	@ 0x35
 8000d70:	dc09      	bgt.n	8000d86 <effect_dynamic_vu_meter+0x106>
            Set_LED(center + i, r, g, b);
 8000d72:	69ba      	ldr	r2, [r7, #24]
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	18d0      	adds	r0, r2, r3
 8000d78:	7bfb      	ldrb	r3, [r7, #15]
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	7bbb      	ldrb	r3, [r7, #14]
 8000d7e:	461a      	mov	r2, r3
 8000d80:	7b7b      	ldrb	r3, [r7, #13]
 8000d82:	f7ff fcc7 	bl	8000714 <Set_LED>
    for (int i = 1; i <= leds_per_side; i++) {
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	61fb      	str	r3, [r7, #28]
 8000d8c:	69fa      	ldr	r2, [r7, #28]
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	ddda      	ble.n	8000d4a <effect_dynamic_vu_meter+0xca>
        }
    }

    int brightness = 5 + (int)(ratio * (brightness_mode - 5));
 8000d94:	78fb      	ldrb	r3, [r7, #3]
 8000d96:	3b05      	subs	r3, #5
 8000d98:	ee07 3a90 	vmov	s15, r3
 8000d9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000da0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000da4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000da8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000dac:	ee17 3a90 	vmov	r3, s15
 8000db0:	3305      	adds	r3, #5
 8000db2:	613b      	str	r3, [r7, #16]
    Set_Brightness(brightness);
 8000db4:	6938      	ldr	r0, [r7, #16]
 8000db6:	f7ff fcdb 	bl	8000770 <Set_Brightness>
    WS2812_Send();
 8000dba:	f7ff fd57 	bl	800086c <WS2812_Send>
}
 8000dbe:	3728      	adds	r7, #40	@ 0x28
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20000004 	.word	0x20000004
 8000dc8:	3d4ccccd 	.word	0x3d4ccccd
 8000dcc:	42580000 	.word	0x42580000

08000dd0 <effect_spectrum_color_bands>:

void effect_spectrum_color_bands(uint16_t amplitude, uint16_t peak_freq, uint8_t brightness_mode) {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08e      	sub	sp, #56	@ 0x38
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	80fb      	strh	r3, [r7, #6]
 8000dda:	460b      	mov	r3, r1
 8000ddc:	80bb      	strh	r3, [r7, #4]
 8000dde:	4613      	mov	r3, r2
 8000de0:	70fb      	strb	r3, [r7, #3]
    float ratio = (float)amplitude / amp_maxn;
 8000de2:	88fb      	ldrh	r3, [r7, #6]
 8000de4:	ee07 3a90 	vmov	s15, r3
 8000de8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000dec:	4b49      	ldr	r3, [pc, #292]	@ (8000f14 <effect_spectrum_color_bands+0x144>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	ee07 3a90 	vmov	s15, r3
 8000df4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000df8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000dfc:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    if (ratio > 1.0f) ratio = 1.0f;
 8000e00:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000e04:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000e08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e10:	dd02      	ble.n	8000e18 <effect_spectrum_color_bands+0x48>
 8000e12:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000e16:	637b      	str	r3, [r7, #52]	@ 0x34

    if (ratio <= 0.05f) {
 8000e18:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000e1c:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8000f18 <effect_spectrum_color_bands+0x148>
 8000e20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e28:	d802      	bhi.n	8000e30 <effect_spectrum_color_bands+0x60>
        Turn_off_all_at_once();
 8000e2a:	f7ff fe7a 	bl	8000b22 <Turn_off_all_at_once>
 8000e2e:	e06e      	b.n	8000f0e <effect_spectrum_color_bands+0x13e>
        return;
    }

    // Define frequency bands and LED sections
    int low_start = 0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	627b      	str	r3, [r7, #36]	@ 0x24
    int low_end = MAX_LED / 3;
 8000e34:	2312      	movs	r3, #18
 8000e36:	623b      	str	r3, [r7, #32]
    int mid_start = low_end;
 8000e38:	6a3b      	ldr	r3, [r7, #32]
 8000e3a:	61fb      	str	r3, [r7, #28]
    int mid_end = (MAX_LED * 2) / 3;
 8000e3c:	2324      	movs	r3, #36	@ 0x24
 8000e3e:	61bb      	str	r3, [r7, #24]
    int high_start = mid_end;
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	617b      	str	r3, [r7, #20]
    int high_end = MAX_LED;
 8000e44:	2336      	movs	r3, #54	@ 0x36
 8000e46:	613b      	str	r3, [r7, #16]

    // Clear all LEDs
    Turn_off_all_at_once();
 8000e48:	f7ff fe6b 	bl	8000b22 <Turn_off_all_at_once>

    // Determine which band the peak frequency falls into
    uint8_t r = 0, g = 0, b = 0;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	72fb      	strb	r3, [r7, #11]
 8000e50:	2300      	movs	r3, #0
 8000e52:	72bb      	strb	r3, [r7, #10]
 8000e54:	2300      	movs	r3, #0
 8000e56:	727b      	strb	r3, [r7, #9]
    int start_led = 0, end_led = 0;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	633b      	str	r3, [r7, #48]	@ 0x30
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (peak_freq <= 250) {
 8000e60:	88bb      	ldrh	r3, [r7, #4]
 8000e62:	2bfa      	cmp	r3, #250	@ 0xfa
 8000e64:	d80d      	bhi.n	8000e82 <effect_spectrum_color_bands+0xb2>
        // Low frequency band - Red
        frequency_to_full_spectrum(peak_freq, &r, &g, &b);
 8000e66:	f107 0309 	add.w	r3, r7, #9
 8000e6a:	f107 020a 	add.w	r2, r7, #10
 8000e6e:	f107 010b 	add.w	r1, r7, #11
 8000e72:	88b8      	ldrh	r0, [r7, #4]
 8000e74:	f7ff fe6a 	bl	8000b4c <frequency_to_full_spectrum>
        start_led = low_start;
 8000e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e7a:	633b      	str	r3, [r7, #48]	@ 0x30
        end_led = low_end;
 8000e7c:	6a3b      	ldr	r3, [r7, #32]
 8000e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e80:	e01e      	b.n	8000ec0 <effect_spectrum_color_bands+0xf0>
    } else if (peak_freq <= 2000) {
 8000e82:	88bb      	ldrh	r3, [r7, #4]
 8000e84:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000e88:	d80d      	bhi.n	8000ea6 <effect_spectrum_color_bands+0xd6>
        // Mid frequency band - Green
    	frequency_to_full_spectrum(peak_freq, &r, &g, &b);
 8000e8a:	f107 0309 	add.w	r3, r7, #9
 8000e8e:	f107 020a 	add.w	r2, r7, #10
 8000e92:	f107 010b 	add.w	r1, r7, #11
 8000e96:	88b8      	ldrh	r0, [r7, #4]
 8000e98:	f7ff fe58 	bl	8000b4c <frequency_to_full_spectrum>
        start_led = mid_start;
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	633b      	str	r3, [r7, #48]	@ 0x30
        end_led = mid_end;
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000ea4:	e00c      	b.n	8000ec0 <effect_spectrum_color_bands+0xf0>
    } else {
        // High frequency band - Blue
    	frequency_to_full_spectrum(peak_freq, &r, &g, &b);
 8000ea6:	f107 0309 	add.w	r3, r7, #9
 8000eaa:	f107 020a 	add.w	r2, r7, #10
 8000eae:	f107 010b 	add.w	r1, r7, #11
 8000eb2:	88b8      	ldrh	r0, [r7, #4]
 8000eb4:	f7ff fe4a 	bl	8000b4c <frequency_to_full_spectrum>
        start_led = high_start;
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	633b      	str	r3, [r7, #48]	@ 0x30
        end_led = high_end;
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }

    // Light up the appropriate section
    for (int i = start_led; i < end_led; i++) {
 8000ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ec2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000ec4:	e00a      	b.n	8000edc <effect_spectrum_color_bands+0x10c>
        Set_LED(i, r, g, b);
 8000ec6:	7afb      	ldrb	r3, [r7, #11]
 8000ec8:	4619      	mov	r1, r3
 8000eca:	7abb      	ldrb	r3, [r7, #10]
 8000ecc:	461a      	mov	r2, r3
 8000ece:	7a7b      	ldrb	r3, [r7, #9]
 8000ed0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000ed2:	f7ff fc1f 	bl	8000714 <Set_LED>
    for (int i = start_led; i < end_led; i++) {
 8000ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ed8:	3301      	adds	r3, #1
 8000eda:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000edc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000ede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	dbf0      	blt.n	8000ec6 <effect_spectrum_color_bands+0xf6>
    }

    int brightness = 5 + (int)(ratio * (brightness_mode - 5));
 8000ee4:	78fb      	ldrb	r3, [r7, #3]
 8000ee6:	3b05      	subs	r3, #5
 8000ee8:	ee07 3a90 	vmov	s15, r3
 8000eec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ef0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000ef4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ef8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000efc:	ee17 3a90 	vmov	r3, s15
 8000f00:	3305      	adds	r3, #5
 8000f02:	60fb      	str	r3, [r7, #12]
    Set_Brightness(brightness);
 8000f04:	68f8      	ldr	r0, [r7, #12]
 8000f06:	f7ff fc33 	bl	8000770 <Set_Brightness>
    WS2812_Send();
 8000f0a:	f7ff fcaf 	bl	800086c <WS2812_Send>
}
 8000f0e:	3738      	adds	r7, #56	@ 0x38
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20000004 	.word	0x20000004
 8000f18:	3d4ccccd 	.word	0x3d4ccccd

08000f1c <effect_frequency_chase_gradient>:
#define MAX_PULSES 8
static Pulse pulses[MAX_PULSES];
static uint16_t last_amp = 0;
static uint32_t last_pulse_time = 0;

void effect_frequency_chase_gradient(uint16_t amplitude, uint16_t peak_freq, uint8_t brightness_mode) {
 8000f1c:	b590      	push	{r4, r7, lr}
 8000f1e:	b091      	sub	sp, #68	@ 0x44
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	81fb      	strh	r3, [r7, #14]
 8000f26:	460b      	mov	r3, r1
 8000f28:	81bb      	strh	r3, [r7, #12]
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	72fb      	strb	r3, [r7, #11]
    const uint16_t BEAT_THRESHOLD = 800;  // Adjust based on your amp_maxn
 8000f2e:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8000f32:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    const uint32_t MIN_PULSE_INTERVAL = 100; // Minimum time between pulses (ms)
 8000f34:	2364      	movs	r3, #100	@ 0x64
 8000f36:	62bb      	str	r3, [r7, #40]	@ 0x28

    uint32_t current_time = HAL_GetTick();
 8000f38:	f001 f982 	bl	8002240 <HAL_GetTick>
 8000f3c:	6278      	str	r0, [r7, #36]	@ 0x24

    // Beat detection: amplitude spike above threshold
    if (amplitude > BEAT_THRESHOLD &&
 8000f3e:	89fa      	ldrh	r2, [r7, #14]
 8000f40:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000f42:	429a      	cmp	r2, r3
 8000f44:	f240 80a0 	bls.w	8001088 <effect_frequency_chase_gradient+0x16c>
        amplitude > (last_amp + 200) &&
 8000f48:	89fa      	ldrh	r2, [r7, #14]
 8000f4a:	4b59      	ldr	r3, [pc, #356]	@ (80010b0 <effect_frequency_chase_gradient+0x194>)
 8000f4c:	881b      	ldrh	r3, [r3, #0]
 8000f4e:	33c8      	adds	r3, #200	@ 0xc8
    if (amplitude > BEAT_THRESHOLD &&
 8000f50:	429a      	cmp	r2, r3
 8000f52:	f340 8099 	ble.w	8001088 <effect_frequency_chase_gradient+0x16c>
        (current_time - last_pulse_time) > MIN_PULSE_INTERVAL) {
 8000f56:	4b57      	ldr	r3, [pc, #348]	@ (80010b4 <effect_frequency_chase_gradient+0x198>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f5c:	1ad3      	subs	r3, r2, r3
        amplitude > (last_amp + 200) &&
 8000f5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000f60:	429a      	cmp	r2, r3
 8000f62:	f080 8091 	bcs.w	8001088 <effect_frequency_chase_gradient+0x16c>

        // Find an inactive pulse slot
        for (int i = 0; i < MAX_PULSES; i++) {
 8000f66:	2300      	movs	r3, #0
 8000f68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000f6a:	e089      	b.n	8001080 <effect_frequency_chase_gradient+0x164>
            if (!pulses[i].active) {
 8000f6c:	4952      	ldr	r1, [pc, #328]	@ (80010b8 <effect_frequency_chase_gradient+0x19c>)
 8000f6e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000f70:	4613      	mov	r3, r2
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	4413      	add	r3, r2
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	440b      	add	r3, r1
 8000f7a:	3309      	adds	r3, #9
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d17b      	bne.n	800107a <effect_frequency_chase_gradient+0x15e>
                // Initialize new pulse
                pulses[i].position = 0;
 8000f82:	494d      	ldr	r1, [pc, #308]	@ (80010b8 <effect_frequency_chase_gradient+0x19c>)
 8000f84:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000f86:	4613      	mov	r3, r2
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	4413      	add	r3, r2
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	440b      	add	r3, r1
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
                frequency_to_full_spectrum(peak_freq, &pulses[i].r, &pulses[i].g, &pulses[i].b);
 8000f94:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000f96:	4613      	mov	r3, r2
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	4413      	add	r3, r2
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	4a46      	ldr	r2, [pc, #280]	@ (80010b8 <effect_frequency_chase_gradient+0x19c>)
 8000fa0:	4413      	add	r3, r2
 8000fa2:	1d19      	adds	r1, r3, #4
 8000fa4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	4413      	add	r3, r2
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	4a42      	ldr	r2, [pc, #264]	@ (80010b8 <effect_frequency_chase_gradient+0x19c>)
 8000fb0:	4413      	add	r3, r2
 8000fb2:	1d5c      	adds	r4, r3, #5
 8000fb4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	4413      	add	r3, r2
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	4a3e      	ldr	r2, [pc, #248]	@ (80010b8 <effect_frequency_chase_gradient+0x19c>)
 8000fc0:	4413      	add	r3, r2
 8000fc2:	3306      	adds	r3, #6
 8000fc4:	89b8      	ldrh	r0, [r7, #12]
 8000fc6:	4622      	mov	r2, r4
 8000fc8:	f7ff fdc0 	bl	8000b4c <frequency_to_full_spectrum>

                float ratio = (float)amplitude / amp_maxn;
 8000fcc:	89fb      	ldrh	r3, [r7, #14]
 8000fce:	ee07 3a90 	vmov	s15, r3
 8000fd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000fd6:	4b39      	ldr	r3, [pc, #228]	@ (80010bc <effect_frequency_chase_gradient+0x1a0>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	ee07 3a90 	vmov	s15, r3
 8000fde:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fe2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fe6:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
                if (ratio > 1.0f) ratio = 1.0f;
 8000fea:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8000fee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000ff2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ffa:	dd02      	ble.n	8001002 <effect_frequency_chase_gradient+0xe6>
 8000ffc:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001000:	63bb      	str	r3, [r7, #56]	@ 0x38

                pulses[i].brightness = (uint8_t)(ratio * 255);
 8001002:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001006:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 80010c0 <effect_frequency_chase_gradient+0x1a4>
 800100a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800100e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001012:	edc7 7a01 	vstr	s15, [r7, #4]
 8001016:	793b      	ldrb	r3, [r7, #4]
 8001018:	b2d8      	uxtb	r0, r3
 800101a:	4927      	ldr	r1, [pc, #156]	@ (80010b8 <effect_frequency_chase_gradient+0x19c>)
 800101c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800101e:	4613      	mov	r3, r2
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	4413      	add	r3, r2
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	440b      	add	r3, r1
 8001028:	3307      	adds	r3, #7
 800102a:	4602      	mov	r2, r0
 800102c:	701a      	strb	r2, [r3, #0]
                pulses[i].length = 3 + (uint8_t)(ratio * 8); // 3-11 LEDs long
 800102e:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001032:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8001036:	ee67 7a87 	vmul.f32	s15, s15, s14
 800103a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800103e:	edc7 7a01 	vstr	s15, [r7, #4]
 8001042:	793b      	ldrb	r3, [r7, #4]
 8001044:	b2db      	uxtb	r3, r3
 8001046:	3303      	adds	r3, #3
 8001048:	b2d8      	uxtb	r0, r3
 800104a:	491b      	ldr	r1, [pc, #108]	@ (80010b8 <effect_frequency_chase_gradient+0x19c>)
 800104c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800104e:	4613      	mov	r3, r2
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	4413      	add	r3, r2
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	440b      	add	r3, r1
 8001058:	3308      	adds	r3, #8
 800105a:	4602      	mov	r2, r0
 800105c:	701a      	strb	r2, [r3, #0]
                pulses[i].active = 1;
 800105e:	4916      	ldr	r1, [pc, #88]	@ (80010b8 <effect_frequency_chase_gradient+0x19c>)
 8001060:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001062:	4613      	mov	r3, r2
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	4413      	add	r3, r2
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	440b      	add	r3, r1
 800106c:	3309      	adds	r3, #9
 800106e:	2201      	movs	r2, #1
 8001070:	701a      	strb	r2, [r3, #0]

                last_pulse_time = current_time;
 8001072:	4a10      	ldr	r2, [pc, #64]	@ (80010b4 <effect_frequency_chase_gradient+0x198>)
 8001074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001076:	6013      	str	r3, [r2, #0]
                break;
 8001078:	e006      	b.n	8001088 <effect_frequency_chase_gradient+0x16c>
        for (int i = 0; i < MAX_PULSES; i++) {
 800107a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800107c:	3301      	adds	r3, #1
 800107e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001080:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001082:	2b07      	cmp	r3, #7
 8001084:	f77f af72 	ble.w	8000f6c <effect_frequency_chase_gradient+0x50>
            }
        }
    }

    // Clear all LEDs
    Turn_off_all_at_once();
 8001088:	f7ff fd4b 	bl	8000b22 <Turn_off_all_at_once>

    // Update and draw all active pulses
    for (int i = 0; i < MAX_PULSES; i++) {
 800108c:	2300      	movs	r3, #0
 800108e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001090:	e0fb      	b.n	800128a <effect_frequency_chase_gradient+0x36e>
        if (pulses[i].active) {
 8001092:	4909      	ldr	r1, [pc, #36]	@ (80010b8 <effect_frequency_chase_gradient+0x19c>)
 8001094:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001096:	4613      	mov	r3, r2
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	4413      	add	r3, r2
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	440b      	add	r3, r1
 80010a0:	3309      	adds	r3, #9
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	f000 80ed 	beq.w	8001284 <effect_frequency_chase_gradient+0x368>
            // Draw pulse with fade-out trail
            for (int j = 0; j < pulses[i].length; j++) {
 80010aa:	2300      	movs	r3, #0
 80010ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80010ae:	e0ab      	b.n	8001208 <effect_frequency_chase_gradient+0x2ec>
 80010b0:	20004e84 	.word	0x20004e84
 80010b4:	20004e88 	.word	0x20004e88
 80010b8:	20004e24 	.word	0x20004e24
 80010bc:	20000004 	.word	0x20000004
 80010c0:	437f0000 	.word	0x437f0000
                int led_pos = pulses[i].position - j;
 80010c4:	4979      	ldr	r1, [pc, #484]	@ (80012ac <effect_frequency_chase_gradient+0x390>)
 80010c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80010c8:	4613      	mov	r3, r2
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	4413      	add	r3, r2
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	440b      	add	r3, r1
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	623b      	str	r3, [r7, #32]
                if (led_pos >= 0 && led_pos < MAX_LED) {
 80010da:	6a3b      	ldr	r3, [r7, #32]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	f2c0 8090 	blt.w	8001202 <effect_frequency_chase_gradient+0x2e6>
 80010e2:	6a3b      	ldr	r3, [r7, #32]
 80010e4:	2b35      	cmp	r3, #53	@ 0x35
 80010e6:	f300 808c 	bgt.w	8001202 <effect_frequency_chase_gradient+0x2e6>
                    // Calculate fade factor for trail
                    float fade = 1.0f - ((float)j / pulses[i].length);
 80010ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010ec:	ee07 3a90 	vmov	s15, r3
 80010f0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80010f4:	496d      	ldr	r1, [pc, #436]	@ (80012ac <effect_frequency_chase_gradient+0x390>)
 80010f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80010f8:	4613      	mov	r3, r2
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	4413      	add	r3, r2
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	440b      	add	r3, r1
 8001102:	3308      	adds	r3, #8
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	ee07 3a90 	vmov	s15, r3
 800110a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800110e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001112:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001116:	ee77 7a67 	vsub.f32	s15, s14, s15
 800111a:	edc7 7a07 	vstr	s15, [r7, #28]
                    uint8_t r = (uint8_t)(pulses[i].r * fade);
 800111e:	4963      	ldr	r1, [pc, #396]	@ (80012ac <effect_frequency_chase_gradient+0x390>)
 8001120:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001122:	4613      	mov	r3, r2
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	4413      	add	r3, r2
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	440b      	add	r3, r1
 800112c:	3304      	adds	r3, #4
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	ee07 3a90 	vmov	s15, r3
 8001134:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001138:	edd7 7a07 	vldr	s15, [r7, #28]
 800113c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001140:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001144:	edc7 7a01 	vstr	s15, [r7, #4]
 8001148:	793b      	ldrb	r3, [r7, #4]
 800114a:	76fb      	strb	r3, [r7, #27]
                    uint8_t g = (uint8_t)(pulses[i].g * fade);
 800114c:	4957      	ldr	r1, [pc, #348]	@ (80012ac <effect_frequency_chase_gradient+0x390>)
 800114e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001150:	4613      	mov	r3, r2
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	4413      	add	r3, r2
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	440b      	add	r3, r1
 800115a:	3305      	adds	r3, #5
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	ee07 3a90 	vmov	s15, r3
 8001162:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001166:	edd7 7a07 	vldr	s15, [r7, #28]
 800116a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800116e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001172:	edc7 7a01 	vstr	s15, [r7, #4]
 8001176:	793b      	ldrb	r3, [r7, #4]
 8001178:	76bb      	strb	r3, [r7, #26]
                    uint8_t b = (uint8_t)(pulses[i].b * fade);
 800117a:	494c      	ldr	r1, [pc, #304]	@ (80012ac <effect_frequency_chase_gradient+0x390>)
 800117c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800117e:	4613      	mov	r3, r2
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	4413      	add	r3, r2
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	440b      	add	r3, r1
 8001188:	3306      	adds	r3, #6
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	ee07 3a90 	vmov	s15, r3
 8001190:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001194:	edd7 7a07 	vldr	s15, [r7, #28]
 8001198:	ee67 7a27 	vmul.f32	s15, s14, s15
 800119c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011a0:	edc7 7a01 	vstr	s15, [r7, #4]
 80011a4:	793b      	ldrb	r3, [r7, #4]
 80011a6:	767b      	strb	r3, [r7, #25]

                    // Blend with existing LED color (simple additive)
                    uint8_t existing_r = LED_Data[led_pos][2];
 80011a8:	4a41      	ldr	r2, [pc, #260]	@ (80012b0 <effect_frequency_chase_gradient+0x394>)
 80011aa:	6a3b      	ldr	r3, [r7, #32]
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	4413      	add	r3, r2
 80011b0:	789b      	ldrb	r3, [r3, #2]
 80011b2:	763b      	strb	r3, [r7, #24]
                    uint8_t existing_g = LED_Data[led_pos][1];
 80011b4:	4a3e      	ldr	r2, [pc, #248]	@ (80012b0 <effect_frequency_chase_gradient+0x394>)
 80011b6:	6a3b      	ldr	r3, [r7, #32]
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	4413      	add	r3, r2
 80011bc:	785b      	ldrb	r3, [r3, #1]
 80011be:	75fb      	strb	r3, [r7, #23]
                    uint8_t existing_b = LED_Data[led_pos][3];
 80011c0:	4a3b      	ldr	r2, [pc, #236]	@ (80012b0 <effect_frequency_chase_gradient+0x394>)
 80011c2:	6a3b      	ldr	r3, [r7, #32]
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	4413      	add	r3, r2
 80011c8:	78db      	ldrb	r3, [r3, #3]
 80011ca:	75bb      	strb	r3, [r7, #22]

                    r = (r + existing_r > 255) ? 255 : r + existing_r;
 80011cc:	7efa      	ldrb	r2, [r7, #27]
 80011ce:	7e3b      	ldrb	r3, [r7, #24]
 80011d0:	4413      	add	r3, r2
 80011d2:	2bff      	cmp	r3, #255	@ 0xff
 80011d4:	bfa8      	it	ge
 80011d6:	23ff      	movge	r3, #255	@ 0xff
 80011d8:	76fb      	strb	r3, [r7, #27]
                    g = (g + existing_g > 255) ? 255 : g + existing_g;
 80011da:	7eba      	ldrb	r2, [r7, #26]
 80011dc:	7dfb      	ldrb	r3, [r7, #23]
 80011de:	4413      	add	r3, r2
 80011e0:	2bff      	cmp	r3, #255	@ 0xff
 80011e2:	bfa8      	it	ge
 80011e4:	23ff      	movge	r3, #255	@ 0xff
 80011e6:	76bb      	strb	r3, [r7, #26]
                    b = (b + existing_b > 255) ? 255 : b + existing_b;
 80011e8:	7e7a      	ldrb	r2, [r7, #25]
 80011ea:	7dbb      	ldrb	r3, [r7, #22]
 80011ec:	4413      	add	r3, r2
 80011ee:	2bff      	cmp	r3, #255	@ 0xff
 80011f0:	bfa8      	it	ge
 80011f2:	23ff      	movge	r3, #255	@ 0xff
 80011f4:	767b      	strb	r3, [r7, #25]

                    Set_LED(led_pos, r, g, b);
 80011f6:	7ef9      	ldrb	r1, [r7, #27]
 80011f8:	7eba      	ldrb	r2, [r7, #26]
 80011fa:	7e7b      	ldrb	r3, [r7, #25]
 80011fc:	6a38      	ldr	r0, [r7, #32]
 80011fe:	f7ff fa89 	bl	8000714 <Set_LED>
            for (int j = 0; j < pulses[i].length; j++) {
 8001202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001204:	3301      	adds	r3, #1
 8001206:	633b      	str	r3, [r7, #48]	@ 0x30
 8001208:	4928      	ldr	r1, [pc, #160]	@ (80012ac <effect_frequency_chase_gradient+0x390>)
 800120a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800120c:	4613      	mov	r3, r2
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	4413      	add	r3, r2
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	440b      	add	r3, r1
 8001216:	3308      	adds	r3, #8
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	461a      	mov	r2, r3
 800121c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800121e:	4293      	cmp	r3, r2
 8001220:	f6ff af50 	blt.w	80010c4 <effect_frequency_chase_gradient+0x1a8>
                }
            }

            // Move pulse forward
            pulses[i].position++;
 8001224:	4921      	ldr	r1, [pc, #132]	@ (80012ac <effect_frequency_chase_gradient+0x390>)
 8001226:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001228:	4613      	mov	r3, r2
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	4413      	add	r3, r2
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	440b      	add	r3, r1
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	1c59      	adds	r1, r3, #1
 8001236:	481d      	ldr	r0, [pc, #116]	@ (80012ac <effect_frequency_chase_gradient+0x390>)
 8001238:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800123a:	4613      	mov	r3, r2
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	4413      	add	r3, r2
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	4403      	add	r3, r0
 8001244:	6019      	str	r1, [r3, #0]

            // Deactivate pulse if it's moved off the strip
            if (pulses[i].position >= MAX_LED + pulses[i].length) {
 8001246:	4919      	ldr	r1, [pc, #100]	@ (80012ac <effect_frequency_chase_gradient+0x390>)
 8001248:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800124a:	4613      	mov	r3, r2
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	4413      	add	r3, r2
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	440b      	add	r3, r1
 8001254:	3308      	adds	r3, #8
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	f103 0135 	add.w	r1, r3, #53	@ 0x35
 800125c:	4813      	ldr	r0, [pc, #76]	@ (80012ac <effect_frequency_chase_gradient+0x390>)
 800125e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001260:	4613      	mov	r3, r2
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	4413      	add	r3, r2
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	4403      	add	r3, r0
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4299      	cmp	r1, r3
 800126e:	da09      	bge.n	8001284 <effect_frequency_chase_gradient+0x368>
                pulses[i].active = 0;
 8001270:	490e      	ldr	r1, [pc, #56]	@ (80012ac <effect_frequency_chase_gradient+0x390>)
 8001272:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001274:	4613      	mov	r3, r2
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	4413      	add	r3, r2
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	440b      	add	r3, r1
 800127e:	3309      	adds	r3, #9
 8001280:	2200      	movs	r2, #0
 8001282:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < MAX_PULSES; i++) {
 8001284:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001286:	3301      	adds	r3, #1
 8001288:	637b      	str	r3, [r7, #52]	@ 0x34
 800128a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800128c:	2b07      	cmp	r3, #7
 800128e:	f77f af00 	ble.w	8001092 <effect_frequency_chase_gradient+0x176>
            }
        }
    }

    Set_Brightness(brightness_mode);
 8001292:	7afb      	ldrb	r3, [r7, #11]
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff fa6b 	bl	8000770 <Set_Brightness>
    WS2812_Send();
 800129a:	f7ff fae7 	bl	800086c <WS2812_Send>

    last_amp = amplitude;
 800129e:	4a05      	ldr	r2, [pc, #20]	@ (80012b4 <effect_frequency_chase_gradient+0x398>)
 80012a0:	89fb      	ldrh	r3, [r7, #14]
 80012a2:	8013      	strh	r3, [r2, #0]
}
 80012a4:	bf00      	nop
 80012a6:	3744      	adds	r7, #68	@ 0x44
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd90      	pop	{r4, r7, pc}
 80012ac:	20004e24 	.word	0x20004e24
 80012b0:	200001c8 	.word	0x200001c8
 80012b4:	20004e84 	.word	0x20004e84

080012b8 <effect_rainbow_roll>:

void effect_rainbow_roll(uint16_t amplitude, uint16_t peak_freq, uint8_t brightness_mode) {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b088      	sub	sp, #32
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	80fb      	strh	r3, [r7, #6]
 80012c2:	460b      	mov	r3, r1
 80012c4:	80bb      	strh	r3, [r7, #4]
 80012c6:	4613      	mov	r3, r2
 80012c8:	70fb      	strb	r3, [r7, #3]
    static float offset = 0.0f;

    float ratio = (float)amplitude / amp_maxn;
 80012ca:	88fb      	ldrh	r3, [r7, #6]
 80012cc:	ee07 3a90 	vmov	s15, r3
 80012d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80012d4:	4b44      	ldr	r3, [pc, #272]	@ (80013e8 <effect_rainbow_roll+0x130>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	ee07 3a90 	vmov	s15, r3
 80012dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012e4:	edc7 7a07 	vstr	s15, [r7, #28]
    if (ratio > 1.0f) ratio = 1.0f;
 80012e8:	edd7 7a07 	vldr	s15, [r7, #28]
 80012ec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80012f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012f8:	dd02      	ble.n	8001300 <effect_rainbow_roll+0x48>
 80012fa:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80012fe:	61fb      	str	r3, [r7, #28]

    // Cập nhật offset dựa vào tần số đỉnh
    offset += ((float)peak_freq / 100.0f);  // tốc độ cuộn
 8001300:	88bb      	ldrh	r3, [r7, #4]
 8001302:	ee07 3a90 	vmov	s15, r3
 8001306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800130a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80013ec <effect_rainbow_roll+0x134>
 800130e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001312:	4b37      	ldr	r3, [pc, #220]	@ (80013f0 <effect_rainbow_roll+0x138>)
 8001314:	edd3 7a00 	vldr	s15, [r3]
 8001318:	ee77 7a27 	vadd.f32	s15, s14, s15
 800131c:	4b34      	ldr	r3, [pc, #208]	@ (80013f0 <effect_rainbow_roll+0x138>)
 800131e:	edc3 7a00 	vstr	s15, [r3]
    if (offset >= 360.0f) offset -= 360.0f;
 8001322:	4b33      	ldr	r3, [pc, #204]	@ (80013f0 <effect_rainbow_roll+0x138>)
 8001324:	edd3 7a00 	vldr	s15, [r3]
 8001328:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80013f4 <effect_rainbow_roll+0x13c>
 800132c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001334:	db09      	blt.n	800134a <effect_rainbow_roll+0x92>
 8001336:	4b2e      	ldr	r3, [pc, #184]	@ (80013f0 <effect_rainbow_roll+0x138>)
 8001338:	edd3 7a00 	vldr	s15, [r3]
 800133c:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 80013f4 <effect_rainbow_roll+0x13c>
 8001340:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001344:	4b2a      	ldr	r3, [pc, #168]	@ (80013f0 <effect_rainbow_roll+0x138>)
 8001346:	edc3 7a00 	vstr	s15, [r3]

    for (int i = 0; i < MAX_LED; i++) {
 800134a:	2300      	movs	r3, #0
 800134c:	61bb      	str	r3, [r7, #24]
 800134e:	e02f      	b.n	80013b0 <effect_rainbow_roll+0xf8>
        float hue = fmodf(offset + (i * (360.0f / MAX_LED)), 360.0f);
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	ee07 3a90 	vmov	s15, r3
 8001356:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800135a:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 80013f8 <effect_rainbow_roll+0x140>
 800135e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001362:	4b23      	ldr	r3, [pc, #140]	@ (80013f0 <effect_rainbow_roll+0x138>)
 8001364:	edd3 7a00 	vldr	s15, [r3]
 8001368:	ee77 7a27 	vadd.f32	s15, s14, s15
 800136c:	eddf 0a21 	vldr	s1, [pc, #132]	@ 80013f4 <effect_rainbow_roll+0x13c>
 8001370:	eeb0 0a67 	vmov.f32	s0, s15
 8001374:	f006 f9d4 	bl	8007720 <fmodf>
 8001378:	ed87 0a04 	vstr	s0, [r7, #16]
        uint8_t r, g, b;
        HSV_to_RGB(hue, 1.0f, ratio, &r, &g, &b);
 800137c:	f107 020d 	add.w	r2, r7, #13
 8001380:	f107 010e 	add.w	r1, r7, #14
 8001384:	f107 030f 	add.w	r3, r7, #15
 8001388:	4618      	mov	r0, r3
 800138a:	ed97 1a07 	vldr	s2, [r7, #28]
 800138e:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8001392:	ed97 0a04 	vldr	s0, [r7, #16]
 8001396:	f7ff fad7 	bl	8000948 <HSV_to_RGB>
        Set_LED(i, r, g, b);
 800139a:	7bfb      	ldrb	r3, [r7, #15]
 800139c:	4619      	mov	r1, r3
 800139e:	7bbb      	ldrb	r3, [r7, #14]
 80013a0:	461a      	mov	r2, r3
 80013a2:	7b7b      	ldrb	r3, [r7, #13]
 80013a4:	69b8      	ldr	r0, [r7, #24]
 80013a6:	f7ff f9b5 	bl	8000714 <Set_LED>
    for (int i = 0; i < MAX_LED; i++) {
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	3301      	adds	r3, #1
 80013ae:	61bb      	str	r3, [r7, #24]
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	2b35      	cmp	r3, #53	@ 0x35
 80013b4:	ddcc      	ble.n	8001350 <effect_rainbow_roll+0x98>
    }

    int brightness = 5 + (int)(ratio * (brightness_mode - 5));
 80013b6:	78fb      	ldrb	r3, [r7, #3]
 80013b8:	3b05      	subs	r3, #5
 80013ba:	ee07 3a90 	vmov	s15, r3
 80013be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013c2:	edd7 7a07 	vldr	s15, [r7, #28]
 80013c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013ce:	ee17 3a90 	vmov	r3, s15
 80013d2:	3305      	adds	r3, #5
 80013d4:	617b      	str	r3, [r7, #20]
    Set_Brightness(brightness);
 80013d6:	6978      	ldr	r0, [r7, #20]
 80013d8:	f7ff f9ca 	bl	8000770 <Set_Brightness>
    WS2812_Send();
 80013dc:	f7ff fa46 	bl	800086c <WS2812_Send>
}
 80013e0:	bf00      	nop
 80013e2:	3720      	adds	r7, #32
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20000004 	.word	0x20000004
 80013ec:	42c80000 	.word	0x42c80000
 80013f0:	20004e90 	.word	0x20004e90
 80013f4:	43b40000 	.word	0x43b40000
 80013f8:	40d55555 	.word	0x40d55555

080013fc <effect_bass_pulse_glow>:

#define BASS_THRESHOLD 1200		// tăng để LED sáng hơn
#define BASS_FADE_MS 300		// tăng để LED tắt chậm hơn

void effect_bass_pulse_glow(uint16_t amplitude, uint16_t peak_freq, uint8_t brightness_mode) {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b088      	sub	sp, #32
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	80fb      	strh	r3, [r7, #6]
 8001406:	460b      	mov	r3, r1
 8001408:	80bb      	strh	r3, [r7, #4]
 800140a:	4613      	mov	r3, r2
 800140c:	70fb      	strb	r3, [r7, #3]
    static uint32_t last_bass_time = 0;
    static float hue = 0.0f;
    uint32_t now = HAL_GetTick();
 800140e:	f000 ff17 	bl	8002240 <HAL_GetTick>
 8001412:	6178      	str	r0, [r7, #20]

    // Nếu là bass mạnh → cập nhật thời gian và màu sắc (hue)
    if (peak_freq <= 250 && amplitude > BASS_THRESHOLD) {
 8001414:	88bb      	ldrh	r3, [r7, #4]
 8001416:	2bfa      	cmp	r3, #250	@ 0xfa
 8001418:	d824      	bhi.n	8001464 <effect_bass_pulse_glow+0x68>
 800141a:	88fb      	ldrh	r3, [r7, #6]
 800141c:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 8001420:	d920      	bls.n	8001464 <effect_bass_pulse_glow+0x68>
        last_bass_time = now;
 8001422:	4a32      	ldr	r2, [pc, #200]	@ (80014ec <effect_bass_pulse_glow+0xf0>)
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	6013      	str	r3, [r2, #0]

        hue += 30.0f;  // Tăng hue để chuyển màu theo dải cầu vồng
 8001428:	4b31      	ldr	r3, [pc, #196]	@ (80014f0 <effect_bass_pulse_glow+0xf4>)
 800142a:	edd3 7a00 	vldr	s15, [r3]
 800142e:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001432:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001436:	4b2e      	ldr	r3, [pc, #184]	@ (80014f0 <effect_bass_pulse_glow+0xf4>)
 8001438:	edc3 7a00 	vstr	s15, [r3]
        if (hue >= 360.0f) hue -= 360.0f;
 800143c:	4b2c      	ldr	r3, [pc, #176]	@ (80014f0 <effect_bass_pulse_glow+0xf4>)
 800143e:	edd3 7a00 	vldr	s15, [r3]
 8001442:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 80014f4 <effect_bass_pulse_glow+0xf8>
 8001446:	eef4 7ac7 	vcmpe.f32	s15, s14
 800144a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800144e:	db09      	blt.n	8001464 <effect_bass_pulse_glow+0x68>
 8001450:	4b27      	ldr	r3, [pc, #156]	@ (80014f0 <effect_bass_pulse_glow+0xf4>)
 8001452:	edd3 7a00 	vldr	s15, [r3]
 8001456:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 80014f4 <effect_bass_pulse_glow+0xf8>
 800145a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800145e:	4b24      	ldr	r3, [pc, #144]	@ (80014f0 <effect_bass_pulse_glow+0xf4>)
 8001460:	edc3 7a00 	vstr	s15, [r3]
    }

    // Tính độ sáng fade theo thời gian kể từ lần bass gần nhất
    uint32_t elapsed = now - last_bass_time;
 8001464:	4b21      	ldr	r3, [pc, #132]	@ (80014ec <effect_bass_pulse_glow+0xf0>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	697a      	ldr	r2, [r7, #20]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	613b      	str	r3, [r7, #16]
    int brightness;

    if (elapsed >= BASS_FADE_MS) {
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001474:	d302      	bcc.n	800147c <effect_bass_pulse_glow+0x80>
        brightness = 0;
 8001476:	2300      	movs	r3, #0
 8001478:	61fb      	str	r3, [r7, #28]
 800147a:	e00a      	b.n	8001492 <effect_bass_pulse_glow+0x96>
    } else {
        brightness = brightness_mode - (brightness_mode * elapsed) / BASS_FADE_MS;
 800147c:	78fa      	ldrb	r2, [r7, #3]
 800147e:	78fb      	ldrb	r3, [r7, #3]
 8001480:	6939      	ldr	r1, [r7, #16]
 8001482:	fb01 f303 	mul.w	r3, r1, r3
 8001486:	491c      	ldr	r1, [pc, #112]	@ (80014f8 <effect_bass_pulse_glow+0xfc>)
 8001488:	fba1 1303 	umull	r1, r3, r1, r3
 800148c:	095b      	lsrs	r3, r3, #5
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	61fb      	str	r3, [r7, #28]
    }

    // Chuyển hue → RGB
    uint8_t r, g, b;
    HSV_to_RGB(hue, 1.0f, 1.0f, &r, &g, &b);  // Độ sáng sẽ được điều chỉnh sau bằng Set_Brightness()
 8001492:	4b17      	ldr	r3, [pc, #92]	@ (80014f0 <effect_bass_pulse_glow+0xf4>)
 8001494:	edd3 7a00 	vldr	s15, [r3]
 8001498:	f107 020d 	add.w	r2, r7, #13
 800149c:	f107 010e 	add.w	r1, r7, #14
 80014a0:	f107 030f 	add.w	r3, r7, #15
 80014a4:	4618      	mov	r0, r3
 80014a6:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 80014aa:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80014ae:	eeb0 0a67 	vmov.f32	s0, s15
 80014b2:	f7ff fa49 	bl	8000948 <HSV_to_RGB>

    // Set toàn bộ LED thành màu đang có
    for (int i = 0; i < MAX_LED; i++) {
 80014b6:	2300      	movs	r3, #0
 80014b8:	61bb      	str	r3, [r7, #24]
 80014ba:	e00a      	b.n	80014d2 <effect_bass_pulse_glow+0xd6>
        Set_LED(i, r, g, b);
 80014bc:	7bfb      	ldrb	r3, [r7, #15]
 80014be:	4619      	mov	r1, r3
 80014c0:	7bbb      	ldrb	r3, [r7, #14]
 80014c2:	461a      	mov	r2, r3
 80014c4:	7b7b      	ldrb	r3, [r7, #13]
 80014c6:	69b8      	ldr	r0, [r7, #24]
 80014c8:	f7ff f924 	bl	8000714 <Set_LED>
    for (int i = 0; i < MAX_LED; i++) {
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	3301      	adds	r3, #1
 80014d0:	61bb      	str	r3, [r7, #24]
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	2b35      	cmp	r3, #53	@ 0x35
 80014d6:	ddf1      	ble.n	80014bc <effect_bass_pulse_glow+0xc0>
    }

    Set_Brightness(brightness);
 80014d8:	69f8      	ldr	r0, [r7, #28]
 80014da:	f7ff f949 	bl	8000770 <Set_Brightness>
    WS2812_Send();
 80014de:	f7ff f9c5 	bl	800086c <WS2812_Send>
}
 80014e2:	bf00      	nop
 80014e4:	3720      	adds	r7, #32
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20004e94 	.word	0x20004e94
 80014f0:	20004e98 	.word	0x20004e98
 80014f4:	43b40000 	.word	0x43b40000
 80014f8:	1b4e81b5 	.word	0x1b4e81b5

080014fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b088      	sub	sp, #32
 8001500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

  srand(HAL_GetTick());
 8001502:	f000 fe9d 	bl	8002240 <HAL_GetTick>
 8001506:	4603      	mov	r3, r0
 8001508:	4618      	mov	r0, r3
 800150a:	f005 f8ff 	bl	800670c <srand>
  uint8_t mode_button_index = 0;
 800150e:	2300      	movs	r3, #0
 8001510:	77fb      	strb	r3, [r7, #31]
  uint8_t brightness_button_count = 0;
 8001512:	2300      	movs	r3, #0
 8001514:	77bb      	strb	r3, [r7, #30]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001516:	f000 fe2d 	bl	8002174 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800151a:	f000 f945 	bl	80017a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800151e:	f000 fb0b 	bl	8001b38 <MX_GPIO_Init>
  MX_DMA_Init();
 8001522:	f000 fae9 	bl	8001af8 <MX_DMA_Init>
  MX_TIM1_Init();
 8001526:	f000 f9fb 	bl	8001920 <MX_TIM1_Init>
  MX_ADC1_Init();
 800152a:	f000 f9a7 	bl	800187c <MX_ADC1_Init>
  MX_TIM2_Init();
 800152e:	f000 fa97 	bl	8001a60 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim2);
 8001532:	488d      	ldr	r0, [pc, #564]	@ (8001768 <main+0x26c>)
 8001534:	f002 fe3c 	bl	80041b0 <HAL_TIM_Base_Start>
  HAL_ADC_Start_IT(&hadc1);
 8001538:	488c      	ldr	r0, [pc, #560]	@ (800176c <main+0x270>)
 800153a:	f000 fef5 	bl	8002328 <HAL_ADC_Start_IT>
  arm_rfft_fast_init_f32(&fftHandler, FFT_BUFFER_SIZE);
 800153e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001542:	488b      	ldr	r0, [pc, #556]	@ (8001770 <main+0x274>)
 8001544:	f004 f90e 	bl	8005764 <arm_rfft_fast_init_f32>
  HAL_Delay(50); // delay de co thoi gian de lay sample offset_point
 8001548:	2032      	movs	r0, #50	@ 0x32
 800154a:	f000 fe85 	bl	8002258 <HAL_Delay>

  float	peakVal	= 0.0f;
 800154e:	f04f 0300 	mov.w	r3, #0
 8001552:	61bb      	str	r3, [r7, #24]
  while (1)
  {

	/////////////////////////////////////////////////////////////////////////////////////////
	// FFT process
			  if (fftReady){
 8001554:	4b87      	ldr	r3, [pc, #540]	@ (8001774 <main+0x278>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d053      	beq.n	8001604 <main+0x108>
				  peakVal = 0.0f;
 800155c:	f04f 0300 	mov.w	r3, #0
 8001560:	61bb      	str	r3, [r7, #24]
				  peakHz = 0.0f;
 8001562:	4b85      	ldr	r3, [pc, #532]	@ (8001778 <main+0x27c>)
 8001564:	2200      	movs	r2, #0
 8001566:	801a      	strh	r2, [r3, #0]

				  uint16_t halfBins = FFT_BUFFER_SIZE / 2;
 8001568:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800156c:	82bb      	strh	r3, [r7, #20]
				  for (uint16_t k = 1; k < halfBins; k++) {
 800156e:	2301      	movs	r3, #1
 8001570:	82fb      	strh	r3, [r7, #22]
 8001572:	e040      	b.n	80015f6 <main+0xfa>
					  float re = fftBufOut[2 * k];
 8001574:	8afb      	ldrh	r3, [r7, #22]
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	4a80      	ldr	r2, [pc, #512]	@ (800177c <main+0x280>)
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	4413      	add	r3, r2
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	613b      	str	r3, [r7, #16]
					  float im = fftBufOut[2 * k + 1];
 8001582:	8afb      	ldrh	r3, [r7, #22]
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	3301      	adds	r3, #1
 8001588:	4a7c      	ldr	r2, [pc, #496]	@ (800177c <main+0x280>)
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	4413      	add	r3, r2
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	60fb      	str	r3, [r7, #12]
					  float mag = sqrtf(re * re + im * im);
 8001592:	edd7 7a04 	vldr	s15, [r7, #16]
 8001596:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800159a:	edd7 7a03 	vldr	s15, [r7, #12]
 800159e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80015a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015a6:	eeb0 0a67 	vmov.f32	s0, s15
 80015aa:	f006 f8d9 	bl	8007760 <sqrtf>
 80015ae:	ed87 0a02 	vstr	s0, [r7, #8]
					  if (mag > peakVal) {
 80015b2:	ed97 7a02 	vldr	s14, [r7, #8]
 80015b6:	edd7 7a06 	vldr	s15, [r7, #24]
 80015ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015c2:	dd15      	ble.n	80015f0 <main+0xf4>
						  peakVal = mag;
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	61bb      	str	r3, [r7, #24]
						  peakHz  = (uint16_t)(k  * SAMPLE_RATE_HZ / (float)(FFT_BUFFER_SIZE));
 80015c8:	8afb      	ldrh	r3, [r7, #22]
 80015ca:	ee07 3a90 	vmov	s15, r3
 80015ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015d2:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 8001780 <main+0x284>
 80015d6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80015da:	eddf 6a6a 	vldr	s13, [pc, #424]	@ 8001784 <main+0x288>
 80015de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015e6:	ee17 3a90 	vmov	r3, s15
 80015ea:	b29a      	uxth	r2, r3
 80015ec:	4b62      	ldr	r3, [pc, #392]	@ (8001778 <main+0x27c>)
 80015ee:	801a      	strh	r2, [r3, #0]
				  for (uint16_t k = 1; k < halfBins; k++) {
 80015f0:	8afb      	ldrh	r3, [r7, #22]
 80015f2:	3301      	adds	r3, #1
 80015f4:	82fb      	strh	r3, [r7, #22]
 80015f6:	8afa      	ldrh	r2, [r7, #22]
 80015f8:	8abb      	ldrh	r3, [r7, #20]
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d3ba      	bcc.n	8001574 <main+0x78>
					  }
				  }

				  fftReady = 0;
 80015fe:	4b5d      	ldr	r3, [pc, #372]	@ (8001774 <main+0x278>)
 8001600:	2200      	movs	r2, #0
 8001602:	701a      	strb	r2, [r3, #0]
			  }
	/////////////////////////////////////////////////////////////////////////////////////////
	// Effects
			  if(HAL_GPIO_ReadPin(MODE_BUTTON_GPIO_Port, MODE_BUTTON_Pin) == 0) {
 8001604:	2110      	movs	r1, #16
 8001606:	4860      	ldr	r0, [pc, #384]	@ (8001788 <main+0x28c>)
 8001608:	f002 f906 	bl	8003818 <HAL_GPIO_ReadPin>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d115      	bne.n	800163e <main+0x142>
				  while(HAL_GPIO_ReadPin(MODE_BUTTON_GPIO_Port, MODE_BUTTON_Pin) == 0) {}
 8001612:	bf00      	nop
 8001614:	2110      	movs	r1, #16
 8001616:	485c      	ldr	r0, [pc, #368]	@ (8001788 <main+0x28c>)
 8001618:	f002 f8fe 	bl	8003818 <HAL_GPIO_ReadPin>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d0f8      	beq.n	8001614 <main+0x118>
				  mode_button_index = (mode_button_index + 1) % 6;
 8001622:	7ffb      	ldrb	r3, [r7, #31]
 8001624:	1c5a      	adds	r2, r3, #1
 8001626:	4b59      	ldr	r3, [pc, #356]	@ (800178c <main+0x290>)
 8001628:	fb83 3102 	smull	r3, r1, r3, r2
 800162c:	17d3      	asrs	r3, r2, #31
 800162e:	1ac9      	subs	r1, r1, r3
 8001630:	460b      	mov	r3, r1
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	440b      	add	r3, r1
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	1ad1      	subs	r1, r2, r3
 800163a:	460b      	mov	r3, r1
 800163c:	77fb      	strb	r3, [r7, #31]
			  }

			  switch (mode_button_index) {
 800163e:	7ffb      	ldrb	r3, [r7, #31]
 8001640:	2b05      	cmp	r3, #5
 8001642:	d84b      	bhi.n	80016dc <main+0x1e0>
 8001644:	a201      	add	r2, pc, #4	@ (adr r2, 800164c <main+0x150>)
 8001646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800164a:	bf00      	nop
 800164c:	08001665 	.word	0x08001665
 8001650:	08001679 	.word	0x08001679
 8001654:	0800168d 	.word	0x0800168d
 8001658:	080016a1 	.word	0x080016a1
 800165c:	080016b5 	.word	0x080016b5
 8001660:	080016c9 	.word	0x080016c9
			  	  case 0: effect_flash_fade_random_color(amp, peakHz, brightness_mode); break;
 8001664:	4b4a      	ldr	r3, [pc, #296]	@ (8001790 <main+0x294>)
 8001666:	881b      	ldrh	r3, [r3, #0]
 8001668:	4a43      	ldr	r2, [pc, #268]	@ (8001778 <main+0x27c>)
 800166a:	8811      	ldrh	r1, [r2, #0]
 800166c:	4a49      	ldr	r2, [pc, #292]	@ (8001794 <main+0x298>)
 800166e:	7812      	ldrb	r2, [r2, #0]
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff faa3 	bl	8000bbc <effect_flash_fade_random_color>
 8001676:	e03b      	b.n	80016f0 <main+0x1f4>
			  	  case 1: effect_dynamic_vu_meter(amp, peakHz, brightness_mode); break;
 8001678:	4b45      	ldr	r3, [pc, #276]	@ (8001790 <main+0x294>)
 800167a:	881b      	ldrh	r3, [r3, #0]
 800167c:	4a3e      	ldr	r2, [pc, #248]	@ (8001778 <main+0x27c>)
 800167e:	8811      	ldrh	r1, [r2, #0]
 8001680:	4a44      	ldr	r2, [pc, #272]	@ (8001794 <main+0x298>)
 8001682:	7812      	ldrb	r2, [r2, #0]
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff fafb 	bl	8000c80 <effect_dynamic_vu_meter>
 800168a:	e031      	b.n	80016f0 <main+0x1f4>
			  	  case 2: effect_spectrum_color_bands(amp, peakHz, brightness_mode); break;
 800168c:	4b40      	ldr	r3, [pc, #256]	@ (8001790 <main+0x294>)
 800168e:	881b      	ldrh	r3, [r3, #0]
 8001690:	4a39      	ldr	r2, [pc, #228]	@ (8001778 <main+0x27c>)
 8001692:	8811      	ldrh	r1, [r2, #0]
 8001694:	4a3f      	ldr	r2, [pc, #252]	@ (8001794 <main+0x298>)
 8001696:	7812      	ldrb	r2, [r2, #0]
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff fb99 	bl	8000dd0 <effect_spectrum_color_bands>
 800169e:	e027      	b.n	80016f0 <main+0x1f4>
			  	  case 3: effect_frequency_chase_gradient(amp, peakHz, brightness_mode); break;
 80016a0:	4b3b      	ldr	r3, [pc, #236]	@ (8001790 <main+0x294>)
 80016a2:	881b      	ldrh	r3, [r3, #0]
 80016a4:	4a34      	ldr	r2, [pc, #208]	@ (8001778 <main+0x27c>)
 80016a6:	8811      	ldrh	r1, [r2, #0]
 80016a8:	4a3a      	ldr	r2, [pc, #232]	@ (8001794 <main+0x298>)
 80016aa:	7812      	ldrb	r2, [r2, #0]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff fc35 	bl	8000f1c <effect_frequency_chase_gradient>
 80016b2:	e01d      	b.n	80016f0 <main+0x1f4>
			  	  case 4: effect_rainbow_roll(amp, peakHz, brightness_mode); break;
 80016b4:	4b36      	ldr	r3, [pc, #216]	@ (8001790 <main+0x294>)
 80016b6:	881b      	ldrh	r3, [r3, #0]
 80016b8:	4a2f      	ldr	r2, [pc, #188]	@ (8001778 <main+0x27c>)
 80016ba:	8811      	ldrh	r1, [r2, #0]
 80016bc:	4a35      	ldr	r2, [pc, #212]	@ (8001794 <main+0x298>)
 80016be:	7812      	ldrb	r2, [r2, #0]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff fdf9 	bl	80012b8 <effect_rainbow_roll>
 80016c6:	e013      	b.n	80016f0 <main+0x1f4>
			  	  case 5: effect_bass_pulse_glow(amp, peakHz, brightness_mode); break;
 80016c8:	4b31      	ldr	r3, [pc, #196]	@ (8001790 <main+0x294>)
 80016ca:	881b      	ldrh	r3, [r3, #0]
 80016cc:	4a2a      	ldr	r2, [pc, #168]	@ (8001778 <main+0x27c>)
 80016ce:	8811      	ldrh	r1, [r2, #0]
 80016d0:	4a30      	ldr	r2, [pc, #192]	@ (8001794 <main+0x298>)
 80016d2:	7812      	ldrb	r2, [r2, #0]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff fe91 	bl	80013fc <effect_bass_pulse_glow>
 80016da:	e009      	b.n	80016f0 <main+0x1f4>
			  	  default: effect_flash_fade_random_color(amp, peakHz, brightness_mode); break;
 80016dc:	4b2c      	ldr	r3, [pc, #176]	@ (8001790 <main+0x294>)
 80016de:	881b      	ldrh	r3, [r3, #0]
 80016e0:	4a25      	ldr	r2, [pc, #148]	@ (8001778 <main+0x27c>)
 80016e2:	8811      	ldrh	r1, [r2, #0]
 80016e4:	4a2b      	ldr	r2, [pc, #172]	@ (8001794 <main+0x298>)
 80016e6:	7812      	ldrb	r2, [r2, #0]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff fa67 	bl	8000bbc <effect_flash_fade_random_color>
 80016ee:	bf00      	nop
			  }

			  if(HAL_GPIO_ReadPin(BRIGHTNESS_MODE_BUTTON_GPIO_Port, BRIGHTNESS_MODE_BUTTON_Pin) == 0) {
 80016f0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80016f4:	4828      	ldr	r0, [pc, #160]	@ (8001798 <main+0x29c>)
 80016f6:	f002 f88f 	bl	8003818 <HAL_GPIO_ReadPin>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d12f      	bne.n	8001760 <main+0x264>
				  while(HAL_GPIO_ReadPin(BRIGHTNESS_MODE_BUTTON_GPIO_Port, BRIGHTNESS_MODE_BUTTON_Pin) == 0) {}
 8001700:	bf00      	nop
 8001702:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001706:	4824      	ldr	r0, [pc, #144]	@ (8001798 <main+0x29c>)
 8001708:	f002 f886 	bl	8003818 <HAL_GPIO_ReadPin>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d0f7      	beq.n	8001702 <main+0x206>
				  brightness_mode = (uint8_t)((float)MAX_BRIGHTNESS * ((25.0f * (float)brightness_button_count) / 100.0f));
 8001712:	7fbb      	ldrb	r3, [r7, #30]
 8001714:	ee07 3a90 	vmov	s15, r3
 8001718:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800171c:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8001720:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001724:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 800179c <main+0x2a0>
 8001728:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800172c:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 80017a0 <main+0x2a4>
 8001730:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001734:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001738:	edc7 7a01 	vstr	s15, [r7, #4]
 800173c:	793b      	ldrb	r3, [r7, #4]
 800173e:	b2da      	uxtb	r2, r3
 8001740:	4b14      	ldr	r3, [pc, #80]	@ (8001794 <main+0x298>)
 8001742:	701a      	strb	r2, [r3, #0]
				  brightness_button_count = (brightness_button_count + 1) % 5;
 8001744:	7fbb      	ldrb	r3, [r7, #30]
 8001746:	1c5a      	adds	r2, r3, #1
 8001748:	4b16      	ldr	r3, [pc, #88]	@ (80017a4 <main+0x2a8>)
 800174a:	fb83 1302 	smull	r1, r3, r3, r2
 800174e:	1059      	asrs	r1, r3, #1
 8001750:	17d3      	asrs	r3, r2, #31
 8001752:	1ac9      	subs	r1, r1, r3
 8001754:	460b      	mov	r3, r1
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	440b      	add	r3, r1
 800175a:	1ad1      	subs	r1, r2, r3
 800175c:	460b      	mov	r3, r1
 800175e:	77bb      	strb	r3, [r7, #30]
			  }
		  HAL_Delay(2);
 8001760:	2002      	movs	r0, #2
 8001762:	f000 fd79 	bl	8002258 <HAL_Delay>
			  if (fftReady){
 8001766:	e6f5      	b.n	8001554 <main+0x58>
 8001768:	2000011c 	.word	0x2000011c
 800176c:	2000008c 	.word	0x2000008c
 8001770:	20000e08 	.word	0x20000e08
 8001774:	20004e22 	.word	0x20004e22
 8001778:	20000e04 	.word	0x20000e04
 800177c:	20002e20 	.word	0x20002e20
 8001780:	46610000 	.word	0x46610000
 8001784:	45000000 	.word	0x45000000
 8001788:	40020000 	.word	0x40020000
 800178c:	2aaaaaab 	.word	0x2aaaaaab
 8001790:	200001c4 	.word	0x200001c4
 8001794:	20000000 	.word	0x20000000
 8001798:	40021000 	.word	0x40021000
 800179c:	42c80000 	.word	0x42c80000
 80017a0:	437f0000 	.word	0x437f0000
 80017a4:	66666667 	.word	0x66666667

080017a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b094      	sub	sp, #80	@ 0x50
 80017ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ae:	f107 0320 	add.w	r3, r7, #32
 80017b2:	2230      	movs	r2, #48	@ 0x30
 80017b4:	2100      	movs	r1, #0
 80017b6:	4618      	mov	r0, r3
 80017b8:	f005 f919 	bl	80069ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017bc:	f107 030c 	add.w	r3, r7, #12
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017cc:	2300      	movs	r3, #0
 80017ce:	60bb      	str	r3, [r7, #8]
 80017d0:	4b28      	ldr	r3, [pc, #160]	@ (8001874 <SystemClock_Config+0xcc>)
 80017d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d4:	4a27      	ldr	r2, [pc, #156]	@ (8001874 <SystemClock_Config+0xcc>)
 80017d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017da:	6413      	str	r3, [r2, #64]	@ 0x40
 80017dc:	4b25      	ldr	r3, [pc, #148]	@ (8001874 <SystemClock_Config+0xcc>)
 80017de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017e4:	60bb      	str	r3, [r7, #8]
 80017e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017e8:	2300      	movs	r3, #0
 80017ea:	607b      	str	r3, [r7, #4]
 80017ec:	4b22      	ldr	r3, [pc, #136]	@ (8001878 <SystemClock_Config+0xd0>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a21      	ldr	r2, [pc, #132]	@ (8001878 <SystemClock_Config+0xd0>)
 80017f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017f6:	6013      	str	r3, [r2, #0]
 80017f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001878 <SystemClock_Config+0xd0>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001800:	607b      	str	r3, [r7, #4]
 8001802:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001804:	2302      	movs	r3, #2
 8001806:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001808:	2301      	movs	r3, #1
 800180a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800180c:	2310      	movs	r3, #16
 800180e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001810:	2302      	movs	r3, #2
 8001812:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001814:	2300      	movs	r3, #0
 8001816:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001818:	2308      	movs	r3, #8
 800181a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800181c:	2348      	movs	r3, #72	@ 0x48
 800181e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001820:	2302      	movs	r3, #2
 8001822:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001824:	2304      	movs	r3, #4
 8001826:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001828:	f107 0320 	add.w	r3, r7, #32
 800182c:	4618      	mov	r0, r3
 800182e:	f002 f80b 	bl	8003848 <HAL_RCC_OscConfig>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001838:	f000 fa28 	bl	8001c8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800183c:	230f      	movs	r3, #15
 800183e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001840:	2302      	movs	r3, #2
 8001842:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001844:	2300      	movs	r3, #0
 8001846:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001848:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800184c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800184e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001852:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001854:	f107 030c 	add.w	r3, r7, #12
 8001858:	2102      	movs	r1, #2
 800185a:	4618      	mov	r0, r3
 800185c:	f002 fa6c 	bl	8003d38 <HAL_RCC_ClockConfig>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001866:	f000 fa11 	bl	8001c8c <Error_Handler>
  }
}
 800186a:	bf00      	nop
 800186c:	3750      	adds	r7, #80	@ 0x50
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40023800 	.word	0x40023800
 8001878:	40007000 	.word	0x40007000

0800187c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001882:	463b      	mov	r3, r7
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800188e:	4b22      	ldr	r3, [pc, #136]	@ (8001918 <MX_ADC1_Init+0x9c>)
 8001890:	4a22      	ldr	r2, [pc, #136]	@ (800191c <MX_ADC1_Init+0xa0>)
 8001892:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001894:	4b20      	ldr	r3, [pc, #128]	@ (8001918 <MX_ADC1_Init+0x9c>)
 8001896:	2200      	movs	r2, #0
 8001898:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800189a:	4b1f      	ldr	r3, [pc, #124]	@ (8001918 <MX_ADC1_Init+0x9c>)
 800189c:	2200      	movs	r2, #0
 800189e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80018a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001918 <MX_ADC1_Init+0x9c>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80018a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001918 <MX_ADC1_Init+0x9c>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001918 <MX_ADC1_Init+0x9c>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80018b4:	4b18      	ldr	r3, [pc, #96]	@ (8001918 <MX_ADC1_Init+0x9c>)
 80018b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80018ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80018bc:	4b16      	ldr	r3, [pc, #88]	@ (8001918 <MX_ADC1_Init+0x9c>)
 80018be:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80018c2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018c4:	4b14      	ldr	r3, [pc, #80]	@ (8001918 <MX_ADC1_Init+0x9c>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80018ca:	4b13      	ldr	r3, [pc, #76]	@ (8001918 <MX_ADC1_Init+0x9c>)
 80018cc:	2201      	movs	r2, #1
 80018ce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80018d0:	4b11      	ldr	r3, [pc, #68]	@ (8001918 <MX_ADC1_Init+0x9c>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001918 <MX_ADC1_Init+0x9c>)
 80018da:	2201      	movs	r2, #1
 80018dc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80018de:	480e      	ldr	r0, [pc, #56]	@ (8001918 <MX_ADC1_Init+0x9c>)
 80018e0:	f000 fcde 	bl	80022a0 <HAL_ADC_Init>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 80018ea:	f000 f9cf 	bl	8001c8c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80018ee:	2300      	movs	r3, #0
 80018f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80018f2:	2301      	movs	r3, #1
 80018f4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80018f6:	2301      	movs	r3, #1
 80018f8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018fa:	463b      	mov	r3, r7
 80018fc:	4619      	mov	r1, r3
 80018fe:	4806      	ldr	r0, [pc, #24]	@ (8001918 <MX_ADC1_Init+0x9c>)
 8001900:	f000 ff22 	bl	8002748 <HAL_ADC_ConfigChannel>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800190a:	f000 f9bf 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800190e:	bf00      	nop
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	2000008c 	.word	0x2000008c
 800191c:	40012000 	.word	0x40012000

08001920 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b096      	sub	sp, #88	@ 0x58
 8001924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001926:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]
 800192e:	605a      	str	r2, [r3, #4]
 8001930:	609a      	str	r2, [r3, #8]
 8001932:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001934:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800193e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001942:	2200      	movs	r2, #0
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	605a      	str	r2, [r3, #4]
 8001948:	609a      	str	r2, [r3, #8]
 800194a:	60da      	str	r2, [r3, #12]
 800194c:	611a      	str	r2, [r3, #16]
 800194e:	615a      	str	r2, [r3, #20]
 8001950:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001952:	1d3b      	adds	r3, r7, #4
 8001954:	2220      	movs	r2, #32
 8001956:	2100      	movs	r1, #0
 8001958:	4618      	mov	r0, r3
 800195a:	f005 f848 	bl	80069ee <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800195e:	4b3e      	ldr	r3, [pc, #248]	@ (8001a58 <MX_TIM1_Init+0x138>)
 8001960:	4a3e      	ldr	r2, [pc, #248]	@ (8001a5c <MX_TIM1_Init+0x13c>)
 8001962:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001964:	4b3c      	ldr	r3, [pc, #240]	@ (8001a58 <MX_TIM1_Init+0x138>)
 8001966:	2200      	movs	r2, #0
 8001968:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800196a:	4b3b      	ldr	r3, [pc, #236]	@ (8001a58 <MX_TIM1_Init+0x138>)
 800196c:	2200      	movs	r2, #0
 800196e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90 - 1;
 8001970:	4b39      	ldr	r3, [pc, #228]	@ (8001a58 <MX_TIM1_Init+0x138>)
 8001972:	2259      	movs	r2, #89	@ 0x59
 8001974:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001976:	4b38      	ldr	r3, [pc, #224]	@ (8001a58 <MX_TIM1_Init+0x138>)
 8001978:	2200      	movs	r2, #0
 800197a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800197c:	4b36      	ldr	r3, [pc, #216]	@ (8001a58 <MX_TIM1_Init+0x138>)
 800197e:	2200      	movs	r2, #0
 8001980:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001982:	4b35      	ldr	r3, [pc, #212]	@ (8001a58 <MX_TIM1_Init+0x138>)
 8001984:	2200      	movs	r2, #0
 8001986:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001988:	4833      	ldr	r0, [pc, #204]	@ (8001a58 <MX_TIM1_Init+0x138>)
 800198a:	f002 fbc1 	bl	8004110 <HAL_TIM_Base_Init>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001994:	f000 f97a 	bl	8001c8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001998:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800199c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800199e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80019a2:	4619      	mov	r1, r3
 80019a4:	482c      	ldr	r0, [pc, #176]	@ (8001a58 <MX_TIM1_Init+0x138>)
 80019a6:	f003 f911 	bl	8004bcc <HAL_TIM_ConfigClockSource>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80019b0:	f000 f96c 	bl	8001c8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80019b4:	4828      	ldr	r0, [pc, #160]	@ (8001a58 <MX_TIM1_Init+0x138>)
 80019b6:	f002 fc63 	bl	8004280 <HAL_TIM_PWM_Init>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80019c0:	f000 f964 	bl	8001c8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019c4:	2300      	movs	r3, #0
 80019c6:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019c8:	2300      	movs	r3, #0
 80019ca:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019cc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80019d0:	4619      	mov	r1, r3
 80019d2:	4821      	ldr	r0, [pc, #132]	@ (8001a58 <MX_TIM1_Init+0x138>)
 80019d4:	f003 fde4 	bl	80055a0 <HAL_TIMEx_MasterConfigSynchronization>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80019de:	f000 f955 	bl	8001c8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019e2:	2360      	movs	r3, #96	@ 0x60
 80019e4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80019e6:	2300      	movs	r3, #0
 80019e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019ea:	2300      	movs	r3, #0
 80019ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019ee:	2300      	movs	r3, #0
 80019f0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019f2:	2300      	movs	r3, #0
 80019f4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019f6:	2300      	movs	r3, #0
 80019f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019fa:	2300      	movs	r3, #0
 80019fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a02:	2200      	movs	r2, #0
 8001a04:	4619      	mov	r1, r3
 8001a06:	4814      	ldr	r0, [pc, #80]	@ (8001a58 <MX_TIM1_Init+0x138>)
 8001a08:	f003 f81e 	bl	8004a48 <HAL_TIM_PWM_ConfigChannel>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001a12:	f000 f93b 	bl	8001c8c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a16:	2300      	movs	r3, #0
 8001a18:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a22:	2300      	movs	r3, #0
 8001a24:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a26:	2300      	movs	r3, #0
 8001a28:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a2a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a2e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a30:	2300      	movs	r3, #0
 8001a32:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a34:	1d3b      	adds	r3, r7, #4
 8001a36:	4619      	mov	r1, r3
 8001a38:	4807      	ldr	r0, [pc, #28]	@ (8001a58 <MX_TIM1_Init+0x138>)
 8001a3a:	f003 fe2d 	bl	8005698 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001a44:	f000 f922 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a48:	4803      	ldr	r0, [pc, #12]	@ (8001a58 <MX_TIM1_Init+0x138>)
 8001a4a:	f000 fa09 	bl	8001e60 <HAL_TIM_MspPostInit>

}
 8001a4e:	bf00      	nop
 8001a50:	3758      	adds	r7, #88	@ 0x58
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	200000d4 	.word	0x200000d4
 8001a5c:	40010000 	.word	0x40010000

08001a60 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a66:	f107 0308 	add.w	r3, r7, #8
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	605a      	str	r2, [r3, #4]
 8001a70:	609a      	str	r2, [r3, #8]
 8001a72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a74:	463b      	mov	r3, r7
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a7c:	4b1d      	ldr	r3, [pc, #116]	@ (8001af4 <MX_TIM2_Init+0x94>)
 8001a7e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a82:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 8001a84:	4b1b      	ldr	r3, [pc, #108]	@ (8001af4 <MX_TIM2_Init+0x94>)
 8001a86:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001a8a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a8c:	4b19      	ldr	r3, [pc, #100]	@ (8001af4 <MX_TIM2_Init+0x94>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4;
 8001a92:	4b18      	ldr	r3, [pc, #96]	@ (8001af4 <MX_TIM2_Init+0x94>)
 8001a94:	2204      	movs	r2, #4
 8001a96:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a98:	4b16      	ldr	r3, [pc, #88]	@ (8001af4 <MX_TIM2_Init+0x94>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a9e:	4b15      	ldr	r3, [pc, #84]	@ (8001af4 <MX_TIM2_Init+0x94>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001aa4:	4813      	ldr	r0, [pc, #76]	@ (8001af4 <MX_TIM2_Init+0x94>)
 8001aa6:	f002 fb33 	bl	8004110 <HAL_TIM_Base_Init>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001ab0:	f000 f8ec 	bl	8001c8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ab4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ab8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001aba:	f107 0308 	add.w	r3, r7, #8
 8001abe:	4619      	mov	r1, r3
 8001ac0:	480c      	ldr	r0, [pc, #48]	@ (8001af4 <MX_TIM2_Init+0x94>)
 8001ac2:	f003 f883 	bl	8004bcc <HAL_TIM_ConfigClockSource>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001acc:	f000 f8de 	bl	8001c8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001ad0:	2320      	movs	r3, #32
 8001ad2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ad8:	463b      	mov	r3, r7
 8001ada:	4619      	mov	r1, r3
 8001adc:	4805      	ldr	r0, [pc, #20]	@ (8001af4 <MX_TIM2_Init+0x94>)
 8001ade:	f003 fd5f 	bl	80055a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001ae8:	f000 f8d0 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001aec:	bf00      	nop
 8001aee:	3718      	adds	r7, #24
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	2000011c 	.word	0x2000011c

08001af8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	607b      	str	r3, [r7, #4]
 8001b02:	4b0c      	ldr	r3, [pc, #48]	@ (8001b34 <MX_DMA_Init+0x3c>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b06:	4a0b      	ldr	r2, [pc, #44]	@ (8001b34 <MX_DMA_Init+0x3c>)
 8001b08:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001b0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b0e:	4b09      	ldr	r3, [pc, #36]	@ (8001b34 <MX_DMA_Init+0x3c>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b16:	607b      	str	r3, [r7, #4]
 8001b18:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	2105      	movs	r1, #5
 8001b1e:	2039      	movs	r0, #57	@ 0x39
 8001b20:	f001 f915 	bl	8002d4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001b24:	2039      	movs	r0, #57	@ 0x39
 8001b26:	f001 f92e 	bl	8002d86 <HAL_NVIC_EnableIRQ>

}
 8001b2a:	bf00      	nop
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40023800 	.word	0x40023800

08001b38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b088      	sub	sp, #32
 8001b3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b3e:	f107 030c 	add.w	r3, r7, #12
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	605a      	str	r2, [r3, #4]
 8001b48:	609a      	str	r2, [r3, #8]
 8001b4a:	60da      	str	r2, [r3, #12]
 8001b4c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60bb      	str	r3, [r7, #8]
 8001b52:	4b21      	ldr	r3, [pc, #132]	@ (8001bd8 <MX_GPIO_Init+0xa0>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b56:	4a20      	ldr	r2, [pc, #128]	@ (8001bd8 <MX_GPIO_Init+0xa0>)
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b5e:	4b1e      	ldr	r3, [pc, #120]	@ (8001bd8 <MX_GPIO_Init+0xa0>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	60bb      	str	r3, [r7, #8]
 8001b68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	607b      	str	r3, [r7, #4]
 8001b6e:	4b1a      	ldr	r3, [pc, #104]	@ (8001bd8 <MX_GPIO_Init+0xa0>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b72:	4a19      	ldr	r2, [pc, #100]	@ (8001bd8 <MX_GPIO_Init+0xa0>)
 8001b74:	f043 0310 	orr.w	r3, r3, #16
 8001b78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b7a:	4b17      	ldr	r3, [pc, #92]	@ (8001bd8 <MX_GPIO_Init+0xa0>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7e:	f003 0310 	and.w	r3, r3, #16
 8001b82:	607b      	str	r3, [r7, #4]
 8001b84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : MODE_BUTTON_Pin */
  GPIO_InitStruct.Pin = MODE_BUTTON_Pin;
 8001b86:	2310      	movs	r3, #16
 8001b88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MODE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001b92:	f107 030c 	add.w	r3, r7, #12
 8001b96:	4619      	mov	r1, r3
 8001b98:	4810      	ldr	r0, [pc, #64]	@ (8001bdc <MX_GPIO_Init+0xa4>)
 8001b9a:	f001 fca1 	bl	80034e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BRIGHTNESS_MODE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BRIGHTNESS_MODE_BUTTON_Pin;
 8001b9e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001ba2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BRIGHTNESS_MODE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001bac:	f107 030c 	add.w	r3, r7, #12
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	480b      	ldr	r0, [pc, #44]	@ (8001be0 <MX_GPIO_Init+0xa8>)
 8001bb4:	f001 fc94 	bl	80034e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
     GPIO_InitStruct.Pin  = GPIO_PIN_0;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	60fb      	str	r3, [r7, #12]
     GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	613b      	str	r3, [r7, #16]
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	617b      	str	r3, [r7, #20]
     HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc4:	f107 030c 	add.w	r3, r7, #12
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4804      	ldr	r0, [pc, #16]	@ (8001bdc <MX_GPIO_Init+0xa4>)
 8001bcc:	f001 fc88 	bl	80034e0 <HAL_GPIO_Init>
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001bd0:	bf00      	nop
 8001bd2:	3720      	adds	r7, #32
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	40020000 	.word	0x40020000
 8001be0:	40021000 	.word	0x40021000

08001be4 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]

	if (hadc->Instance == ADC1)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a21      	ldr	r2, [pc, #132]	@ (8001c78 <HAL_ADC_ConvCpltCallback+0x94>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d13c      	bne.n	8001c70 <HAL_ADC_ConvCpltCallback+0x8c>
	    {

			uint16_t raw = HAL_ADC_GetValue(&hadc1);
 8001bf6:	4821      	ldr	r0, [pc, #132]	@ (8001c7c <HAL_ADC_ConvCpltCallback+0x98>)
 8001bf8:	f000 fd84 	bl	8002704 <HAL_ADC_GetValue>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	81fb      	strh	r3, [r7, #14]

			// Tinh toan middle point tu 32 sample dau tien
			if ( middle_point_index > 0){
 8001c00:	4b1f      	ldr	r3, [pc, #124]	@ (8001c80 <HAL_ADC_ConvCpltCallback+0x9c>)
 8001c02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	dd0f      	ble.n	8001c2a <HAL_ADC_ConvCpltCallback+0x46>
				middle_point += raw;
 8001c0a:	89fa      	ldrh	r2, [r7, #14]
 8001c0c:	4b1d      	ldr	r3, [pc, #116]	@ (8001c84 <HAL_ADC_ConvCpltCallback+0xa0>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4413      	add	r3, r2
 8001c12:	4a1c      	ldr	r2, [pc, #112]	@ (8001c84 <HAL_ADC_ConvCpltCallback+0xa0>)
 8001c14:	6013      	str	r3, [r2, #0]
				middle_point_index--;
 8001c16:	4b1a      	ldr	r3, [pc, #104]	@ (8001c80 <HAL_ADC_ConvCpltCallback+0x9c>)
 8001c18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	b21a      	sxth	r2, r3
 8001c24:	4b16      	ldr	r3, [pc, #88]	@ (8001c80 <HAL_ADC_ConvCpltCallback+0x9c>)
 8001c26:	801a      	strh	r2, [r3, #0]
 8001c28:	e017      	b.n	8001c5a <HAL_ADC_ConvCpltCallback+0x76>
			}

			else if (middle_point_index == 0){
 8001c2a:	4b15      	ldr	r3, [pc, #84]	@ (8001c80 <HAL_ADC_ConvCpltCallback+0x9c>)
 8001c2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d10e      	bne.n	8001c52 <HAL_ADC_ConvCpltCallback+0x6e>
				middle_point/= 32;
 8001c34:	4b13      	ldr	r3, [pc, #76]	@ (8001c84 <HAL_ADC_ConvCpltCallback+0xa0>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	095b      	lsrs	r3, r3, #5
 8001c3a:	4a12      	ldr	r2, [pc, #72]	@ (8001c84 <HAL_ADC_ConvCpltCallback+0xa0>)
 8001c3c:	6013      	str	r3, [r2, #0]
				middle_point_index--;
 8001c3e:	4b10      	ldr	r3, [pc, #64]	@ (8001c80 <HAL_ADC_ConvCpltCallback+0x9c>)
 8001c40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	3b01      	subs	r3, #1
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	b21a      	sxth	r2, r3
 8001c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c80 <HAL_ADC_ConvCpltCallback+0x9c>)
 8001c4e:	801a      	strh	r2, [r3, #0]
 8001c50:	e003      	b.n	8001c5a <HAL_ADC_ConvCpltCallback+0x76>
			}

			else{
			// Ghi sample vao fftBufIn
				record_sample_and_maybe_runFFT(raw);
 8001c52:	89fb      	ldrh	r3, [r7, #14]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7fe fd01 	bl	800065c <record_sample_and_maybe_runFFT>
			}

	        amp = abs(raw - (uint16_t)middle_point);
 8001c5a:	89fb      	ldrh	r3, [r7, #14]
 8001c5c:	4a09      	ldr	r2, [pc, #36]	@ (8001c84 <HAL_ADC_ConvCpltCallback+0xa0>)
 8001c5e:	6812      	ldr	r2, [r2, #0]
 8001c60:	b292      	uxth	r2, r2
 8001c62:	1a9b      	subs	r3, r3, r2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	bfb8      	it	lt
 8001c68:	425b      	neglt	r3, r3
 8001c6a:	b29a      	uxth	r2, r3
 8001c6c:	4b06      	ldr	r3, [pc, #24]	@ (8001c88 <HAL_ADC_ConvCpltCallback+0xa4>)
 8001c6e:	801a      	strh	r2, [r3, #0]


	    }

}
 8001c70:	bf00      	nop
 8001c72:	3710      	adds	r7, #16
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40012000 	.word	0x40012000
 8001c7c:	2000008c 	.word	0x2000008c
 8001c80:	20000002 	.word	0x20000002
 8001c84:	20000e00 	.word	0x20000e00
 8001c88:	200001c4 	.word	0x200001c4

08001c8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c90:	b672      	cpsid	i
}
 8001c92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c94:	bf00      	nop
 8001c96:	e7fd      	b.n	8001c94 <Error_Handler+0x8>

08001c98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	607b      	str	r3, [r7, #4]
 8001ca2:	4b10      	ldr	r3, [pc, #64]	@ (8001ce4 <HAL_MspInit+0x4c>)
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ca6:	4a0f      	ldr	r2, [pc, #60]	@ (8001ce4 <HAL_MspInit+0x4c>)
 8001ca8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cac:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cae:	4b0d      	ldr	r3, [pc, #52]	@ (8001ce4 <HAL_MspInit+0x4c>)
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cb6:	607b      	str	r3, [r7, #4]
 8001cb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	603b      	str	r3, [r7, #0]
 8001cbe:	4b09      	ldr	r3, [pc, #36]	@ (8001ce4 <HAL_MspInit+0x4c>)
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc2:	4a08      	ldr	r2, [pc, #32]	@ (8001ce4 <HAL_MspInit+0x4c>)
 8001cc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cca:	4b06      	ldr	r3, [pc, #24]	@ (8001ce4 <HAL_MspInit+0x4c>)
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cd2:	603b      	str	r3, [r7, #0]
 8001cd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	40023800 	.word	0x40023800

08001ce8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b08a      	sub	sp, #40	@ 0x28
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf0:	f107 0314 	add.w	r3, r7, #20
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	605a      	str	r2, [r3, #4]
 8001cfa:	609a      	str	r2, [r3, #8]
 8001cfc:	60da      	str	r2, [r3, #12]
 8001cfe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a1b      	ldr	r2, [pc, #108]	@ (8001d74 <HAL_ADC_MspInit+0x8c>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d12f      	bne.n	8001d6a <HAL_ADC_MspInit+0x82>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	613b      	str	r3, [r7, #16]
 8001d0e:	4b1a      	ldr	r3, [pc, #104]	@ (8001d78 <HAL_ADC_MspInit+0x90>)
 8001d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d12:	4a19      	ldr	r2, [pc, #100]	@ (8001d78 <HAL_ADC_MspInit+0x90>)
 8001d14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d18:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d1a:	4b17      	ldr	r3, [pc, #92]	@ (8001d78 <HAL_ADC_MspInit+0x90>)
 8001d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d22:	613b      	str	r3, [r7, #16]
 8001d24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	60fb      	str	r3, [r7, #12]
 8001d2a:	4b13      	ldr	r3, [pc, #76]	@ (8001d78 <HAL_ADC_MspInit+0x90>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d2e:	4a12      	ldr	r2, [pc, #72]	@ (8001d78 <HAL_ADC_MspInit+0x90>)
 8001d30:	f043 0301 	orr.w	r3, r3, #1
 8001d34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d36:	4b10      	ldr	r3, [pc, #64]	@ (8001d78 <HAL_ADC_MspInit+0x90>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	60fb      	str	r3, [r7, #12]
 8001d40:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d42:	2301      	movs	r3, #1
 8001d44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d46:	2303      	movs	r3, #3
 8001d48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d4e:	f107 0314 	add.w	r3, r7, #20
 8001d52:	4619      	mov	r1, r3
 8001d54:	4809      	ldr	r0, [pc, #36]	@ (8001d7c <HAL_ADC_MspInit+0x94>)
 8001d56:	f001 fbc3 	bl	80034e0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	2012      	movs	r0, #18
 8001d60:	f000 fff5 	bl	8002d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001d64:	2012      	movs	r0, #18
 8001d66:	f001 f80e 	bl	8002d86 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001d6a:	bf00      	nop
 8001d6c:	3728      	adds	r7, #40	@ 0x28
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	40012000 	.word	0x40012000
 8001d78:	40023800 	.word	0x40023800
 8001d7c:	40020000 	.word	0x40020000

08001d80 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a30      	ldr	r2, [pc, #192]	@ (8001e50 <HAL_TIM_Base_MspInit+0xd0>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d13f      	bne.n	8001e12 <HAL_TIM_Base_MspInit+0x92>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	4b2f      	ldr	r3, [pc, #188]	@ (8001e54 <HAL_TIM_Base_MspInit+0xd4>)
 8001d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d9a:	4a2e      	ldr	r2, [pc, #184]	@ (8001e54 <HAL_TIM_Base_MspInit+0xd4>)
 8001d9c:	f043 0301 	orr.w	r3, r3, #1
 8001da0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001da2:	4b2c      	ldr	r3, [pc, #176]	@ (8001e54 <HAL_TIM_Base_MspInit+0xd4>)
 8001da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8001dae:	4b2a      	ldr	r3, [pc, #168]	@ (8001e58 <HAL_TIM_Base_MspInit+0xd8>)
 8001db0:	4a2a      	ldr	r2, [pc, #168]	@ (8001e5c <HAL_TIM_Base_MspInit+0xdc>)
 8001db2:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8001db4:	4b28      	ldr	r3, [pc, #160]	@ (8001e58 <HAL_TIM_Base_MspInit+0xd8>)
 8001db6:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8001dba:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001dbc:	4b26      	ldr	r3, [pc, #152]	@ (8001e58 <HAL_TIM_Base_MspInit+0xd8>)
 8001dbe:	2240      	movs	r2, #64	@ 0x40
 8001dc0:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dc2:	4b25      	ldr	r3, [pc, #148]	@ (8001e58 <HAL_TIM_Base_MspInit+0xd8>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001dc8:	4b23      	ldr	r3, [pc, #140]	@ (8001e58 <HAL_TIM_Base_MspInit+0xd8>)
 8001dca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001dce:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001dd0:	4b21      	ldr	r3, [pc, #132]	@ (8001e58 <HAL_TIM_Base_MspInit+0xd8>)
 8001dd2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001dd6:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001dd8:	4b1f      	ldr	r3, [pc, #124]	@ (8001e58 <HAL_TIM_Base_MspInit+0xd8>)
 8001dda:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001dde:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001de0:	4b1d      	ldr	r3, [pc, #116]	@ (8001e58 <HAL_TIM_Base_MspInit+0xd8>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8001de6:	4b1c      	ldr	r3, [pc, #112]	@ (8001e58 <HAL_TIM_Base_MspInit+0xd8>)
 8001de8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001dec:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001dee:	4b1a      	ldr	r3, [pc, #104]	@ (8001e58 <HAL_TIM_Base_MspInit+0xd8>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001df4:	4818      	ldr	r0, [pc, #96]	@ (8001e58 <HAL_TIM_Base_MspInit+0xd8>)
 8001df6:	f000 ffe1 	bl	8002dbc <HAL_DMA_Init>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8001e00:	f7ff ff44 	bl	8001c8c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4a14      	ldr	r2, [pc, #80]	@ (8001e58 <HAL_TIM_Base_MspInit+0xd8>)
 8001e08:	625a      	str	r2, [r3, #36]	@ 0x24
 8001e0a:	4a13      	ldr	r2, [pc, #76]	@ (8001e58 <HAL_TIM_Base_MspInit+0xd8>)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6393      	str	r3, [r2, #56]	@ 0x38
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001e10:	e01a      	b.n	8001e48 <HAL_TIM_Base_MspInit+0xc8>
  else if(htim_base->Instance==TIM2)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e1a:	d115      	bne.n	8001e48 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	60bb      	str	r3, [r7, #8]
 8001e20:	4b0c      	ldr	r3, [pc, #48]	@ (8001e54 <HAL_TIM_Base_MspInit+0xd4>)
 8001e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e24:	4a0b      	ldr	r2, [pc, #44]	@ (8001e54 <HAL_TIM_Base_MspInit+0xd4>)
 8001e26:	f043 0301 	orr.w	r3, r3, #1
 8001e2a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e2c:	4b09      	ldr	r3, [pc, #36]	@ (8001e54 <HAL_TIM_Base_MspInit+0xd4>)
 8001e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	60bb      	str	r3, [r7, #8]
 8001e36:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e38:	2200      	movs	r2, #0
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	201c      	movs	r0, #28
 8001e3e:	f000 ff86 	bl	8002d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e42:	201c      	movs	r0, #28
 8001e44:	f000 ff9f 	bl	8002d86 <HAL_NVIC_EnableIRQ>
}
 8001e48:	bf00      	nop
 8001e4a:	3710      	adds	r7, #16
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40010000 	.word	0x40010000
 8001e54:	40023800 	.word	0x40023800
 8001e58:	20000164 	.word	0x20000164
 8001e5c:	40026428 	.word	0x40026428

08001e60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b088      	sub	sp, #32
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e68:	f107 030c 	add.w	r3, r7, #12
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	605a      	str	r2, [r3, #4]
 8001e72:	609a      	str	r2, [r3, #8]
 8001e74:	60da      	str	r2, [r3, #12]
 8001e76:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a12      	ldr	r2, [pc, #72]	@ (8001ec8 <HAL_TIM_MspPostInit+0x68>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d11e      	bne.n	8001ec0 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	60bb      	str	r3, [r7, #8]
 8001e86:	4b11      	ldr	r3, [pc, #68]	@ (8001ecc <HAL_TIM_MspPostInit+0x6c>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8a:	4a10      	ldr	r2, [pc, #64]	@ (8001ecc <HAL_TIM_MspPostInit+0x6c>)
 8001e8c:	f043 0310 	orr.w	r3, r3, #16
 8001e90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e92:	4b0e      	ldr	r3, [pc, #56]	@ (8001ecc <HAL_TIM_MspPostInit+0x6c>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e96:	f003 0310 	and.w	r3, r3, #16
 8001e9a:	60bb      	str	r3, [r7, #8]
 8001e9c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = RGB_LED_Pin;
 8001e9e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ea2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eac:	2300      	movs	r3, #0
 8001eae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(RGB_LED_GPIO_Port, &GPIO_InitStruct);
 8001eb4:	f107 030c 	add.w	r3, r7, #12
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4805      	ldr	r0, [pc, #20]	@ (8001ed0 <HAL_TIM_MspPostInit+0x70>)
 8001ebc:	f001 fb10 	bl	80034e0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001ec0:	bf00      	nop
 8001ec2:	3720      	adds	r7, #32
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40010000 	.word	0x40010000
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	40021000 	.word	0x40021000

08001ed4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ed8:	bf00      	nop
 8001eda:	e7fd      	b.n	8001ed8 <NMI_Handler+0x4>

08001edc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ee0:	bf00      	nop
 8001ee2:	e7fd      	b.n	8001ee0 <HardFault_Handler+0x4>

08001ee4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ee8:	bf00      	nop
 8001eea:	e7fd      	b.n	8001ee8 <MemManage_Handler+0x4>

08001eec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ef0:	bf00      	nop
 8001ef2:	e7fd      	b.n	8001ef0 <BusFault_Handler+0x4>

08001ef4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ef8:	bf00      	nop
 8001efa:	e7fd      	b.n	8001ef8 <UsageFault_Handler+0x4>

08001efc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f00:	bf00      	nop
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f1c:	bf00      	nop
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f2a:	f000 f975 	bl	8002218 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f2e:	bf00      	nop
 8001f30:	bd80      	pop	{r7, pc}
	...

08001f34 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001f38:	4802      	ldr	r0, [pc, #8]	@ (8001f44 <ADC_IRQHandler+0x10>)
 8001f3a:	f000 fad3 	bl	80024e4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001f3e:	bf00      	nop
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	2000008c 	.word	0x2000008c

08001f48 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f4c:	4802      	ldr	r0, [pc, #8]	@ (8001f58 <TIM2_IRQHandler+0x10>)
 8001f4e:	f002 fc8b 	bl	8004868 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f52:	bf00      	nop
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	2000011c 	.word	0x2000011c

08001f5c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001f60:	4802      	ldr	r0, [pc, #8]	@ (8001f6c <DMA2_Stream1_IRQHandler+0x10>)
 8001f62:	f001 f853 	bl	800300c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001f66:	bf00      	nop
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	20000164 	.word	0x20000164

08001f70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  return 1;
 8001f74:	2301      	movs	r3, #1
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <_kill>:

int _kill(int pid, int sig)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f8a:	f004 fd7f 	bl	8006a8c <__errno>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2216      	movs	r2, #22
 8001f92:	601a      	str	r2, [r3, #0]
  return -1;
 8001f94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3708      	adds	r7, #8
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <_exit>:

void _exit (int status)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001fa8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f7ff ffe7 	bl	8001f80 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001fb2:	bf00      	nop
 8001fb4:	e7fd      	b.n	8001fb2 <_exit+0x12>

08001fb6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b086      	sub	sp, #24
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	60f8      	str	r0, [r7, #12]
 8001fbe:	60b9      	str	r1, [r7, #8]
 8001fc0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	617b      	str	r3, [r7, #20]
 8001fc6:	e00a      	b.n	8001fde <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001fc8:	f3af 8000 	nop.w
 8001fcc:	4601      	mov	r1, r0
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	1c5a      	adds	r2, r3, #1
 8001fd2:	60ba      	str	r2, [r7, #8]
 8001fd4:	b2ca      	uxtb	r2, r1
 8001fd6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	3301      	adds	r3, #1
 8001fdc:	617b      	str	r3, [r7, #20]
 8001fde:	697a      	ldr	r2, [r7, #20]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	dbf0      	blt.n	8001fc8 <_read+0x12>
  }

  return len;
 8001fe6:	687b      	ldr	r3, [r7, #4]
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3718      	adds	r7, #24
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	617b      	str	r3, [r7, #20]
 8002000:	e009      	b.n	8002016 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	1c5a      	adds	r2, r3, #1
 8002006:	60ba      	str	r2, [r7, #8]
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	4618      	mov	r0, r3
 800200c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	3301      	adds	r3, #1
 8002014:	617b      	str	r3, [r7, #20]
 8002016:	697a      	ldr	r2, [r7, #20]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	429a      	cmp	r2, r3
 800201c:	dbf1      	blt.n	8002002 <_write+0x12>
  }
  return len;
 800201e:	687b      	ldr	r3, [r7, #4]
}
 8002020:	4618      	mov	r0, r3
 8002022:	3718      	adds	r7, #24
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <_close>:

int _close(int file)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002030:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002034:	4618      	mov	r0, r3
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002050:	605a      	str	r2, [r3, #4]
  return 0;
 8002052:	2300      	movs	r3, #0
}
 8002054:	4618      	mov	r0, r3
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <_isatty>:

int _isatty(int file)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002068:	2301      	movs	r3, #1
}
 800206a:	4618      	mov	r0, r3
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002076:	b480      	push	{r7}
 8002078:	b085      	sub	sp, #20
 800207a:	af00      	add	r7, sp, #0
 800207c:	60f8      	str	r0, [r7, #12]
 800207e:	60b9      	str	r1, [r7, #8]
 8002080:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002082:	2300      	movs	r3, #0
}
 8002084:	4618      	mov	r0, r3
 8002086:	3714      	adds	r7, #20
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002098:	4a14      	ldr	r2, [pc, #80]	@ (80020ec <_sbrk+0x5c>)
 800209a:	4b15      	ldr	r3, [pc, #84]	@ (80020f0 <_sbrk+0x60>)
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020a4:	4b13      	ldr	r3, [pc, #76]	@ (80020f4 <_sbrk+0x64>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d102      	bne.n	80020b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020ac:	4b11      	ldr	r3, [pc, #68]	@ (80020f4 <_sbrk+0x64>)
 80020ae:	4a12      	ldr	r2, [pc, #72]	@ (80020f8 <_sbrk+0x68>)
 80020b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020b2:	4b10      	ldr	r3, [pc, #64]	@ (80020f4 <_sbrk+0x64>)
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4413      	add	r3, r2
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d207      	bcs.n	80020d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020c0:	f004 fce4 	bl	8006a8c <__errno>
 80020c4:	4603      	mov	r3, r0
 80020c6:	220c      	movs	r2, #12
 80020c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020ca:	f04f 33ff 	mov.w	r3, #4294967295
 80020ce:	e009      	b.n	80020e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020d0:	4b08      	ldr	r3, [pc, #32]	@ (80020f4 <_sbrk+0x64>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020d6:	4b07      	ldr	r3, [pc, #28]	@ (80020f4 <_sbrk+0x64>)
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4413      	add	r3, r2
 80020de:	4a05      	ldr	r2, [pc, #20]	@ (80020f4 <_sbrk+0x64>)
 80020e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020e2:	68fb      	ldr	r3, [r7, #12]
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3718      	adds	r7, #24
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	20020000 	.word	0x20020000
 80020f0:	00000400 	.word	0x00000400
 80020f4:	20004e9c 	.word	0x20004e9c
 80020f8:	20004ff0 	.word	0x20004ff0

080020fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002100:	4b06      	ldr	r3, [pc, #24]	@ (800211c <SystemInit+0x20>)
 8002102:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002106:	4a05      	ldr	r2, [pc, #20]	@ (800211c <SystemInit+0x20>)
 8002108:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800210c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002110:	bf00      	nop
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	e000ed00 	.word	0xe000ed00

08002120 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002120:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002158 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002124:	f7ff ffea 	bl	80020fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002128:	480c      	ldr	r0, [pc, #48]	@ (800215c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800212a:	490d      	ldr	r1, [pc, #52]	@ (8002160 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800212c:	4a0d      	ldr	r2, [pc, #52]	@ (8002164 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800212e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002130:	e002      	b.n	8002138 <LoopCopyDataInit>

08002132 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002132:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002134:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002136:	3304      	adds	r3, #4

08002138 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002138:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800213a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800213c:	d3f9      	bcc.n	8002132 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800213e:	4a0a      	ldr	r2, [pc, #40]	@ (8002168 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002140:	4c0a      	ldr	r4, [pc, #40]	@ (800216c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002142:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002144:	e001      	b.n	800214a <LoopFillZerobss>

08002146 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002146:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002148:	3204      	adds	r2, #4

0800214a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800214a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800214c:	d3fb      	bcc.n	8002146 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800214e:	f004 fca3 	bl	8006a98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002152:	f7ff f9d3 	bl	80014fc <main>
  bx  lr    
 8002156:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002158:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800215c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002160:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002164:	0801ae28 	.word	0x0801ae28
  ldr r2, =_sbss
 8002168:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800216c:	20004ff0 	.word	0x20004ff0

08002170 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002170:	e7fe      	b.n	8002170 <CAN1_RX0_IRQHandler>
	...

08002174 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002178:	4b0e      	ldr	r3, [pc, #56]	@ (80021b4 <HAL_Init+0x40>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a0d      	ldr	r2, [pc, #52]	@ (80021b4 <HAL_Init+0x40>)
 800217e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002182:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002184:	4b0b      	ldr	r3, [pc, #44]	@ (80021b4 <HAL_Init+0x40>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a0a      	ldr	r2, [pc, #40]	@ (80021b4 <HAL_Init+0x40>)
 800218a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800218e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002190:	4b08      	ldr	r3, [pc, #32]	@ (80021b4 <HAL_Init+0x40>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a07      	ldr	r2, [pc, #28]	@ (80021b4 <HAL_Init+0x40>)
 8002196:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800219a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800219c:	2003      	movs	r0, #3
 800219e:	f000 fdcb 	bl	8002d38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021a2:	200f      	movs	r0, #15
 80021a4:	f000 f808 	bl	80021b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021a8:	f7ff fd76 	bl	8001c98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40023c00 	.word	0x40023c00

080021b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021c0:	4b12      	ldr	r3, [pc, #72]	@ (800220c <HAL_InitTick+0x54>)
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	4b12      	ldr	r3, [pc, #72]	@ (8002210 <HAL_InitTick+0x58>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	4619      	mov	r1, r3
 80021ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80021d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d6:	4618      	mov	r0, r3
 80021d8:	f000 fde3 	bl	8002da2 <HAL_SYSTICK_Config>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e00e      	b.n	8002204 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2b0f      	cmp	r3, #15
 80021ea:	d80a      	bhi.n	8002202 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021ec:	2200      	movs	r2, #0
 80021ee:	6879      	ldr	r1, [r7, #4]
 80021f0:	f04f 30ff 	mov.w	r0, #4294967295
 80021f4:	f000 fdab 	bl	8002d4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021f8:	4a06      	ldr	r2, [pc, #24]	@ (8002214 <HAL_InitTick+0x5c>)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
 8002200:	e000      	b.n	8002204 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
}
 8002204:	4618      	mov	r0, r3
 8002206:	3708      	adds	r7, #8
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	20000008 	.word	0x20000008
 8002210:	20000010 	.word	0x20000010
 8002214:	2000000c 	.word	0x2000000c

08002218 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800221c:	4b06      	ldr	r3, [pc, #24]	@ (8002238 <HAL_IncTick+0x20>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	461a      	mov	r2, r3
 8002222:	4b06      	ldr	r3, [pc, #24]	@ (800223c <HAL_IncTick+0x24>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4413      	add	r3, r2
 8002228:	4a04      	ldr	r2, [pc, #16]	@ (800223c <HAL_IncTick+0x24>)
 800222a:	6013      	str	r3, [r2, #0]
}
 800222c:	bf00      	nop
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	20000010 	.word	0x20000010
 800223c:	20004ea0 	.word	0x20004ea0

08002240 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  return uwTick;
 8002244:	4b03      	ldr	r3, [pc, #12]	@ (8002254 <HAL_GetTick+0x14>)
 8002246:	681b      	ldr	r3, [r3, #0]
}
 8002248:	4618      	mov	r0, r3
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	20004ea0 	.word	0x20004ea0

08002258 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002260:	f7ff ffee 	bl	8002240 <HAL_GetTick>
 8002264:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002270:	d005      	beq.n	800227e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002272:	4b0a      	ldr	r3, [pc, #40]	@ (800229c <HAL_Delay+0x44>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	461a      	mov	r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	4413      	add	r3, r2
 800227c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800227e:	bf00      	nop
 8002280:	f7ff ffde 	bl	8002240 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	429a      	cmp	r2, r3
 800228e:	d8f7      	bhi.n	8002280 <HAL_Delay+0x28>
  {
  }
}
 8002290:	bf00      	nop
 8002292:	bf00      	nop
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	20000010 	.word	0x20000010

080022a0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022a8:	2300      	movs	r3, #0
 80022aa:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d101      	bne.n	80022b6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e033      	b.n	800231e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d109      	bne.n	80022d2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7ff fd12 	bl	8001ce8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d6:	f003 0310 	and.w	r3, r3, #16
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d118      	bne.n	8002310 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80022e6:	f023 0302 	bic.w	r3, r3, #2
 80022ea:	f043 0202 	orr.w	r2, r3, #2
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f000 fb4a 	bl	800298c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002302:	f023 0303 	bic.w	r3, r3, #3
 8002306:	f043 0201 	orr.w	r2, r3, #1
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	641a      	str	r2, [r3, #64]	@ 0x40
 800230e:	e001      	b.n	8002314 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800231c:	7bfb      	ldrb	r3, [r7, #15]
}
 800231e:	4618      	mov	r0, r3
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
	...

08002328 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002330:	2300      	movs	r3, #0
 8002332:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800233a:	2b01      	cmp	r3, #1
 800233c:	d101      	bne.n	8002342 <HAL_ADC_Start_IT+0x1a>
 800233e:	2302      	movs	r3, #2
 8002340:	e0bd      	b.n	80024be <HAL_ADC_Start_IT+0x196>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2201      	movs	r2, #1
 8002346:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f003 0301 	and.w	r3, r3, #1
 8002354:	2b01      	cmp	r3, #1
 8002356:	d018      	beq.n	800238a <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	689a      	ldr	r2, [r3, #8]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f042 0201 	orr.w	r2, r2, #1
 8002366:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002368:	4b58      	ldr	r3, [pc, #352]	@ (80024cc <HAL_ADC_Start_IT+0x1a4>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a58      	ldr	r2, [pc, #352]	@ (80024d0 <HAL_ADC_Start_IT+0x1a8>)
 800236e:	fba2 2303 	umull	r2, r3, r2, r3
 8002372:	0c9a      	lsrs	r2, r3, #18
 8002374:	4613      	mov	r3, r2
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	4413      	add	r3, r2
 800237a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800237c:	e002      	b.n	8002384 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	3b01      	subs	r3, #1
 8002382:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1f9      	bne.n	800237e <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	2b01      	cmp	r3, #1
 8002396:	f040 8085 	bne.w	80024a4 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800239e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80023a2:	f023 0301 	bic.w	r3, r3, #1
 80023a6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d007      	beq.n	80023cc <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80023c4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023d8:	d106      	bne.n	80023e8 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023de:	f023 0206 	bic.w	r2, r3, #6
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	645a      	str	r2, [r3, #68]	@ 0x44
 80023e6:	e002      	b.n	80023ee <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023f6:	4b37      	ldr	r3, [pc, #220]	@ (80024d4 <HAL_ADC_Start_IT+0x1ac>)
 80023f8:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002402:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	6812      	ldr	r2, [r2, #0]
 800240e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002412:	f043 0320 	orr.w	r3, r3, #32
 8002416:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f003 031f 	and.w	r3, r3, #31
 8002420:	2b00      	cmp	r3, #0
 8002422:	d12a      	bne.n	800247a <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a2b      	ldr	r2, [pc, #172]	@ (80024d8 <HAL_ADC_Start_IT+0x1b0>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d015      	beq.n	800245a <HAL_ADC_Start_IT+0x132>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a2a      	ldr	r2, [pc, #168]	@ (80024dc <HAL_ADC_Start_IT+0x1b4>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d105      	bne.n	8002444 <HAL_ADC_Start_IT+0x11c>
 8002438:	4b26      	ldr	r3, [pc, #152]	@ (80024d4 <HAL_ADC_Start_IT+0x1ac>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f003 031f 	and.w	r3, r3, #31
 8002440:	2b00      	cmp	r3, #0
 8002442:	d00a      	beq.n	800245a <HAL_ADC_Start_IT+0x132>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a25      	ldr	r2, [pc, #148]	@ (80024e0 <HAL_ADC_Start_IT+0x1b8>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d136      	bne.n	80024bc <HAL_ADC_Start_IT+0x194>
 800244e:	4b21      	ldr	r3, [pc, #132]	@ (80024d4 <HAL_ADC_Start_IT+0x1ac>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f003 0310 	and.w	r3, r3, #16
 8002456:	2b00      	cmp	r3, #0
 8002458:	d130      	bne.n	80024bc <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d129      	bne.n	80024bc <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	689a      	ldr	r2, [r3, #8]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002476:	609a      	str	r2, [r3, #8]
 8002478:	e020      	b.n	80024bc <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a16      	ldr	r2, [pc, #88]	@ (80024d8 <HAL_ADC_Start_IT+0x1b0>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d11b      	bne.n	80024bc <HAL_ADC_Start_IT+0x194>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d114      	bne.n	80024bc <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	689a      	ldr	r2, [r3, #8]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80024a0:	609a      	str	r2, [r3, #8]
 80024a2:	e00b      	b.n	80024bc <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a8:	f043 0210 	orr.w	r2, r3, #16
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024b4:	f043 0201 	orr.w	r2, r3, #1
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3714      	adds	r7, #20
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	20000008 	.word	0x20000008
 80024d0:	431bde83 	.word	0x431bde83
 80024d4:	40012300 	.word	0x40012300
 80024d8:	40012000 	.word	0x40012000
 80024dc:	40012100 	.word	0x40012100
 80024e0:	40012200 	.word	0x40012200

080024e4 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80024ec:	2300      	movs	r3, #0
 80024ee:	617b      	str	r3, [r7, #20]
 80024f0:	2300      	movs	r3, #0
 80024f2:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	f003 0320 	and.w	r3, r3, #32
 8002512:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d049      	beq.n	80025ae <HAL_ADC_IRQHandler+0xca>
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d046      	beq.n	80025ae <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002524:	f003 0310 	and.w	r3, r3, #16
 8002528:	2b00      	cmp	r3, #0
 800252a:	d105      	bne.n	8002538 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002530:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d12b      	bne.n	800259e <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800254a:	2b00      	cmp	r3, #0
 800254c:	d127      	bne.n	800259e <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002554:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002558:	2b00      	cmp	r3, #0
 800255a:	d006      	beq.n	800256a <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002566:	2b00      	cmp	r3, #0
 8002568:	d119      	bne.n	800259e <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	685a      	ldr	r2, [r3, #4]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f022 0220 	bic.w	r2, r2, #32
 8002578:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d105      	bne.n	800259e <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002596:	f043 0201 	orr.w	r2, r3, #1
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f7ff fb20 	bl	8001be4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f06f 0212 	mvn.w	r2, #18
 80025ac:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f003 0304 	and.w	r3, r3, #4
 80025b4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025bc:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d057      	beq.n	8002674 <HAL_ADC_IRQHandler+0x190>
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d054      	beq.n	8002674 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ce:	f003 0310 	and.w	r3, r3, #16
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d105      	bne.n	80025e2 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025da:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d139      	bne.n	8002664 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025f6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d006      	beq.n	800260c <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002608:	2b00      	cmp	r3, #0
 800260a:	d12b      	bne.n	8002664 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002616:	2b00      	cmp	r3, #0
 8002618:	d124      	bne.n	8002664 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002624:	2b00      	cmp	r3, #0
 8002626:	d11d      	bne.n	8002664 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800262c:	2b00      	cmp	r3, #0
 800262e:	d119      	bne.n	8002664 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	685a      	ldr	r2, [r3, #4]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800263e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002644:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002650:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002654:	2b00      	cmp	r3, #0
 8002656:	d105      	bne.n	8002664 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800265c:	f043 0201 	orr.w	r2, r3, #1
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f000 fa8d 	bl	8002b84 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f06f 020c 	mvn.w	r2, #12
 8002672:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002682:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d017      	beq.n	80026ba <HAL_ADC_IRQHandler+0x1d6>
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d014      	beq.n	80026ba <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b01      	cmp	r3, #1
 800269c:	d10d      	bne.n	80026ba <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 f837 	bl	800271e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f06f 0201 	mvn.w	r2, #1
 80026b8:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f003 0320 	and.w	r3, r3, #32
 80026c0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80026c8:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d015      	beq.n	80026fc <HAL_ADC_IRQHandler+0x218>
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d012      	beq.n	80026fc <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026da:	f043 0202 	orr.w	r2, r3, #2
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f06f 0220 	mvn.w	r2, #32
 80026ea:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f000 f820 	bl	8002732 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f06f 0220 	mvn.w	r2, #32
 80026fa:	601a      	str	r2, [r3, #0]
  }
}
 80026fc:	bf00      	nop
 80026fe:	3718      	adds	r7, #24
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002712:	4618      	mov	r0, r3
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr

0800271e <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800271e:	b480      	push	{r7}
 8002720:	b083      	sub	sp, #12
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002726:	bf00      	nop
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr

08002732 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002732:	b480      	push	{r7}
 8002734:	b083      	sub	sp, #12
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800273a:	bf00      	nop
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
	...

08002748 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002752:	2300      	movs	r3, #0
 8002754:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800275c:	2b01      	cmp	r3, #1
 800275e:	d101      	bne.n	8002764 <HAL_ADC_ConfigChannel+0x1c>
 8002760:	2302      	movs	r3, #2
 8002762:	e105      	b.n	8002970 <HAL_ADC_ConfigChannel+0x228>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2b09      	cmp	r3, #9
 8002772:	d925      	bls.n	80027c0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68d9      	ldr	r1, [r3, #12]
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	b29b      	uxth	r3, r3
 8002780:	461a      	mov	r2, r3
 8002782:	4613      	mov	r3, r2
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	4413      	add	r3, r2
 8002788:	3b1e      	subs	r3, #30
 800278a:	2207      	movs	r2, #7
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	43da      	mvns	r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	400a      	ands	r2, r1
 8002798:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68d9      	ldr	r1, [r3, #12]
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	689a      	ldr	r2, [r3, #8]
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	4618      	mov	r0, r3
 80027ac:	4603      	mov	r3, r0
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	4403      	add	r3, r0
 80027b2:	3b1e      	subs	r3, #30
 80027b4:	409a      	lsls	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	430a      	orrs	r2, r1
 80027bc:	60da      	str	r2, [r3, #12]
 80027be:	e022      	b.n	8002806 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6919      	ldr	r1, [r3, #16]
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	461a      	mov	r2, r3
 80027ce:	4613      	mov	r3, r2
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	4413      	add	r3, r2
 80027d4:	2207      	movs	r2, #7
 80027d6:	fa02 f303 	lsl.w	r3, r2, r3
 80027da:	43da      	mvns	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	400a      	ands	r2, r1
 80027e2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	6919      	ldr	r1, [r3, #16]
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	689a      	ldr	r2, [r3, #8]
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	4618      	mov	r0, r3
 80027f6:	4603      	mov	r3, r0
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	4403      	add	r3, r0
 80027fc:	409a      	lsls	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	430a      	orrs	r2, r1
 8002804:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	2b06      	cmp	r3, #6
 800280c:	d824      	bhi.n	8002858 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685a      	ldr	r2, [r3, #4]
 8002818:	4613      	mov	r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	4413      	add	r3, r2
 800281e:	3b05      	subs	r3, #5
 8002820:	221f      	movs	r2, #31
 8002822:	fa02 f303 	lsl.w	r3, r2, r3
 8002826:	43da      	mvns	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	400a      	ands	r2, r1
 800282e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	b29b      	uxth	r3, r3
 800283c:	4618      	mov	r0, r3
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685a      	ldr	r2, [r3, #4]
 8002842:	4613      	mov	r3, r2
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	4413      	add	r3, r2
 8002848:	3b05      	subs	r3, #5
 800284a:	fa00 f203 	lsl.w	r2, r0, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	430a      	orrs	r2, r1
 8002854:	635a      	str	r2, [r3, #52]	@ 0x34
 8002856:	e04c      	b.n	80028f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	2b0c      	cmp	r3, #12
 800285e:	d824      	bhi.n	80028aa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685a      	ldr	r2, [r3, #4]
 800286a:	4613      	mov	r3, r2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	4413      	add	r3, r2
 8002870:	3b23      	subs	r3, #35	@ 0x23
 8002872:	221f      	movs	r2, #31
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	43da      	mvns	r2, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	400a      	ands	r2, r1
 8002880:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	b29b      	uxth	r3, r3
 800288e:	4618      	mov	r0, r3
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685a      	ldr	r2, [r3, #4]
 8002894:	4613      	mov	r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	4413      	add	r3, r2
 800289a:	3b23      	subs	r3, #35	@ 0x23
 800289c:	fa00 f203 	lsl.w	r2, r0, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	430a      	orrs	r2, r1
 80028a6:	631a      	str	r2, [r3, #48]	@ 0x30
 80028a8:	e023      	b.n	80028f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685a      	ldr	r2, [r3, #4]
 80028b4:	4613      	mov	r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	4413      	add	r3, r2
 80028ba:	3b41      	subs	r3, #65	@ 0x41
 80028bc:	221f      	movs	r2, #31
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	43da      	mvns	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	400a      	ands	r2, r1
 80028ca:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	4618      	mov	r0, r3
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685a      	ldr	r2, [r3, #4]
 80028de:	4613      	mov	r3, r2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	4413      	add	r3, r2
 80028e4:	3b41      	subs	r3, #65	@ 0x41
 80028e6:	fa00 f203 	lsl.w	r2, r0, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	430a      	orrs	r2, r1
 80028f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028f2:	4b22      	ldr	r3, [pc, #136]	@ (800297c <HAL_ADC_ConfigChannel+0x234>)
 80028f4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a21      	ldr	r2, [pc, #132]	@ (8002980 <HAL_ADC_ConfigChannel+0x238>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d109      	bne.n	8002914 <HAL_ADC_ConfigChannel+0x1cc>
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2b12      	cmp	r3, #18
 8002906:	d105      	bne.n	8002914 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a19      	ldr	r2, [pc, #100]	@ (8002980 <HAL_ADC_ConfigChannel+0x238>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d123      	bne.n	8002966 <HAL_ADC_ConfigChannel+0x21e>
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2b10      	cmp	r3, #16
 8002924:	d003      	beq.n	800292e <HAL_ADC_ConfigChannel+0x1e6>
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2b11      	cmp	r3, #17
 800292c:	d11b      	bne.n	8002966 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2b10      	cmp	r3, #16
 8002940:	d111      	bne.n	8002966 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002942:	4b10      	ldr	r3, [pc, #64]	@ (8002984 <HAL_ADC_ConfigChannel+0x23c>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a10      	ldr	r2, [pc, #64]	@ (8002988 <HAL_ADC_ConfigChannel+0x240>)
 8002948:	fba2 2303 	umull	r2, r3, r2, r3
 800294c:	0c9a      	lsrs	r2, r3, #18
 800294e:	4613      	mov	r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	4413      	add	r3, r2
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002958:	e002      	b.n	8002960 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	3b01      	subs	r3, #1
 800295e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1f9      	bne.n	800295a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	3714      	adds	r7, #20
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr
 800297c:	40012300 	.word	0x40012300
 8002980:	40012000 	.word	0x40012000
 8002984:	20000008 	.word	0x20000008
 8002988:	431bde83 	.word	0x431bde83

0800298c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002994:	4b79      	ldr	r3, [pc, #484]	@ (8002b7c <ADC_Init+0x1f0>)
 8002996:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	685a      	ldr	r2, [r3, #4]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	431a      	orrs	r2, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	685a      	ldr	r2, [r3, #4]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	6859      	ldr	r1, [r3, #4]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	021a      	lsls	r2, r3, #8
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	430a      	orrs	r2, r1
 80029d4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	685a      	ldr	r2, [r3, #4]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80029e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	6859      	ldr	r1, [r3, #4]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689a      	ldr	r2, [r3, #8]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	430a      	orrs	r2, r1
 80029f6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	689a      	ldr	r2, [r3, #8]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6899      	ldr	r1, [r3, #8]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	68da      	ldr	r2, [r3, #12]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	430a      	orrs	r2, r1
 8002a18:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a1e:	4a58      	ldr	r2, [pc, #352]	@ (8002b80 <ADC_Init+0x1f4>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d022      	beq.n	8002a6a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	689a      	ldr	r2, [r3, #8]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002a32:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	6899      	ldr	r1, [r3, #8]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	430a      	orrs	r2, r1
 8002a44:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	689a      	ldr	r2, [r3, #8]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002a54:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	6899      	ldr	r1, [r3, #8]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	430a      	orrs	r2, r1
 8002a66:	609a      	str	r2, [r3, #8]
 8002a68:	e00f      	b.n	8002a8a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	689a      	ldr	r2, [r3, #8]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002a78:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	689a      	ldr	r2, [r3, #8]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002a88:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	689a      	ldr	r2, [r3, #8]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f022 0202 	bic.w	r2, r2, #2
 8002a98:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	6899      	ldr	r1, [r3, #8]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	7e1b      	ldrb	r3, [r3, #24]
 8002aa4:	005a      	lsls	r2, r3, #1
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d01b      	beq.n	8002af0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	685a      	ldr	r2, [r3, #4]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ac6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	685a      	ldr	r2, [r3, #4]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002ad6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6859      	ldr	r1, [r3, #4]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	035a      	lsls	r2, r3, #13
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	430a      	orrs	r2, r1
 8002aec:	605a      	str	r2, [r3, #4]
 8002aee:	e007      	b.n	8002b00 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	685a      	ldr	r2, [r3, #4]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002afe:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002b0e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	051a      	lsls	r2, r3, #20
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	430a      	orrs	r2, r1
 8002b24:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	689a      	ldr	r2, [r3, #8]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002b34:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	6899      	ldr	r1, [r3, #8]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002b42:	025a      	lsls	r2, r3, #9
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	689a      	ldr	r2, [r3, #8]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	6899      	ldr	r1, [r3, #8]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	029a      	lsls	r2, r3, #10
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	430a      	orrs	r2, r1
 8002b6e:	609a      	str	r2, [r3, #8]
}
 8002b70:	bf00      	nop
 8002b72:	3714      	adds	r7, #20
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr
 8002b7c:	40012300 	.word	0x40012300
 8002b80:	0f000001 	.word	0x0f000001

08002b84 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f003 0307 	and.w	r3, r3, #7
 8002ba6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ba8:	4b0c      	ldr	r3, [pc, #48]	@ (8002bdc <__NVIC_SetPriorityGrouping+0x44>)
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bae:	68ba      	ldr	r2, [r7, #8]
 8002bb0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bc0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002bc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bca:	4a04      	ldr	r2, [pc, #16]	@ (8002bdc <__NVIC_SetPriorityGrouping+0x44>)
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	60d3      	str	r3, [r2, #12]
}
 8002bd0:	bf00      	nop
 8002bd2:	3714      	adds	r7, #20
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr
 8002bdc:	e000ed00 	.word	0xe000ed00

08002be0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002be4:	4b04      	ldr	r3, [pc, #16]	@ (8002bf8 <__NVIC_GetPriorityGrouping+0x18>)
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	0a1b      	lsrs	r3, r3, #8
 8002bea:	f003 0307 	and.w	r3, r3, #7
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr
 8002bf8:	e000ed00 	.word	0xe000ed00

08002bfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	4603      	mov	r3, r0
 8002c04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	db0b      	blt.n	8002c26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c0e:	79fb      	ldrb	r3, [r7, #7]
 8002c10:	f003 021f 	and.w	r2, r3, #31
 8002c14:	4907      	ldr	r1, [pc, #28]	@ (8002c34 <__NVIC_EnableIRQ+0x38>)
 8002c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c1a:	095b      	lsrs	r3, r3, #5
 8002c1c:	2001      	movs	r0, #1
 8002c1e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c26:	bf00      	nop
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	e000e100 	.word	0xe000e100

08002c38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	4603      	mov	r3, r0
 8002c40:	6039      	str	r1, [r7, #0]
 8002c42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	db0a      	blt.n	8002c62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	b2da      	uxtb	r2, r3
 8002c50:	490c      	ldr	r1, [pc, #48]	@ (8002c84 <__NVIC_SetPriority+0x4c>)
 8002c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c56:	0112      	lsls	r2, r2, #4
 8002c58:	b2d2      	uxtb	r2, r2
 8002c5a:	440b      	add	r3, r1
 8002c5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c60:	e00a      	b.n	8002c78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	b2da      	uxtb	r2, r3
 8002c66:	4908      	ldr	r1, [pc, #32]	@ (8002c88 <__NVIC_SetPriority+0x50>)
 8002c68:	79fb      	ldrb	r3, [r7, #7]
 8002c6a:	f003 030f 	and.w	r3, r3, #15
 8002c6e:	3b04      	subs	r3, #4
 8002c70:	0112      	lsls	r2, r2, #4
 8002c72:	b2d2      	uxtb	r2, r2
 8002c74:	440b      	add	r3, r1
 8002c76:	761a      	strb	r2, [r3, #24]
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr
 8002c84:	e000e100 	.word	0xe000e100
 8002c88:	e000ed00 	.word	0xe000ed00

08002c8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b089      	sub	sp, #36	@ 0x24
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f003 0307 	and.w	r3, r3, #7
 8002c9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	f1c3 0307 	rsb	r3, r3, #7
 8002ca6:	2b04      	cmp	r3, #4
 8002ca8:	bf28      	it	cs
 8002caa:	2304      	movcs	r3, #4
 8002cac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	3304      	adds	r3, #4
 8002cb2:	2b06      	cmp	r3, #6
 8002cb4:	d902      	bls.n	8002cbc <NVIC_EncodePriority+0x30>
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	3b03      	subs	r3, #3
 8002cba:	e000      	b.n	8002cbe <NVIC_EncodePriority+0x32>
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cca:	43da      	mvns	r2, r3
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	401a      	ands	r2, r3
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cd4:	f04f 31ff 	mov.w	r1, #4294967295
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	fa01 f303 	lsl.w	r3, r1, r3
 8002cde:	43d9      	mvns	r1, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ce4:	4313      	orrs	r3, r2
         );
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3724      	adds	r7, #36	@ 0x24
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
	...

08002cf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d04:	d301      	bcc.n	8002d0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d06:	2301      	movs	r3, #1
 8002d08:	e00f      	b.n	8002d2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d0a:	4a0a      	ldr	r2, [pc, #40]	@ (8002d34 <SysTick_Config+0x40>)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d12:	210f      	movs	r1, #15
 8002d14:	f04f 30ff 	mov.w	r0, #4294967295
 8002d18:	f7ff ff8e 	bl	8002c38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d1c:	4b05      	ldr	r3, [pc, #20]	@ (8002d34 <SysTick_Config+0x40>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d22:	4b04      	ldr	r3, [pc, #16]	@ (8002d34 <SysTick_Config+0x40>)
 8002d24:	2207      	movs	r2, #7
 8002d26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	e000e010 	.word	0xe000e010

08002d38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f7ff ff29 	bl	8002b98 <__NVIC_SetPriorityGrouping>
}
 8002d46:	bf00      	nop
 8002d48:	3708      	adds	r7, #8
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b086      	sub	sp, #24
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	4603      	mov	r3, r0
 8002d56:	60b9      	str	r1, [r7, #8]
 8002d58:	607a      	str	r2, [r7, #4]
 8002d5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d60:	f7ff ff3e 	bl	8002be0 <__NVIC_GetPriorityGrouping>
 8002d64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	68b9      	ldr	r1, [r7, #8]
 8002d6a:	6978      	ldr	r0, [r7, #20]
 8002d6c:	f7ff ff8e 	bl	8002c8c <NVIC_EncodePriority>
 8002d70:	4602      	mov	r2, r0
 8002d72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d76:	4611      	mov	r1, r2
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7ff ff5d 	bl	8002c38 <__NVIC_SetPriority>
}
 8002d7e:	bf00      	nop
 8002d80:	3718      	adds	r7, #24
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b082      	sub	sp, #8
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7ff ff31 	bl	8002bfc <__NVIC_EnableIRQ>
}
 8002d9a:	bf00      	nop
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b082      	sub	sp, #8
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f7ff ffa2 	bl	8002cf4 <SysTick_Config>
 8002db0:	4603      	mov	r3, r0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
	...

08002dbc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002dc8:	f7ff fa3a 	bl	8002240 <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d101      	bne.n	8002dd8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e099      	b.n	8002f0c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2202      	movs	r2, #2
 8002ddc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f022 0201 	bic.w	r2, r2, #1
 8002df6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002df8:	e00f      	b.n	8002e1a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002dfa:	f7ff fa21 	bl	8002240 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	2b05      	cmp	r3, #5
 8002e06:	d908      	bls.n	8002e1a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2220      	movs	r2, #32
 8002e0c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2203      	movs	r2, #3
 8002e12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e078      	b.n	8002f0c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0301 	and.w	r3, r3, #1
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d1e8      	bne.n	8002dfa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e30:	697a      	ldr	r2, [r7, #20]
 8002e32:	4b38      	ldr	r3, [pc, #224]	@ (8002f14 <HAL_DMA_Init+0x158>)
 8002e34:	4013      	ands	r3, r2
 8002e36:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685a      	ldr	r2, [r3, #4]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e46:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a1b      	ldr	r3, [r3, #32]
 8002e64:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e66:	697a      	ldr	r2, [r7, #20]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e70:	2b04      	cmp	r3, #4
 8002e72:	d107      	bne.n	8002e84 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	697a      	ldr	r2, [r7, #20]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	697a      	ldr	r2, [r7, #20]
 8002e8a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	f023 0307 	bic.w	r3, r3, #7
 8002e9a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea0:	697a      	ldr	r2, [r7, #20]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eaa:	2b04      	cmp	r3, #4
 8002eac:	d117      	bne.n	8002ede <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00e      	beq.n	8002ede <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 fa91 	bl	80033e8 <DMA_CheckFifoParam>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d008      	beq.n	8002ede <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2240      	movs	r2, #64	@ 0x40
 8002ed0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002eda:	2301      	movs	r3, #1
 8002edc:	e016      	b.n	8002f0c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 fa48 	bl	800337c <DMA_CalcBaseAndBitshift>
 8002eec:	4603      	mov	r3, r0
 8002eee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ef4:	223f      	movs	r2, #63	@ 0x3f
 8002ef6:	409a      	lsls	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2201      	movs	r2, #1
 8002f06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3718      	adds	r7, #24
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	f010803f 	.word	0xf010803f

08002f18 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
 8002f24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f26:	2300      	movs	r3, #0
 8002f28:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f2e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d101      	bne.n	8002f3e <HAL_DMA_Start_IT+0x26>
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	e040      	b.n	8002fc0 <HAL_DMA_Start_IT+0xa8>
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2201      	movs	r2, #1
 8002f42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d12f      	bne.n	8002fb2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2202      	movs	r2, #2
 8002f56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	68b9      	ldr	r1, [r7, #8]
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f000 f9da 	bl	8003320 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f70:	223f      	movs	r2, #63	@ 0x3f
 8002f72:	409a      	lsls	r2, r3
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f042 0216 	orr.w	r2, r2, #22
 8002f86:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d007      	beq.n	8002fa0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f042 0208 	orr.w	r2, r2, #8
 8002f9e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f042 0201 	orr.w	r2, r2, #1
 8002fae:	601a      	str	r2, [r3, #0]
 8002fb0:	e005      	b.n	8002fbe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002fba:	2302      	movs	r3, #2
 8002fbc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002fbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3718      	adds	r7, #24
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d004      	beq.n	8002fe6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2280      	movs	r2, #128	@ 0x80
 8002fe0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e00c      	b.n	8003000 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2205      	movs	r2, #5
 8002fea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f022 0201 	bic.w	r2, r2, #1
 8002ffc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003014:	2300      	movs	r3, #0
 8003016:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003018:	4b8e      	ldr	r3, [pc, #568]	@ (8003254 <HAL_DMA_IRQHandler+0x248>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a8e      	ldr	r2, [pc, #568]	@ (8003258 <HAL_DMA_IRQHandler+0x24c>)
 800301e:	fba2 2303 	umull	r2, r3, r2, r3
 8003022:	0a9b      	lsrs	r3, r3, #10
 8003024:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800302a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003036:	2208      	movs	r2, #8
 8003038:	409a      	lsls	r2, r3
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	4013      	ands	r3, r2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d01a      	beq.n	8003078 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0304 	and.w	r3, r3, #4
 800304c:	2b00      	cmp	r3, #0
 800304e:	d013      	beq.n	8003078 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f022 0204 	bic.w	r2, r2, #4
 800305e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003064:	2208      	movs	r2, #8
 8003066:	409a      	lsls	r2, r3
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003070:	f043 0201 	orr.w	r2, r3, #1
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800307c:	2201      	movs	r2, #1
 800307e:	409a      	lsls	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	4013      	ands	r3, r2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d012      	beq.n	80030ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00b      	beq.n	80030ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800309a:	2201      	movs	r2, #1
 800309c:	409a      	lsls	r2, r3
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030a6:	f043 0202 	orr.w	r2, r3, #2
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030b2:	2204      	movs	r2, #4
 80030b4:	409a      	lsls	r2, r3
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	4013      	ands	r3, r2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d012      	beq.n	80030e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d00b      	beq.n	80030e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030d0:	2204      	movs	r2, #4
 80030d2:	409a      	lsls	r2, r3
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030dc:	f043 0204 	orr.w	r2, r3, #4
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030e8:	2210      	movs	r2, #16
 80030ea:	409a      	lsls	r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	4013      	ands	r3, r2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d043      	beq.n	800317c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0308 	and.w	r3, r3, #8
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d03c      	beq.n	800317c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003106:	2210      	movs	r2, #16
 8003108:	409a      	lsls	r2, r3
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d018      	beq.n	800314e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d108      	bne.n	800313c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800312e:	2b00      	cmp	r3, #0
 8003130:	d024      	beq.n	800317c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	4798      	blx	r3
 800313a:	e01f      	b.n	800317c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003140:	2b00      	cmp	r3, #0
 8003142:	d01b      	beq.n	800317c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	4798      	blx	r3
 800314c:	e016      	b.n	800317c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003158:	2b00      	cmp	r3, #0
 800315a:	d107      	bne.n	800316c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f022 0208 	bic.w	r2, r2, #8
 800316a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003170:	2b00      	cmp	r3, #0
 8003172:	d003      	beq.n	800317c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003180:	2220      	movs	r2, #32
 8003182:	409a      	lsls	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	4013      	ands	r3, r2
 8003188:	2b00      	cmp	r3, #0
 800318a:	f000 808f 	beq.w	80032ac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0310 	and.w	r3, r3, #16
 8003198:	2b00      	cmp	r3, #0
 800319a:	f000 8087 	beq.w	80032ac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031a2:	2220      	movs	r2, #32
 80031a4:	409a      	lsls	r2, r3
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b05      	cmp	r3, #5
 80031b4:	d136      	bne.n	8003224 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f022 0216 	bic.w	r2, r2, #22
 80031c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	695a      	ldr	r2, [r3, #20]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80031d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d103      	bne.n	80031e6 <HAL_DMA_IRQHandler+0x1da>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d007      	beq.n	80031f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f022 0208 	bic.w	r2, r2, #8
 80031f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031fa:	223f      	movs	r2, #63	@ 0x3f
 80031fc:	409a      	lsls	r2, r3
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003216:	2b00      	cmp	r3, #0
 8003218:	d07e      	beq.n	8003318 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	4798      	blx	r3
        }
        return;
 8003222:	e079      	b.n	8003318 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d01d      	beq.n	800326e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d10d      	bne.n	800325c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003244:	2b00      	cmp	r3, #0
 8003246:	d031      	beq.n	80032ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	4798      	blx	r3
 8003250:	e02c      	b.n	80032ac <HAL_DMA_IRQHandler+0x2a0>
 8003252:	bf00      	nop
 8003254:	20000008 	.word	0x20000008
 8003258:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003260:	2b00      	cmp	r3, #0
 8003262:	d023      	beq.n	80032ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	4798      	blx	r3
 800326c:	e01e      	b.n	80032ac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003278:	2b00      	cmp	r3, #0
 800327a:	d10f      	bne.n	800329c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f022 0210 	bic.w	r2, r2, #16
 800328a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d003      	beq.n	80032ac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d032      	beq.n	800331a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032b8:	f003 0301 	and.w	r3, r3, #1
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d022      	beq.n	8003306 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2205      	movs	r2, #5
 80032c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 0201 	bic.w	r2, r2, #1
 80032d6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	3301      	adds	r3, #1
 80032dc:	60bb      	str	r3, [r7, #8]
 80032de:	697a      	ldr	r2, [r7, #20]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d307      	bcc.n	80032f4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1f2      	bne.n	80032d8 <HAL_DMA_IRQHandler+0x2cc>
 80032f2:	e000      	b.n	80032f6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80032f4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2201      	movs	r2, #1
 80032fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800330a:	2b00      	cmp	r3, #0
 800330c:	d005      	beq.n	800331a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	4798      	blx	r3
 8003316:	e000      	b.n	800331a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003318:	bf00      	nop
    }
  }
}
 800331a:	3718      	adds	r7, #24
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
 800332c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800333c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	683a      	ldr	r2, [r7, #0]
 8003344:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	2b40      	cmp	r3, #64	@ 0x40
 800334c:	d108      	bne.n	8003360 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68ba      	ldr	r2, [r7, #8]
 800335c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800335e:	e007      	b.n	8003370 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68ba      	ldr	r2, [r7, #8]
 8003366:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	60da      	str	r2, [r3, #12]
}
 8003370:	bf00      	nop
 8003372:	3714      	adds	r7, #20
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800337c:	b480      	push	{r7}
 800337e:	b085      	sub	sp, #20
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	b2db      	uxtb	r3, r3
 800338a:	3b10      	subs	r3, #16
 800338c:	4a14      	ldr	r2, [pc, #80]	@ (80033e0 <DMA_CalcBaseAndBitshift+0x64>)
 800338e:	fba2 2303 	umull	r2, r3, r2, r3
 8003392:	091b      	lsrs	r3, r3, #4
 8003394:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003396:	4a13      	ldr	r2, [pc, #76]	@ (80033e4 <DMA_CalcBaseAndBitshift+0x68>)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	4413      	add	r3, r2
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	461a      	mov	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2b03      	cmp	r3, #3
 80033a8:	d909      	bls.n	80033be <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80033b2:	f023 0303 	bic.w	r3, r3, #3
 80033b6:	1d1a      	adds	r2, r3, #4
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	659a      	str	r2, [r3, #88]	@ 0x58
 80033bc:	e007      	b.n	80033ce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80033c6:	f023 0303 	bic.w	r3, r3, #3
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3714      	adds	r7, #20
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	aaaaaaab 	.word	0xaaaaaaab
 80033e4:	080078d0 	.word	0x080078d0

080033e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b085      	sub	sp, #20
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033f0:	2300      	movs	r3, #0
 80033f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d11f      	bne.n	8003442 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	2b03      	cmp	r3, #3
 8003406:	d856      	bhi.n	80034b6 <DMA_CheckFifoParam+0xce>
 8003408:	a201      	add	r2, pc, #4	@ (adr r2, 8003410 <DMA_CheckFifoParam+0x28>)
 800340a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800340e:	bf00      	nop
 8003410:	08003421 	.word	0x08003421
 8003414:	08003433 	.word	0x08003433
 8003418:	08003421 	.word	0x08003421
 800341c:	080034b7 	.word	0x080034b7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003424:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d046      	beq.n	80034ba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003430:	e043      	b.n	80034ba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003436:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800343a:	d140      	bne.n	80034be <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003440:	e03d      	b.n	80034be <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800344a:	d121      	bne.n	8003490 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	2b03      	cmp	r3, #3
 8003450:	d837      	bhi.n	80034c2 <DMA_CheckFifoParam+0xda>
 8003452:	a201      	add	r2, pc, #4	@ (adr r2, 8003458 <DMA_CheckFifoParam+0x70>)
 8003454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003458:	08003469 	.word	0x08003469
 800345c:	0800346f 	.word	0x0800346f
 8003460:	08003469 	.word	0x08003469
 8003464:	08003481 	.word	0x08003481
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	73fb      	strb	r3, [r7, #15]
      break;
 800346c:	e030      	b.n	80034d0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003472:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d025      	beq.n	80034c6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800347e:	e022      	b.n	80034c6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003484:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003488:	d11f      	bne.n	80034ca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800348e:	e01c      	b.n	80034ca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	2b02      	cmp	r3, #2
 8003494:	d903      	bls.n	800349e <DMA_CheckFifoParam+0xb6>
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	2b03      	cmp	r3, #3
 800349a:	d003      	beq.n	80034a4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800349c:	e018      	b.n	80034d0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	73fb      	strb	r3, [r7, #15]
      break;
 80034a2:	e015      	b.n	80034d0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00e      	beq.n	80034ce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	73fb      	strb	r3, [r7, #15]
      break;
 80034b4:	e00b      	b.n	80034ce <DMA_CheckFifoParam+0xe6>
      break;
 80034b6:	bf00      	nop
 80034b8:	e00a      	b.n	80034d0 <DMA_CheckFifoParam+0xe8>
      break;
 80034ba:	bf00      	nop
 80034bc:	e008      	b.n	80034d0 <DMA_CheckFifoParam+0xe8>
      break;
 80034be:	bf00      	nop
 80034c0:	e006      	b.n	80034d0 <DMA_CheckFifoParam+0xe8>
      break;
 80034c2:	bf00      	nop
 80034c4:	e004      	b.n	80034d0 <DMA_CheckFifoParam+0xe8>
      break;
 80034c6:	bf00      	nop
 80034c8:	e002      	b.n	80034d0 <DMA_CheckFifoParam+0xe8>
      break;   
 80034ca:	bf00      	nop
 80034cc:	e000      	b.n	80034d0 <DMA_CheckFifoParam+0xe8>
      break;
 80034ce:	bf00      	nop
    }
  } 
  
  return status; 
 80034d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3714      	adds	r7, #20
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop

080034e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b089      	sub	sp, #36	@ 0x24
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034ea:	2300      	movs	r3, #0
 80034ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80034ee:	2300      	movs	r3, #0
 80034f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80034f2:	2300      	movs	r3, #0
 80034f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034f6:	2300      	movs	r3, #0
 80034f8:	61fb      	str	r3, [r7, #28]
 80034fa:	e16b      	b.n	80037d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80034fc:	2201      	movs	r2, #1
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	fa02 f303 	lsl.w	r3, r2, r3
 8003504:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	4013      	ands	r3, r2
 800350e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	429a      	cmp	r2, r3
 8003516:	f040 815a 	bne.w	80037ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f003 0303 	and.w	r3, r3, #3
 8003522:	2b01      	cmp	r3, #1
 8003524:	d005      	beq.n	8003532 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800352e:	2b02      	cmp	r3, #2
 8003530:	d130      	bne.n	8003594 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	005b      	lsls	r3, r3, #1
 800353c:	2203      	movs	r2, #3
 800353e:	fa02 f303 	lsl.w	r3, r2, r3
 8003542:	43db      	mvns	r3, r3
 8003544:	69ba      	ldr	r2, [r7, #24]
 8003546:	4013      	ands	r3, r2
 8003548:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	68da      	ldr	r2, [r3, #12]
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	005b      	lsls	r3, r3, #1
 8003552:	fa02 f303 	lsl.w	r3, r2, r3
 8003556:	69ba      	ldr	r2, [r7, #24]
 8003558:	4313      	orrs	r3, r2
 800355a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	69ba      	ldr	r2, [r7, #24]
 8003560:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003568:	2201      	movs	r2, #1
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	fa02 f303 	lsl.w	r3, r2, r3
 8003570:	43db      	mvns	r3, r3
 8003572:	69ba      	ldr	r2, [r7, #24]
 8003574:	4013      	ands	r3, r2
 8003576:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	091b      	lsrs	r3, r3, #4
 800357e:	f003 0201 	and.w	r2, r3, #1
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	fa02 f303 	lsl.w	r3, r2, r3
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	4313      	orrs	r3, r2
 800358c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f003 0303 	and.w	r3, r3, #3
 800359c:	2b03      	cmp	r3, #3
 800359e:	d017      	beq.n	80035d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	005b      	lsls	r3, r3, #1
 80035aa:	2203      	movs	r2, #3
 80035ac:	fa02 f303 	lsl.w	r3, r2, r3
 80035b0:	43db      	mvns	r3, r3
 80035b2:	69ba      	ldr	r2, [r7, #24]
 80035b4:	4013      	ands	r3, r2
 80035b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	689a      	ldr	r2, [r3, #8]
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	005b      	lsls	r3, r3, #1
 80035c0:	fa02 f303 	lsl.w	r3, r2, r3
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f003 0303 	and.w	r3, r3, #3
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d123      	bne.n	8003624 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	08da      	lsrs	r2, r3, #3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	3208      	adds	r2, #8
 80035e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	f003 0307 	and.w	r3, r3, #7
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	220f      	movs	r2, #15
 80035f4:	fa02 f303 	lsl.w	r3, r2, r3
 80035f8:	43db      	mvns	r3, r3
 80035fa:	69ba      	ldr	r2, [r7, #24]
 80035fc:	4013      	ands	r3, r2
 80035fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	691a      	ldr	r2, [r3, #16]
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	f003 0307 	and.w	r3, r3, #7
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	fa02 f303 	lsl.w	r3, r2, r3
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	4313      	orrs	r3, r2
 8003614:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	08da      	lsrs	r2, r3, #3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	3208      	adds	r2, #8
 800361e:	69b9      	ldr	r1, [r7, #24]
 8003620:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	005b      	lsls	r3, r3, #1
 800362e:	2203      	movs	r2, #3
 8003630:	fa02 f303 	lsl.w	r3, r2, r3
 8003634:	43db      	mvns	r3, r3
 8003636:	69ba      	ldr	r2, [r7, #24]
 8003638:	4013      	ands	r3, r2
 800363a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f003 0203 	and.w	r2, r3, #3
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	005b      	lsls	r3, r3, #1
 8003648:	fa02 f303 	lsl.w	r3, r2, r3
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	4313      	orrs	r3, r2
 8003650:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003660:	2b00      	cmp	r3, #0
 8003662:	f000 80b4 	beq.w	80037ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003666:	2300      	movs	r3, #0
 8003668:	60fb      	str	r3, [r7, #12]
 800366a:	4b60      	ldr	r3, [pc, #384]	@ (80037ec <HAL_GPIO_Init+0x30c>)
 800366c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800366e:	4a5f      	ldr	r2, [pc, #380]	@ (80037ec <HAL_GPIO_Init+0x30c>)
 8003670:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003674:	6453      	str	r3, [r2, #68]	@ 0x44
 8003676:	4b5d      	ldr	r3, [pc, #372]	@ (80037ec <HAL_GPIO_Init+0x30c>)
 8003678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800367a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800367e:	60fb      	str	r3, [r7, #12]
 8003680:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003682:	4a5b      	ldr	r2, [pc, #364]	@ (80037f0 <HAL_GPIO_Init+0x310>)
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	089b      	lsrs	r3, r3, #2
 8003688:	3302      	adds	r3, #2
 800368a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800368e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	f003 0303 	and.w	r3, r3, #3
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	220f      	movs	r2, #15
 800369a:	fa02 f303 	lsl.w	r3, r2, r3
 800369e:	43db      	mvns	r3, r3
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	4013      	ands	r3, r2
 80036a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a52      	ldr	r2, [pc, #328]	@ (80037f4 <HAL_GPIO_Init+0x314>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d02b      	beq.n	8003706 <HAL_GPIO_Init+0x226>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a51      	ldr	r2, [pc, #324]	@ (80037f8 <HAL_GPIO_Init+0x318>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d025      	beq.n	8003702 <HAL_GPIO_Init+0x222>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a50      	ldr	r2, [pc, #320]	@ (80037fc <HAL_GPIO_Init+0x31c>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d01f      	beq.n	80036fe <HAL_GPIO_Init+0x21e>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a4f      	ldr	r2, [pc, #316]	@ (8003800 <HAL_GPIO_Init+0x320>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d019      	beq.n	80036fa <HAL_GPIO_Init+0x21a>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a4e      	ldr	r2, [pc, #312]	@ (8003804 <HAL_GPIO_Init+0x324>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d013      	beq.n	80036f6 <HAL_GPIO_Init+0x216>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a4d      	ldr	r2, [pc, #308]	@ (8003808 <HAL_GPIO_Init+0x328>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d00d      	beq.n	80036f2 <HAL_GPIO_Init+0x212>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a4c      	ldr	r2, [pc, #304]	@ (800380c <HAL_GPIO_Init+0x32c>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d007      	beq.n	80036ee <HAL_GPIO_Init+0x20e>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a4b      	ldr	r2, [pc, #300]	@ (8003810 <HAL_GPIO_Init+0x330>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d101      	bne.n	80036ea <HAL_GPIO_Init+0x20a>
 80036e6:	2307      	movs	r3, #7
 80036e8:	e00e      	b.n	8003708 <HAL_GPIO_Init+0x228>
 80036ea:	2308      	movs	r3, #8
 80036ec:	e00c      	b.n	8003708 <HAL_GPIO_Init+0x228>
 80036ee:	2306      	movs	r3, #6
 80036f0:	e00a      	b.n	8003708 <HAL_GPIO_Init+0x228>
 80036f2:	2305      	movs	r3, #5
 80036f4:	e008      	b.n	8003708 <HAL_GPIO_Init+0x228>
 80036f6:	2304      	movs	r3, #4
 80036f8:	e006      	b.n	8003708 <HAL_GPIO_Init+0x228>
 80036fa:	2303      	movs	r3, #3
 80036fc:	e004      	b.n	8003708 <HAL_GPIO_Init+0x228>
 80036fe:	2302      	movs	r3, #2
 8003700:	e002      	b.n	8003708 <HAL_GPIO_Init+0x228>
 8003702:	2301      	movs	r3, #1
 8003704:	e000      	b.n	8003708 <HAL_GPIO_Init+0x228>
 8003706:	2300      	movs	r3, #0
 8003708:	69fa      	ldr	r2, [r7, #28]
 800370a:	f002 0203 	and.w	r2, r2, #3
 800370e:	0092      	lsls	r2, r2, #2
 8003710:	4093      	lsls	r3, r2
 8003712:	69ba      	ldr	r2, [r7, #24]
 8003714:	4313      	orrs	r3, r2
 8003716:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003718:	4935      	ldr	r1, [pc, #212]	@ (80037f0 <HAL_GPIO_Init+0x310>)
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	089b      	lsrs	r3, r3, #2
 800371e:	3302      	adds	r3, #2
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003726:	4b3b      	ldr	r3, [pc, #236]	@ (8003814 <HAL_GPIO_Init+0x334>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	43db      	mvns	r3, r3
 8003730:	69ba      	ldr	r2, [r7, #24]
 8003732:	4013      	ands	r3, r2
 8003734:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d003      	beq.n	800374a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	4313      	orrs	r3, r2
 8003748:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800374a:	4a32      	ldr	r2, [pc, #200]	@ (8003814 <HAL_GPIO_Init+0x334>)
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003750:	4b30      	ldr	r3, [pc, #192]	@ (8003814 <HAL_GPIO_Init+0x334>)
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	43db      	mvns	r3, r3
 800375a:	69ba      	ldr	r2, [r7, #24]
 800375c:	4013      	ands	r3, r2
 800375e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d003      	beq.n	8003774 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	4313      	orrs	r3, r2
 8003772:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003774:	4a27      	ldr	r2, [pc, #156]	@ (8003814 <HAL_GPIO_Init+0x334>)
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800377a:	4b26      	ldr	r3, [pc, #152]	@ (8003814 <HAL_GPIO_Init+0x334>)
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	43db      	mvns	r3, r3
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	4013      	ands	r3, r2
 8003788:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003796:	69ba      	ldr	r2, [r7, #24]
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	4313      	orrs	r3, r2
 800379c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800379e:	4a1d      	ldr	r2, [pc, #116]	@ (8003814 <HAL_GPIO_Init+0x334>)
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037a4:	4b1b      	ldr	r3, [pc, #108]	@ (8003814 <HAL_GPIO_Init+0x334>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	43db      	mvns	r3, r3
 80037ae:	69ba      	ldr	r2, [r7, #24]
 80037b0:	4013      	ands	r3, r2
 80037b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d003      	beq.n	80037c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037c8:	4a12      	ldr	r2, [pc, #72]	@ (8003814 <HAL_GPIO_Init+0x334>)
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	3301      	adds	r3, #1
 80037d2:	61fb      	str	r3, [r7, #28]
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	2b0f      	cmp	r3, #15
 80037d8:	f67f ae90 	bls.w	80034fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80037dc:	bf00      	nop
 80037de:	bf00      	nop
 80037e0:	3724      	adds	r7, #36	@ 0x24
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	40023800 	.word	0x40023800
 80037f0:	40013800 	.word	0x40013800
 80037f4:	40020000 	.word	0x40020000
 80037f8:	40020400 	.word	0x40020400
 80037fc:	40020800 	.word	0x40020800
 8003800:	40020c00 	.word	0x40020c00
 8003804:	40021000 	.word	0x40021000
 8003808:	40021400 	.word	0x40021400
 800380c:	40021800 	.word	0x40021800
 8003810:	40021c00 	.word	0x40021c00
 8003814:	40013c00 	.word	0x40013c00

08003818 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003818:	b480      	push	{r7}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	460b      	mov	r3, r1
 8003822:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	691a      	ldr	r2, [r3, #16]
 8003828:	887b      	ldrh	r3, [r7, #2]
 800382a:	4013      	ands	r3, r2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d002      	beq.n	8003836 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003830:	2301      	movs	r3, #1
 8003832:	73fb      	strb	r3, [r7, #15]
 8003834:	e001      	b.n	800383a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003836:	2300      	movs	r3, #0
 8003838:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800383a:	7bfb      	ldrb	r3, [r7, #15]
}
 800383c:	4618      	mov	r0, r3
 800383e:	3714      	adds	r7, #20
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e267      	b.n	8003d2a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b00      	cmp	r3, #0
 8003864:	d075      	beq.n	8003952 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003866:	4b88      	ldr	r3, [pc, #544]	@ (8003a88 <HAL_RCC_OscConfig+0x240>)
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f003 030c 	and.w	r3, r3, #12
 800386e:	2b04      	cmp	r3, #4
 8003870:	d00c      	beq.n	800388c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003872:	4b85      	ldr	r3, [pc, #532]	@ (8003a88 <HAL_RCC_OscConfig+0x240>)
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800387a:	2b08      	cmp	r3, #8
 800387c:	d112      	bne.n	80038a4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800387e:	4b82      	ldr	r3, [pc, #520]	@ (8003a88 <HAL_RCC_OscConfig+0x240>)
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003886:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800388a:	d10b      	bne.n	80038a4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800388c:	4b7e      	ldr	r3, [pc, #504]	@ (8003a88 <HAL_RCC_OscConfig+0x240>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d05b      	beq.n	8003950 <HAL_RCC_OscConfig+0x108>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d157      	bne.n	8003950 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e242      	b.n	8003d2a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038ac:	d106      	bne.n	80038bc <HAL_RCC_OscConfig+0x74>
 80038ae:	4b76      	ldr	r3, [pc, #472]	@ (8003a88 <HAL_RCC_OscConfig+0x240>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a75      	ldr	r2, [pc, #468]	@ (8003a88 <HAL_RCC_OscConfig+0x240>)
 80038b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038b8:	6013      	str	r3, [r2, #0]
 80038ba:	e01d      	b.n	80038f8 <HAL_RCC_OscConfig+0xb0>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038c4:	d10c      	bne.n	80038e0 <HAL_RCC_OscConfig+0x98>
 80038c6:	4b70      	ldr	r3, [pc, #448]	@ (8003a88 <HAL_RCC_OscConfig+0x240>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a6f      	ldr	r2, [pc, #444]	@ (8003a88 <HAL_RCC_OscConfig+0x240>)
 80038cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038d0:	6013      	str	r3, [r2, #0]
 80038d2:	4b6d      	ldr	r3, [pc, #436]	@ (8003a88 <HAL_RCC_OscConfig+0x240>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a6c      	ldr	r2, [pc, #432]	@ (8003a88 <HAL_RCC_OscConfig+0x240>)
 80038d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038dc:	6013      	str	r3, [r2, #0]
 80038de:	e00b      	b.n	80038f8 <HAL_RCC_OscConfig+0xb0>
 80038e0:	4b69      	ldr	r3, [pc, #420]	@ (8003a88 <HAL_RCC_OscConfig+0x240>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a68      	ldr	r2, [pc, #416]	@ (8003a88 <HAL_RCC_OscConfig+0x240>)
 80038e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038ea:	6013      	str	r3, [r2, #0]
 80038ec:	4b66      	ldr	r3, [pc, #408]	@ (8003a88 <HAL_RCC_OscConfig+0x240>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a65      	ldr	r2, [pc, #404]	@ (8003a88 <HAL_RCC_OscConfig+0x240>)
 80038f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d013      	beq.n	8003928 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003900:	f7fe fc9e 	bl	8002240 <HAL_GetTick>
 8003904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003906:	e008      	b.n	800391a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003908:	f7fe fc9a 	bl	8002240 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b64      	cmp	r3, #100	@ 0x64
 8003914:	d901      	bls.n	800391a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e207      	b.n	8003d2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800391a:	4b5b      	ldr	r3, [pc, #364]	@ (8003a88 <HAL_RCC_OscConfig+0x240>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d0f0      	beq.n	8003908 <HAL_RCC_OscConfig+0xc0>
 8003926:	e014      	b.n	8003952 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003928:	f7fe fc8a 	bl	8002240 <HAL_GetTick>
 800392c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800392e:	e008      	b.n	8003942 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003930:	f7fe fc86 	bl	8002240 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	2b64      	cmp	r3, #100	@ 0x64
 800393c:	d901      	bls.n	8003942 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e1f3      	b.n	8003d2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003942:	4b51      	ldr	r3, [pc, #324]	@ (8003a88 <HAL_RCC_OscConfig+0x240>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d1f0      	bne.n	8003930 <HAL_RCC_OscConfig+0xe8>
 800394e:	e000      	b.n	8003952 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003950:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d063      	beq.n	8003a26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800395e:	4b4a      	ldr	r3, [pc, #296]	@ (8003a88 <HAL_RCC_OscConfig+0x240>)
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f003 030c 	and.w	r3, r3, #12
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00b      	beq.n	8003982 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800396a:	4b47      	ldr	r3, [pc, #284]	@ (8003a88 <HAL_RCC_OscConfig+0x240>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003972:	2b08      	cmp	r3, #8
 8003974:	d11c      	bne.n	80039b0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003976:	4b44      	ldr	r3, [pc, #272]	@ (8003a88 <HAL_RCC_OscConfig+0x240>)
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d116      	bne.n	80039b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003982:	4b41      	ldr	r3, [pc, #260]	@ (8003a88 <HAL_RCC_OscConfig+0x240>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	2b00      	cmp	r3, #0
 800398c:	d005      	beq.n	800399a <HAL_RCC_OscConfig+0x152>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d001      	beq.n	800399a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e1c7      	b.n	8003d2a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800399a:	4b3b      	ldr	r3, [pc, #236]	@ (8003a88 <HAL_RCC_OscConfig+0x240>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	00db      	lsls	r3, r3, #3
 80039a8:	4937      	ldr	r1, [pc, #220]	@ (8003a88 <HAL_RCC_OscConfig+0x240>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ae:	e03a      	b.n	8003a26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d020      	beq.n	80039fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039b8:	4b34      	ldr	r3, [pc, #208]	@ (8003a8c <HAL_RCC_OscConfig+0x244>)
 80039ba:	2201      	movs	r2, #1
 80039bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039be:	f7fe fc3f 	bl	8002240 <HAL_GetTick>
 80039c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039c4:	e008      	b.n	80039d8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039c6:	f7fe fc3b 	bl	8002240 <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d901      	bls.n	80039d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e1a8      	b.n	8003d2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039d8:	4b2b      	ldr	r3, [pc, #172]	@ (8003a88 <HAL_RCC_OscConfig+0x240>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0302 	and.w	r3, r3, #2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d0f0      	beq.n	80039c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039e4:	4b28      	ldr	r3, [pc, #160]	@ (8003a88 <HAL_RCC_OscConfig+0x240>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	00db      	lsls	r3, r3, #3
 80039f2:	4925      	ldr	r1, [pc, #148]	@ (8003a88 <HAL_RCC_OscConfig+0x240>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	600b      	str	r3, [r1, #0]
 80039f8:	e015      	b.n	8003a26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039fa:	4b24      	ldr	r3, [pc, #144]	@ (8003a8c <HAL_RCC_OscConfig+0x244>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a00:	f7fe fc1e 	bl	8002240 <HAL_GetTick>
 8003a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a06:	e008      	b.n	8003a1a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a08:	f7fe fc1a 	bl	8002240 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e187      	b.n	8003d2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a1a:	4b1b      	ldr	r3, [pc, #108]	@ (8003a88 <HAL_RCC_OscConfig+0x240>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0302 	and.w	r3, r3, #2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d1f0      	bne.n	8003a08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0308 	and.w	r3, r3, #8
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d036      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d016      	beq.n	8003a68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a3a:	4b15      	ldr	r3, [pc, #84]	@ (8003a90 <HAL_RCC_OscConfig+0x248>)
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a40:	f7fe fbfe 	bl	8002240 <HAL_GetTick>
 8003a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a46:	e008      	b.n	8003a5a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a48:	f7fe fbfa 	bl	8002240 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e167      	b.n	8003d2a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8003a88 <HAL_RCC_OscConfig+0x240>)
 8003a5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d0f0      	beq.n	8003a48 <HAL_RCC_OscConfig+0x200>
 8003a66:	e01b      	b.n	8003aa0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a68:	4b09      	ldr	r3, [pc, #36]	@ (8003a90 <HAL_RCC_OscConfig+0x248>)
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a6e:	f7fe fbe7 	bl	8002240 <HAL_GetTick>
 8003a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a74:	e00e      	b.n	8003a94 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a76:	f7fe fbe3 	bl	8002240 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d907      	bls.n	8003a94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e150      	b.n	8003d2a <HAL_RCC_OscConfig+0x4e2>
 8003a88:	40023800 	.word	0x40023800
 8003a8c:	42470000 	.word	0x42470000
 8003a90:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a94:	4b88      	ldr	r3, [pc, #544]	@ (8003cb8 <HAL_RCC_OscConfig+0x470>)
 8003a96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1ea      	bne.n	8003a76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0304 	and.w	r3, r3, #4
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	f000 8097 	beq.w	8003bdc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ab2:	4b81      	ldr	r3, [pc, #516]	@ (8003cb8 <HAL_RCC_OscConfig+0x470>)
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d10f      	bne.n	8003ade <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003abe:	2300      	movs	r3, #0
 8003ac0:	60bb      	str	r3, [r7, #8]
 8003ac2:	4b7d      	ldr	r3, [pc, #500]	@ (8003cb8 <HAL_RCC_OscConfig+0x470>)
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac6:	4a7c      	ldr	r2, [pc, #496]	@ (8003cb8 <HAL_RCC_OscConfig+0x470>)
 8003ac8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003acc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ace:	4b7a      	ldr	r3, [pc, #488]	@ (8003cb8 <HAL_RCC_OscConfig+0x470>)
 8003ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ad6:	60bb      	str	r3, [r7, #8]
 8003ad8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ada:	2301      	movs	r3, #1
 8003adc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ade:	4b77      	ldr	r3, [pc, #476]	@ (8003cbc <HAL_RCC_OscConfig+0x474>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d118      	bne.n	8003b1c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003aea:	4b74      	ldr	r3, [pc, #464]	@ (8003cbc <HAL_RCC_OscConfig+0x474>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a73      	ldr	r2, [pc, #460]	@ (8003cbc <HAL_RCC_OscConfig+0x474>)
 8003af0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003af4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003af6:	f7fe fba3 	bl	8002240 <HAL_GetTick>
 8003afa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003afc:	e008      	b.n	8003b10 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003afe:	f7fe fb9f 	bl	8002240 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d901      	bls.n	8003b10 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e10c      	b.n	8003d2a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b10:	4b6a      	ldr	r3, [pc, #424]	@ (8003cbc <HAL_RCC_OscConfig+0x474>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d0f0      	beq.n	8003afe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d106      	bne.n	8003b32 <HAL_RCC_OscConfig+0x2ea>
 8003b24:	4b64      	ldr	r3, [pc, #400]	@ (8003cb8 <HAL_RCC_OscConfig+0x470>)
 8003b26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b28:	4a63      	ldr	r2, [pc, #396]	@ (8003cb8 <HAL_RCC_OscConfig+0x470>)
 8003b2a:	f043 0301 	orr.w	r3, r3, #1
 8003b2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b30:	e01c      	b.n	8003b6c <HAL_RCC_OscConfig+0x324>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	2b05      	cmp	r3, #5
 8003b38:	d10c      	bne.n	8003b54 <HAL_RCC_OscConfig+0x30c>
 8003b3a:	4b5f      	ldr	r3, [pc, #380]	@ (8003cb8 <HAL_RCC_OscConfig+0x470>)
 8003b3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b3e:	4a5e      	ldr	r2, [pc, #376]	@ (8003cb8 <HAL_RCC_OscConfig+0x470>)
 8003b40:	f043 0304 	orr.w	r3, r3, #4
 8003b44:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b46:	4b5c      	ldr	r3, [pc, #368]	@ (8003cb8 <HAL_RCC_OscConfig+0x470>)
 8003b48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b4a:	4a5b      	ldr	r2, [pc, #364]	@ (8003cb8 <HAL_RCC_OscConfig+0x470>)
 8003b4c:	f043 0301 	orr.w	r3, r3, #1
 8003b50:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b52:	e00b      	b.n	8003b6c <HAL_RCC_OscConfig+0x324>
 8003b54:	4b58      	ldr	r3, [pc, #352]	@ (8003cb8 <HAL_RCC_OscConfig+0x470>)
 8003b56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b58:	4a57      	ldr	r2, [pc, #348]	@ (8003cb8 <HAL_RCC_OscConfig+0x470>)
 8003b5a:	f023 0301 	bic.w	r3, r3, #1
 8003b5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b60:	4b55      	ldr	r3, [pc, #340]	@ (8003cb8 <HAL_RCC_OscConfig+0x470>)
 8003b62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b64:	4a54      	ldr	r2, [pc, #336]	@ (8003cb8 <HAL_RCC_OscConfig+0x470>)
 8003b66:	f023 0304 	bic.w	r3, r3, #4
 8003b6a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d015      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b74:	f7fe fb64 	bl	8002240 <HAL_GetTick>
 8003b78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b7a:	e00a      	b.n	8003b92 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b7c:	f7fe fb60 	bl	8002240 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e0cb      	b.n	8003d2a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b92:	4b49      	ldr	r3, [pc, #292]	@ (8003cb8 <HAL_RCC_OscConfig+0x470>)
 8003b94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d0ee      	beq.n	8003b7c <HAL_RCC_OscConfig+0x334>
 8003b9e:	e014      	b.n	8003bca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ba0:	f7fe fb4e 	bl	8002240 <HAL_GetTick>
 8003ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ba6:	e00a      	b.n	8003bbe <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ba8:	f7fe fb4a 	bl	8002240 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e0b5      	b.n	8003d2a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bbe:	4b3e      	ldr	r3, [pc, #248]	@ (8003cb8 <HAL_RCC_OscConfig+0x470>)
 8003bc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1ee      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003bca:	7dfb      	ldrb	r3, [r7, #23]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d105      	bne.n	8003bdc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bd0:	4b39      	ldr	r3, [pc, #228]	@ (8003cb8 <HAL_RCC_OscConfig+0x470>)
 8003bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd4:	4a38      	ldr	r2, [pc, #224]	@ (8003cb8 <HAL_RCC_OscConfig+0x470>)
 8003bd6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bda:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	f000 80a1 	beq.w	8003d28 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003be6:	4b34      	ldr	r3, [pc, #208]	@ (8003cb8 <HAL_RCC_OscConfig+0x470>)
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f003 030c 	and.w	r3, r3, #12
 8003bee:	2b08      	cmp	r3, #8
 8003bf0:	d05c      	beq.n	8003cac <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d141      	bne.n	8003c7e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bfa:	4b31      	ldr	r3, [pc, #196]	@ (8003cc0 <HAL_RCC_OscConfig+0x478>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c00:	f7fe fb1e 	bl	8002240 <HAL_GetTick>
 8003c04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c06:	e008      	b.n	8003c1a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c08:	f7fe fb1a 	bl	8002240 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e087      	b.n	8003d2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c1a:	4b27      	ldr	r3, [pc, #156]	@ (8003cb8 <HAL_RCC_OscConfig+0x470>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1f0      	bne.n	8003c08 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	69da      	ldr	r2, [r3, #28]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
 8003c2e:	431a      	orrs	r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c34:	019b      	lsls	r3, r3, #6
 8003c36:	431a      	orrs	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c3c:	085b      	lsrs	r3, r3, #1
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	041b      	lsls	r3, r3, #16
 8003c42:	431a      	orrs	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c48:	061b      	lsls	r3, r3, #24
 8003c4a:	491b      	ldr	r1, [pc, #108]	@ (8003cb8 <HAL_RCC_OscConfig+0x470>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c50:	4b1b      	ldr	r3, [pc, #108]	@ (8003cc0 <HAL_RCC_OscConfig+0x478>)
 8003c52:	2201      	movs	r2, #1
 8003c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c56:	f7fe faf3 	bl	8002240 <HAL_GetTick>
 8003c5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c5c:	e008      	b.n	8003c70 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c5e:	f7fe faef 	bl	8002240 <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d901      	bls.n	8003c70 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e05c      	b.n	8003d2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c70:	4b11      	ldr	r3, [pc, #68]	@ (8003cb8 <HAL_RCC_OscConfig+0x470>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d0f0      	beq.n	8003c5e <HAL_RCC_OscConfig+0x416>
 8003c7c:	e054      	b.n	8003d28 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c7e:	4b10      	ldr	r3, [pc, #64]	@ (8003cc0 <HAL_RCC_OscConfig+0x478>)
 8003c80:	2200      	movs	r2, #0
 8003c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c84:	f7fe fadc 	bl	8002240 <HAL_GetTick>
 8003c88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c8a:	e008      	b.n	8003c9e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c8c:	f7fe fad8 	bl	8002240 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e045      	b.n	8003d2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c9e:	4b06      	ldr	r3, [pc, #24]	@ (8003cb8 <HAL_RCC_OscConfig+0x470>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1f0      	bne.n	8003c8c <HAL_RCC_OscConfig+0x444>
 8003caa:	e03d      	b.n	8003d28 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	699b      	ldr	r3, [r3, #24]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d107      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e038      	b.n	8003d2a <HAL_RCC_OscConfig+0x4e2>
 8003cb8:	40023800 	.word	0x40023800
 8003cbc:	40007000 	.word	0x40007000
 8003cc0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003cc4:	4b1b      	ldr	r3, [pc, #108]	@ (8003d34 <HAL_RCC_OscConfig+0x4ec>)
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d028      	beq.n	8003d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d121      	bne.n	8003d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d11a      	bne.n	8003d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003cfa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d111      	bne.n	8003d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d0a:	085b      	lsrs	r3, r3, #1
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d107      	bne.n	8003d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d001      	beq.n	8003d28 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e000      	b.n	8003d2a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3718      	adds	r7, #24
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	40023800 	.word	0x40023800

08003d38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d101      	bne.n	8003d4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e0cc      	b.n	8003ee6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d4c:	4b68      	ldr	r3, [pc, #416]	@ (8003ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0307 	and.w	r3, r3, #7
 8003d54:	683a      	ldr	r2, [r7, #0]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d90c      	bls.n	8003d74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d5a:	4b65      	ldr	r3, [pc, #404]	@ (8003ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d5c:	683a      	ldr	r2, [r7, #0]
 8003d5e:	b2d2      	uxtb	r2, r2
 8003d60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d62:	4b63      	ldr	r3, [pc, #396]	@ (8003ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0307 	and.w	r3, r3, #7
 8003d6a:	683a      	ldr	r2, [r7, #0]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d001      	beq.n	8003d74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e0b8      	b.n	8003ee6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0302 	and.w	r3, r3, #2
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d020      	beq.n	8003dc2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0304 	and.w	r3, r3, #4
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d005      	beq.n	8003d98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d8c:	4b59      	ldr	r3, [pc, #356]	@ (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	4a58      	ldr	r2, [pc, #352]	@ (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d92:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003d96:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0308 	and.w	r3, r3, #8
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d005      	beq.n	8003db0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003da4:	4b53      	ldr	r3, [pc, #332]	@ (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	4a52      	ldr	r2, [pc, #328]	@ (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003daa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003dae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003db0:	4b50      	ldr	r3, [pc, #320]	@ (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	494d      	ldr	r1, [pc, #308]	@ (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d044      	beq.n	8003e58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d107      	bne.n	8003de6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dd6:	4b47      	ldr	r3, [pc, #284]	@ (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d119      	bne.n	8003e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e07f      	b.n	8003ee6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d003      	beq.n	8003df6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003df2:	2b03      	cmp	r3, #3
 8003df4:	d107      	bne.n	8003e06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003df6:	4b3f      	ldr	r3, [pc, #252]	@ (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d109      	bne.n	8003e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e06f      	b.n	8003ee6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e06:	4b3b      	ldr	r3, [pc, #236]	@ (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d101      	bne.n	8003e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e067      	b.n	8003ee6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e16:	4b37      	ldr	r3, [pc, #220]	@ (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f023 0203 	bic.w	r2, r3, #3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	4934      	ldr	r1, [pc, #208]	@ (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e24:	4313      	orrs	r3, r2
 8003e26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e28:	f7fe fa0a 	bl	8002240 <HAL_GetTick>
 8003e2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e2e:	e00a      	b.n	8003e46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e30:	f7fe fa06 	bl	8002240 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e04f      	b.n	8003ee6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e46:	4b2b      	ldr	r3, [pc, #172]	@ (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f003 020c 	and.w	r2, r3, #12
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d1eb      	bne.n	8003e30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e58:	4b25      	ldr	r3, [pc, #148]	@ (8003ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0307 	and.w	r3, r3, #7
 8003e60:	683a      	ldr	r2, [r7, #0]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d20c      	bcs.n	8003e80 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e66:	4b22      	ldr	r3, [pc, #136]	@ (8003ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e68:	683a      	ldr	r2, [r7, #0]
 8003e6a:	b2d2      	uxtb	r2, r2
 8003e6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e6e:	4b20      	ldr	r3, [pc, #128]	@ (8003ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0307 	and.w	r3, r3, #7
 8003e76:	683a      	ldr	r2, [r7, #0]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d001      	beq.n	8003e80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e032      	b.n	8003ee6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0304 	and.w	r3, r3, #4
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d008      	beq.n	8003e9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e8c:	4b19      	ldr	r3, [pc, #100]	@ (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	4916      	ldr	r1, [pc, #88]	@ (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0308 	and.w	r3, r3, #8
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d009      	beq.n	8003ebe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003eaa:	4b12      	ldr	r3, [pc, #72]	@ (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	00db      	lsls	r3, r3, #3
 8003eb8:	490e      	ldr	r1, [pc, #56]	@ (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ebe:	f000 f821 	bl	8003f04 <HAL_RCC_GetSysClockFreq>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	091b      	lsrs	r3, r3, #4
 8003eca:	f003 030f 	and.w	r3, r3, #15
 8003ece:	490a      	ldr	r1, [pc, #40]	@ (8003ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8003ed0:	5ccb      	ldrb	r3, [r1, r3]
 8003ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ed6:	4a09      	ldr	r2, [pc, #36]	@ (8003efc <HAL_RCC_ClockConfig+0x1c4>)
 8003ed8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003eda:	4b09      	ldr	r3, [pc, #36]	@ (8003f00 <HAL_RCC_ClockConfig+0x1c8>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f7fe f96a 	bl	80021b8 <HAL_InitTick>

  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3710      	adds	r7, #16
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	40023c00 	.word	0x40023c00
 8003ef4:	40023800 	.word	0x40023800
 8003ef8:	080078c0 	.word	0x080078c0
 8003efc:	20000008 	.word	0x20000008
 8003f00:	2000000c 	.word	0x2000000c

08003f04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f08:	b094      	sub	sp, #80	@ 0x50
 8003f0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003f10:	2300      	movs	r3, #0
 8003f12:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003f14:	2300      	movs	r3, #0
 8003f16:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f1c:	4b79      	ldr	r3, [pc, #484]	@ (8004104 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f003 030c 	and.w	r3, r3, #12
 8003f24:	2b08      	cmp	r3, #8
 8003f26:	d00d      	beq.n	8003f44 <HAL_RCC_GetSysClockFreq+0x40>
 8003f28:	2b08      	cmp	r3, #8
 8003f2a:	f200 80e1 	bhi.w	80040f0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d002      	beq.n	8003f38 <HAL_RCC_GetSysClockFreq+0x34>
 8003f32:	2b04      	cmp	r3, #4
 8003f34:	d003      	beq.n	8003f3e <HAL_RCC_GetSysClockFreq+0x3a>
 8003f36:	e0db      	b.n	80040f0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f38:	4b73      	ldr	r3, [pc, #460]	@ (8004108 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f3a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f3c:	e0db      	b.n	80040f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f3e:	4b73      	ldr	r3, [pc, #460]	@ (800410c <HAL_RCC_GetSysClockFreq+0x208>)
 8003f40:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f42:	e0d8      	b.n	80040f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f44:	4b6f      	ldr	r3, [pc, #444]	@ (8004104 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f4c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f4e:	4b6d      	ldr	r3, [pc, #436]	@ (8004104 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d063      	beq.n	8004022 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f5a:	4b6a      	ldr	r3, [pc, #424]	@ (8004104 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	099b      	lsrs	r3, r3, #6
 8003f60:	2200      	movs	r2, #0
 8003f62:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f64:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003f66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f6e:	2300      	movs	r3, #0
 8003f70:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f72:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003f76:	4622      	mov	r2, r4
 8003f78:	462b      	mov	r3, r5
 8003f7a:	f04f 0000 	mov.w	r0, #0
 8003f7e:	f04f 0100 	mov.w	r1, #0
 8003f82:	0159      	lsls	r1, r3, #5
 8003f84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f88:	0150      	lsls	r0, r2, #5
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	4621      	mov	r1, r4
 8003f90:	1a51      	subs	r1, r2, r1
 8003f92:	6139      	str	r1, [r7, #16]
 8003f94:	4629      	mov	r1, r5
 8003f96:	eb63 0301 	sbc.w	r3, r3, r1
 8003f9a:	617b      	str	r3, [r7, #20]
 8003f9c:	f04f 0200 	mov.w	r2, #0
 8003fa0:	f04f 0300 	mov.w	r3, #0
 8003fa4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003fa8:	4659      	mov	r1, fp
 8003faa:	018b      	lsls	r3, r1, #6
 8003fac:	4651      	mov	r1, sl
 8003fae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fb2:	4651      	mov	r1, sl
 8003fb4:	018a      	lsls	r2, r1, #6
 8003fb6:	4651      	mov	r1, sl
 8003fb8:	ebb2 0801 	subs.w	r8, r2, r1
 8003fbc:	4659      	mov	r1, fp
 8003fbe:	eb63 0901 	sbc.w	r9, r3, r1
 8003fc2:	f04f 0200 	mov.w	r2, #0
 8003fc6:	f04f 0300 	mov.w	r3, #0
 8003fca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fd6:	4690      	mov	r8, r2
 8003fd8:	4699      	mov	r9, r3
 8003fda:	4623      	mov	r3, r4
 8003fdc:	eb18 0303 	adds.w	r3, r8, r3
 8003fe0:	60bb      	str	r3, [r7, #8]
 8003fe2:	462b      	mov	r3, r5
 8003fe4:	eb49 0303 	adc.w	r3, r9, r3
 8003fe8:	60fb      	str	r3, [r7, #12]
 8003fea:	f04f 0200 	mov.w	r2, #0
 8003fee:	f04f 0300 	mov.w	r3, #0
 8003ff2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003ff6:	4629      	mov	r1, r5
 8003ff8:	024b      	lsls	r3, r1, #9
 8003ffa:	4621      	mov	r1, r4
 8003ffc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004000:	4621      	mov	r1, r4
 8004002:	024a      	lsls	r2, r1, #9
 8004004:	4610      	mov	r0, r2
 8004006:	4619      	mov	r1, r3
 8004008:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800400a:	2200      	movs	r2, #0
 800400c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800400e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004010:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004014:	f7fc f98c 	bl	8000330 <__aeabi_uldivmod>
 8004018:	4602      	mov	r2, r0
 800401a:	460b      	mov	r3, r1
 800401c:	4613      	mov	r3, r2
 800401e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004020:	e058      	b.n	80040d4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004022:	4b38      	ldr	r3, [pc, #224]	@ (8004104 <HAL_RCC_GetSysClockFreq+0x200>)
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	099b      	lsrs	r3, r3, #6
 8004028:	2200      	movs	r2, #0
 800402a:	4618      	mov	r0, r3
 800402c:	4611      	mov	r1, r2
 800402e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004032:	623b      	str	r3, [r7, #32]
 8004034:	2300      	movs	r3, #0
 8004036:	627b      	str	r3, [r7, #36]	@ 0x24
 8004038:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800403c:	4642      	mov	r2, r8
 800403e:	464b      	mov	r3, r9
 8004040:	f04f 0000 	mov.w	r0, #0
 8004044:	f04f 0100 	mov.w	r1, #0
 8004048:	0159      	lsls	r1, r3, #5
 800404a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800404e:	0150      	lsls	r0, r2, #5
 8004050:	4602      	mov	r2, r0
 8004052:	460b      	mov	r3, r1
 8004054:	4641      	mov	r1, r8
 8004056:	ebb2 0a01 	subs.w	sl, r2, r1
 800405a:	4649      	mov	r1, r9
 800405c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004060:	f04f 0200 	mov.w	r2, #0
 8004064:	f04f 0300 	mov.w	r3, #0
 8004068:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800406c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004070:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004074:	ebb2 040a 	subs.w	r4, r2, sl
 8004078:	eb63 050b 	sbc.w	r5, r3, fp
 800407c:	f04f 0200 	mov.w	r2, #0
 8004080:	f04f 0300 	mov.w	r3, #0
 8004084:	00eb      	lsls	r3, r5, #3
 8004086:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800408a:	00e2      	lsls	r2, r4, #3
 800408c:	4614      	mov	r4, r2
 800408e:	461d      	mov	r5, r3
 8004090:	4643      	mov	r3, r8
 8004092:	18e3      	adds	r3, r4, r3
 8004094:	603b      	str	r3, [r7, #0]
 8004096:	464b      	mov	r3, r9
 8004098:	eb45 0303 	adc.w	r3, r5, r3
 800409c:	607b      	str	r3, [r7, #4]
 800409e:	f04f 0200 	mov.w	r2, #0
 80040a2:	f04f 0300 	mov.w	r3, #0
 80040a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040aa:	4629      	mov	r1, r5
 80040ac:	028b      	lsls	r3, r1, #10
 80040ae:	4621      	mov	r1, r4
 80040b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040b4:	4621      	mov	r1, r4
 80040b6:	028a      	lsls	r2, r1, #10
 80040b8:	4610      	mov	r0, r2
 80040ba:	4619      	mov	r1, r3
 80040bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040be:	2200      	movs	r2, #0
 80040c0:	61bb      	str	r3, [r7, #24]
 80040c2:	61fa      	str	r2, [r7, #28]
 80040c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040c8:	f7fc f932 	bl	8000330 <__aeabi_uldivmod>
 80040cc:	4602      	mov	r2, r0
 80040ce:	460b      	mov	r3, r1
 80040d0:	4613      	mov	r3, r2
 80040d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80040d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004104 <HAL_RCC_GetSysClockFreq+0x200>)
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	0c1b      	lsrs	r3, r3, #16
 80040da:	f003 0303 	and.w	r3, r3, #3
 80040de:	3301      	adds	r3, #1
 80040e0:	005b      	lsls	r3, r3, #1
 80040e2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80040e4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80040e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80040ee:	e002      	b.n	80040f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040f0:	4b05      	ldr	r3, [pc, #20]	@ (8004108 <HAL_RCC_GetSysClockFreq+0x204>)
 80040f2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80040f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3750      	adds	r7, #80	@ 0x50
 80040fc:	46bd      	mov	sp, r7
 80040fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004102:	bf00      	nop
 8004104:	40023800 	.word	0x40023800
 8004108:	00f42400 	.word	0x00f42400
 800410c:	007a1200 	.word	0x007a1200

08004110 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d101      	bne.n	8004122 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e041      	b.n	80041a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	d106      	bne.n	800413c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f7fd fe22 	bl	8001d80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2202      	movs	r2, #2
 8004140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	3304      	adds	r3, #4
 800414c:	4619      	mov	r1, r3
 800414e:	4610      	mov	r0, r2
 8004150:	f000 ff10 	bl	8004f74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3708      	adds	r7, #8
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
	...

080041b0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b085      	sub	sp, #20
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d001      	beq.n	80041c8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e046      	b.n	8004256 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2202      	movs	r2, #2
 80041cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a23      	ldr	r2, [pc, #140]	@ (8004264 <HAL_TIM_Base_Start+0xb4>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d022      	beq.n	8004220 <HAL_TIM_Base_Start+0x70>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041e2:	d01d      	beq.n	8004220 <HAL_TIM_Base_Start+0x70>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a1f      	ldr	r2, [pc, #124]	@ (8004268 <HAL_TIM_Base_Start+0xb8>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d018      	beq.n	8004220 <HAL_TIM_Base_Start+0x70>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a1e      	ldr	r2, [pc, #120]	@ (800426c <HAL_TIM_Base_Start+0xbc>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d013      	beq.n	8004220 <HAL_TIM_Base_Start+0x70>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a1c      	ldr	r2, [pc, #112]	@ (8004270 <HAL_TIM_Base_Start+0xc0>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d00e      	beq.n	8004220 <HAL_TIM_Base_Start+0x70>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a1b      	ldr	r2, [pc, #108]	@ (8004274 <HAL_TIM_Base_Start+0xc4>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d009      	beq.n	8004220 <HAL_TIM_Base_Start+0x70>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a19      	ldr	r2, [pc, #100]	@ (8004278 <HAL_TIM_Base_Start+0xc8>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d004      	beq.n	8004220 <HAL_TIM_Base_Start+0x70>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a18      	ldr	r2, [pc, #96]	@ (800427c <HAL_TIM_Base_Start+0xcc>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d111      	bne.n	8004244 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f003 0307 	and.w	r3, r3, #7
 800422a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2b06      	cmp	r3, #6
 8004230:	d010      	beq.n	8004254 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f042 0201 	orr.w	r2, r2, #1
 8004240:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004242:	e007      	b.n	8004254 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f042 0201 	orr.w	r2, r2, #1
 8004252:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3714      	adds	r7, #20
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	40010000 	.word	0x40010000
 8004268:	40000400 	.word	0x40000400
 800426c:	40000800 	.word	0x40000800
 8004270:	40000c00 	.word	0x40000c00
 8004274:	40010400 	.word	0x40010400
 8004278:	40014000 	.word	0x40014000
 800427c:	40001800 	.word	0x40001800

08004280 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d101      	bne.n	8004292 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e041      	b.n	8004316 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004298:	b2db      	uxtb	r3, r3
 800429a:	2b00      	cmp	r3, #0
 800429c:	d106      	bne.n	80042ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 f839 	bl	800431e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2202      	movs	r2, #2
 80042b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	3304      	adds	r3, #4
 80042bc:	4619      	mov	r1, r3
 80042be:	4610      	mov	r0, r2
 80042c0:	f000 fe58 	bl	8004f74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	3708      	adds	r7, #8
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}

0800431e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800431e:	b480      	push	{r7}
 8004320:	b083      	sub	sp, #12
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004326:	bf00      	nop
 8004328:	370c      	adds	r7, #12
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
	...

08004334 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b086      	sub	sp, #24
 8004338:	af00      	add	r7, sp, #0
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	607a      	str	r2, [r7, #4]
 8004340:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8004342:	2300      	movs	r3, #0
 8004344:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d109      	bne.n	8004360 <HAL_TIM_PWM_Start_DMA+0x2c>
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004352:	b2db      	uxtb	r3, r3
 8004354:	2b02      	cmp	r3, #2
 8004356:	bf0c      	ite	eq
 8004358:	2301      	moveq	r3, #1
 800435a:	2300      	movne	r3, #0
 800435c:	b2db      	uxtb	r3, r3
 800435e:	e022      	b.n	80043a6 <HAL_TIM_PWM_Start_DMA+0x72>
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	2b04      	cmp	r3, #4
 8004364:	d109      	bne.n	800437a <HAL_TIM_PWM_Start_DMA+0x46>
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800436c:	b2db      	uxtb	r3, r3
 800436e:	2b02      	cmp	r3, #2
 8004370:	bf0c      	ite	eq
 8004372:	2301      	moveq	r3, #1
 8004374:	2300      	movne	r3, #0
 8004376:	b2db      	uxtb	r3, r3
 8004378:	e015      	b.n	80043a6 <HAL_TIM_PWM_Start_DMA+0x72>
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	2b08      	cmp	r3, #8
 800437e:	d109      	bne.n	8004394 <HAL_TIM_PWM_Start_DMA+0x60>
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004386:	b2db      	uxtb	r3, r3
 8004388:	2b02      	cmp	r3, #2
 800438a:	bf0c      	ite	eq
 800438c:	2301      	moveq	r3, #1
 800438e:	2300      	movne	r3, #0
 8004390:	b2db      	uxtb	r3, r3
 8004392:	e008      	b.n	80043a6 <HAL_TIM_PWM_Start_DMA+0x72>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800439a:	b2db      	uxtb	r3, r3
 800439c:	2b02      	cmp	r3, #2
 800439e:	bf0c      	ite	eq
 80043a0:	2301      	moveq	r3, #1
 80043a2:	2300      	movne	r3, #0
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d001      	beq.n	80043ae <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80043aa:	2302      	movs	r3, #2
 80043ac:	e171      	b.n	8004692 <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d109      	bne.n	80043c8 <HAL_TIM_PWM_Start_DMA+0x94>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	2b01      	cmp	r3, #1
 80043be:	bf0c      	ite	eq
 80043c0:	2301      	moveq	r3, #1
 80043c2:	2300      	movne	r3, #0
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	e022      	b.n	800440e <HAL_TIM_PWM_Start_DMA+0xda>
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	2b04      	cmp	r3, #4
 80043cc:	d109      	bne.n	80043e2 <HAL_TIM_PWM_Start_DMA+0xae>
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	bf0c      	ite	eq
 80043da:	2301      	moveq	r3, #1
 80043dc:	2300      	movne	r3, #0
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	e015      	b.n	800440e <HAL_TIM_PWM_Start_DMA+0xda>
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	2b08      	cmp	r3, #8
 80043e6:	d109      	bne.n	80043fc <HAL_TIM_PWM_Start_DMA+0xc8>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	bf0c      	ite	eq
 80043f4:	2301      	moveq	r3, #1
 80043f6:	2300      	movne	r3, #0
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	e008      	b.n	800440e <HAL_TIM_PWM_Start_DMA+0xda>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004402:	b2db      	uxtb	r3, r3
 8004404:	2b01      	cmp	r3, #1
 8004406:	bf0c      	ite	eq
 8004408:	2301      	moveq	r3, #1
 800440a:	2300      	movne	r3, #0
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b00      	cmp	r3, #0
 8004410:	d024      	beq.n	800445c <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d002      	beq.n	800441e <HAL_TIM_PWM_Start_DMA+0xea>
 8004418:	887b      	ldrh	r3, [r7, #2]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d101      	bne.n	8004422 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e137      	b.n	8004692 <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d104      	bne.n	8004432 <HAL_TIM_PWM_Start_DMA+0xfe>
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2202      	movs	r2, #2
 800442c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004430:	e016      	b.n	8004460 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	2b04      	cmp	r3, #4
 8004436:	d104      	bne.n	8004442 <HAL_TIM_PWM_Start_DMA+0x10e>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2202      	movs	r2, #2
 800443c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004440:	e00e      	b.n	8004460 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	2b08      	cmp	r3, #8
 8004446:	d104      	bne.n	8004452 <HAL_TIM_PWM_Start_DMA+0x11e>
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2202      	movs	r2, #2
 800444c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004450:	e006      	b.n	8004460 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2202      	movs	r2, #2
 8004456:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800445a:	e001      	b.n	8004460 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e118      	b.n	8004692 <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	2b0c      	cmp	r3, #12
 8004464:	f200 80ae 	bhi.w	80045c4 <HAL_TIM_PWM_Start_DMA+0x290>
 8004468:	a201      	add	r2, pc, #4	@ (adr r2, 8004470 <HAL_TIM_PWM_Start_DMA+0x13c>)
 800446a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800446e:	bf00      	nop
 8004470:	080044a5 	.word	0x080044a5
 8004474:	080045c5 	.word	0x080045c5
 8004478:	080045c5 	.word	0x080045c5
 800447c:	080045c5 	.word	0x080045c5
 8004480:	080044ed 	.word	0x080044ed
 8004484:	080045c5 	.word	0x080045c5
 8004488:	080045c5 	.word	0x080045c5
 800448c:	080045c5 	.word	0x080045c5
 8004490:	08004535 	.word	0x08004535
 8004494:	080045c5 	.word	0x080045c5
 8004498:	080045c5 	.word	0x080045c5
 800449c:	080045c5 	.word	0x080045c5
 80044a0:	0800457d 	.word	0x0800457d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a8:	4a7c      	ldr	r2, [pc, #496]	@ (800469c <HAL_TIM_PWM_Start_DMA+0x368>)
 80044aa:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b0:	4a7b      	ldr	r2, [pc, #492]	@ (80046a0 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80044b2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b8:	4a7a      	ldr	r2, [pc, #488]	@ (80046a4 <HAL_TIM_PWM_Start_DMA+0x370>)
 80044ba:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80044c0:	6879      	ldr	r1, [r7, #4]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	3334      	adds	r3, #52	@ 0x34
 80044c8:	461a      	mov	r2, r3
 80044ca:	887b      	ldrh	r3, [r7, #2]
 80044cc:	f7fe fd24 	bl	8002f18 <HAL_DMA_Start_IT>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d001      	beq.n	80044da <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e0db      	b.n	8004692 <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68da      	ldr	r2, [r3, #12]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044e8:	60da      	str	r2, [r3, #12]
      break;
 80044ea:	e06e      	b.n	80045ca <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044f0:	4a6a      	ldr	r2, [pc, #424]	@ (800469c <HAL_TIM_PWM_Start_DMA+0x368>)
 80044f2:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044f8:	4a69      	ldr	r2, [pc, #420]	@ (80046a0 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80044fa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004500:	4a68      	ldr	r2, [pc, #416]	@ (80046a4 <HAL_TIM_PWM_Start_DMA+0x370>)
 8004502:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8004508:	6879      	ldr	r1, [r7, #4]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	3338      	adds	r3, #56	@ 0x38
 8004510:	461a      	mov	r2, r3
 8004512:	887b      	ldrh	r3, [r7, #2]
 8004514:	f7fe fd00 	bl	8002f18 <HAL_DMA_Start_IT>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d001      	beq.n	8004522 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e0b7      	b.n	8004692 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68da      	ldr	r2, [r3, #12]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004530:	60da      	str	r2, [r3, #12]
      break;
 8004532:	e04a      	b.n	80045ca <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004538:	4a58      	ldr	r2, [pc, #352]	@ (800469c <HAL_TIM_PWM_Start_DMA+0x368>)
 800453a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004540:	4a57      	ldr	r2, [pc, #348]	@ (80046a0 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8004542:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004548:	4a56      	ldr	r2, [pc, #344]	@ (80046a4 <HAL_TIM_PWM_Start_DMA+0x370>)
 800454a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8004550:	6879      	ldr	r1, [r7, #4]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	333c      	adds	r3, #60	@ 0x3c
 8004558:	461a      	mov	r2, r3
 800455a:	887b      	ldrh	r3, [r7, #2]
 800455c:	f7fe fcdc 	bl	8002f18 <HAL_DMA_Start_IT>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d001      	beq.n	800456a <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e093      	b.n	8004692 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	68da      	ldr	r2, [r3, #12]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004578:	60da      	str	r2, [r3, #12]
      break;
 800457a:	e026      	b.n	80045ca <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004580:	4a46      	ldr	r2, [pc, #280]	@ (800469c <HAL_TIM_PWM_Start_DMA+0x368>)
 8004582:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004588:	4a45      	ldr	r2, [pc, #276]	@ (80046a0 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800458a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004590:	4a44      	ldr	r2, [pc, #272]	@ (80046a4 <HAL_TIM_PWM_Start_DMA+0x370>)
 8004592:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004598:	6879      	ldr	r1, [r7, #4]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	3340      	adds	r3, #64	@ 0x40
 80045a0:	461a      	mov	r2, r3
 80045a2:	887b      	ldrh	r3, [r7, #2]
 80045a4:	f7fe fcb8 	bl	8002f18 <HAL_DMA_Start_IT>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d001      	beq.n	80045b2 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e06f      	b.n	8004692 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68da      	ldr	r2, [r3, #12]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80045c0:	60da      	str	r2, [r3, #12]
      break;
 80045c2:	e002      	b.n	80045ca <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	75fb      	strb	r3, [r7, #23]
      break;
 80045c8:	bf00      	nop
  }

  if (status == HAL_OK)
 80045ca:	7dfb      	ldrb	r3, [r7, #23]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d15f      	bne.n	8004690 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2201      	movs	r2, #1
 80045d6:	68b9      	ldr	r1, [r7, #8]
 80045d8:	4618      	mov	r0, r3
 80045da:	f000 ffbb 	bl	8005554 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a31      	ldr	r2, [pc, #196]	@ (80046a8 <HAL_TIM_PWM_Start_DMA+0x374>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d004      	beq.n	80045f2 <HAL_TIM_PWM_Start_DMA+0x2be>
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a2f      	ldr	r2, [pc, #188]	@ (80046ac <HAL_TIM_PWM_Start_DMA+0x378>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d101      	bne.n	80045f6 <HAL_TIM_PWM_Start_DMA+0x2c2>
 80045f2:	2301      	movs	r3, #1
 80045f4:	e000      	b.n	80045f8 <HAL_TIM_PWM_Start_DMA+0x2c4>
 80045f6:	2300      	movs	r3, #0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d007      	beq.n	800460c <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800460a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a25      	ldr	r2, [pc, #148]	@ (80046a8 <HAL_TIM_PWM_Start_DMA+0x374>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d022      	beq.n	800465c <HAL_TIM_PWM_Start_DMA+0x328>
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800461e:	d01d      	beq.n	800465c <HAL_TIM_PWM_Start_DMA+0x328>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a22      	ldr	r2, [pc, #136]	@ (80046b0 <HAL_TIM_PWM_Start_DMA+0x37c>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d018      	beq.n	800465c <HAL_TIM_PWM_Start_DMA+0x328>
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a21      	ldr	r2, [pc, #132]	@ (80046b4 <HAL_TIM_PWM_Start_DMA+0x380>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d013      	beq.n	800465c <HAL_TIM_PWM_Start_DMA+0x328>
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a1f      	ldr	r2, [pc, #124]	@ (80046b8 <HAL_TIM_PWM_Start_DMA+0x384>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d00e      	beq.n	800465c <HAL_TIM_PWM_Start_DMA+0x328>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a1a      	ldr	r2, [pc, #104]	@ (80046ac <HAL_TIM_PWM_Start_DMA+0x378>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d009      	beq.n	800465c <HAL_TIM_PWM_Start_DMA+0x328>
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a1b      	ldr	r2, [pc, #108]	@ (80046bc <HAL_TIM_PWM_Start_DMA+0x388>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d004      	beq.n	800465c <HAL_TIM_PWM_Start_DMA+0x328>
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a1a      	ldr	r2, [pc, #104]	@ (80046c0 <HAL_TIM_PWM_Start_DMA+0x38c>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d111      	bne.n	8004680 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f003 0307 	and.w	r3, r3, #7
 8004666:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	2b06      	cmp	r3, #6
 800466c:	d010      	beq.n	8004690 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f042 0201 	orr.w	r2, r2, #1
 800467c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800467e:	e007      	b.n	8004690 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f042 0201 	orr.w	r2, r2, #1
 800468e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004690:	7dfb      	ldrb	r3, [r7, #23]
}
 8004692:	4618      	mov	r0, r3
 8004694:	3718      	adds	r7, #24
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	08004e65 	.word	0x08004e65
 80046a0:	08004f0d 	.word	0x08004f0d
 80046a4:	08004dd3 	.word	0x08004dd3
 80046a8:	40010000 	.word	0x40010000
 80046ac:	40010400 	.word	0x40010400
 80046b0:	40000400 	.word	0x40000400
 80046b4:	40000800 	.word	0x40000800
 80046b8:	40000c00 	.word	0x40000c00
 80046bc:	40014000 	.word	0x40014000
 80046c0:	40001800 	.word	0x40001800

080046c4 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046ce:	2300      	movs	r3, #0
 80046d0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	2b0c      	cmp	r3, #12
 80046d6:	d855      	bhi.n	8004784 <HAL_TIM_PWM_Stop_DMA+0xc0>
 80046d8:	a201      	add	r2, pc, #4	@ (adr r2, 80046e0 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80046da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046de:	bf00      	nop
 80046e0:	08004715 	.word	0x08004715
 80046e4:	08004785 	.word	0x08004785
 80046e8:	08004785 	.word	0x08004785
 80046ec:	08004785 	.word	0x08004785
 80046f0:	08004731 	.word	0x08004731
 80046f4:	08004785 	.word	0x08004785
 80046f8:	08004785 	.word	0x08004785
 80046fc:	08004785 	.word	0x08004785
 8004700:	0800474d 	.word	0x0800474d
 8004704:	08004785 	.word	0x08004785
 8004708:	08004785 	.word	0x08004785
 800470c:	08004785 	.word	0x08004785
 8004710:	08004769 	.word	0x08004769
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68da      	ldr	r2, [r3, #12]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004722:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004728:	4618      	mov	r0, r3
 800472a:	f7fe fc4d 	bl	8002fc8 <HAL_DMA_Abort_IT>
      break;
 800472e:	e02c      	b.n	800478a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68da      	ldr	r2, [r3, #12]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800473e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004744:	4618      	mov	r0, r3
 8004746:	f7fe fc3f 	bl	8002fc8 <HAL_DMA_Abort_IT>
      break;
 800474a:	e01e      	b.n	800478a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68da      	ldr	r2, [r3, #12]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800475a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004760:	4618      	mov	r0, r3
 8004762:	f7fe fc31 	bl	8002fc8 <HAL_DMA_Abort_IT>
      break;
 8004766:	e010      	b.n	800478a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68da      	ldr	r2, [r3, #12]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004776:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800477c:	4618      	mov	r0, r3
 800477e:	f7fe fc23 	bl	8002fc8 <HAL_DMA_Abort_IT>
      break;
 8004782:	e002      	b.n	800478a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	73fb      	strb	r3, [r7, #15]
      break;
 8004788:	bf00      	nop
  }

  if (status == HAL_OK)
 800478a:	7bfb      	ldrb	r3, [r7, #15]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d161      	bne.n	8004854 <HAL_TIM_PWM_Stop_DMA+0x190>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2200      	movs	r2, #0
 8004796:	6839      	ldr	r1, [r7, #0]
 8004798:	4618      	mov	r0, r3
 800479a:	f000 fedb 	bl	8005554 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a2f      	ldr	r2, [pc, #188]	@ (8004860 <HAL_TIM_PWM_Stop_DMA+0x19c>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d004      	beq.n	80047b2 <HAL_TIM_PWM_Stop_DMA+0xee>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a2d      	ldr	r2, [pc, #180]	@ (8004864 <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d101      	bne.n	80047b6 <HAL_TIM_PWM_Stop_DMA+0xf2>
 80047b2:	2301      	movs	r3, #1
 80047b4:	e000      	b.n	80047b8 <HAL_TIM_PWM_Stop_DMA+0xf4>
 80047b6:	2300      	movs	r3, #0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d017      	beq.n	80047ec <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	6a1a      	ldr	r2, [r3, #32]
 80047c2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80047c6:	4013      	ands	r3, r2
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d10f      	bne.n	80047ec <HAL_TIM_PWM_Stop_DMA+0x128>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	6a1a      	ldr	r2, [r3, #32]
 80047d2:	f240 4344 	movw	r3, #1092	@ 0x444
 80047d6:	4013      	ands	r3, r2
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d107      	bne.n	80047ec <HAL_TIM_PWM_Stop_DMA+0x128>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80047ea:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	6a1a      	ldr	r2, [r3, #32]
 80047f2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80047f6:	4013      	ands	r3, r2
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d10f      	bne.n	800481c <HAL_TIM_PWM_Stop_DMA+0x158>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	6a1a      	ldr	r2, [r3, #32]
 8004802:	f240 4344 	movw	r3, #1092	@ 0x444
 8004806:	4013      	ands	r3, r2
 8004808:	2b00      	cmp	r3, #0
 800480a:	d107      	bne.n	800481c <HAL_TIM_PWM_Stop_DMA+0x158>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f022 0201 	bic.w	r2, r2, #1
 800481a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d104      	bne.n	800482c <HAL_TIM_PWM_Stop_DMA+0x168>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2201      	movs	r2, #1
 8004826:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800482a:	e013      	b.n	8004854 <HAL_TIM_PWM_Stop_DMA+0x190>
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	2b04      	cmp	r3, #4
 8004830:	d104      	bne.n	800483c <HAL_TIM_PWM_Stop_DMA+0x178>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2201      	movs	r2, #1
 8004836:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800483a:	e00b      	b.n	8004854 <HAL_TIM_PWM_Stop_DMA+0x190>
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	2b08      	cmp	r3, #8
 8004840:	d104      	bne.n	800484c <HAL_TIM_PWM_Stop_DMA+0x188>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2201      	movs	r2, #1
 8004846:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800484a:	e003      	b.n	8004854 <HAL_TIM_PWM_Stop_DMA+0x190>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8004854:	7bfb      	ldrb	r3, [r7, #15]
}
 8004856:	4618      	mov	r0, r3
 8004858:	3710      	adds	r7, #16
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	40010000 	.word	0x40010000
 8004864:	40010400 	.word	0x40010400

08004868 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	f003 0302 	and.w	r3, r3, #2
 8004886:	2b00      	cmp	r3, #0
 8004888:	d020      	beq.n	80048cc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f003 0302 	and.w	r3, r3, #2
 8004890:	2b00      	cmp	r3, #0
 8004892:	d01b      	beq.n	80048cc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f06f 0202 	mvn.w	r2, #2
 800489c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2201      	movs	r2, #1
 80048a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	699b      	ldr	r3, [r3, #24]
 80048aa:	f003 0303 	and.w	r3, r3, #3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d003      	beq.n	80048ba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 fa65 	bl	8004d82 <HAL_TIM_IC_CaptureCallback>
 80048b8:	e005      	b.n	80048c6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 fa57 	bl	8004d6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f7fb ff0f 	bl	80006e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	f003 0304 	and.w	r3, r3, #4
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d020      	beq.n	8004918 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f003 0304 	and.w	r3, r3, #4
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d01b      	beq.n	8004918 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f06f 0204 	mvn.w	r2, #4
 80048e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2202      	movs	r2, #2
 80048ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	699b      	ldr	r3, [r3, #24]
 80048f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d003      	beq.n	8004906 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 fa3f 	bl	8004d82 <HAL_TIM_IC_CaptureCallback>
 8004904:	e005      	b.n	8004912 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 fa31 	bl	8004d6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f7fb fee9 	bl	80006e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	f003 0308 	and.w	r3, r3, #8
 800491e:	2b00      	cmp	r3, #0
 8004920:	d020      	beq.n	8004964 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f003 0308 	and.w	r3, r3, #8
 8004928:	2b00      	cmp	r3, #0
 800492a:	d01b      	beq.n	8004964 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f06f 0208 	mvn.w	r2, #8
 8004934:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2204      	movs	r2, #4
 800493a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	69db      	ldr	r3, [r3, #28]
 8004942:	f003 0303 	and.w	r3, r3, #3
 8004946:	2b00      	cmp	r3, #0
 8004948:	d003      	beq.n	8004952 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 fa19 	bl	8004d82 <HAL_TIM_IC_CaptureCallback>
 8004950:	e005      	b.n	800495e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 fa0b 	bl	8004d6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f7fb fec3 	bl	80006e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	f003 0310 	and.w	r3, r3, #16
 800496a:	2b00      	cmp	r3, #0
 800496c:	d020      	beq.n	80049b0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f003 0310 	and.w	r3, r3, #16
 8004974:	2b00      	cmp	r3, #0
 8004976:	d01b      	beq.n	80049b0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f06f 0210 	mvn.w	r2, #16
 8004980:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2208      	movs	r2, #8
 8004986:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	69db      	ldr	r3, [r3, #28]
 800498e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004992:	2b00      	cmp	r3, #0
 8004994:	d003      	beq.n	800499e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 f9f3 	bl	8004d82 <HAL_TIM_IC_CaptureCallback>
 800499c:	e005      	b.n	80049aa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 f9e5 	bl	8004d6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f7fb fe9d 	bl	80006e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	f003 0301 	and.w	r3, r3, #1
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d00c      	beq.n	80049d4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f003 0301 	and.w	r3, r3, #1
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d007      	beq.n	80049d4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f06f 0201 	mvn.w	r2, #1
 80049cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 f9c3 	bl	8004d5a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00c      	beq.n	80049f8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d007      	beq.n	80049f8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80049f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 feac 	bl	8005750 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00c      	beq.n	8004a1c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d007      	beq.n	8004a1c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004a14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 f9c7 	bl	8004daa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	f003 0320 	and.w	r3, r3, #32
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d00c      	beq.n	8004a40 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f003 0320 	and.w	r3, r3, #32
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d007      	beq.n	8004a40 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f06f 0220 	mvn.w	r2, #32
 8004a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 fe7e 	bl	800573c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a40:	bf00      	nop
 8004a42:	3710      	adds	r7, #16
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b086      	sub	sp, #24
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a54:	2300      	movs	r3, #0
 8004a56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d101      	bne.n	8004a66 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a62:	2302      	movs	r3, #2
 8004a64:	e0ae      	b.n	8004bc4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2b0c      	cmp	r3, #12
 8004a72:	f200 809f 	bhi.w	8004bb4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004a76:	a201      	add	r2, pc, #4	@ (adr r2, 8004a7c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a7c:	08004ab1 	.word	0x08004ab1
 8004a80:	08004bb5 	.word	0x08004bb5
 8004a84:	08004bb5 	.word	0x08004bb5
 8004a88:	08004bb5 	.word	0x08004bb5
 8004a8c:	08004af1 	.word	0x08004af1
 8004a90:	08004bb5 	.word	0x08004bb5
 8004a94:	08004bb5 	.word	0x08004bb5
 8004a98:	08004bb5 	.word	0x08004bb5
 8004a9c:	08004b33 	.word	0x08004b33
 8004aa0:	08004bb5 	.word	0x08004bb5
 8004aa4:	08004bb5 	.word	0x08004bb5
 8004aa8:	08004bb5 	.word	0x08004bb5
 8004aac:	08004b73 	.word	0x08004b73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68b9      	ldr	r1, [r7, #8]
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f000 fb02 	bl	80050c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	699a      	ldr	r2, [r3, #24]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f042 0208 	orr.w	r2, r2, #8
 8004aca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	699a      	ldr	r2, [r3, #24]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f022 0204 	bic.w	r2, r2, #4
 8004ada:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	6999      	ldr	r1, [r3, #24]
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	691a      	ldr	r2, [r3, #16]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	430a      	orrs	r2, r1
 8004aec:	619a      	str	r2, [r3, #24]
      break;
 8004aee:	e064      	b.n	8004bba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68b9      	ldr	r1, [r7, #8]
 8004af6:	4618      	mov	r0, r3
 8004af8:	f000 fb52 	bl	80051a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	699a      	ldr	r2, [r3, #24]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	699a      	ldr	r2, [r3, #24]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	6999      	ldr	r1, [r3, #24]
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	021a      	lsls	r2, r3, #8
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	430a      	orrs	r2, r1
 8004b2e:	619a      	str	r2, [r3, #24]
      break;
 8004b30:	e043      	b.n	8004bba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68b9      	ldr	r1, [r7, #8]
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f000 fba7 	bl	800528c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	69da      	ldr	r2, [r3, #28]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f042 0208 	orr.w	r2, r2, #8
 8004b4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	69da      	ldr	r2, [r3, #28]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f022 0204 	bic.w	r2, r2, #4
 8004b5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	69d9      	ldr	r1, [r3, #28]
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	691a      	ldr	r2, [r3, #16]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	430a      	orrs	r2, r1
 8004b6e:	61da      	str	r2, [r3, #28]
      break;
 8004b70:	e023      	b.n	8004bba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68b9      	ldr	r1, [r7, #8]
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f000 fbfb 	bl	8005374 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	69da      	ldr	r2, [r3, #28]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	69da      	ldr	r2, [r3, #28]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	69d9      	ldr	r1, [r3, #28]
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	021a      	lsls	r2, r3, #8
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	430a      	orrs	r2, r1
 8004bb0:	61da      	str	r2, [r3, #28]
      break;
 8004bb2:	e002      	b.n	8004bba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	75fb      	strb	r3, [r7, #23]
      break;
 8004bb8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004bc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3718      	adds	r7, #24
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d101      	bne.n	8004be8 <HAL_TIM_ConfigClockSource+0x1c>
 8004be4:	2302      	movs	r3, #2
 8004be6:	e0b4      	b.n	8004d52 <HAL_TIM_ConfigClockSource+0x186>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2202      	movs	r2, #2
 8004bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004c06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68ba      	ldr	r2, [r7, #8]
 8004c16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c20:	d03e      	beq.n	8004ca0 <HAL_TIM_ConfigClockSource+0xd4>
 8004c22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c26:	f200 8087 	bhi.w	8004d38 <HAL_TIM_ConfigClockSource+0x16c>
 8004c2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c2e:	f000 8086 	beq.w	8004d3e <HAL_TIM_ConfigClockSource+0x172>
 8004c32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c36:	d87f      	bhi.n	8004d38 <HAL_TIM_ConfigClockSource+0x16c>
 8004c38:	2b70      	cmp	r3, #112	@ 0x70
 8004c3a:	d01a      	beq.n	8004c72 <HAL_TIM_ConfigClockSource+0xa6>
 8004c3c:	2b70      	cmp	r3, #112	@ 0x70
 8004c3e:	d87b      	bhi.n	8004d38 <HAL_TIM_ConfigClockSource+0x16c>
 8004c40:	2b60      	cmp	r3, #96	@ 0x60
 8004c42:	d050      	beq.n	8004ce6 <HAL_TIM_ConfigClockSource+0x11a>
 8004c44:	2b60      	cmp	r3, #96	@ 0x60
 8004c46:	d877      	bhi.n	8004d38 <HAL_TIM_ConfigClockSource+0x16c>
 8004c48:	2b50      	cmp	r3, #80	@ 0x50
 8004c4a:	d03c      	beq.n	8004cc6 <HAL_TIM_ConfigClockSource+0xfa>
 8004c4c:	2b50      	cmp	r3, #80	@ 0x50
 8004c4e:	d873      	bhi.n	8004d38 <HAL_TIM_ConfigClockSource+0x16c>
 8004c50:	2b40      	cmp	r3, #64	@ 0x40
 8004c52:	d058      	beq.n	8004d06 <HAL_TIM_ConfigClockSource+0x13a>
 8004c54:	2b40      	cmp	r3, #64	@ 0x40
 8004c56:	d86f      	bhi.n	8004d38 <HAL_TIM_ConfigClockSource+0x16c>
 8004c58:	2b30      	cmp	r3, #48	@ 0x30
 8004c5a:	d064      	beq.n	8004d26 <HAL_TIM_ConfigClockSource+0x15a>
 8004c5c:	2b30      	cmp	r3, #48	@ 0x30
 8004c5e:	d86b      	bhi.n	8004d38 <HAL_TIM_ConfigClockSource+0x16c>
 8004c60:	2b20      	cmp	r3, #32
 8004c62:	d060      	beq.n	8004d26 <HAL_TIM_ConfigClockSource+0x15a>
 8004c64:	2b20      	cmp	r3, #32
 8004c66:	d867      	bhi.n	8004d38 <HAL_TIM_ConfigClockSource+0x16c>
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d05c      	beq.n	8004d26 <HAL_TIM_ConfigClockSource+0x15a>
 8004c6c:	2b10      	cmp	r3, #16
 8004c6e:	d05a      	beq.n	8004d26 <HAL_TIM_ConfigClockSource+0x15a>
 8004c70:	e062      	b.n	8004d38 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c82:	f000 fc47 	bl	8005514 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004c94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68ba      	ldr	r2, [r7, #8]
 8004c9c:	609a      	str	r2, [r3, #8]
      break;
 8004c9e:	e04f      	b.n	8004d40 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004cb0:	f000 fc30 	bl	8005514 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	689a      	ldr	r2, [r3, #8]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004cc2:	609a      	str	r2, [r3, #8]
      break;
 8004cc4:	e03c      	b.n	8004d40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	f000 fba4 	bl	8005420 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2150      	movs	r1, #80	@ 0x50
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f000 fbfd 	bl	80054de <TIM_ITRx_SetConfig>
      break;
 8004ce4:	e02c      	b.n	8004d40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	f000 fbc3 	bl	800547e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2160      	movs	r1, #96	@ 0x60
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f000 fbed 	bl	80054de <TIM_ITRx_SetConfig>
      break;
 8004d04:	e01c      	b.n	8004d40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d12:	461a      	mov	r2, r3
 8004d14:	f000 fb84 	bl	8005420 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2140      	movs	r1, #64	@ 0x40
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f000 fbdd 	bl	80054de <TIM_ITRx_SetConfig>
      break;
 8004d24:	e00c      	b.n	8004d40 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4619      	mov	r1, r3
 8004d30:	4610      	mov	r0, r2
 8004d32:	f000 fbd4 	bl	80054de <TIM_ITRx_SetConfig>
      break;
 8004d36:	e003      	b.n	8004d40 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d3c:	e000      	b.n	8004d40 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3710      	adds	r7, #16
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d5a:	b480      	push	{r7}
 8004d5c:	b083      	sub	sp, #12
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004d62:	bf00      	nop
 8004d64:	370c      	adds	r7, #12
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr

08004d6e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d6e:	b480      	push	{r7}
 8004d70:	b083      	sub	sp, #12
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d76:	bf00      	nop
 8004d78:	370c      	adds	r7, #12
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr

08004d82 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d82:	b480      	push	{r7}
 8004d84:	b083      	sub	sp, #12
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d8a:	bf00      	nop
 8004d8c:	370c      	adds	r7, #12
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr

08004d96 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004d96:	b480      	push	{r7}
 8004d98:	b083      	sub	sp, #12
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004d9e:	bf00      	nop
 8004da0:	370c      	adds	r7, #12
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr

08004daa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004daa:	b480      	push	{r7}
 8004dac:	b083      	sub	sp, #12
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004db2:	bf00      	nop
 8004db4:	370c      	adds	r7, #12
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr

08004dbe <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	b083      	sub	sp, #12
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004dc6:	bf00      	nop
 8004dc8:	370c      	adds	r7, #12
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr

08004dd2 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004dd2:	b580      	push	{r7, lr}
 8004dd4:	b084      	sub	sp, #16
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dde:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d107      	bne.n	8004dfa <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2201      	movs	r2, #1
 8004dee:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004df8:	e02a      	b.n	8004e50 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d107      	bne.n	8004e14 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2202      	movs	r2, #2
 8004e08:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e12:	e01d      	b.n	8004e50 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d107      	bne.n	8004e2e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2204      	movs	r2, #4
 8004e22:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e2c:	e010      	b.n	8004e50 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d107      	bne.n	8004e48 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2208      	movs	r2, #8
 8004e3c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2201      	movs	r2, #1
 8004e42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004e46:	e003      	b.n	8004e50 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004e50:	68f8      	ldr	r0, [r7, #12]
 8004e52:	f7ff ffb4 	bl	8004dbe <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	771a      	strb	r2, [r3, #28]
}
 8004e5c:	bf00      	nop
 8004e5e:	3710      	adds	r7, #16
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e70:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d10b      	bne.n	8004e94 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	69db      	ldr	r3, [r3, #28]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d136      	bne.n	8004ef8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e92:	e031      	b.n	8004ef8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d10b      	bne.n	8004eb6 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2202      	movs	r2, #2
 8004ea2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	69db      	ldr	r3, [r3, #28]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d125      	bne.n	8004ef8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004eb4:	e020      	b.n	8004ef8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d10b      	bne.n	8004ed8 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2204      	movs	r2, #4
 8004ec4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	69db      	ldr	r3, [r3, #28]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d114      	bne.n	8004ef8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ed6:	e00f      	b.n	8004ef8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d10a      	bne.n	8004ef8 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2208      	movs	r2, #8
 8004ee6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	69db      	ldr	r3, [r3, #28]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d103      	bne.n	8004ef8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ef8:	68f8      	ldr	r0, [r7, #12]
 8004efa:	f7fb fbf3 	bl	80006e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2200      	movs	r2, #0
 8004f02:	771a      	strb	r2, [r3, #28]
}
 8004f04:	bf00      	nop
 8004f06:	3710      	adds	r7, #16
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f18:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d103      	bne.n	8004f2c <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2201      	movs	r2, #1
 8004f28:	771a      	strb	r2, [r3, #28]
 8004f2a:	e019      	b.n	8004f60 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d103      	bne.n	8004f3e <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2202      	movs	r2, #2
 8004f3a:	771a      	strb	r2, [r3, #28]
 8004f3c:	e010      	b.n	8004f60 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d103      	bne.n	8004f50 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2204      	movs	r2, #4
 8004f4c:	771a      	strb	r2, [r3, #28]
 8004f4e:	e007      	b.n	8004f60 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d102      	bne.n	8004f60 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2208      	movs	r2, #8
 8004f5e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004f60:	68f8      	ldr	r0, [r7, #12]
 8004f62:	f7ff ff18 	bl	8004d96 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	771a      	strb	r2, [r3, #28]
}
 8004f6c:	bf00      	nop
 8004f6e:	3710      	adds	r7, #16
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b085      	sub	sp, #20
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a43      	ldr	r2, [pc, #268]	@ (8005094 <TIM_Base_SetConfig+0x120>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d013      	beq.n	8004fb4 <TIM_Base_SetConfig+0x40>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f92:	d00f      	beq.n	8004fb4 <TIM_Base_SetConfig+0x40>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4a40      	ldr	r2, [pc, #256]	@ (8005098 <TIM_Base_SetConfig+0x124>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d00b      	beq.n	8004fb4 <TIM_Base_SetConfig+0x40>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4a3f      	ldr	r2, [pc, #252]	@ (800509c <TIM_Base_SetConfig+0x128>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d007      	beq.n	8004fb4 <TIM_Base_SetConfig+0x40>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a3e      	ldr	r2, [pc, #248]	@ (80050a0 <TIM_Base_SetConfig+0x12c>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d003      	beq.n	8004fb4 <TIM_Base_SetConfig+0x40>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4a3d      	ldr	r2, [pc, #244]	@ (80050a4 <TIM_Base_SetConfig+0x130>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d108      	bne.n	8004fc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a32      	ldr	r2, [pc, #200]	@ (8005094 <TIM_Base_SetConfig+0x120>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d02b      	beq.n	8005026 <TIM_Base_SetConfig+0xb2>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fd4:	d027      	beq.n	8005026 <TIM_Base_SetConfig+0xb2>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a2f      	ldr	r2, [pc, #188]	@ (8005098 <TIM_Base_SetConfig+0x124>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d023      	beq.n	8005026 <TIM_Base_SetConfig+0xb2>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a2e      	ldr	r2, [pc, #184]	@ (800509c <TIM_Base_SetConfig+0x128>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d01f      	beq.n	8005026 <TIM_Base_SetConfig+0xb2>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a2d      	ldr	r2, [pc, #180]	@ (80050a0 <TIM_Base_SetConfig+0x12c>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d01b      	beq.n	8005026 <TIM_Base_SetConfig+0xb2>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a2c      	ldr	r2, [pc, #176]	@ (80050a4 <TIM_Base_SetConfig+0x130>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d017      	beq.n	8005026 <TIM_Base_SetConfig+0xb2>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a2b      	ldr	r2, [pc, #172]	@ (80050a8 <TIM_Base_SetConfig+0x134>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d013      	beq.n	8005026 <TIM_Base_SetConfig+0xb2>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a2a      	ldr	r2, [pc, #168]	@ (80050ac <TIM_Base_SetConfig+0x138>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d00f      	beq.n	8005026 <TIM_Base_SetConfig+0xb2>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a29      	ldr	r2, [pc, #164]	@ (80050b0 <TIM_Base_SetConfig+0x13c>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d00b      	beq.n	8005026 <TIM_Base_SetConfig+0xb2>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a28      	ldr	r2, [pc, #160]	@ (80050b4 <TIM_Base_SetConfig+0x140>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d007      	beq.n	8005026 <TIM_Base_SetConfig+0xb2>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a27      	ldr	r2, [pc, #156]	@ (80050b8 <TIM_Base_SetConfig+0x144>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d003      	beq.n	8005026 <TIM_Base_SetConfig+0xb2>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a26      	ldr	r2, [pc, #152]	@ (80050bc <TIM_Base_SetConfig+0x148>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d108      	bne.n	8005038 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800502c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	4313      	orrs	r3, r2
 8005036:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	695b      	ldr	r3, [r3, #20]
 8005042:	4313      	orrs	r3, r2
 8005044:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	689a      	ldr	r2, [r3, #8]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a0e      	ldr	r2, [pc, #56]	@ (8005094 <TIM_Base_SetConfig+0x120>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d003      	beq.n	8005066 <TIM_Base_SetConfig+0xf2>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a10      	ldr	r2, [pc, #64]	@ (80050a4 <TIM_Base_SetConfig+0x130>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d103      	bne.n	800506e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	691a      	ldr	r2, [r3, #16]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f043 0204 	orr.w	r2, r3, #4
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2201      	movs	r2, #1
 800507e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	601a      	str	r2, [r3, #0]
}
 8005086:	bf00      	nop
 8005088:	3714      	adds	r7, #20
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	40010000 	.word	0x40010000
 8005098:	40000400 	.word	0x40000400
 800509c:	40000800 	.word	0x40000800
 80050a0:	40000c00 	.word	0x40000c00
 80050a4:	40010400 	.word	0x40010400
 80050a8:	40014000 	.word	0x40014000
 80050ac:	40014400 	.word	0x40014400
 80050b0:	40014800 	.word	0x40014800
 80050b4:	40001800 	.word	0x40001800
 80050b8:	40001c00 	.word	0x40001c00
 80050bc:	40002000 	.word	0x40002000

080050c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b087      	sub	sp, #28
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a1b      	ldr	r3, [r3, #32]
 80050ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a1b      	ldr	r3, [r3, #32]
 80050d4:	f023 0201 	bic.w	r2, r3, #1
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	699b      	ldr	r3, [r3, #24]
 80050e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f023 0303 	bic.w	r3, r3, #3
 80050f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	4313      	orrs	r3, r2
 8005100:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	f023 0302 	bic.w	r3, r3, #2
 8005108:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	697a      	ldr	r2, [r7, #20]
 8005110:	4313      	orrs	r3, r2
 8005112:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a20      	ldr	r2, [pc, #128]	@ (8005198 <TIM_OC1_SetConfig+0xd8>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d003      	beq.n	8005124 <TIM_OC1_SetConfig+0x64>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a1f      	ldr	r2, [pc, #124]	@ (800519c <TIM_OC1_SetConfig+0xdc>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d10c      	bne.n	800513e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	f023 0308 	bic.w	r3, r3, #8
 800512a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	697a      	ldr	r2, [r7, #20]
 8005132:	4313      	orrs	r3, r2
 8005134:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	f023 0304 	bic.w	r3, r3, #4
 800513c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a15      	ldr	r2, [pc, #84]	@ (8005198 <TIM_OC1_SetConfig+0xd8>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d003      	beq.n	800514e <TIM_OC1_SetConfig+0x8e>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a14      	ldr	r2, [pc, #80]	@ (800519c <TIM_OC1_SetConfig+0xdc>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d111      	bne.n	8005172 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005154:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800515c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	695b      	ldr	r3, [r3, #20]
 8005162:	693a      	ldr	r2, [r7, #16]
 8005164:	4313      	orrs	r3, r2
 8005166:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	699b      	ldr	r3, [r3, #24]
 800516c:	693a      	ldr	r2, [r7, #16]
 800516e:	4313      	orrs	r3, r2
 8005170:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	693a      	ldr	r2, [r7, #16]
 8005176:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	68fa      	ldr	r2, [r7, #12]
 800517c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	685a      	ldr	r2, [r3, #4]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	697a      	ldr	r2, [r7, #20]
 800518a:	621a      	str	r2, [r3, #32]
}
 800518c:	bf00      	nop
 800518e:	371c      	adds	r7, #28
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr
 8005198:	40010000 	.word	0x40010000
 800519c:	40010400 	.word	0x40010400

080051a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b087      	sub	sp, #28
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6a1b      	ldr	r3, [r3, #32]
 80051ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6a1b      	ldr	r3, [r3, #32]
 80051b4:	f023 0210 	bic.w	r2, r3, #16
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	699b      	ldr	r3, [r3, #24]
 80051c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	021b      	lsls	r3, r3, #8
 80051de:	68fa      	ldr	r2, [r7, #12]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	f023 0320 	bic.w	r3, r3, #32
 80051ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	011b      	lsls	r3, r3, #4
 80051f2:	697a      	ldr	r2, [r7, #20]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4a22      	ldr	r2, [pc, #136]	@ (8005284 <TIM_OC2_SetConfig+0xe4>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d003      	beq.n	8005208 <TIM_OC2_SetConfig+0x68>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a21      	ldr	r2, [pc, #132]	@ (8005288 <TIM_OC2_SetConfig+0xe8>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d10d      	bne.n	8005224 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800520e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	011b      	lsls	r3, r3, #4
 8005216:	697a      	ldr	r2, [r7, #20]
 8005218:	4313      	orrs	r3, r2
 800521a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005222:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a17      	ldr	r2, [pc, #92]	@ (8005284 <TIM_OC2_SetConfig+0xe4>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d003      	beq.n	8005234 <TIM_OC2_SetConfig+0x94>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a16      	ldr	r2, [pc, #88]	@ (8005288 <TIM_OC2_SetConfig+0xe8>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d113      	bne.n	800525c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800523a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005242:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	695b      	ldr	r3, [r3, #20]
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	693a      	ldr	r2, [r7, #16]
 800524c:	4313      	orrs	r3, r2
 800524e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	699b      	ldr	r3, [r3, #24]
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	693a      	ldr	r2, [r7, #16]
 8005258:	4313      	orrs	r3, r2
 800525a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	693a      	ldr	r2, [r7, #16]
 8005260:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	685a      	ldr	r2, [r3, #4]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	697a      	ldr	r2, [r7, #20]
 8005274:	621a      	str	r2, [r3, #32]
}
 8005276:	bf00      	nop
 8005278:	371c      	adds	r7, #28
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr
 8005282:	bf00      	nop
 8005284:	40010000 	.word	0x40010000
 8005288:	40010400 	.word	0x40010400

0800528c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800528c:	b480      	push	{r7}
 800528e:	b087      	sub	sp, #28
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a1b      	ldr	r3, [r3, #32]
 800529a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6a1b      	ldr	r3, [r3, #32]
 80052a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	69db      	ldr	r3, [r3, #28]
 80052b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f023 0303 	bic.w	r3, r3, #3
 80052c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80052d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	021b      	lsls	r3, r3, #8
 80052dc:	697a      	ldr	r2, [r7, #20]
 80052de:	4313      	orrs	r3, r2
 80052e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a21      	ldr	r2, [pc, #132]	@ (800536c <TIM_OC3_SetConfig+0xe0>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d003      	beq.n	80052f2 <TIM_OC3_SetConfig+0x66>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4a20      	ldr	r2, [pc, #128]	@ (8005370 <TIM_OC3_SetConfig+0xe4>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d10d      	bne.n	800530e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80052f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	021b      	lsls	r3, r3, #8
 8005300:	697a      	ldr	r2, [r7, #20]
 8005302:	4313      	orrs	r3, r2
 8005304:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800530c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a16      	ldr	r2, [pc, #88]	@ (800536c <TIM_OC3_SetConfig+0xe0>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d003      	beq.n	800531e <TIM_OC3_SetConfig+0x92>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a15      	ldr	r2, [pc, #84]	@ (8005370 <TIM_OC3_SetConfig+0xe4>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d113      	bne.n	8005346 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005324:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800532c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	695b      	ldr	r3, [r3, #20]
 8005332:	011b      	lsls	r3, r3, #4
 8005334:	693a      	ldr	r2, [r7, #16]
 8005336:	4313      	orrs	r3, r2
 8005338:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	699b      	ldr	r3, [r3, #24]
 800533e:	011b      	lsls	r3, r3, #4
 8005340:	693a      	ldr	r2, [r7, #16]
 8005342:	4313      	orrs	r3, r2
 8005344:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	693a      	ldr	r2, [r7, #16]
 800534a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	68fa      	ldr	r2, [r7, #12]
 8005350:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	685a      	ldr	r2, [r3, #4]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	697a      	ldr	r2, [r7, #20]
 800535e:	621a      	str	r2, [r3, #32]
}
 8005360:	bf00      	nop
 8005362:	371c      	adds	r7, #28
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr
 800536c:	40010000 	.word	0x40010000
 8005370:	40010400 	.word	0x40010400

08005374 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005374:	b480      	push	{r7}
 8005376:	b087      	sub	sp, #28
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a1b      	ldr	r3, [r3, #32]
 8005382:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a1b      	ldr	r3, [r3, #32]
 8005388:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	69db      	ldr	r3, [r3, #28]
 800539a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	021b      	lsls	r3, r3, #8
 80053b2:	68fa      	ldr	r2, [r7, #12]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80053be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	031b      	lsls	r3, r3, #12
 80053c6:	693a      	ldr	r2, [r7, #16]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a12      	ldr	r2, [pc, #72]	@ (8005418 <TIM_OC4_SetConfig+0xa4>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d003      	beq.n	80053dc <TIM_OC4_SetConfig+0x68>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a11      	ldr	r2, [pc, #68]	@ (800541c <TIM_OC4_SetConfig+0xa8>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d109      	bne.n	80053f0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80053e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	695b      	ldr	r3, [r3, #20]
 80053e8:	019b      	lsls	r3, r3, #6
 80053ea:	697a      	ldr	r2, [r7, #20]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	697a      	ldr	r2, [r7, #20]
 80053f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	68fa      	ldr	r2, [r7, #12]
 80053fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	685a      	ldr	r2, [r3, #4]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	693a      	ldr	r2, [r7, #16]
 8005408:	621a      	str	r2, [r3, #32]
}
 800540a:	bf00      	nop
 800540c:	371c      	adds	r7, #28
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop
 8005418:	40010000 	.word	0x40010000
 800541c:	40010400 	.word	0x40010400

08005420 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005420:	b480      	push	{r7}
 8005422:	b087      	sub	sp, #28
 8005424:	af00      	add	r7, sp, #0
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6a1b      	ldr	r3, [r3, #32]
 8005430:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6a1b      	ldr	r3, [r3, #32]
 8005436:	f023 0201 	bic.w	r2, r3, #1
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	699b      	ldr	r3, [r3, #24]
 8005442:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800544a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	011b      	lsls	r3, r3, #4
 8005450:	693a      	ldr	r2, [r7, #16]
 8005452:	4313      	orrs	r3, r2
 8005454:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	f023 030a 	bic.w	r3, r3, #10
 800545c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800545e:	697a      	ldr	r2, [r7, #20]
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	4313      	orrs	r3, r2
 8005464:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	693a      	ldr	r2, [r7, #16]
 800546a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	697a      	ldr	r2, [r7, #20]
 8005470:	621a      	str	r2, [r3, #32]
}
 8005472:	bf00      	nop
 8005474:	371c      	adds	r7, #28
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr

0800547e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800547e:	b480      	push	{r7}
 8005480:	b087      	sub	sp, #28
 8005482:	af00      	add	r7, sp, #0
 8005484:	60f8      	str	r0, [r7, #12]
 8005486:	60b9      	str	r1, [r7, #8]
 8005488:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6a1b      	ldr	r3, [r3, #32]
 800548e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6a1b      	ldr	r3, [r3, #32]
 8005494:	f023 0210 	bic.w	r2, r3, #16
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	699b      	ldr	r3, [r3, #24]
 80054a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80054a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	031b      	lsls	r3, r3, #12
 80054ae:	693a      	ldr	r2, [r7, #16]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80054ba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	011b      	lsls	r3, r3, #4
 80054c0:	697a      	ldr	r2, [r7, #20]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	693a      	ldr	r2, [r7, #16]
 80054ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	697a      	ldr	r2, [r7, #20]
 80054d0:	621a      	str	r2, [r3, #32]
}
 80054d2:	bf00      	nop
 80054d4:	371c      	adds	r7, #28
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr

080054de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054de:	b480      	push	{r7}
 80054e0:	b085      	sub	sp, #20
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
 80054e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054f6:	683a      	ldr	r2, [r7, #0]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	f043 0307 	orr.w	r3, r3, #7
 8005500:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	609a      	str	r2, [r3, #8]
}
 8005508:	bf00      	nop
 800550a:	3714      	adds	r7, #20
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr

08005514 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005514:	b480      	push	{r7}
 8005516:	b087      	sub	sp, #28
 8005518:	af00      	add	r7, sp, #0
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	607a      	str	r2, [r7, #4]
 8005520:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800552e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	021a      	lsls	r2, r3, #8
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	431a      	orrs	r2, r3
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	4313      	orrs	r3, r2
 800553c:	697a      	ldr	r2, [r7, #20]
 800553e:	4313      	orrs	r3, r2
 8005540:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	697a      	ldr	r2, [r7, #20]
 8005546:	609a      	str	r2, [r3, #8]
}
 8005548:	bf00      	nop
 800554a:	371c      	adds	r7, #28
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr

08005554 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005554:	b480      	push	{r7}
 8005556:	b087      	sub	sp, #28
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	f003 031f 	and.w	r3, r3, #31
 8005566:	2201      	movs	r2, #1
 8005568:	fa02 f303 	lsl.w	r3, r2, r3
 800556c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6a1a      	ldr	r2, [r3, #32]
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	43db      	mvns	r3, r3
 8005576:	401a      	ands	r2, r3
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6a1a      	ldr	r2, [r3, #32]
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	f003 031f 	and.w	r3, r3, #31
 8005586:	6879      	ldr	r1, [r7, #4]
 8005588:	fa01 f303 	lsl.w	r3, r1, r3
 800558c:	431a      	orrs	r2, r3
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	621a      	str	r2, [r3, #32]
}
 8005592:	bf00      	nop
 8005594:	371c      	adds	r7, #28
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr
	...

080055a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b085      	sub	sp, #20
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d101      	bne.n	80055b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055b4:	2302      	movs	r3, #2
 80055b6:	e05a      	b.n	800566e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2202      	movs	r2, #2
 80055c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	68fa      	ldr	r2, [r7, #12]
 80055f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a21      	ldr	r2, [pc, #132]	@ (800567c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d022      	beq.n	8005642 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005604:	d01d      	beq.n	8005642 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a1d      	ldr	r2, [pc, #116]	@ (8005680 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d018      	beq.n	8005642 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a1b      	ldr	r2, [pc, #108]	@ (8005684 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d013      	beq.n	8005642 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a1a      	ldr	r2, [pc, #104]	@ (8005688 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d00e      	beq.n	8005642 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a18      	ldr	r2, [pc, #96]	@ (800568c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d009      	beq.n	8005642 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a17      	ldr	r2, [pc, #92]	@ (8005690 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d004      	beq.n	8005642 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a15      	ldr	r2, [pc, #84]	@ (8005694 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d10c      	bne.n	800565c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005648:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	68ba      	ldr	r2, [r7, #8]
 8005650:	4313      	orrs	r3, r2
 8005652:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	68ba      	ldr	r2, [r7, #8]
 800565a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	3714      	adds	r7, #20
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr
 800567a:	bf00      	nop
 800567c:	40010000 	.word	0x40010000
 8005680:	40000400 	.word	0x40000400
 8005684:	40000800 	.word	0x40000800
 8005688:	40000c00 	.word	0x40000c00
 800568c:	40010400 	.word	0x40010400
 8005690:	40014000 	.word	0x40014000
 8005694:	40001800 	.word	0x40001800

08005698 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005698:	b480      	push	{r7}
 800569a:	b085      	sub	sp, #20
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80056a2:	2300      	movs	r3, #0
 80056a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d101      	bne.n	80056b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80056b0:	2302      	movs	r3, #2
 80056b2:	e03d      	b.n	8005730 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	4313      	orrs	r3, r2
 8005700:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	695b      	ldr	r3, [r3, #20]
 800570c:	4313      	orrs	r3, r2
 800570e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	69db      	ldr	r3, [r3, #28]
 800571a:	4313      	orrs	r3, r2
 800571c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68fa      	ldr	r2, [r7, #12]
 8005724:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800572e:	2300      	movs	r3, #0
}
 8005730:	4618      	mov	r0, r3
 8005732:	3714      	adds	r7, #20
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005744:	bf00      	nop
 8005746:	370c      	adds	r7, #12
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005758:	bf00      	nop
 800575a:	370c      	adds	r7, #12
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <arm_rfft_fast_init_f32>:
 8005764:	084b      	lsrs	r3, r1, #1
 8005766:	2b80      	cmp	r3, #128	@ 0x80
 8005768:	b410      	push	{r4}
 800576a:	8201      	strh	r1, [r0, #16]
 800576c:	8003      	strh	r3, [r0, #0]
 800576e:	d047      	beq.n	8005800 <arm_rfft_fast_init_f32+0x9c>
 8005770:	d917      	bls.n	80057a2 <arm_rfft_fast_init_f32+0x3e>
 8005772:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005776:	d03d      	beq.n	80057f4 <arm_rfft_fast_init_f32+0x90>
 8005778:	d929      	bls.n	80057ce <arm_rfft_fast_init_f32+0x6a>
 800577a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800577e:	d020      	beq.n	80057c2 <arm_rfft_fast_init_f32+0x5e>
 8005780:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005784:	d113      	bne.n	80057ae <arm_rfft_fast_init_f32+0x4a>
 8005786:	4921      	ldr	r1, [pc, #132]	@ (800580c <arm_rfft_fast_init_f32+0xa8>)
 8005788:	4a21      	ldr	r2, [pc, #132]	@ (8005810 <arm_rfft_fast_init_f32+0xac>)
 800578a:	4b22      	ldr	r3, [pc, #136]	@ (8005814 <arm_rfft_fast_init_f32+0xb0>)
 800578c:	f44f 646e 	mov.w	r4, #3808	@ 0xee0
 8005790:	8184      	strh	r4, [r0, #12]
 8005792:	6081      	str	r1, [r0, #8]
 8005794:	6042      	str	r2, [r0, #4]
 8005796:	6143      	str	r3, [r0, #20]
 8005798:	2000      	movs	r0, #0
 800579a:	b240      	sxtb	r0, r0
 800579c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80057a0:	4770      	bx	lr
 80057a2:	2b20      	cmp	r3, #32
 80057a4:	d01c      	beq.n	80057e0 <arm_rfft_fast_init_f32+0x7c>
 80057a6:	2b40      	cmp	r3, #64	@ 0x40
 80057a8:	d006      	beq.n	80057b8 <arm_rfft_fast_init_f32+0x54>
 80057aa:	2b10      	cmp	r3, #16
 80057ac:	d01d      	beq.n	80057ea <arm_rfft_fast_init_f32+0x86>
 80057ae:	20ff      	movs	r0, #255	@ 0xff
 80057b0:	b240      	sxtb	r0, r0
 80057b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80057b6:	4770      	bx	lr
 80057b8:	2438      	movs	r4, #56	@ 0x38
 80057ba:	4917      	ldr	r1, [pc, #92]	@ (8005818 <arm_rfft_fast_init_f32+0xb4>)
 80057bc:	4a17      	ldr	r2, [pc, #92]	@ (800581c <arm_rfft_fast_init_f32+0xb8>)
 80057be:	4b18      	ldr	r3, [pc, #96]	@ (8005820 <arm_rfft_fast_init_f32+0xbc>)
 80057c0:	e7e6      	b.n	8005790 <arm_rfft_fast_init_f32+0x2c>
 80057c2:	f44f 64e1 	mov.w	r4, #1800	@ 0x708
 80057c6:	4917      	ldr	r1, [pc, #92]	@ (8005824 <arm_rfft_fast_init_f32+0xc0>)
 80057c8:	4a17      	ldr	r2, [pc, #92]	@ (8005828 <arm_rfft_fast_init_f32+0xc4>)
 80057ca:	4b18      	ldr	r3, [pc, #96]	@ (800582c <arm_rfft_fast_init_f32+0xc8>)
 80057cc:	e7e0      	b.n	8005790 <arm_rfft_fast_init_f32+0x2c>
 80057ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057d2:	d1ec      	bne.n	80057ae <arm_rfft_fast_init_f32+0x4a>
 80057d4:	f44f 74dc 	mov.w	r4, #440	@ 0x1b8
 80057d8:	4915      	ldr	r1, [pc, #84]	@ (8005830 <arm_rfft_fast_init_f32+0xcc>)
 80057da:	4a16      	ldr	r2, [pc, #88]	@ (8005834 <arm_rfft_fast_init_f32+0xd0>)
 80057dc:	4b16      	ldr	r3, [pc, #88]	@ (8005838 <arm_rfft_fast_init_f32+0xd4>)
 80057de:	e7d7      	b.n	8005790 <arm_rfft_fast_init_f32+0x2c>
 80057e0:	2430      	movs	r4, #48	@ 0x30
 80057e2:	4916      	ldr	r1, [pc, #88]	@ (800583c <arm_rfft_fast_init_f32+0xd8>)
 80057e4:	4a16      	ldr	r2, [pc, #88]	@ (8005840 <arm_rfft_fast_init_f32+0xdc>)
 80057e6:	4b17      	ldr	r3, [pc, #92]	@ (8005844 <arm_rfft_fast_init_f32+0xe0>)
 80057e8:	e7d2      	b.n	8005790 <arm_rfft_fast_init_f32+0x2c>
 80057ea:	2414      	movs	r4, #20
 80057ec:	4916      	ldr	r1, [pc, #88]	@ (8005848 <arm_rfft_fast_init_f32+0xe4>)
 80057ee:	4a17      	ldr	r2, [pc, #92]	@ (800584c <arm_rfft_fast_init_f32+0xe8>)
 80057f0:	4b17      	ldr	r3, [pc, #92]	@ (8005850 <arm_rfft_fast_init_f32+0xec>)
 80057f2:	e7cd      	b.n	8005790 <arm_rfft_fast_init_f32+0x2c>
 80057f4:	f44f 74e0 	mov.w	r4, #448	@ 0x1c0
 80057f8:	4916      	ldr	r1, [pc, #88]	@ (8005854 <arm_rfft_fast_init_f32+0xf0>)
 80057fa:	4a17      	ldr	r2, [pc, #92]	@ (8005858 <arm_rfft_fast_init_f32+0xf4>)
 80057fc:	4b17      	ldr	r3, [pc, #92]	@ (800585c <arm_rfft_fast_init_f32+0xf8>)
 80057fe:	e7c7      	b.n	8005790 <arm_rfft_fast_init_f32+0x2c>
 8005800:	24d0      	movs	r4, #208	@ 0xd0
 8005802:	4917      	ldr	r1, [pc, #92]	@ (8005860 <arm_rfft_fast_init_f32+0xfc>)
 8005804:	4a17      	ldr	r2, [pc, #92]	@ (8005864 <arm_rfft_fast_init_f32+0x100>)
 8005806:	4b18      	ldr	r3, [pc, #96]	@ (8005868 <arm_rfft_fast_init_f32+0x104>)
 8005808:	e7c2      	b.n	8005790 <arm_rfft_fast_init_f32+0x2c>
 800580a:	bf00      	nop
 800580c:	080166e0 	.word	0x080166e0
 8005810:	080078d8 	.word	0x080078d8
 8005814:	0800da48 	.word	0x0800da48
 8005818:	0800b9d8 	.word	0x0800b9d8
 800581c:	080184a0 	.word	0x080184a0
 8005820:	0801a990 	.word	0x0801a990
 8005824:	080143c8 	.word	0x080143c8
 8005828:	080122c8 	.word	0x080122c8
 800582c:	0800ba48 	.word	0x0800ba48
 8005830:	0801a620 	.word	0x0801a620
 8005834:	08011a48 	.word	0x08011a48
 8005838:	080186a0 	.word	0x080186a0
 800583c:	08015280 	.word	0x08015280
 8005840:	080142c8 	.word	0x080142c8
 8005844:	0800b8d8 	.word	0x0800b8d8
 8005848:	080151d8 	.word	0x080151d8
 800584c:	08012248 	.word	0x08012248
 8005850:	08015200 	.word	0x08015200
 8005854:	08018ea0 	.word	0x08018ea0
 8005858:	080156e0 	.word	0x080156e0
 800585c:	08019220 	.word	0x08019220
 8005860:	0801ab90 	.word	0x0801ab90
 8005864:	080152e0 	.word	0x080152e0
 8005868:	0801a220 	.word	0x0801a220

0800586c <arm_rfft_fast_f32>:
 800586c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005870:	8a06      	ldrh	r6, [r0, #16]
 8005872:	0876      	lsrs	r6, r6, #1
 8005874:	4607      	mov	r7, r0
 8005876:	4615      	mov	r5, r2
 8005878:	8006      	strh	r6, [r0, #0]
 800587a:	460c      	mov	r4, r1
 800587c:	2b00      	cmp	r3, #0
 800587e:	d15c      	bne.n	800593a <arm_rfft_fast_f32+0xce>
 8005880:	461a      	mov	r2, r3
 8005882:	2301      	movs	r3, #1
 8005884:	f000 fbe6 	bl	8006054 <arm_cfft_f32>
 8005888:	edd4 7a00 	vldr	s15, [r4]
 800588c:	ed94 7a01 	vldr	s14, [r4, #4]
 8005890:	883e      	ldrh	r6, [r7, #0]
 8005892:	6978      	ldr	r0, [r7, #20]
 8005894:	ee37 7a07 	vadd.f32	s14, s14, s14
 8005898:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800589c:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 80058a0:	ee77 6a87 	vadd.f32	s13, s15, s14
 80058a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80058a8:	3e01      	subs	r6, #1
 80058aa:	ee26 7aa3 	vmul.f32	s14, s13, s7
 80058ae:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80058b2:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 80058b6:	ed85 7a00 	vstr	s14, [r5]
 80058ba:	edc5 7a01 	vstr	s15, [r5, #4]
 80058be:	3010      	adds	r0, #16
 80058c0:	f105 0210 	add.w	r2, r5, #16
 80058c4:	3b08      	subs	r3, #8
 80058c6:	f104 0110 	add.w	r1, r4, #16
 80058ca:	ed51 4a02 	vldr	s9, [r1, #-8]
 80058ce:	ed93 5a02 	vldr	s10, [r3, #8]
 80058d2:	ed11 7a01 	vldr	s14, [r1, #-4]
 80058d6:	ed10 6a02 	vldr	s12, [r0, #-8]
 80058da:	edd3 5a03 	vldr	s11, [r3, #12]
 80058de:	ed50 6a01 	vldr	s13, [r0, #-4]
 80058e2:	ee75 7a64 	vsub.f32	s15, s10, s9
 80058e6:	ee35 4a87 	vadd.f32	s8, s11, s14
 80058ea:	ee35 5a24 	vadd.f32	s10, s10, s9
 80058ee:	ee77 5a65 	vsub.f32	s11, s14, s11
 80058f2:	ee66 4a27 	vmul.f32	s9, s12, s15
 80058f6:	ee26 7aa7 	vmul.f32	s14, s13, s15
 80058fa:	ee34 5a85 	vadd.f32	s10, s9, s10
 80058fe:	ee26 6a04 	vmul.f32	s12, s12, s8
 8005902:	ee66 6a84 	vmul.f32	s13, s13, s8
 8005906:	ee77 7a25 	vadd.f32	s15, s14, s11
 800590a:	ee76 6a85 	vadd.f32	s13, s13, s10
 800590e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8005912:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8005916:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800591a:	3e01      	subs	r6, #1
 800591c:	ed42 6a02 	vstr	s13, [r2, #-8]
 8005920:	ed42 7a01 	vstr	s15, [r2, #-4]
 8005924:	f1a3 0308 	sub.w	r3, r3, #8
 8005928:	f101 0108 	add.w	r1, r1, #8
 800592c:	f100 0008 	add.w	r0, r0, #8
 8005930:	f102 0208 	add.w	r2, r2, #8
 8005934:	d1c9      	bne.n	80058ca <arm_rfft_fast_f32+0x5e>
 8005936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800593a:	edd1 7a00 	vldr	s15, [r1]
 800593e:	edd1 6a01 	vldr	s13, [r1, #4]
 8005942:	6941      	ldr	r1, [r0, #20]
 8005944:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005948:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800594c:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 8005950:	ee27 7a23 	vmul.f32	s14, s14, s7
 8005954:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8005958:	3e01      	subs	r6, #1
 800595a:	ed82 7a00 	vstr	s14, [r2]
 800595e:	edc2 7a01 	vstr	s15, [r2, #4]
 8005962:	00f0      	lsls	r0, r6, #3
 8005964:	b3ee      	cbz	r6, 80059e2 <arm_rfft_fast_f32+0x176>
 8005966:	3808      	subs	r0, #8
 8005968:	f101 0e10 	add.w	lr, r1, #16
 800596c:	4420      	add	r0, r4
 800596e:	f104 0110 	add.w	r1, r4, #16
 8005972:	f102 0c10 	add.w	ip, r2, #16
 8005976:	ed90 7a02 	vldr	s14, [r0, #8]
 800597a:	ed51 6a02 	vldr	s13, [r1, #-8]
 800597e:	ed1e 6a02 	vldr	s12, [lr, #-8]
 8005982:	ed90 4a03 	vldr	s8, [r0, #12]
 8005986:	ed11 5a01 	vldr	s10, [r1, #-4]
 800598a:	ed5e 5a01 	vldr	s11, [lr, #-4]
 800598e:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8005992:	ee74 4a05 	vadd.f32	s9, s8, s10
 8005996:	ee26 3a27 	vmul.f32	s6, s12, s15
 800599a:	ee77 6a26 	vadd.f32	s13, s14, s13
 800599e:	ee35 5a44 	vsub.f32	s10, s10, s8
 80059a2:	ee25 7aa7 	vmul.f32	s14, s11, s15
 80059a6:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80059aa:	ee77 7a05 	vadd.f32	s15, s14, s10
 80059ae:	ee26 6a24 	vmul.f32	s12, s12, s9
 80059b2:	ee65 5aa4 	vmul.f32	s11, s11, s9
 80059b6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80059ba:	ee36 7ae5 	vsub.f32	s14, s13, s11
 80059be:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80059c2:	ee27 7a23 	vmul.f32	s14, s14, s7
 80059c6:	3e01      	subs	r6, #1
 80059c8:	ed0c 7a02 	vstr	s14, [ip, #-8]
 80059cc:	ed4c 7a01 	vstr	s15, [ip, #-4]
 80059d0:	f1a0 0008 	sub.w	r0, r0, #8
 80059d4:	f101 0108 	add.w	r1, r1, #8
 80059d8:	f10e 0e08 	add.w	lr, lr, #8
 80059dc:	f10c 0c08 	add.w	ip, ip, #8
 80059e0:	d1c9      	bne.n	8005976 <arm_rfft_fast_f32+0x10a>
 80059e2:	4638      	mov	r0, r7
 80059e4:	4629      	mov	r1, r5
 80059e6:	461a      	mov	r2, r3
 80059e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80059ec:	2301      	movs	r3, #1
 80059ee:	f000 bb31 	b.w	8006054 <arm_cfft_f32>
 80059f2:	bf00      	nop

080059f4 <arm_cfft_radix8by2_f32>:
 80059f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059f8:	ed2d 8b08 	vpush	{d8-d11}
 80059fc:	f8b0 e000 	ldrh.w	lr, [r0]
 8005a00:	6842      	ldr	r2, [r0, #4]
 8005a02:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8005a06:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 8005a0a:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8005a0e:	4607      	mov	r7, r0
 8005a10:	ea4f 038c 	mov.w	r3, ip, lsl #2
 8005a14:	f000 80af 	beq.w	8005b76 <arm_cfft_radix8by2_f32+0x182>
 8005a18:	3310      	adds	r3, #16
 8005a1a:	18ce      	adds	r6, r1, r3
 8005a1c:	3210      	adds	r2, #16
 8005a1e:	4443      	add	r3, r8
 8005a20:	f101 0510 	add.w	r5, r1, #16
 8005a24:	f108 0410 	add.w	r4, r8, #16
 8005a28:	ed54 1a04 	vldr	s3, [r4, #-16]
 8005a2c:	ed13 4a04 	vldr	s8, [r3, #-16]
 8005a30:	ed53 3a03 	vldr	s7, [r3, #-12]
 8005a34:	ed53 5a02 	vldr	s11, [r3, #-8]
 8005a38:	ed13 5a01 	vldr	s10, [r3, #-4]
 8005a3c:	ed54 6a03 	vldr	s13, [r4, #-12]
 8005a40:	ed14 0a02 	vldr	s0, [r4, #-8]
 8005a44:	ed16 2a04 	vldr	s4, [r6, #-16]
 8005a48:	ed56 2a03 	vldr	s5, [r6, #-12]
 8005a4c:	ed15 6a03 	vldr	s12, [r5, #-12]
 8005a50:	ed15 7a01 	vldr	s14, [r5, #-4]
 8005a54:	ed15 3a04 	vldr	s6, [r5, #-16]
 8005a58:	ed54 7a01 	vldr	s15, [r4, #-4]
 8005a5c:	ed56 0a02 	vldr	s1, [r6, #-8]
 8005a60:	ed16 1a01 	vldr	s2, [r6, #-4]
 8005a64:	ed55 4a02 	vldr	s9, [r5, #-8]
 8005a68:	ee73 ba21 	vadd.f32	s23, s6, s3
 8005a6c:	ee36 ba26 	vadd.f32	s22, s12, s13
 8005a70:	ee37 aa27 	vadd.f32	s20, s14, s15
 8005a74:	ee72 9a04 	vadd.f32	s19, s4, s8
 8005a78:	ee32 9aa3 	vadd.f32	s18, s5, s7
 8005a7c:	ee31 8a05 	vadd.f32	s16, s2, s10
 8005a80:	ee74 aa80 	vadd.f32	s21, s9, s0
 8005a84:	ee70 8aa5 	vadd.f32	s17, s1, s11
 8005a88:	ed45 ba04 	vstr	s23, [r5, #-16]
 8005a8c:	ed05 ba03 	vstr	s22, [r5, #-12]
 8005a90:	ed45 aa02 	vstr	s21, [r5, #-8]
 8005a94:	ed05 aa01 	vstr	s20, [r5, #-4]
 8005a98:	ed06 8a01 	vstr	s16, [r6, #-4]
 8005a9c:	ed46 9a04 	vstr	s19, [r6, #-16]
 8005aa0:	ed06 9a03 	vstr	s18, [r6, #-12]
 8005aa4:	ed46 8a02 	vstr	s17, [r6, #-8]
 8005aa8:	ee76 6a66 	vsub.f32	s13, s12, s13
 8005aac:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8005ab0:	ed12 6a03 	vldr	s12, [r2, #-12]
 8005ab4:	ed52 2a04 	vldr	s5, [r2, #-16]
 8005ab8:	ee33 3a61 	vsub.f32	s6, s6, s3
 8005abc:	ee34 4a42 	vsub.f32	s8, s8, s4
 8005ac0:	ee26 8a86 	vmul.f32	s16, s13, s12
 8005ac4:	ee24 2a06 	vmul.f32	s4, s8, s12
 8005ac8:	ee63 1a22 	vmul.f32	s3, s6, s5
 8005acc:	ee24 4a22 	vmul.f32	s8, s8, s5
 8005ad0:	ee23 3a06 	vmul.f32	s6, s6, s12
 8005ad4:	ee66 6aa2 	vmul.f32	s13, s13, s5
 8005ad8:	ee23 6a86 	vmul.f32	s12, s7, s12
 8005adc:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8005ae0:	ee36 6a04 	vadd.f32	s12, s12, s8
 8005ae4:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8005ae8:	ee72 3a63 	vsub.f32	s7, s4, s7
 8005aec:	ee71 2a88 	vadd.f32	s5, s3, s16
 8005af0:	ed44 6a03 	vstr	s13, [r4, #-12]
 8005af4:	ed44 2a04 	vstr	s5, [r4, #-16]
 8005af8:	ed43 3a04 	vstr	s7, [r3, #-16]
 8005afc:	ed03 6a03 	vstr	s12, [r3, #-12]
 8005b00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b04:	ee75 6ae0 	vsub.f32	s13, s11, s1
 8005b08:	ed12 7a01 	vldr	s14, [r2, #-4]
 8005b0c:	ed52 5a02 	vldr	s11, [r2, #-8]
 8005b10:	ee35 6a41 	vsub.f32	s12, s10, s2
 8005b14:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8005b18:	ee67 3a87 	vmul.f32	s7, s15, s14
 8005b1c:	ee26 5a87 	vmul.f32	s10, s13, s14
 8005b20:	ee24 4aa5 	vmul.f32	s8, s9, s11
 8005b24:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8005b28:	ee64 4a87 	vmul.f32	s9, s9, s14
 8005b2c:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8005b30:	ee26 7a07 	vmul.f32	s14, s12, s14
 8005b34:	ee26 6a25 	vmul.f32	s12, s12, s11
 8005b38:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8005b3c:	ee74 5a23 	vadd.f32	s11, s8, s7
 8005b40:	ee35 6a46 	vsub.f32	s12, s10, s12
 8005b44:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005b48:	f1be 0e01 	subs.w	lr, lr, #1
 8005b4c:	ed44 5a02 	vstr	s11, [r4, #-8]
 8005b50:	f105 0510 	add.w	r5, r5, #16
 8005b54:	ed44 7a01 	vstr	s15, [r4, #-4]
 8005b58:	f106 0610 	add.w	r6, r6, #16
 8005b5c:	ed03 6a02 	vstr	s12, [r3, #-8]
 8005b60:	ed03 7a01 	vstr	s14, [r3, #-4]
 8005b64:	f102 0210 	add.w	r2, r2, #16
 8005b68:	f104 0410 	add.w	r4, r4, #16
 8005b6c:	f103 0310 	add.w	r3, r3, #16
 8005b70:	f47f af5a 	bne.w	8005a28 <arm_cfft_radix8by2_f32+0x34>
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	fa1f f48c 	uxth.w	r4, ip
 8005b7a:	4608      	mov	r0, r1
 8005b7c:	2302      	movs	r3, #2
 8005b7e:	4621      	mov	r1, r4
 8005b80:	f000 fae2 	bl	8006148 <arm_radix8_butterfly_f32>
 8005b84:	ecbd 8b08 	vpop	{d8-d11}
 8005b88:	4640      	mov	r0, r8
 8005b8a:	4621      	mov	r1, r4
 8005b8c:	687a      	ldr	r2, [r7, #4]
 8005b8e:	2302      	movs	r3, #2
 8005b90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b94:	f000 bad8 	b.w	8006148 <arm_radix8_butterfly_f32>

08005b98 <arm_cfft_radix8by4_f32>:
 8005b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b9c:	ed2d 8b0a 	vpush	{d8-d12}
 8005ba0:	8802      	ldrh	r2, [r0, #0]
 8005ba2:	ed91 6a00 	vldr	s12, [r1]
 8005ba6:	b08f      	sub	sp, #60	@ 0x3c
 8005ba8:	460f      	mov	r7, r1
 8005baa:	0852      	lsrs	r2, r2, #1
 8005bac:	0093      	lsls	r3, r2, #2
 8005bae:	900c      	str	r0, [sp, #48]	@ 0x30
 8005bb0:	9103      	str	r1, [sp, #12]
 8005bb2:	6841      	ldr	r1, [r0, #4]
 8005bb4:	ed97 7a01 	vldr	s14, [r7, #4]
 8005bb8:	4638      	mov	r0, r7
 8005bba:	4418      	add	r0, r3
 8005bbc:	4606      	mov	r6, r0
 8005bbe:	9009      	str	r0, [sp, #36]	@ 0x24
 8005bc0:	4418      	add	r0, r3
 8005bc2:	edd0 6a00 	vldr	s13, [r0]
 8005bc6:	edd6 3a00 	vldr	s7, [r6]
 8005bca:	edd6 2a01 	vldr	s5, [r6, #4]
 8005bce:	edd0 7a01 	vldr	s15, [r0, #4]
 8005bd2:	900a      	str	r0, [sp, #40]	@ 0x28
 8005bd4:	ee76 5a26 	vadd.f32	s11, s12, s13
 8005bd8:	4604      	mov	r4, r0
 8005bda:	4625      	mov	r5, r4
 8005bdc:	441c      	add	r4, r3
 8005bde:	ed94 4a00 	vldr	s8, [r4]
 8005be2:	ed94 5a01 	vldr	s10, [r4, #4]
 8005be6:	9401      	str	r4, [sp, #4]
 8005be8:	ee75 4aa3 	vadd.f32	s9, s11, s7
 8005bec:	4630      	mov	r0, r6
 8005bee:	ee74 4a24 	vadd.f32	s9, s8, s9
 8005bf2:	463e      	mov	r6, r7
 8005bf4:	ee14 ea90 	vmov	lr, s9
 8005bf8:	ee76 6a66 	vsub.f32	s13, s12, s13
 8005bfc:	f846 eb08 	str.w	lr, [r6], #8
 8005c00:	ee37 6a27 	vadd.f32	s12, s14, s15
 8005c04:	edd0 4a01 	vldr	s9, [r0, #4]
 8005c08:	9604      	str	r6, [sp, #16]
 8005c0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c0e:	9e01      	ldr	r6, [sp, #4]
 8005c10:	ee32 3aa6 	vadd.f32	s6, s5, s13
 8005c14:	ed96 2a01 	vldr	s4, [r6, #4]
 8005c18:	ee36 7a24 	vadd.f32	s14, s12, s9
 8005c1c:	ee75 5ae3 	vsub.f32	s11, s11, s7
 8005c20:	ee77 4ae3 	vsub.f32	s9, s15, s7
 8005c24:	ee36 6a62 	vsub.f32	s12, s12, s5
 8005c28:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8005c2c:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8005c30:	ee73 3a45 	vsub.f32	s7, s6, s10
 8005c34:	4604      	mov	r4, r0
 8005c36:	ee36 6a45 	vsub.f32	s12, s12, s10
 8005c3a:	ee75 6a26 	vadd.f32	s13, s10, s13
 8005c3e:	46a3      	mov	fp, r4
 8005c40:	ee37 7a02 	vadd.f32	s14, s14, s4
 8005c44:	ee34 5a84 	vadd.f32	s10, s9, s8
 8005c48:	ee13 8a90 	vmov	r8, s7
 8005c4c:	46a4      	mov	ip, r4
 8005c4e:	ee75 5ac4 	vsub.f32	s11, s11, s8
 8005c52:	ed87 7a01 	vstr	s14, [r7, #4]
 8005c56:	f84b 8b08 	str.w	r8, [fp], #8
 8005c5a:	f1ac 0704 	sub.w	r7, ip, #4
 8005c5e:	ed8c 5a01 	vstr	s10, [ip, #4]
 8005c62:	f101 0c08 	add.w	ip, r1, #8
 8005c66:	462c      	mov	r4, r5
 8005c68:	f8cd c014 	str.w	ip, [sp, #20]
 8005c6c:	ee15 ca90 	vmov	ip, s11
 8005c70:	f844 cb08 	str.w	ip, [r4], #8
 8005c74:	9407      	str	r4, [sp, #28]
 8005c76:	f101 0410 	add.w	r4, r1, #16
 8005c7a:	ed85 6a01 	vstr	s12, [r5, #4]
 8005c7e:	0852      	lsrs	r2, r2, #1
 8005c80:	9402      	str	r4, [sp, #8]
 8005c82:	462c      	mov	r4, r5
 8005c84:	f101 0518 	add.w	r5, r1, #24
 8005c88:	920b      	str	r2, [sp, #44]	@ 0x2c
 8005c8a:	46b2      	mov	sl, r6
 8005c8c:	9506      	str	r5, [sp, #24]
 8005c8e:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8005c92:	3a02      	subs	r2, #2
 8005c94:	ee16 5a90 	vmov	r5, s13
 8005c98:	46b6      	mov	lr, r6
 8005c9a:	4630      	mov	r0, r6
 8005c9c:	0852      	lsrs	r2, r2, #1
 8005c9e:	f84a 5b08 	str.w	r5, [sl], #8
 8005ca2:	f1a0 0604 	sub.w	r6, r0, #4
 8005ca6:	edce 7a01 	vstr	s15, [lr, #4]
 8005caa:	9208      	str	r2, [sp, #32]
 8005cac:	f000 8130 	beq.w	8005f10 <arm_cfft_radix8by4_f32+0x378>
 8005cb0:	4691      	mov	r9, r2
 8005cb2:	9a03      	ldr	r2, [sp, #12]
 8005cb4:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005cb8:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
 8005cbc:	3b08      	subs	r3, #8
 8005cbe:	f102 0510 	add.w	r5, r2, #16
 8005cc2:	f101 0c20 	add.w	ip, r1, #32
 8005cc6:	f1a4 020c 	sub.w	r2, r4, #12
 8005cca:	f101 0e30 	add.w	lr, r1, #48	@ 0x30
 8005cce:	4433      	add	r3, r6
 8005cd0:	3410      	adds	r4, #16
 8005cd2:	4650      	mov	r0, sl
 8005cd4:	4659      	mov	r1, fp
 8005cd6:	ed55 3a02 	vldr	s7, [r5, #-8]
 8005cda:	ed14 5a02 	vldr	s10, [r4, #-8]
 8005cde:	ed91 7a00 	vldr	s14, [r1]
 8005ce2:	edd0 7a00 	vldr	s15, [r0]
 8005ce6:	ed15 4a01 	vldr	s8, [r5, #-4]
 8005cea:	ed54 5a01 	vldr	s11, [r4, #-4]
 8005cee:	edd0 6a01 	vldr	s13, [r0, #4]
 8005cf2:	ed91 6a01 	vldr	s12, [r1, #4]
 8005cf6:	ee33 8a85 	vadd.f32	s16, s7, s10
 8005cfa:	ee34 0a25 	vadd.f32	s0, s8, s11
 8005cfe:	ee78 4a07 	vadd.f32	s9, s16, s14
 8005d02:	ee74 5a65 	vsub.f32	s11, s8, s11
 8005d06:	ee77 4aa4 	vadd.f32	s9, s15, s9
 8005d0a:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8005d0e:	ed45 4a02 	vstr	s9, [r5, #-8]
 8005d12:	edd1 4a01 	vldr	s9, [r1, #4]
 8005d16:	ed90 4a01 	vldr	s8, [r0, #4]
 8005d1a:	ee70 4a24 	vadd.f32	s9, s0, s9
 8005d1e:	ee76 aa05 	vadd.f32	s21, s12, s10
 8005d22:	ee74 4a84 	vadd.f32	s9, s9, s8
 8005d26:	ee35 aac7 	vsub.f32	s20, s11, s14
 8005d2a:	ed45 4a01 	vstr	s9, [r5, #-4]
 8005d2e:	edd6 1a00 	vldr	s3, [r6]
 8005d32:	edd7 0a00 	vldr	s1, [r7]
 8005d36:	ed92 4a02 	vldr	s8, [r2, #8]
 8005d3a:	edd3 3a02 	vldr	s7, [r3, #8]
 8005d3e:	ed93 2a01 	vldr	s4, [r3, #4]
 8005d42:	ed16 1a01 	vldr	s2, [r6, #-4]
 8005d46:	edd2 2a01 	vldr	s5, [r2, #4]
 8005d4a:	ed57 9a01 	vldr	s19, [r7, #-4]
 8005d4e:	ee70 4aa1 	vadd.f32	s9, s1, s3
 8005d52:	ee39 3a81 	vadd.f32	s6, s19, s2
 8005d56:	ee74 8a84 	vadd.f32	s17, s9, s8
 8005d5a:	ee70 1ae1 	vsub.f32	s3, s1, s3
 8005d5e:	ee73 8aa8 	vadd.f32	s17, s7, s17
 8005d62:	ee7a aae6 	vsub.f32	s21, s21, s13
 8005d66:	ee18 aa90 	vmov	sl, s17
 8005d6a:	f847 a908 	str.w	sl, [r7], #-8
 8005d6e:	edd2 8a01 	vldr	s17, [r2, #4]
 8005d72:	ed93 9a01 	vldr	s18, [r3, #4]
 8005d76:	ee73 8a28 	vadd.f32	s17, s6, s17
 8005d7a:	ee3a aa27 	vadd.f32	s20, s20, s15
 8005d7e:	ee78 8a89 	vadd.f32	s17, s17, s18
 8005d82:	ee74 0a63 	vsub.f32	s1, s8, s7
 8005d86:	edc7 8a01 	vstr	s17, [r7, #4]
 8005d8a:	ed18 ba02 	vldr	s22, [r8, #-8]
 8005d8e:	ed58 8a01 	vldr	s17, [r8, #-4]
 8005d92:	ee39 1ac1 	vsub.f32	s2, s19, s2
 8005d96:	ee6a ba28 	vmul.f32	s23, s20, s17
 8005d9a:	ee2a ca8b 	vmul.f32	s24, s21, s22
 8005d9e:	ee71 9ae2 	vsub.f32	s19, s3, s5
 8005da2:	ee30 9a81 	vadd.f32	s18, s1, s2
 8005da6:	ee79 9a82 	vadd.f32	s19, s19, s4
 8005daa:	ee3c ca2b 	vadd.f32	s24, s24, s23
 8005dae:	ee6a aaa8 	vmul.f32	s21, s21, s17
 8005db2:	ee69 baa8 	vmul.f32	s23, s19, s17
 8005db6:	ee2a aa0b 	vmul.f32	s20, s20, s22
 8005dba:	ee69 9a8b 	vmul.f32	s19, s19, s22
 8005dbe:	ee69 8a28 	vmul.f32	s17, s18, s17
 8005dc2:	ee29 ba0b 	vmul.f32	s22, s18, s22
 8005dc6:	ee1c aa10 	vmov	sl, s24
 8005dca:	ee78 8aa9 	vadd.f32	s17, s17, s19
 8005dce:	f841 ab08 	str.w	sl, [r1], #8
 8005dd2:	ee3a aa6a 	vsub.f32	s20, s20, s21
 8005dd6:	ee3b bacb 	vsub.f32	s22, s23, s22
 8005dda:	ee34 4ac4 	vsub.f32	s8, s9, s8
 8005dde:	ee33 3a62 	vsub.f32	s6, s6, s5
 8005de2:	ed01 aa01 	vstr	s20, [r1, #-4]
 8005de6:	edc2 8a01 	vstr	s17, [r2, #4]
 8005dea:	ed82 ba02 	vstr	s22, [r2, #8]
 8005dee:	ed5c 4a04 	vldr	s9, [ip, #-16]
 8005df2:	ee74 3a63 	vsub.f32	s7, s8, s7
 8005df6:	ee38 8a47 	vsub.f32	s16, s16, s14
 8005dfa:	ed1c 4a03 	vldr	s8, [ip, #-12]
 8005dfe:	ee30 0a46 	vsub.f32	s0, s0, s12
 8005e02:	ee33 3a42 	vsub.f32	s6, s6, s4
 8005e06:	ee38 8a67 	vsub.f32	s16, s16, s15
 8005e0a:	ee30 0a66 	vsub.f32	s0, s0, s13
 8005e0e:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 8005e12:	ee63 8a04 	vmul.f32	s17, s6, s8
 8005e16:	ee28 aa24 	vmul.f32	s20, s16, s9
 8005e1a:	ee60 9a04 	vmul.f32	s19, s0, s8
 8005e1e:	ee28 8a04 	vmul.f32	s16, s16, s8
 8005e22:	ee20 0a24 	vmul.f32	s0, s0, s9
 8005e26:	ee63 3a84 	vmul.f32	s7, s7, s8
 8005e2a:	ee39 4a68 	vsub.f32	s8, s18, s17
 8005e2e:	ee7a 9a29 	vadd.f32	s19, s20, s19
 8005e32:	ee14 aa10 	vmov	sl, s8
 8005e36:	ee30 0a48 	vsub.f32	s0, s0, s16
 8005e3a:	ee63 4a24 	vmul.f32	s9, s6, s9
 8005e3e:	ed44 9a02 	vstr	s19, [r4, #-8]
 8005e42:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8005e46:	ed04 0a01 	vstr	s0, [r4, #-4]
 8005e4a:	f846 a908 	str.w	sl, [r6], #-8
 8005e4e:	ee35 6a46 	vsub.f32	s12, s10, s12
 8005e52:	ee35 7a87 	vadd.f32	s14, s11, s14
 8005e56:	edc6 3a01 	vstr	s7, [r6, #4]
 8005e5a:	ee76 6a86 	vadd.f32	s13, s13, s12
 8005e5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e62:	ed1e 6a05 	vldr	s12, [lr, #-20]	@ 0xffffffec
 8005e66:	ed1e 7a06 	vldr	s14, [lr, #-24]	@ 0xffffffe8
 8005e6a:	ee67 5a86 	vmul.f32	s11, s15, s12
 8005e6e:	ee26 5a87 	vmul.f32	s10, s13, s14
 8005e72:	ee72 2a62 	vsub.f32	s5, s4, s5
 8005e76:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8005e7a:	ee72 2ae1 	vsub.f32	s5, s5, s3
 8005e7e:	ee75 5a25 	vadd.f32	s11, s10, s11
 8005e82:	ee62 0a86 	vmul.f32	s1, s5, s12
 8005e86:	ee66 6a86 	vmul.f32	s13, s13, s12
 8005e8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005e8e:	ee21 6a06 	vmul.f32	s12, s2, s12
 8005e92:	ee62 2a87 	vmul.f32	s5, s5, s14
 8005e96:	ee21 1a07 	vmul.f32	s2, s2, s14
 8005e9a:	ee15 aa90 	vmov	sl, s11
 8005e9e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005ea2:	f840 ab08 	str.w	sl, [r0], #8
 8005ea6:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8005eaa:	ee76 2a22 	vadd.f32	s5, s12, s5
 8005eae:	f1b9 0901 	subs.w	r9, r9, #1
 8005eb2:	ed40 7a01 	vstr	s15, [r0, #-4]
 8005eb6:	f105 0508 	add.w	r5, r5, #8
 8005eba:	ed83 1a02 	vstr	s2, [r3, #8]
 8005ebe:	edc3 2a01 	vstr	s5, [r3, #4]
 8005ec2:	f108 0808 	add.w	r8, r8, #8
 8005ec6:	f1a2 0208 	sub.w	r2, r2, #8
 8005eca:	f10c 0c10 	add.w	ip, ip, #16
 8005ece:	f104 0408 	add.w	r4, r4, #8
 8005ed2:	f10e 0e18 	add.w	lr, lr, #24
 8005ed6:	f1a3 0308 	sub.w	r3, r3, #8
 8005eda:	f47f aefc 	bne.w	8005cd6 <arm_cfft_radix8by4_f32+0x13e>
 8005ede:	9908      	ldr	r1, [sp, #32]
 8005ee0:	9802      	ldr	r0, [sp, #8]
 8005ee2:	f8dd a034 	ldr.w	sl, [sp, #52]	@ 0x34
 8005ee6:	00cb      	lsls	r3, r1, #3
 8005ee8:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8005eec:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8005ef0:	9102      	str	r1, [sp, #8]
 8005ef2:	9904      	ldr	r1, [sp, #16]
 8005ef4:	4419      	add	r1, r3
 8005ef6:	9104      	str	r1, [sp, #16]
 8005ef8:	9905      	ldr	r1, [sp, #20]
 8005efa:	4419      	add	r1, r3
 8005efc:	9105      	str	r1, [sp, #20]
 8005efe:	9907      	ldr	r1, [sp, #28]
 8005f00:	449b      	add	fp, r3
 8005f02:	4419      	add	r1, r3
 8005f04:	449a      	add	sl, r3
 8005f06:	9b06      	ldr	r3, [sp, #24]
 8005f08:	9107      	str	r1, [sp, #28]
 8005f0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f0e:	9306      	str	r3, [sp, #24]
 8005f10:	9a04      	ldr	r2, [sp, #16]
 8005f12:	9807      	ldr	r0, [sp, #28]
 8005f14:	edd2 3a00 	vldr	s7, [r2]
 8005f18:	ed90 4a00 	vldr	s8, [r0]
 8005f1c:	eddb 7a00 	vldr	s15, [fp]
 8005f20:	ed9a 3a00 	vldr	s6, [sl]
 8005f24:	edd2 4a01 	vldr	s9, [r2, #4]
 8005f28:	ed90 7a01 	vldr	s14, [r0, #4]
 8005f2c:	ed9b 2a01 	vldr	s4, [fp, #4]
 8005f30:	edda 5a01 	vldr	s11, [sl, #4]
 8005f34:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 8005f38:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005f3a:	ee73 6a84 	vadd.f32	s13, s7, s8
 8005f3e:	ee34 6a87 	vadd.f32	s12, s9, s14
 8005f42:	ee36 5aa7 	vadd.f32	s10, s13, s15
 8005f46:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8005f4a:	ee33 5a05 	vadd.f32	s10, s6, s10
 8005f4e:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8005f52:	ed82 5a00 	vstr	s10, [r2]
 8005f56:	ed9b 5a01 	vldr	s10, [fp, #4]
 8005f5a:	edda 4a01 	vldr	s9, [sl, #4]
 8005f5e:	ee36 5a05 	vadd.f32	s10, s12, s10
 8005f62:	ee72 3a04 	vadd.f32	s7, s4, s8
 8005f66:	ee35 5a24 	vadd.f32	s10, s10, s9
 8005f6a:	ee77 4a67 	vsub.f32	s9, s14, s15
 8005f6e:	ed82 5a01 	vstr	s10, [r2, #4]
 8005f72:	9a05      	ldr	r2, [sp, #20]
 8005f74:	ee34 5a83 	vadd.f32	s10, s9, s6
 8005f78:	edd2 1a00 	vldr	s3, [r2]
 8005f7c:	edd2 2a01 	vldr	s5, [r2, #4]
 8005f80:	9a02      	ldr	r2, [sp, #8]
 8005f82:	ee73 3ae5 	vsub.f32	s7, s7, s11
 8005f86:	ee36 6a42 	vsub.f32	s12, s12, s4
 8005f8a:	ee63 4aa1 	vmul.f32	s9, s7, s3
 8005f8e:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8005f92:	ee65 2a22 	vmul.f32	s5, s10, s5
 8005f96:	ee25 5a21 	vmul.f32	s10, s10, s3
 8005f9a:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8005f9e:	ee35 5a63 	vsub.f32	s10, s10, s7
 8005fa2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005fa6:	edcb 2a00 	vstr	s5, [fp]
 8005faa:	ed8b 5a01 	vstr	s10, [fp, #4]
 8005fae:	edd2 3a01 	vldr	s7, [r2, #4]
 8005fb2:	ed92 5a00 	vldr	s10, [r2]
 8005fb6:	9a06      	ldr	r2, [sp, #24]
 8005fb8:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8005fbc:	ee36 6a65 	vsub.f32	s12, s12, s11
 8005fc0:	ee66 4a85 	vmul.f32	s9, s13, s10
 8005fc4:	ee26 5a05 	vmul.f32	s10, s12, s10
 8005fc8:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8005fcc:	ee26 6a23 	vmul.f32	s12, s12, s7
 8005fd0:	ee75 6a66 	vsub.f32	s13, s10, s13
 8005fd4:	ee34 6a86 	vadd.f32	s12, s9, s12
 8005fd8:	ee34 4a42 	vsub.f32	s8, s8, s4
 8005fdc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005fe0:	edc0 6a01 	vstr	s13, [r0, #4]
 8005fe4:	ed80 6a00 	vstr	s12, [r0]
 8005fe8:	ed92 6a01 	vldr	s12, [r2, #4]
 8005fec:	9803      	ldr	r0, [sp, #12]
 8005fee:	ee77 7a43 	vsub.f32	s15, s14, s6
 8005ff2:	ee75 5a84 	vadd.f32	s11, s11, s8
 8005ff6:	ed92 7a00 	vldr	s14, [r2]
 8005ffa:	ee65 6a87 	vmul.f32	s13, s11, s14
 8005ffe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006002:	ee65 5a86 	vmul.f32	s11, s11, s12
 8006006:	ee67 7a86 	vmul.f32	s15, s15, s12
 800600a:	ee77 5a65 	vsub.f32	s11, s14, s11
 800600e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006012:	edca 5a01 	vstr	s11, [sl, #4]
 8006016:	edca 7a00 	vstr	s15, [sl]
 800601a:	6872      	ldr	r2, [r6, #4]
 800601c:	4621      	mov	r1, r4
 800601e:	2304      	movs	r3, #4
 8006020:	f000 f892 	bl	8006148 <arm_radix8_butterfly_f32>
 8006024:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006026:	6872      	ldr	r2, [r6, #4]
 8006028:	4621      	mov	r1, r4
 800602a:	2304      	movs	r3, #4
 800602c:	f000 f88c 	bl	8006148 <arm_radix8_butterfly_f32>
 8006030:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006032:	6872      	ldr	r2, [r6, #4]
 8006034:	4621      	mov	r1, r4
 8006036:	2304      	movs	r3, #4
 8006038:	f000 f886 	bl	8006148 <arm_radix8_butterfly_f32>
 800603c:	9801      	ldr	r0, [sp, #4]
 800603e:	6872      	ldr	r2, [r6, #4]
 8006040:	4621      	mov	r1, r4
 8006042:	2304      	movs	r3, #4
 8006044:	b00f      	add	sp, #60	@ 0x3c
 8006046:	ecbd 8b0a 	vpop	{d8-d12}
 800604a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800604e:	f000 b87b 	b.w	8006148 <arm_radix8_butterfly_f32>
 8006052:	bf00      	nop

08006054 <arm_cfft_f32>:
 8006054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006058:	2a01      	cmp	r2, #1
 800605a:	4606      	mov	r6, r0
 800605c:	4617      	mov	r7, r2
 800605e:	460c      	mov	r4, r1
 8006060:	4698      	mov	r8, r3
 8006062:	8805      	ldrh	r5, [r0, #0]
 8006064:	d054      	beq.n	8006110 <arm_cfft_f32+0xbc>
 8006066:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800606a:	d04c      	beq.n	8006106 <arm_cfft_f32+0xb2>
 800606c:	d916      	bls.n	800609c <arm_cfft_f32+0x48>
 800606e:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 8006072:	d01a      	beq.n	80060aa <arm_cfft_f32+0x56>
 8006074:	d95c      	bls.n	8006130 <arm_cfft_f32+0xdc>
 8006076:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 800607a:	d044      	beq.n	8006106 <arm_cfft_f32+0xb2>
 800607c:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8006080:	d105      	bne.n	800608e <arm_cfft_f32+0x3a>
 8006082:	4620      	mov	r0, r4
 8006084:	4629      	mov	r1, r5
 8006086:	6872      	ldr	r2, [r6, #4]
 8006088:	2301      	movs	r3, #1
 800608a:	f000 f85d 	bl	8006148 <arm_radix8_butterfly_f32>
 800608e:	f1b8 0f00 	cmp.w	r8, #0
 8006092:	d111      	bne.n	80060b8 <arm_cfft_f32+0x64>
 8006094:	2f01      	cmp	r7, #1
 8006096:	d016      	beq.n	80060c6 <arm_cfft_f32+0x72>
 8006098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800609c:	2d20      	cmp	r5, #32
 800609e:	d032      	beq.n	8006106 <arm_cfft_f32+0xb2>
 80060a0:	d94a      	bls.n	8006138 <arm_cfft_f32+0xe4>
 80060a2:	2d40      	cmp	r5, #64	@ 0x40
 80060a4:	d0ed      	beq.n	8006082 <arm_cfft_f32+0x2e>
 80060a6:	2d80      	cmp	r5, #128	@ 0x80
 80060a8:	d1f1      	bne.n	800608e <arm_cfft_f32+0x3a>
 80060aa:	4630      	mov	r0, r6
 80060ac:	4621      	mov	r1, r4
 80060ae:	f7ff fca1 	bl	80059f4 <arm_cfft_radix8by2_f32>
 80060b2:	f1b8 0f00 	cmp.w	r8, #0
 80060b6:	d0ed      	beq.n	8006094 <arm_cfft_f32+0x40>
 80060b8:	4620      	mov	r0, r4
 80060ba:	89b1      	ldrh	r1, [r6, #12]
 80060bc:	68b2      	ldr	r2, [r6, #8]
 80060be:	f7fa f887 	bl	80001d0 <arm_bitreversal_32>
 80060c2:	2f01      	cmp	r7, #1
 80060c4:	d1e8      	bne.n	8006098 <arm_cfft_f32+0x44>
 80060c6:	ee07 5a90 	vmov	s15, r5
 80060ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060ce:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80060d2:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 80060d6:	2d00      	cmp	r5, #0
 80060d8:	d0de      	beq.n	8006098 <arm_cfft_f32+0x44>
 80060da:	f104 0108 	add.w	r1, r4, #8
 80060de:	2300      	movs	r3, #0
 80060e0:	3301      	adds	r3, #1
 80060e2:	429d      	cmp	r5, r3
 80060e4:	f101 0108 	add.w	r1, r1, #8
 80060e8:	ed11 7a04 	vldr	s14, [r1, #-16]
 80060ec:	ed51 7a03 	vldr	s15, [r1, #-12]
 80060f0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80060f4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80060f8:	ed01 7a04 	vstr	s14, [r1, #-16]
 80060fc:	ed41 7a03 	vstr	s15, [r1, #-12]
 8006100:	d1ee      	bne.n	80060e0 <arm_cfft_f32+0x8c>
 8006102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006106:	4630      	mov	r0, r6
 8006108:	4621      	mov	r1, r4
 800610a:	f7ff fd45 	bl	8005b98 <arm_cfft_radix8by4_f32>
 800610e:	e7be      	b.n	800608e <arm_cfft_f32+0x3a>
 8006110:	b1ad      	cbz	r5, 800613e <arm_cfft_f32+0xea>
 8006112:	f101 030c 	add.w	r3, r1, #12
 8006116:	2200      	movs	r2, #0
 8006118:	ed53 7a02 	vldr	s15, [r3, #-8]
 800611c:	3201      	adds	r2, #1
 800611e:	eef1 7a67 	vneg.f32	s15, s15
 8006122:	4295      	cmp	r5, r2
 8006124:	ed43 7a02 	vstr	s15, [r3, #-8]
 8006128:	f103 0308 	add.w	r3, r3, #8
 800612c:	d1f4      	bne.n	8006118 <arm_cfft_f32+0xc4>
 800612e:	e79a      	b.n	8006066 <arm_cfft_f32+0x12>
 8006130:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8006134:	d0a5      	beq.n	8006082 <arm_cfft_f32+0x2e>
 8006136:	e7aa      	b.n	800608e <arm_cfft_f32+0x3a>
 8006138:	2d10      	cmp	r5, #16
 800613a:	d0b6      	beq.n	80060aa <arm_cfft_f32+0x56>
 800613c:	e7a7      	b.n	800608e <arm_cfft_f32+0x3a>
 800613e:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8006142:	d894      	bhi.n	800606e <arm_cfft_f32+0x1a>
 8006144:	e7aa      	b.n	800609c <arm_cfft_f32+0x48>
 8006146:	bf00      	nop

08006148 <arm_radix8_butterfly_f32>:
 8006148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800614c:	ed2d 8b10 	vpush	{d8-d15}
 8006150:	b09d      	sub	sp, #116	@ 0x74
 8006152:	461c      	mov	r4, r3
 8006154:	ed9f bac8 	vldr	s22, [pc, #800]	@ 8006478 <arm_radix8_butterfly_f32+0x330>
 8006158:	921a      	str	r2, [sp, #104]	@ 0x68
 800615a:	1d03      	adds	r3, r0, #4
 800615c:	4682      	mov	sl, r0
 800615e:	4689      	mov	r9, r1
 8006160:	468b      	mov	fp, r1
 8006162:	931b      	str	r3, [sp, #108]	@ 0x6c
 8006164:	9400      	str	r4, [sp, #0]
 8006166:	469e      	mov	lr, r3
 8006168:	ea4f 03db 	mov.w	r3, fp, lsr #3
 800616c:	005a      	lsls	r2, r3, #1
 800616e:	18d6      	adds	r6, r2, r3
 8006170:	18f5      	adds	r5, r6, r3
 8006172:	9203      	str	r2, [sp, #12]
 8006174:	195a      	adds	r2, r3, r5
 8006176:	18d0      	adds	r0, r2, r3
 8006178:	00df      	lsls	r7, r3, #3
 800617a:	1819      	adds	r1, r3, r0
 800617c:	463c      	mov	r4, r7
 800617e:	9701      	str	r7, [sp, #4]
 8006180:	4457      	add	r7, sl
 8006182:	930c      	str	r3, [sp, #48]	@ 0x30
 8006184:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 8006188:	011b      	lsls	r3, r3, #4
 800618a:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
 800618e:	eb07 0c04 	add.w	ip, r7, r4
 8006192:	9c00      	ldr	r4, [sp, #0]
 8006194:	9302      	str	r3, [sp, #8]
 8006196:	eb0a 06c6 	add.w	r6, sl, r6, lsl #3
 800619a:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
 800619e:	3204      	adds	r2, #4
 80061a0:	3104      	adds	r1, #4
 80061a2:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
 80061a6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80061aa:	f04f 0800 	mov.w	r8, #0
 80061ae:	eddc 7a00 	vldr	s15, [ip]
 80061b2:	edd7 6a00 	vldr	s13, [r7]
 80061b6:	edd6 3a00 	vldr	s7, [r6]
 80061ba:	ed5e aa01 	vldr	s21, [lr, #-4]
 80061be:	edd5 4a00 	vldr	s9, [r5]
 80061c2:	ed90 2a00 	vldr	s4, [r0]
 80061c6:	ed12 7a01 	vldr	s14, [r2, #-4]
 80061ca:	ed51 0a01 	vldr	s1, [r1, #-4]
 80061ce:	ee77 8a82 	vadd.f32	s17, s15, s4
 80061d2:	ee33 4aa0 	vadd.f32	s8, s7, s1
 80061d6:	ee76 1a87 	vadd.f32	s3, s13, s14
 80061da:	ee3a 3aa4 	vadd.f32	s6, s21, s9
 80061de:	ee31 6a84 	vadd.f32	s12, s3, s8
 80061e2:	ee33 5a28 	vadd.f32	s10, s6, s17
 80061e6:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80061ea:	ee75 6a06 	vadd.f32	s13, s10, s12
 80061ee:	ee35 5a46 	vsub.f32	s10, s10, s12
 80061f2:	ed4e 6a01 	vstr	s13, [lr, #-4]
 80061f6:	ed85 5a00 	vstr	s10, [r5]
 80061fa:	ed96 1a01 	vldr	s2, [r6, #4]
 80061fe:	edd7 5a01 	vldr	s11, [r7, #4]
 8006202:	ed92 aa00 	vldr	s20, [r2]
 8006206:	ed91 6a00 	vldr	s12, [r1]
 800620a:	ed9e 9a00 	vldr	s18, [lr]
 800620e:	ed95 5a01 	vldr	s10, [r5, #4]
 8006212:	eddc 6a01 	vldr	s13, [ip, #4]
 8006216:	edd0 9a01 	vldr	s19, [r0, #4]
 800621a:	ee73 0ae0 	vsub.f32	s1, s7, s1
 800621e:	ee71 2a46 	vsub.f32	s5, s2, s12
 8006222:	ee75 3aca 	vsub.f32	s7, s11, s20
 8006226:	ee37 0a60 	vsub.f32	s0, s14, s1
 800622a:	ee33 8aa2 	vadd.f32	s16, s7, s5
 800622e:	ee37 7a20 	vadd.f32	s14, s14, s1
 8006232:	ee73 2ae2 	vsub.f32	s5, s7, s5
 8006236:	ee37 2ac2 	vsub.f32	s4, s15, s4
 800623a:	ee79 3a05 	vadd.f32	s7, s18, s10
 800623e:	ee60 0a0b 	vmul.f32	s1, s0, s22
 8006242:	ee39 5a45 	vsub.f32	s10, s18, s10
 8006246:	ee7a 4ae4 	vsub.f32	s9, s21, s9
 800624a:	ee36 9aa9 	vadd.f32	s18, s13, s19
 800624e:	ee75 5a8a 	vadd.f32	s11, s11, s20
 8006252:	ee31 6a06 	vadd.f32	s12, s2, s12
 8006256:	ee76 6ae9 	vsub.f32	s13, s13, s19
 800625a:	ee28 8a0b 	vmul.f32	s16, s16, s22
 800625e:	ee62 2a8b 	vmul.f32	s5, s5, s22
 8006262:	ee67 7a0b 	vmul.f32	s15, s14, s22
 8006266:	ee33 3a68 	vsub.f32	s6, s6, s17
 800626a:	ee36 0a88 	vadd.f32	s0, s13, s16
 800626e:	ee75 8a86 	vadd.f32	s17, s11, s12
 8006272:	ee36 7ac8 	vsub.f32	s14, s13, s16
 8006276:	ee71 1ac4 	vsub.f32	s3, s3, s8
 800627a:	ee75 6a62 	vsub.f32	s13, s10, s5
 800627e:	ee33 4ac9 	vsub.f32	s8, s7, s18
 8006282:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8006286:	ee33 1a89 	vadd.f32	s2, s7, s18
 800628a:	ee74 5ae0 	vsub.f32	s11, s9, s1
 800628e:	ee74 3aa0 	vadd.f32	s7, s9, s1
 8006292:	ee75 4a22 	vadd.f32	s9, s10, s5
 8006296:	ee32 5a27 	vadd.f32	s10, s4, s15
 800629a:	ee72 7a67 	vsub.f32	s15, s4, s15
 800629e:	ee33 8a06 	vadd.f32	s16, s6, s12
 80062a2:	ee75 2a87 	vadd.f32	s5, s11, s14
 80062a6:	ee31 9a28 	vadd.f32	s18, s2, s17
 80062aa:	ee33 6a46 	vsub.f32	s12, s6, s12
 80062ae:	ee74 0a61 	vsub.f32	s1, s8, s3
 80062b2:	ee33 2a80 	vadd.f32	s4, s7, s0
 80062b6:	ee35 7ac7 	vsub.f32	s14, s11, s14
 80062ba:	ee34 3ac5 	vsub.f32	s6, s9, s10
 80062be:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80062c2:	ee31 1a68 	vsub.f32	s2, s2, s17
 80062c6:	ee34 4a21 	vadd.f32	s8, s8, s3
 80062ca:	ee73 3ac0 	vsub.f32	s7, s7, s0
 80062ce:	ee74 4a85 	vadd.f32	s9, s9, s10
 80062d2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80062d6:	44d8      	add	r8, fp
 80062d8:	45c1      	cmp	r9, r8
 80062da:	ed8e 9a00 	vstr	s18, [lr]
 80062de:	ed85 1a01 	vstr	s2, [r5, #4]
 80062e2:	449e      	add	lr, r3
 80062e4:	ed8c 8a00 	vstr	s16, [ip]
 80062e8:	441d      	add	r5, r3
 80062ea:	ed80 6a00 	vstr	s12, [r0]
 80062ee:	edcc 0a01 	vstr	s1, [ip, #4]
 80062f2:	ed80 4a01 	vstr	s8, [r0, #4]
 80062f6:	449c      	add	ip, r3
 80062f8:	ed87 2a00 	vstr	s4, [r7]
 80062fc:	4418      	add	r0, r3
 80062fe:	ed41 3a01 	vstr	s7, [r1, #-4]
 8006302:	ed42 2a01 	vstr	s5, [r2, #-4]
 8006306:	ed86 7a00 	vstr	s14, [r6]
 800630a:	ed87 3a01 	vstr	s6, [r7, #4]
 800630e:	edc1 4a00 	vstr	s9, [r1]
 8006312:	441f      	add	r7, r3
 8006314:	edc2 5a00 	vstr	s11, [r2]
 8006318:	4419      	add	r1, r3
 800631a:	edc6 6a01 	vstr	s13, [r6, #4]
 800631e:	441a      	add	r2, r3
 8006320:	441e      	add	r6, r3
 8006322:	f63f af44 	bhi.w	80061ae <arm_radix8_butterfly_f32+0x66>
 8006326:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006328:	2907      	cmp	r1, #7
 800632a:	4620      	mov	r0, r4
 800632c:	f240 81e9 	bls.w	8006702 <arm_radix8_butterfly_f32+0x5ba>
 8006330:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 8006334:	193e      	adds	r6, r7, r4
 8006336:	1935      	adds	r5, r6, r4
 8006338:	9c03      	ldr	r4, [sp, #12]
 800633a:	9000      	str	r0, [sp, #0]
 800633c:	4622      	mov	r2, r4
 800633e:	3201      	adds	r2, #1
 8006340:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8006344:	9900      	ldr	r1, [sp, #0]
 8006346:	1828      	adds	r0, r5, r0
 8006348:	eb00 0e01 	add.w	lr, r0, r1
 800634c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800634e:	440a      	add	r2, r1
 8006350:	eb04 0c01 	add.w	ip, r4, r1
 8006354:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 8006358:	eb0a 0ec2 	add.w	lr, sl, r2, lsl #3
 800635c:	9a00      	ldr	r2, [sp, #0]
 800635e:	940f      	str	r4, [sp, #60]	@ 0x3c
 8006360:	00ed      	lsls	r5, r5, #3
 8006362:	9511      	str	r5, [sp, #68]	@ 0x44
 8006364:	00d5      	lsls	r5, r2, #3
 8006366:	950d      	str	r5, [sp, #52]	@ 0x34
 8006368:	9d01      	ldr	r5, [sp, #4]
 800636a:	3508      	adds	r5, #8
 800636c:	9516      	str	r5, [sp, #88]	@ 0x58
 800636e:	9d02      	ldr	r5, [sp, #8]
 8006370:	3508      	adds	r5, #8
 8006372:	0114      	lsls	r4, r2, #4
 8006374:	9517      	str	r5, [sp, #92]	@ 0x5c
 8006376:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006378:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 800637a:	940e      	str	r4, [sp, #56]	@ 0x38
 800637c:	00c0      	lsls	r0, r0, #3
 800637e:	9010      	str	r0, [sp, #64]	@ 0x40
 8006380:	18aa      	adds	r2, r5, r2
 8006382:	9207      	str	r2, [sp, #28]
 8006384:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8006386:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8006388:	18aa      	adds	r2, r5, r2
 800638a:	9208      	str	r2, [sp, #32]
 800638c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800638e:	18aa      	adds	r2, r5, r2
 8006390:	9209      	str	r2, [sp, #36]	@ 0x24
 8006392:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8006396:	f10e 0204 	add.w	r2, lr, #4
 800639a:	920a      	str	r2, [sp, #40]	@ 0x28
 800639c:	00c9      	lsls	r1, r1, #3
 800639e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80063a0:	310c      	adds	r1, #12
 80063a2:	00f6      	lsls	r6, r6, #3
 80063a4:	ea4f 00cc 	mov.w	r0, ip, lsl #3
 80063a8:	9114      	str	r1, [sp, #80]	@ 0x50
 80063aa:	18a9      	adds	r1, r5, r2
 80063ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80063ae:	9612      	str	r6, [sp, #72]	@ 0x48
 80063b0:	00ff      	lsls	r7, r7, #3
 80063b2:	19ae      	adds	r6, r5, r6
 80063b4:	3008      	adds	r0, #8
 80063b6:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 80063ba:	9606      	str	r6, [sp, #24]
 80063bc:	9019      	str	r0, [sp, #100]	@ 0x64
 80063be:	18aa      	adds	r2, r5, r2
 80063c0:	0164      	lsls	r4, r4, #5
 80063c2:	19ee      	adds	r6, r5, r7
 80063c4:	f10c 000c 	add.w	r0, ip, #12
 80063c8:	9713      	str	r7, [sp, #76]	@ 0x4c
 80063ca:	9604      	str	r6, [sp, #16]
 80063cc:	9015      	str	r0, [sp, #84]	@ 0x54
 80063ce:	9103      	str	r1, [sp, #12]
 80063d0:	9205      	str	r2, [sp, #20]
 80063d2:	f104 0208 	add.w	r2, r4, #8
 80063d6:	9218      	str	r2, [sp, #96]	@ 0x60
 80063d8:	f04f 0801 	mov.w	r8, #1
 80063dc:	2200      	movs	r2, #0
 80063de:	f102 0108 	add.w	r1, r2, #8
 80063e2:	460f      	mov	r7, r1
 80063e4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80063e6:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80063e8:	188e      	adds	r6, r1, r2
 80063ea:	9916      	ldr	r1, [sp, #88]	@ 0x58
 80063ec:	188d      	adds	r5, r1, r2
 80063ee:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80063f0:	188c      	adds	r4, r1, r2
 80063f2:	9919      	ldr	r1, [sp, #100]	@ 0x64
 80063f4:	1888      	adds	r0, r1, r2
 80063f6:	9914      	ldr	r1, [sp, #80]	@ 0x50
 80063f8:	eb01 0c02 	add.w	ip, r1, r2
 80063fc:	9915      	ldr	r1, [sp, #84]	@ 0x54
 80063fe:	440a      	add	r2, r1
 8006400:	9903      	ldr	r1, [sp, #12]
 8006402:	edd1 fa00 	vldr	s31, [r1]
 8006406:	9905      	ldr	r1, [sp, #20]
 8006408:	ed91 fa00 	vldr	s30, [r1]
 800640c:	9904      	ldr	r1, [sp, #16]
 800640e:	edd1 ea00 	vldr	s29, [r1]
 8006412:	9906      	ldr	r1, [sp, #24]
 8006414:	ed91 ea00 	vldr	s28, [r1]
 8006418:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800641a:	edd1 da00 	vldr	s27, [r1]
 800641e:	9908      	ldr	r1, [sp, #32]
 8006420:	ed91 da00 	vldr	s26, [r1]
 8006424:	9907      	ldr	r1, [sp, #28]
 8006426:	edd1 ca00 	vldr	s25, [r1]
 800642a:	9903      	ldr	r1, [sp, #12]
 800642c:	ed91 ca01 	vldr	s24, [r1, #4]
 8006430:	9905      	ldr	r1, [sp, #20]
 8006432:	edd1 ba01 	vldr	s23, [r1, #4]
 8006436:	9904      	ldr	r1, [sp, #16]
 8006438:	edd1 aa01 	vldr	s21, [r1, #4]
 800643c:	9906      	ldr	r1, [sp, #24]
 800643e:	ed91 aa01 	vldr	s20, [r1, #4]
 8006442:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006444:	edd1 7a01 	vldr	s15, [r1, #4]
 8006448:	9908      	ldr	r1, [sp, #32]
 800644a:	edcd 7a00 	vstr	s15, [sp]
 800644e:	edd1 7a01 	vldr	s15, [r1, #4]
 8006452:	9907      	ldr	r1, [sp, #28]
 8006454:	edcd 7a01 	vstr	s15, [sp, #4]
 8006458:	edd1 7a01 	vldr	s15, [r1, #4]
 800645c:	eb0a 0e07 	add.w	lr, sl, r7
 8006460:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8006462:	edcd 7a02 	vstr	s15, [sp, #8]
 8006466:	eb0c 010a 	add.w	r1, ip, sl
 800646a:	4456      	add	r6, sl
 800646c:	4455      	add	r5, sl
 800646e:	4454      	add	r4, sl
 8006470:	4450      	add	r0, sl
 8006472:	4452      	add	r2, sl
 8006474:	46c4      	mov	ip, r8
 8006476:	e001      	b.n	800647c <arm_radix8_butterfly_f32+0x334>
 8006478:	3f3504f3 	.word	0x3f3504f3
 800647c:	ed96 5a00 	vldr	s10, [r6]
 8006480:	ed52 9a01 	vldr	s19, [r2, #-4]
 8006484:	ed11 6a01 	vldr	s12, [r1, #-4]
 8006488:	edd0 7a00 	vldr	s15, [r0]
 800648c:	ed17 7a01 	vldr	s14, [r7, #-4]
 8006490:	edde 3a00 	vldr	s7, [lr]
 8006494:	ed94 3a00 	vldr	s6, [r4]
 8006498:	ed95 2a00 	vldr	s4, [r5]
 800649c:	ed9e 0a01 	vldr	s0, [lr, #4]
 80064a0:	ee33 8a85 	vadd.f32	s16, s7, s10
 80064a4:	ee32 1a06 	vadd.f32	s2, s4, s12
 80064a8:	ee33 4a29 	vadd.f32	s8, s6, s19
 80064ac:	ee77 4a87 	vadd.f32	s9, s15, s14
 80064b0:	ee78 1a04 	vadd.f32	s3, s16, s8
 80064b4:	ee71 6a24 	vadd.f32	s13, s2, s9
 80064b8:	ee32 2a46 	vsub.f32	s4, s4, s12
 80064bc:	ee31 6aa6 	vadd.f32	s12, s3, s13
 80064c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80064c4:	ed8e 6a00 	vstr	s12, [lr]
 80064c8:	edd0 8a01 	vldr	s17, [r0, #4]
 80064cc:	ed95 9a01 	vldr	s18, [r5, #4]
 80064d0:	edd1 2a00 	vldr	s5, [r1]
 80064d4:	ed97 7a00 	vldr	s14, [r7]
 80064d8:	edd4 0a01 	vldr	s1, [r4, #4]
 80064dc:	ed96 6a01 	vldr	s12, [r6, #4]
 80064e0:	edd2 5a00 	vldr	s11, [r2]
 80064e4:	ee73 3ac5 	vsub.f32	s7, s7, s10
 80064e8:	ee33 3a69 	vsub.f32	s6, s6, s19
 80064ec:	ee39 5a62 	vsub.f32	s10, s18, s5
 80064f0:	ee78 9ac7 	vsub.f32	s19, s17, s14
 80064f4:	ee38 4a44 	vsub.f32	s8, s16, s8
 80064f8:	ee38 7a87 	vadd.f32	s14, s17, s14
 80064fc:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8006500:	ee79 2a22 	vadd.f32	s5, s18, s5
 8006504:	ee75 8a69 	vsub.f32	s17, s10, s19
 8006508:	ee32 9a27 	vadd.f32	s18, s4, s15
 800650c:	ee35 5a29 	vadd.f32	s10, s10, s19
 8006510:	ee72 7a67 	vsub.f32	s15, s4, s15
 8006514:	ee30 2a06 	vadd.f32	s4, s0, s12
 8006518:	ee69 9a0b 	vmul.f32	s19, s18, s22
 800651c:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8006520:	ee32 9a08 	vadd.f32	s18, s4, s16
 8006524:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8006528:	ee32 2a48 	vsub.f32	s4, s4, s16
 800652c:	ee71 4a64 	vsub.f32	s9, s2, s9
 8006530:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8006534:	ee32 1a87 	vadd.f32	s2, s5, s14
 8006538:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800653c:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8006540:	ee30 6a46 	vsub.f32	s12, s0, s12
 8006544:	ee73 0a29 	vadd.f32	s1, s6, s19
 8006548:	ee36 0a28 	vadd.f32	s0, s12, s17
 800654c:	ee33 3a69 	vsub.f32	s6, s6, s19
 8006550:	ee32 7a64 	vsub.f32	s14, s4, s9
 8006554:	ee73 9aa7 	vadd.f32	s19, s7, s15
 8006558:	ee36 6a68 	vsub.f32	s12, s12, s17
 800655c:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8006560:	ee75 8a85 	vadd.f32	s17, s11, s10
 8006564:	ee74 3a22 	vadd.f32	s7, s8, s5
 8006568:	ee35 5ac5 	vsub.f32	s10, s11, s10
 800656c:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8006570:	ee79 1a41 	vsub.f32	s3, s18, s2
 8006574:	ee39 8aa8 	vadd.f32	s16, s19, s17
 8006578:	ee76 5a43 	vsub.f32	s11, s12, s6
 800657c:	ee74 2a62 	vsub.f32	s5, s8, s5
 8006580:	ee72 4a24 	vadd.f32	s9, s4, s9
 8006584:	ee30 4a60 	vsub.f32	s8, s0, s1
 8006588:	ee79 8ae8 	vsub.f32	s17, s19, s17
 800658c:	ee30 0a20 	vadd.f32	s0, s0, s1
 8006590:	ee77 9a85 	vadd.f32	s19, s15, s10
 8006594:	ee36 6a03 	vadd.f32	s12, s12, s6
 8006598:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800659c:	ee2e 2a21 	vmul.f32	s4, s28, s3
 80065a0:	ee2e 5a26 	vmul.f32	s10, s28, s13
 80065a4:	ee6f 0a23 	vmul.f32	s1, s30, s7
 80065a8:	ee2a 3a21 	vmul.f32	s6, s20, s3
 80065ac:	ee39 1a01 	vadd.f32	s2, s18, s2
 80065b0:	ee6a 6a26 	vmul.f32	s13, s20, s13
 80065b4:	ee2b 9a87 	vmul.f32	s18, s23, s14
 80065b8:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 80065bc:	ee2f 7a07 	vmul.f32	s14, s30, s14
 80065c0:	ee6f 1a84 	vmul.f32	s3, s31, s8
 80065c4:	ee35 3a03 	vadd.f32	s6, s10, s6
 80065c8:	ee72 6a66 	vsub.f32	s13, s4, s13
 80065cc:	ee2c 5a04 	vmul.f32	s10, s24, s8
 80065d0:	ee2f 2a88 	vmul.f32	s4, s31, s16
 80065d4:	ed9d 4a02 	vldr	s8, [sp, #8]
 80065d8:	ed8e 1a01 	vstr	s2, [lr, #4]
 80065dc:	ee77 3a63 	vsub.f32	s7, s14, s7
 80065e0:	ee2c 8a08 	vmul.f32	s16, s24, s16
 80065e4:	ed9d 7a01 	vldr	s14, [sp, #4]
 80065e8:	ed86 3a00 	vstr	s6, [r6]
 80065ec:	ee30 9a89 	vadd.f32	s18, s1, s18
 80065f0:	ee32 2a05 	vadd.f32	s4, s4, s10
 80065f4:	ee6d 0a22 	vmul.f32	s1, s26, s5
 80065f8:	ee31 8ac8 	vsub.f32	s16, s3, s16
 80065fc:	ee67 2a22 	vmul.f32	s5, s14, s5
 8006600:	ee64 1a00 	vmul.f32	s3, s8, s0
 8006604:	ee27 7a24 	vmul.f32	s14, s14, s9
 8006608:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 800660c:	ee6d 4a24 	vmul.f32	s9, s26, s9
 8006610:	ee64 8a28 	vmul.f32	s17, s8, s17
 8006614:	ed9d 4a00 	vldr	s8, [sp]
 8006618:	edc6 6a01 	vstr	s13, [r6, #4]
 800661c:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8006620:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 8006624:	ee64 9a29 	vmul.f32	s19, s8, s19
 8006628:	ee24 4a25 	vmul.f32	s8, s8, s11
 800662c:	ee30 7a87 	vadd.f32	s14, s1, s14
 8006630:	ee74 4a84 	vadd.f32	s9, s9, s8
 8006634:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 8006638:	ee2a 4a86 	vmul.f32	s8, s21, s12
 800663c:	ee2c 0a80 	vmul.f32	s0, s25, s0
 8006640:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 8006644:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 8006648:	ee2e 6a86 	vmul.f32	s12, s29, s12
 800664c:	ee75 1a21 	vadd.f32	s3, s10, s3
 8006650:	ee30 0a68 	vsub.f32	s0, s0, s17
 8006654:	ee75 9ae9 	vsub.f32	s19, s11, s19
 8006658:	ee70 0a84 	vadd.f32	s1, s1, s8
 800665c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8006660:	44dc      	add	ip, fp
 8006662:	45e1      	cmp	r9, ip
 8006664:	ed84 9a00 	vstr	s18, [r4]
 8006668:	edc4 3a01 	vstr	s7, [r4, #4]
 800666c:	449e      	add	lr, r3
 800666e:	ed02 7a01 	vstr	s14, [r2, #-4]
 8006672:	edc2 2a00 	vstr	s5, [r2]
 8006676:	441e      	add	r6, r3
 8006678:	ed85 2a00 	vstr	s4, [r5]
 800667c:	ed85 8a01 	vstr	s16, [r5, #4]
 8006680:	441c      	add	r4, r3
 8006682:	ed47 1a01 	vstr	s3, [r7, #-4]
 8006686:	ed87 0a00 	vstr	s0, [r7]
 800668a:	441a      	add	r2, r3
 800668c:	ed41 4a01 	vstr	s9, [r1, #-4]
 8006690:	edc1 9a00 	vstr	s19, [r1]
 8006694:	441d      	add	r5, r3
 8006696:	edc0 0a00 	vstr	s1, [r0]
 800669a:	441f      	add	r7, r3
 800669c:	ed80 6a01 	vstr	s12, [r0, #4]
 80066a0:	4419      	add	r1, r3
 80066a2:	4418      	add	r0, r3
 80066a4:	f63f aeea 	bhi.w	800647c <arm_radix8_butterfly_f32+0x334>
 80066a8:	9a03      	ldr	r2, [sp, #12]
 80066aa:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80066ac:	440a      	add	r2, r1
 80066ae:	9203      	str	r2, [sp, #12]
 80066b0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80066b2:	9a05      	ldr	r2, [sp, #20]
 80066b4:	440a      	add	r2, r1
 80066b6:	9205      	str	r2, [sp, #20]
 80066b8:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80066ba:	9a04      	ldr	r2, [sp, #16]
 80066bc:	440a      	add	r2, r1
 80066be:	9204      	str	r2, [sp, #16]
 80066c0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80066c2:	9a06      	ldr	r2, [sp, #24]
 80066c4:	440a      	add	r2, r1
 80066c6:	9206      	str	r2, [sp, #24]
 80066c8:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80066ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80066cc:	440a      	add	r2, r1
 80066ce:	9209      	str	r2, [sp, #36]	@ 0x24
 80066d0:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80066d2:	9a08      	ldr	r2, [sp, #32]
 80066d4:	440a      	add	r2, r1
 80066d6:	9208      	str	r2, [sp, #32]
 80066d8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80066da:	9a07      	ldr	r2, [sp, #28]
 80066dc:	440a      	add	r2, r1
 80066de:	9207      	str	r2, [sp, #28]
 80066e0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80066e2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80066e4:	f108 0801 	add.w	r8, r8, #1
 80066e8:	3208      	adds	r2, #8
 80066ea:	4588      	cmp	r8, r1
 80066ec:	920a      	str	r2, [sp, #40]	@ 0x28
 80066ee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80066f0:	f47f ae75 	bne.w	80063de <arm_radix8_butterfly_f32+0x296>
 80066f4:	f8bd 3034 	ldrh.w	r3, [sp, #52]	@ 0x34
 80066f8:	9300      	str	r3, [sp, #0]
 80066fa:	46c3      	mov	fp, r8
 80066fc:	f8dd e06c 	ldr.w	lr, [sp, #108]	@ 0x6c
 8006700:	e532      	b.n	8006168 <arm_radix8_butterfly_f32+0x20>
 8006702:	b01d      	add	sp, #116	@ 0x74
 8006704:	ecbd 8b10 	vpop	{d8-d15}
 8006708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800670c <srand>:
 800670c:	b538      	push	{r3, r4, r5, lr}
 800670e:	4b10      	ldr	r3, [pc, #64]	@ (8006750 <srand+0x44>)
 8006710:	681d      	ldr	r5, [r3, #0]
 8006712:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8006714:	4604      	mov	r4, r0
 8006716:	b9b3      	cbnz	r3, 8006746 <srand+0x3a>
 8006718:	2018      	movs	r0, #24
 800671a:	f000 fa4d 	bl	8006bb8 <malloc>
 800671e:	4602      	mov	r2, r0
 8006720:	6328      	str	r0, [r5, #48]	@ 0x30
 8006722:	b920      	cbnz	r0, 800672e <srand+0x22>
 8006724:	4b0b      	ldr	r3, [pc, #44]	@ (8006754 <srand+0x48>)
 8006726:	480c      	ldr	r0, [pc, #48]	@ (8006758 <srand+0x4c>)
 8006728:	2146      	movs	r1, #70	@ 0x46
 800672a:	f000 f9dd 	bl	8006ae8 <__assert_func>
 800672e:	490b      	ldr	r1, [pc, #44]	@ (800675c <srand+0x50>)
 8006730:	4b0b      	ldr	r3, [pc, #44]	@ (8006760 <srand+0x54>)
 8006732:	e9c0 1300 	strd	r1, r3, [r0]
 8006736:	4b0b      	ldr	r3, [pc, #44]	@ (8006764 <srand+0x58>)
 8006738:	6083      	str	r3, [r0, #8]
 800673a:	230b      	movs	r3, #11
 800673c:	8183      	strh	r3, [r0, #12]
 800673e:	2100      	movs	r1, #0
 8006740:	2001      	movs	r0, #1
 8006742:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8006746:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8006748:	2200      	movs	r2, #0
 800674a:	611c      	str	r4, [r3, #16]
 800674c:	615a      	str	r2, [r3, #20]
 800674e:	bd38      	pop	{r3, r4, r5, pc}
 8006750:	20000020 	.word	0x20000020
 8006754:	0801ad30 	.word	0x0801ad30
 8006758:	0801ad47 	.word	0x0801ad47
 800675c:	abcd330e 	.word	0xabcd330e
 8006760:	e66d1234 	.word	0xe66d1234
 8006764:	0005deec 	.word	0x0005deec

08006768 <rand>:
 8006768:	4b16      	ldr	r3, [pc, #88]	@ (80067c4 <rand+0x5c>)
 800676a:	b510      	push	{r4, lr}
 800676c:	681c      	ldr	r4, [r3, #0]
 800676e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006770:	b9b3      	cbnz	r3, 80067a0 <rand+0x38>
 8006772:	2018      	movs	r0, #24
 8006774:	f000 fa20 	bl	8006bb8 <malloc>
 8006778:	4602      	mov	r2, r0
 800677a:	6320      	str	r0, [r4, #48]	@ 0x30
 800677c:	b920      	cbnz	r0, 8006788 <rand+0x20>
 800677e:	4b12      	ldr	r3, [pc, #72]	@ (80067c8 <rand+0x60>)
 8006780:	4812      	ldr	r0, [pc, #72]	@ (80067cc <rand+0x64>)
 8006782:	2152      	movs	r1, #82	@ 0x52
 8006784:	f000 f9b0 	bl	8006ae8 <__assert_func>
 8006788:	4911      	ldr	r1, [pc, #68]	@ (80067d0 <rand+0x68>)
 800678a:	4b12      	ldr	r3, [pc, #72]	@ (80067d4 <rand+0x6c>)
 800678c:	e9c0 1300 	strd	r1, r3, [r0]
 8006790:	4b11      	ldr	r3, [pc, #68]	@ (80067d8 <rand+0x70>)
 8006792:	6083      	str	r3, [r0, #8]
 8006794:	230b      	movs	r3, #11
 8006796:	8183      	strh	r3, [r0, #12]
 8006798:	2100      	movs	r1, #0
 800679a:	2001      	movs	r0, #1
 800679c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80067a0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80067a2:	480e      	ldr	r0, [pc, #56]	@ (80067dc <rand+0x74>)
 80067a4:	690b      	ldr	r3, [r1, #16]
 80067a6:	694c      	ldr	r4, [r1, #20]
 80067a8:	4a0d      	ldr	r2, [pc, #52]	@ (80067e0 <rand+0x78>)
 80067aa:	4358      	muls	r0, r3
 80067ac:	fb02 0004 	mla	r0, r2, r4, r0
 80067b0:	fba3 3202 	umull	r3, r2, r3, r2
 80067b4:	3301      	adds	r3, #1
 80067b6:	eb40 0002 	adc.w	r0, r0, r2
 80067ba:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80067be:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80067c2:	bd10      	pop	{r4, pc}
 80067c4:	20000020 	.word	0x20000020
 80067c8:	0801ad30 	.word	0x0801ad30
 80067cc:	0801ad47 	.word	0x0801ad47
 80067d0:	abcd330e 	.word	0xabcd330e
 80067d4:	e66d1234 	.word	0xe66d1234
 80067d8:	0005deec 	.word	0x0005deec
 80067dc:	5851f42d 	.word	0x5851f42d
 80067e0:	4c957f2d 	.word	0x4c957f2d

080067e4 <std>:
 80067e4:	2300      	movs	r3, #0
 80067e6:	b510      	push	{r4, lr}
 80067e8:	4604      	mov	r4, r0
 80067ea:	e9c0 3300 	strd	r3, r3, [r0]
 80067ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80067f2:	6083      	str	r3, [r0, #8]
 80067f4:	8181      	strh	r1, [r0, #12]
 80067f6:	6643      	str	r3, [r0, #100]	@ 0x64
 80067f8:	81c2      	strh	r2, [r0, #14]
 80067fa:	6183      	str	r3, [r0, #24]
 80067fc:	4619      	mov	r1, r3
 80067fe:	2208      	movs	r2, #8
 8006800:	305c      	adds	r0, #92	@ 0x5c
 8006802:	f000 f8f4 	bl	80069ee <memset>
 8006806:	4b0d      	ldr	r3, [pc, #52]	@ (800683c <std+0x58>)
 8006808:	6263      	str	r3, [r4, #36]	@ 0x24
 800680a:	4b0d      	ldr	r3, [pc, #52]	@ (8006840 <std+0x5c>)
 800680c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800680e:	4b0d      	ldr	r3, [pc, #52]	@ (8006844 <std+0x60>)
 8006810:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006812:	4b0d      	ldr	r3, [pc, #52]	@ (8006848 <std+0x64>)
 8006814:	6323      	str	r3, [r4, #48]	@ 0x30
 8006816:	4b0d      	ldr	r3, [pc, #52]	@ (800684c <std+0x68>)
 8006818:	6224      	str	r4, [r4, #32]
 800681a:	429c      	cmp	r4, r3
 800681c:	d006      	beq.n	800682c <std+0x48>
 800681e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006822:	4294      	cmp	r4, r2
 8006824:	d002      	beq.n	800682c <std+0x48>
 8006826:	33d0      	adds	r3, #208	@ 0xd0
 8006828:	429c      	cmp	r4, r3
 800682a:	d105      	bne.n	8006838 <std+0x54>
 800682c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006834:	f000 b954 	b.w	8006ae0 <__retarget_lock_init_recursive>
 8006838:	bd10      	pop	{r4, pc}
 800683a:	bf00      	nop
 800683c:	08006969 	.word	0x08006969
 8006840:	0800698b 	.word	0x0800698b
 8006844:	080069c3 	.word	0x080069c3
 8006848:	080069e7 	.word	0x080069e7
 800684c:	20004ea4 	.word	0x20004ea4

08006850 <stdio_exit_handler>:
 8006850:	4a02      	ldr	r2, [pc, #8]	@ (800685c <stdio_exit_handler+0xc>)
 8006852:	4903      	ldr	r1, [pc, #12]	@ (8006860 <stdio_exit_handler+0x10>)
 8006854:	4803      	ldr	r0, [pc, #12]	@ (8006864 <stdio_exit_handler+0x14>)
 8006856:	f000 b869 	b.w	800692c <_fwalk_sglue>
 800685a:	bf00      	nop
 800685c:	20000014 	.word	0x20000014
 8006860:	08006e2d 	.word	0x08006e2d
 8006864:	20000024 	.word	0x20000024

08006868 <cleanup_stdio>:
 8006868:	6841      	ldr	r1, [r0, #4]
 800686a:	4b0c      	ldr	r3, [pc, #48]	@ (800689c <cleanup_stdio+0x34>)
 800686c:	4299      	cmp	r1, r3
 800686e:	b510      	push	{r4, lr}
 8006870:	4604      	mov	r4, r0
 8006872:	d001      	beq.n	8006878 <cleanup_stdio+0x10>
 8006874:	f000 fada 	bl	8006e2c <_fflush_r>
 8006878:	68a1      	ldr	r1, [r4, #8]
 800687a:	4b09      	ldr	r3, [pc, #36]	@ (80068a0 <cleanup_stdio+0x38>)
 800687c:	4299      	cmp	r1, r3
 800687e:	d002      	beq.n	8006886 <cleanup_stdio+0x1e>
 8006880:	4620      	mov	r0, r4
 8006882:	f000 fad3 	bl	8006e2c <_fflush_r>
 8006886:	68e1      	ldr	r1, [r4, #12]
 8006888:	4b06      	ldr	r3, [pc, #24]	@ (80068a4 <cleanup_stdio+0x3c>)
 800688a:	4299      	cmp	r1, r3
 800688c:	d004      	beq.n	8006898 <cleanup_stdio+0x30>
 800688e:	4620      	mov	r0, r4
 8006890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006894:	f000 baca 	b.w	8006e2c <_fflush_r>
 8006898:	bd10      	pop	{r4, pc}
 800689a:	bf00      	nop
 800689c:	20004ea4 	.word	0x20004ea4
 80068a0:	20004f0c 	.word	0x20004f0c
 80068a4:	20004f74 	.word	0x20004f74

080068a8 <global_stdio_init.part.0>:
 80068a8:	b510      	push	{r4, lr}
 80068aa:	4b0b      	ldr	r3, [pc, #44]	@ (80068d8 <global_stdio_init.part.0+0x30>)
 80068ac:	4c0b      	ldr	r4, [pc, #44]	@ (80068dc <global_stdio_init.part.0+0x34>)
 80068ae:	4a0c      	ldr	r2, [pc, #48]	@ (80068e0 <global_stdio_init.part.0+0x38>)
 80068b0:	601a      	str	r2, [r3, #0]
 80068b2:	4620      	mov	r0, r4
 80068b4:	2200      	movs	r2, #0
 80068b6:	2104      	movs	r1, #4
 80068b8:	f7ff ff94 	bl	80067e4 <std>
 80068bc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80068c0:	2201      	movs	r2, #1
 80068c2:	2109      	movs	r1, #9
 80068c4:	f7ff ff8e 	bl	80067e4 <std>
 80068c8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80068cc:	2202      	movs	r2, #2
 80068ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068d2:	2112      	movs	r1, #18
 80068d4:	f7ff bf86 	b.w	80067e4 <std>
 80068d8:	20004fdc 	.word	0x20004fdc
 80068dc:	20004ea4 	.word	0x20004ea4
 80068e0:	08006851 	.word	0x08006851

080068e4 <__sfp_lock_acquire>:
 80068e4:	4801      	ldr	r0, [pc, #4]	@ (80068ec <__sfp_lock_acquire+0x8>)
 80068e6:	f000 b8fc 	b.w	8006ae2 <__retarget_lock_acquire_recursive>
 80068ea:	bf00      	nop
 80068ec:	20004fe5 	.word	0x20004fe5

080068f0 <__sfp_lock_release>:
 80068f0:	4801      	ldr	r0, [pc, #4]	@ (80068f8 <__sfp_lock_release+0x8>)
 80068f2:	f000 b8f7 	b.w	8006ae4 <__retarget_lock_release_recursive>
 80068f6:	bf00      	nop
 80068f8:	20004fe5 	.word	0x20004fe5

080068fc <__sinit>:
 80068fc:	b510      	push	{r4, lr}
 80068fe:	4604      	mov	r4, r0
 8006900:	f7ff fff0 	bl	80068e4 <__sfp_lock_acquire>
 8006904:	6a23      	ldr	r3, [r4, #32]
 8006906:	b11b      	cbz	r3, 8006910 <__sinit+0x14>
 8006908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800690c:	f7ff bff0 	b.w	80068f0 <__sfp_lock_release>
 8006910:	4b04      	ldr	r3, [pc, #16]	@ (8006924 <__sinit+0x28>)
 8006912:	6223      	str	r3, [r4, #32]
 8006914:	4b04      	ldr	r3, [pc, #16]	@ (8006928 <__sinit+0x2c>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d1f5      	bne.n	8006908 <__sinit+0xc>
 800691c:	f7ff ffc4 	bl	80068a8 <global_stdio_init.part.0>
 8006920:	e7f2      	b.n	8006908 <__sinit+0xc>
 8006922:	bf00      	nop
 8006924:	08006869 	.word	0x08006869
 8006928:	20004fdc 	.word	0x20004fdc

0800692c <_fwalk_sglue>:
 800692c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006930:	4607      	mov	r7, r0
 8006932:	4688      	mov	r8, r1
 8006934:	4614      	mov	r4, r2
 8006936:	2600      	movs	r6, #0
 8006938:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800693c:	f1b9 0901 	subs.w	r9, r9, #1
 8006940:	d505      	bpl.n	800694e <_fwalk_sglue+0x22>
 8006942:	6824      	ldr	r4, [r4, #0]
 8006944:	2c00      	cmp	r4, #0
 8006946:	d1f7      	bne.n	8006938 <_fwalk_sglue+0xc>
 8006948:	4630      	mov	r0, r6
 800694a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800694e:	89ab      	ldrh	r3, [r5, #12]
 8006950:	2b01      	cmp	r3, #1
 8006952:	d907      	bls.n	8006964 <_fwalk_sglue+0x38>
 8006954:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006958:	3301      	adds	r3, #1
 800695a:	d003      	beq.n	8006964 <_fwalk_sglue+0x38>
 800695c:	4629      	mov	r1, r5
 800695e:	4638      	mov	r0, r7
 8006960:	47c0      	blx	r8
 8006962:	4306      	orrs	r6, r0
 8006964:	3568      	adds	r5, #104	@ 0x68
 8006966:	e7e9      	b.n	800693c <_fwalk_sglue+0x10>

08006968 <__sread>:
 8006968:	b510      	push	{r4, lr}
 800696a:	460c      	mov	r4, r1
 800696c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006970:	f000 f868 	bl	8006a44 <_read_r>
 8006974:	2800      	cmp	r0, #0
 8006976:	bfab      	itete	ge
 8006978:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800697a:	89a3      	ldrhlt	r3, [r4, #12]
 800697c:	181b      	addge	r3, r3, r0
 800697e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006982:	bfac      	ite	ge
 8006984:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006986:	81a3      	strhlt	r3, [r4, #12]
 8006988:	bd10      	pop	{r4, pc}

0800698a <__swrite>:
 800698a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800698e:	461f      	mov	r7, r3
 8006990:	898b      	ldrh	r3, [r1, #12]
 8006992:	05db      	lsls	r3, r3, #23
 8006994:	4605      	mov	r5, r0
 8006996:	460c      	mov	r4, r1
 8006998:	4616      	mov	r6, r2
 800699a:	d505      	bpl.n	80069a8 <__swrite+0x1e>
 800699c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069a0:	2302      	movs	r3, #2
 80069a2:	2200      	movs	r2, #0
 80069a4:	f000 f83c 	bl	8006a20 <_lseek_r>
 80069a8:	89a3      	ldrh	r3, [r4, #12]
 80069aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80069ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80069b2:	81a3      	strh	r3, [r4, #12]
 80069b4:	4632      	mov	r2, r6
 80069b6:	463b      	mov	r3, r7
 80069b8:	4628      	mov	r0, r5
 80069ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80069be:	f000 b853 	b.w	8006a68 <_write_r>

080069c2 <__sseek>:
 80069c2:	b510      	push	{r4, lr}
 80069c4:	460c      	mov	r4, r1
 80069c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069ca:	f000 f829 	bl	8006a20 <_lseek_r>
 80069ce:	1c43      	adds	r3, r0, #1
 80069d0:	89a3      	ldrh	r3, [r4, #12]
 80069d2:	bf15      	itete	ne
 80069d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80069d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80069da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80069de:	81a3      	strheq	r3, [r4, #12]
 80069e0:	bf18      	it	ne
 80069e2:	81a3      	strhne	r3, [r4, #12]
 80069e4:	bd10      	pop	{r4, pc}

080069e6 <__sclose>:
 80069e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069ea:	f000 b809 	b.w	8006a00 <_close_r>

080069ee <memset>:
 80069ee:	4402      	add	r2, r0
 80069f0:	4603      	mov	r3, r0
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d100      	bne.n	80069f8 <memset+0xa>
 80069f6:	4770      	bx	lr
 80069f8:	f803 1b01 	strb.w	r1, [r3], #1
 80069fc:	e7f9      	b.n	80069f2 <memset+0x4>
	...

08006a00 <_close_r>:
 8006a00:	b538      	push	{r3, r4, r5, lr}
 8006a02:	4d06      	ldr	r5, [pc, #24]	@ (8006a1c <_close_r+0x1c>)
 8006a04:	2300      	movs	r3, #0
 8006a06:	4604      	mov	r4, r0
 8006a08:	4608      	mov	r0, r1
 8006a0a:	602b      	str	r3, [r5, #0]
 8006a0c:	f7fb fb0c 	bl	8002028 <_close>
 8006a10:	1c43      	adds	r3, r0, #1
 8006a12:	d102      	bne.n	8006a1a <_close_r+0x1a>
 8006a14:	682b      	ldr	r3, [r5, #0]
 8006a16:	b103      	cbz	r3, 8006a1a <_close_r+0x1a>
 8006a18:	6023      	str	r3, [r4, #0]
 8006a1a:	bd38      	pop	{r3, r4, r5, pc}
 8006a1c:	20004fe0 	.word	0x20004fe0

08006a20 <_lseek_r>:
 8006a20:	b538      	push	{r3, r4, r5, lr}
 8006a22:	4d07      	ldr	r5, [pc, #28]	@ (8006a40 <_lseek_r+0x20>)
 8006a24:	4604      	mov	r4, r0
 8006a26:	4608      	mov	r0, r1
 8006a28:	4611      	mov	r1, r2
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	602a      	str	r2, [r5, #0]
 8006a2e:	461a      	mov	r2, r3
 8006a30:	f7fb fb21 	bl	8002076 <_lseek>
 8006a34:	1c43      	adds	r3, r0, #1
 8006a36:	d102      	bne.n	8006a3e <_lseek_r+0x1e>
 8006a38:	682b      	ldr	r3, [r5, #0]
 8006a3a:	b103      	cbz	r3, 8006a3e <_lseek_r+0x1e>
 8006a3c:	6023      	str	r3, [r4, #0]
 8006a3e:	bd38      	pop	{r3, r4, r5, pc}
 8006a40:	20004fe0 	.word	0x20004fe0

08006a44 <_read_r>:
 8006a44:	b538      	push	{r3, r4, r5, lr}
 8006a46:	4d07      	ldr	r5, [pc, #28]	@ (8006a64 <_read_r+0x20>)
 8006a48:	4604      	mov	r4, r0
 8006a4a:	4608      	mov	r0, r1
 8006a4c:	4611      	mov	r1, r2
 8006a4e:	2200      	movs	r2, #0
 8006a50:	602a      	str	r2, [r5, #0]
 8006a52:	461a      	mov	r2, r3
 8006a54:	f7fb faaf 	bl	8001fb6 <_read>
 8006a58:	1c43      	adds	r3, r0, #1
 8006a5a:	d102      	bne.n	8006a62 <_read_r+0x1e>
 8006a5c:	682b      	ldr	r3, [r5, #0]
 8006a5e:	b103      	cbz	r3, 8006a62 <_read_r+0x1e>
 8006a60:	6023      	str	r3, [r4, #0]
 8006a62:	bd38      	pop	{r3, r4, r5, pc}
 8006a64:	20004fe0 	.word	0x20004fe0

08006a68 <_write_r>:
 8006a68:	b538      	push	{r3, r4, r5, lr}
 8006a6a:	4d07      	ldr	r5, [pc, #28]	@ (8006a88 <_write_r+0x20>)
 8006a6c:	4604      	mov	r4, r0
 8006a6e:	4608      	mov	r0, r1
 8006a70:	4611      	mov	r1, r2
 8006a72:	2200      	movs	r2, #0
 8006a74:	602a      	str	r2, [r5, #0]
 8006a76:	461a      	mov	r2, r3
 8006a78:	f7fb faba 	bl	8001ff0 <_write>
 8006a7c:	1c43      	adds	r3, r0, #1
 8006a7e:	d102      	bne.n	8006a86 <_write_r+0x1e>
 8006a80:	682b      	ldr	r3, [r5, #0]
 8006a82:	b103      	cbz	r3, 8006a86 <_write_r+0x1e>
 8006a84:	6023      	str	r3, [r4, #0]
 8006a86:	bd38      	pop	{r3, r4, r5, pc}
 8006a88:	20004fe0 	.word	0x20004fe0

08006a8c <__errno>:
 8006a8c:	4b01      	ldr	r3, [pc, #4]	@ (8006a94 <__errno+0x8>)
 8006a8e:	6818      	ldr	r0, [r3, #0]
 8006a90:	4770      	bx	lr
 8006a92:	bf00      	nop
 8006a94:	20000020 	.word	0x20000020

08006a98 <__libc_init_array>:
 8006a98:	b570      	push	{r4, r5, r6, lr}
 8006a9a:	4d0d      	ldr	r5, [pc, #52]	@ (8006ad0 <__libc_init_array+0x38>)
 8006a9c:	4c0d      	ldr	r4, [pc, #52]	@ (8006ad4 <__libc_init_array+0x3c>)
 8006a9e:	1b64      	subs	r4, r4, r5
 8006aa0:	10a4      	asrs	r4, r4, #2
 8006aa2:	2600      	movs	r6, #0
 8006aa4:	42a6      	cmp	r6, r4
 8006aa6:	d109      	bne.n	8006abc <__libc_init_array+0x24>
 8006aa8:	4d0b      	ldr	r5, [pc, #44]	@ (8006ad8 <__libc_init_array+0x40>)
 8006aaa:	4c0c      	ldr	r4, [pc, #48]	@ (8006adc <__libc_init_array+0x44>)
 8006aac:	f000 fefc 	bl	80078a8 <_init>
 8006ab0:	1b64      	subs	r4, r4, r5
 8006ab2:	10a4      	asrs	r4, r4, #2
 8006ab4:	2600      	movs	r6, #0
 8006ab6:	42a6      	cmp	r6, r4
 8006ab8:	d105      	bne.n	8006ac6 <__libc_init_array+0x2e>
 8006aba:	bd70      	pop	{r4, r5, r6, pc}
 8006abc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ac0:	4798      	blx	r3
 8006ac2:	3601      	adds	r6, #1
 8006ac4:	e7ee      	b.n	8006aa4 <__libc_init_array+0xc>
 8006ac6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006aca:	4798      	blx	r3
 8006acc:	3601      	adds	r6, #1
 8006ace:	e7f2      	b.n	8006ab6 <__libc_init_array+0x1e>
 8006ad0:	0801ae20 	.word	0x0801ae20
 8006ad4:	0801ae20 	.word	0x0801ae20
 8006ad8:	0801ae20 	.word	0x0801ae20
 8006adc:	0801ae24 	.word	0x0801ae24

08006ae0 <__retarget_lock_init_recursive>:
 8006ae0:	4770      	bx	lr

08006ae2 <__retarget_lock_acquire_recursive>:
 8006ae2:	4770      	bx	lr

08006ae4 <__retarget_lock_release_recursive>:
 8006ae4:	4770      	bx	lr
	...

08006ae8 <__assert_func>:
 8006ae8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006aea:	4614      	mov	r4, r2
 8006aec:	461a      	mov	r2, r3
 8006aee:	4b09      	ldr	r3, [pc, #36]	@ (8006b14 <__assert_func+0x2c>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4605      	mov	r5, r0
 8006af4:	68d8      	ldr	r0, [r3, #12]
 8006af6:	b14c      	cbz	r4, 8006b0c <__assert_func+0x24>
 8006af8:	4b07      	ldr	r3, [pc, #28]	@ (8006b18 <__assert_func+0x30>)
 8006afa:	9100      	str	r1, [sp, #0]
 8006afc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006b00:	4906      	ldr	r1, [pc, #24]	@ (8006b1c <__assert_func+0x34>)
 8006b02:	462b      	mov	r3, r5
 8006b04:	f000 f9ba 	bl	8006e7c <fiprintf>
 8006b08:	f000 f9da 	bl	8006ec0 <abort>
 8006b0c:	4b04      	ldr	r3, [pc, #16]	@ (8006b20 <__assert_func+0x38>)
 8006b0e:	461c      	mov	r4, r3
 8006b10:	e7f3      	b.n	8006afa <__assert_func+0x12>
 8006b12:	bf00      	nop
 8006b14:	20000020 	.word	0x20000020
 8006b18:	0801ad9f 	.word	0x0801ad9f
 8006b1c:	0801adac 	.word	0x0801adac
 8006b20:	0801adda 	.word	0x0801adda

08006b24 <_free_r>:
 8006b24:	b538      	push	{r3, r4, r5, lr}
 8006b26:	4605      	mov	r5, r0
 8006b28:	2900      	cmp	r1, #0
 8006b2a:	d041      	beq.n	8006bb0 <_free_r+0x8c>
 8006b2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b30:	1f0c      	subs	r4, r1, #4
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	bfb8      	it	lt
 8006b36:	18e4      	addlt	r4, r4, r3
 8006b38:	f000 f8e8 	bl	8006d0c <__malloc_lock>
 8006b3c:	4a1d      	ldr	r2, [pc, #116]	@ (8006bb4 <_free_r+0x90>)
 8006b3e:	6813      	ldr	r3, [r2, #0]
 8006b40:	b933      	cbnz	r3, 8006b50 <_free_r+0x2c>
 8006b42:	6063      	str	r3, [r4, #4]
 8006b44:	6014      	str	r4, [r2, #0]
 8006b46:	4628      	mov	r0, r5
 8006b48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b4c:	f000 b8e4 	b.w	8006d18 <__malloc_unlock>
 8006b50:	42a3      	cmp	r3, r4
 8006b52:	d908      	bls.n	8006b66 <_free_r+0x42>
 8006b54:	6820      	ldr	r0, [r4, #0]
 8006b56:	1821      	adds	r1, r4, r0
 8006b58:	428b      	cmp	r3, r1
 8006b5a:	bf01      	itttt	eq
 8006b5c:	6819      	ldreq	r1, [r3, #0]
 8006b5e:	685b      	ldreq	r3, [r3, #4]
 8006b60:	1809      	addeq	r1, r1, r0
 8006b62:	6021      	streq	r1, [r4, #0]
 8006b64:	e7ed      	b.n	8006b42 <_free_r+0x1e>
 8006b66:	461a      	mov	r2, r3
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	b10b      	cbz	r3, 8006b70 <_free_r+0x4c>
 8006b6c:	42a3      	cmp	r3, r4
 8006b6e:	d9fa      	bls.n	8006b66 <_free_r+0x42>
 8006b70:	6811      	ldr	r1, [r2, #0]
 8006b72:	1850      	adds	r0, r2, r1
 8006b74:	42a0      	cmp	r0, r4
 8006b76:	d10b      	bne.n	8006b90 <_free_r+0x6c>
 8006b78:	6820      	ldr	r0, [r4, #0]
 8006b7a:	4401      	add	r1, r0
 8006b7c:	1850      	adds	r0, r2, r1
 8006b7e:	4283      	cmp	r3, r0
 8006b80:	6011      	str	r1, [r2, #0]
 8006b82:	d1e0      	bne.n	8006b46 <_free_r+0x22>
 8006b84:	6818      	ldr	r0, [r3, #0]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	6053      	str	r3, [r2, #4]
 8006b8a:	4408      	add	r0, r1
 8006b8c:	6010      	str	r0, [r2, #0]
 8006b8e:	e7da      	b.n	8006b46 <_free_r+0x22>
 8006b90:	d902      	bls.n	8006b98 <_free_r+0x74>
 8006b92:	230c      	movs	r3, #12
 8006b94:	602b      	str	r3, [r5, #0]
 8006b96:	e7d6      	b.n	8006b46 <_free_r+0x22>
 8006b98:	6820      	ldr	r0, [r4, #0]
 8006b9a:	1821      	adds	r1, r4, r0
 8006b9c:	428b      	cmp	r3, r1
 8006b9e:	bf04      	itt	eq
 8006ba0:	6819      	ldreq	r1, [r3, #0]
 8006ba2:	685b      	ldreq	r3, [r3, #4]
 8006ba4:	6063      	str	r3, [r4, #4]
 8006ba6:	bf04      	itt	eq
 8006ba8:	1809      	addeq	r1, r1, r0
 8006baa:	6021      	streq	r1, [r4, #0]
 8006bac:	6054      	str	r4, [r2, #4]
 8006bae:	e7ca      	b.n	8006b46 <_free_r+0x22>
 8006bb0:	bd38      	pop	{r3, r4, r5, pc}
 8006bb2:	bf00      	nop
 8006bb4:	20004fec 	.word	0x20004fec

08006bb8 <malloc>:
 8006bb8:	4b02      	ldr	r3, [pc, #8]	@ (8006bc4 <malloc+0xc>)
 8006bba:	4601      	mov	r1, r0
 8006bbc:	6818      	ldr	r0, [r3, #0]
 8006bbe:	f000 b825 	b.w	8006c0c <_malloc_r>
 8006bc2:	bf00      	nop
 8006bc4:	20000020 	.word	0x20000020

08006bc8 <sbrk_aligned>:
 8006bc8:	b570      	push	{r4, r5, r6, lr}
 8006bca:	4e0f      	ldr	r6, [pc, #60]	@ (8006c08 <sbrk_aligned+0x40>)
 8006bcc:	460c      	mov	r4, r1
 8006bce:	6831      	ldr	r1, [r6, #0]
 8006bd0:	4605      	mov	r5, r0
 8006bd2:	b911      	cbnz	r1, 8006bda <sbrk_aligned+0x12>
 8006bd4:	f000 f964 	bl	8006ea0 <_sbrk_r>
 8006bd8:	6030      	str	r0, [r6, #0]
 8006bda:	4621      	mov	r1, r4
 8006bdc:	4628      	mov	r0, r5
 8006bde:	f000 f95f 	bl	8006ea0 <_sbrk_r>
 8006be2:	1c43      	adds	r3, r0, #1
 8006be4:	d103      	bne.n	8006bee <sbrk_aligned+0x26>
 8006be6:	f04f 34ff 	mov.w	r4, #4294967295
 8006bea:	4620      	mov	r0, r4
 8006bec:	bd70      	pop	{r4, r5, r6, pc}
 8006bee:	1cc4      	adds	r4, r0, #3
 8006bf0:	f024 0403 	bic.w	r4, r4, #3
 8006bf4:	42a0      	cmp	r0, r4
 8006bf6:	d0f8      	beq.n	8006bea <sbrk_aligned+0x22>
 8006bf8:	1a21      	subs	r1, r4, r0
 8006bfa:	4628      	mov	r0, r5
 8006bfc:	f000 f950 	bl	8006ea0 <_sbrk_r>
 8006c00:	3001      	adds	r0, #1
 8006c02:	d1f2      	bne.n	8006bea <sbrk_aligned+0x22>
 8006c04:	e7ef      	b.n	8006be6 <sbrk_aligned+0x1e>
 8006c06:	bf00      	nop
 8006c08:	20004fe8 	.word	0x20004fe8

08006c0c <_malloc_r>:
 8006c0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c10:	1ccd      	adds	r5, r1, #3
 8006c12:	f025 0503 	bic.w	r5, r5, #3
 8006c16:	3508      	adds	r5, #8
 8006c18:	2d0c      	cmp	r5, #12
 8006c1a:	bf38      	it	cc
 8006c1c:	250c      	movcc	r5, #12
 8006c1e:	2d00      	cmp	r5, #0
 8006c20:	4606      	mov	r6, r0
 8006c22:	db01      	blt.n	8006c28 <_malloc_r+0x1c>
 8006c24:	42a9      	cmp	r1, r5
 8006c26:	d904      	bls.n	8006c32 <_malloc_r+0x26>
 8006c28:	230c      	movs	r3, #12
 8006c2a:	6033      	str	r3, [r6, #0]
 8006c2c:	2000      	movs	r0, #0
 8006c2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c32:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006d08 <_malloc_r+0xfc>
 8006c36:	f000 f869 	bl	8006d0c <__malloc_lock>
 8006c3a:	f8d8 3000 	ldr.w	r3, [r8]
 8006c3e:	461c      	mov	r4, r3
 8006c40:	bb44      	cbnz	r4, 8006c94 <_malloc_r+0x88>
 8006c42:	4629      	mov	r1, r5
 8006c44:	4630      	mov	r0, r6
 8006c46:	f7ff ffbf 	bl	8006bc8 <sbrk_aligned>
 8006c4a:	1c43      	adds	r3, r0, #1
 8006c4c:	4604      	mov	r4, r0
 8006c4e:	d158      	bne.n	8006d02 <_malloc_r+0xf6>
 8006c50:	f8d8 4000 	ldr.w	r4, [r8]
 8006c54:	4627      	mov	r7, r4
 8006c56:	2f00      	cmp	r7, #0
 8006c58:	d143      	bne.n	8006ce2 <_malloc_r+0xd6>
 8006c5a:	2c00      	cmp	r4, #0
 8006c5c:	d04b      	beq.n	8006cf6 <_malloc_r+0xea>
 8006c5e:	6823      	ldr	r3, [r4, #0]
 8006c60:	4639      	mov	r1, r7
 8006c62:	4630      	mov	r0, r6
 8006c64:	eb04 0903 	add.w	r9, r4, r3
 8006c68:	f000 f91a 	bl	8006ea0 <_sbrk_r>
 8006c6c:	4581      	cmp	r9, r0
 8006c6e:	d142      	bne.n	8006cf6 <_malloc_r+0xea>
 8006c70:	6821      	ldr	r1, [r4, #0]
 8006c72:	1a6d      	subs	r5, r5, r1
 8006c74:	4629      	mov	r1, r5
 8006c76:	4630      	mov	r0, r6
 8006c78:	f7ff ffa6 	bl	8006bc8 <sbrk_aligned>
 8006c7c:	3001      	adds	r0, #1
 8006c7e:	d03a      	beq.n	8006cf6 <_malloc_r+0xea>
 8006c80:	6823      	ldr	r3, [r4, #0]
 8006c82:	442b      	add	r3, r5
 8006c84:	6023      	str	r3, [r4, #0]
 8006c86:	f8d8 3000 	ldr.w	r3, [r8]
 8006c8a:	685a      	ldr	r2, [r3, #4]
 8006c8c:	bb62      	cbnz	r2, 8006ce8 <_malloc_r+0xdc>
 8006c8e:	f8c8 7000 	str.w	r7, [r8]
 8006c92:	e00f      	b.n	8006cb4 <_malloc_r+0xa8>
 8006c94:	6822      	ldr	r2, [r4, #0]
 8006c96:	1b52      	subs	r2, r2, r5
 8006c98:	d420      	bmi.n	8006cdc <_malloc_r+0xd0>
 8006c9a:	2a0b      	cmp	r2, #11
 8006c9c:	d917      	bls.n	8006cce <_malloc_r+0xc2>
 8006c9e:	1961      	adds	r1, r4, r5
 8006ca0:	42a3      	cmp	r3, r4
 8006ca2:	6025      	str	r5, [r4, #0]
 8006ca4:	bf18      	it	ne
 8006ca6:	6059      	strne	r1, [r3, #4]
 8006ca8:	6863      	ldr	r3, [r4, #4]
 8006caa:	bf08      	it	eq
 8006cac:	f8c8 1000 	streq.w	r1, [r8]
 8006cb0:	5162      	str	r2, [r4, r5]
 8006cb2:	604b      	str	r3, [r1, #4]
 8006cb4:	4630      	mov	r0, r6
 8006cb6:	f000 f82f 	bl	8006d18 <__malloc_unlock>
 8006cba:	f104 000b 	add.w	r0, r4, #11
 8006cbe:	1d23      	adds	r3, r4, #4
 8006cc0:	f020 0007 	bic.w	r0, r0, #7
 8006cc4:	1ac2      	subs	r2, r0, r3
 8006cc6:	bf1c      	itt	ne
 8006cc8:	1a1b      	subne	r3, r3, r0
 8006cca:	50a3      	strne	r3, [r4, r2]
 8006ccc:	e7af      	b.n	8006c2e <_malloc_r+0x22>
 8006cce:	6862      	ldr	r2, [r4, #4]
 8006cd0:	42a3      	cmp	r3, r4
 8006cd2:	bf0c      	ite	eq
 8006cd4:	f8c8 2000 	streq.w	r2, [r8]
 8006cd8:	605a      	strne	r2, [r3, #4]
 8006cda:	e7eb      	b.n	8006cb4 <_malloc_r+0xa8>
 8006cdc:	4623      	mov	r3, r4
 8006cde:	6864      	ldr	r4, [r4, #4]
 8006ce0:	e7ae      	b.n	8006c40 <_malloc_r+0x34>
 8006ce2:	463c      	mov	r4, r7
 8006ce4:	687f      	ldr	r7, [r7, #4]
 8006ce6:	e7b6      	b.n	8006c56 <_malloc_r+0x4a>
 8006ce8:	461a      	mov	r2, r3
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	42a3      	cmp	r3, r4
 8006cee:	d1fb      	bne.n	8006ce8 <_malloc_r+0xdc>
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	6053      	str	r3, [r2, #4]
 8006cf4:	e7de      	b.n	8006cb4 <_malloc_r+0xa8>
 8006cf6:	230c      	movs	r3, #12
 8006cf8:	6033      	str	r3, [r6, #0]
 8006cfa:	4630      	mov	r0, r6
 8006cfc:	f000 f80c 	bl	8006d18 <__malloc_unlock>
 8006d00:	e794      	b.n	8006c2c <_malloc_r+0x20>
 8006d02:	6005      	str	r5, [r0, #0]
 8006d04:	e7d6      	b.n	8006cb4 <_malloc_r+0xa8>
 8006d06:	bf00      	nop
 8006d08:	20004fec 	.word	0x20004fec

08006d0c <__malloc_lock>:
 8006d0c:	4801      	ldr	r0, [pc, #4]	@ (8006d14 <__malloc_lock+0x8>)
 8006d0e:	f7ff bee8 	b.w	8006ae2 <__retarget_lock_acquire_recursive>
 8006d12:	bf00      	nop
 8006d14:	20004fe4 	.word	0x20004fe4

08006d18 <__malloc_unlock>:
 8006d18:	4801      	ldr	r0, [pc, #4]	@ (8006d20 <__malloc_unlock+0x8>)
 8006d1a:	f7ff bee3 	b.w	8006ae4 <__retarget_lock_release_recursive>
 8006d1e:	bf00      	nop
 8006d20:	20004fe4 	.word	0x20004fe4

08006d24 <__sflush_r>:
 8006d24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d2c:	0716      	lsls	r6, r2, #28
 8006d2e:	4605      	mov	r5, r0
 8006d30:	460c      	mov	r4, r1
 8006d32:	d454      	bmi.n	8006dde <__sflush_r+0xba>
 8006d34:	684b      	ldr	r3, [r1, #4]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	dc02      	bgt.n	8006d40 <__sflush_r+0x1c>
 8006d3a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	dd48      	ble.n	8006dd2 <__sflush_r+0xae>
 8006d40:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006d42:	2e00      	cmp	r6, #0
 8006d44:	d045      	beq.n	8006dd2 <__sflush_r+0xae>
 8006d46:	2300      	movs	r3, #0
 8006d48:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006d4c:	682f      	ldr	r7, [r5, #0]
 8006d4e:	6a21      	ldr	r1, [r4, #32]
 8006d50:	602b      	str	r3, [r5, #0]
 8006d52:	d030      	beq.n	8006db6 <__sflush_r+0x92>
 8006d54:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006d56:	89a3      	ldrh	r3, [r4, #12]
 8006d58:	0759      	lsls	r1, r3, #29
 8006d5a:	d505      	bpl.n	8006d68 <__sflush_r+0x44>
 8006d5c:	6863      	ldr	r3, [r4, #4]
 8006d5e:	1ad2      	subs	r2, r2, r3
 8006d60:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006d62:	b10b      	cbz	r3, 8006d68 <__sflush_r+0x44>
 8006d64:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006d66:	1ad2      	subs	r2, r2, r3
 8006d68:	2300      	movs	r3, #0
 8006d6a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006d6c:	6a21      	ldr	r1, [r4, #32]
 8006d6e:	4628      	mov	r0, r5
 8006d70:	47b0      	blx	r6
 8006d72:	1c43      	adds	r3, r0, #1
 8006d74:	89a3      	ldrh	r3, [r4, #12]
 8006d76:	d106      	bne.n	8006d86 <__sflush_r+0x62>
 8006d78:	6829      	ldr	r1, [r5, #0]
 8006d7a:	291d      	cmp	r1, #29
 8006d7c:	d82b      	bhi.n	8006dd6 <__sflush_r+0xb2>
 8006d7e:	4a2a      	ldr	r2, [pc, #168]	@ (8006e28 <__sflush_r+0x104>)
 8006d80:	40ca      	lsrs	r2, r1
 8006d82:	07d6      	lsls	r6, r2, #31
 8006d84:	d527      	bpl.n	8006dd6 <__sflush_r+0xb2>
 8006d86:	2200      	movs	r2, #0
 8006d88:	6062      	str	r2, [r4, #4]
 8006d8a:	04d9      	lsls	r1, r3, #19
 8006d8c:	6922      	ldr	r2, [r4, #16]
 8006d8e:	6022      	str	r2, [r4, #0]
 8006d90:	d504      	bpl.n	8006d9c <__sflush_r+0x78>
 8006d92:	1c42      	adds	r2, r0, #1
 8006d94:	d101      	bne.n	8006d9a <__sflush_r+0x76>
 8006d96:	682b      	ldr	r3, [r5, #0]
 8006d98:	b903      	cbnz	r3, 8006d9c <__sflush_r+0x78>
 8006d9a:	6560      	str	r0, [r4, #84]	@ 0x54
 8006d9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006d9e:	602f      	str	r7, [r5, #0]
 8006da0:	b1b9      	cbz	r1, 8006dd2 <__sflush_r+0xae>
 8006da2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006da6:	4299      	cmp	r1, r3
 8006da8:	d002      	beq.n	8006db0 <__sflush_r+0x8c>
 8006daa:	4628      	mov	r0, r5
 8006dac:	f7ff feba 	bl	8006b24 <_free_r>
 8006db0:	2300      	movs	r3, #0
 8006db2:	6363      	str	r3, [r4, #52]	@ 0x34
 8006db4:	e00d      	b.n	8006dd2 <__sflush_r+0xae>
 8006db6:	2301      	movs	r3, #1
 8006db8:	4628      	mov	r0, r5
 8006dba:	47b0      	blx	r6
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	1c50      	adds	r0, r2, #1
 8006dc0:	d1c9      	bne.n	8006d56 <__sflush_r+0x32>
 8006dc2:	682b      	ldr	r3, [r5, #0]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d0c6      	beq.n	8006d56 <__sflush_r+0x32>
 8006dc8:	2b1d      	cmp	r3, #29
 8006dca:	d001      	beq.n	8006dd0 <__sflush_r+0xac>
 8006dcc:	2b16      	cmp	r3, #22
 8006dce:	d11e      	bne.n	8006e0e <__sflush_r+0xea>
 8006dd0:	602f      	str	r7, [r5, #0]
 8006dd2:	2000      	movs	r0, #0
 8006dd4:	e022      	b.n	8006e1c <__sflush_r+0xf8>
 8006dd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006dda:	b21b      	sxth	r3, r3
 8006ddc:	e01b      	b.n	8006e16 <__sflush_r+0xf2>
 8006dde:	690f      	ldr	r7, [r1, #16]
 8006de0:	2f00      	cmp	r7, #0
 8006de2:	d0f6      	beq.n	8006dd2 <__sflush_r+0xae>
 8006de4:	0793      	lsls	r3, r2, #30
 8006de6:	680e      	ldr	r6, [r1, #0]
 8006de8:	bf08      	it	eq
 8006dea:	694b      	ldreq	r3, [r1, #20]
 8006dec:	600f      	str	r7, [r1, #0]
 8006dee:	bf18      	it	ne
 8006df0:	2300      	movne	r3, #0
 8006df2:	eba6 0807 	sub.w	r8, r6, r7
 8006df6:	608b      	str	r3, [r1, #8]
 8006df8:	f1b8 0f00 	cmp.w	r8, #0
 8006dfc:	dde9      	ble.n	8006dd2 <__sflush_r+0xae>
 8006dfe:	6a21      	ldr	r1, [r4, #32]
 8006e00:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006e02:	4643      	mov	r3, r8
 8006e04:	463a      	mov	r2, r7
 8006e06:	4628      	mov	r0, r5
 8006e08:	47b0      	blx	r6
 8006e0a:	2800      	cmp	r0, #0
 8006e0c:	dc08      	bgt.n	8006e20 <__sflush_r+0xfc>
 8006e0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e16:	81a3      	strh	r3, [r4, #12]
 8006e18:	f04f 30ff 	mov.w	r0, #4294967295
 8006e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e20:	4407      	add	r7, r0
 8006e22:	eba8 0800 	sub.w	r8, r8, r0
 8006e26:	e7e7      	b.n	8006df8 <__sflush_r+0xd4>
 8006e28:	20400001 	.word	0x20400001

08006e2c <_fflush_r>:
 8006e2c:	b538      	push	{r3, r4, r5, lr}
 8006e2e:	690b      	ldr	r3, [r1, #16]
 8006e30:	4605      	mov	r5, r0
 8006e32:	460c      	mov	r4, r1
 8006e34:	b913      	cbnz	r3, 8006e3c <_fflush_r+0x10>
 8006e36:	2500      	movs	r5, #0
 8006e38:	4628      	mov	r0, r5
 8006e3a:	bd38      	pop	{r3, r4, r5, pc}
 8006e3c:	b118      	cbz	r0, 8006e46 <_fflush_r+0x1a>
 8006e3e:	6a03      	ldr	r3, [r0, #32]
 8006e40:	b90b      	cbnz	r3, 8006e46 <_fflush_r+0x1a>
 8006e42:	f7ff fd5b 	bl	80068fc <__sinit>
 8006e46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d0f3      	beq.n	8006e36 <_fflush_r+0xa>
 8006e4e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006e50:	07d0      	lsls	r0, r2, #31
 8006e52:	d404      	bmi.n	8006e5e <_fflush_r+0x32>
 8006e54:	0599      	lsls	r1, r3, #22
 8006e56:	d402      	bmi.n	8006e5e <_fflush_r+0x32>
 8006e58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e5a:	f7ff fe42 	bl	8006ae2 <__retarget_lock_acquire_recursive>
 8006e5e:	4628      	mov	r0, r5
 8006e60:	4621      	mov	r1, r4
 8006e62:	f7ff ff5f 	bl	8006d24 <__sflush_r>
 8006e66:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006e68:	07da      	lsls	r2, r3, #31
 8006e6a:	4605      	mov	r5, r0
 8006e6c:	d4e4      	bmi.n	8006e38 <_fflush_r+0xc>
 8006e6e:	89a3      	ldrh	r3, [r4, #12]
 8006e70:	059b      	lsls	r3, r3, #22
 8006e72:	d4e1      	bmi.n	8006e38 <_fflush_r+0xc>
 8006e74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e76:	f7ff fe35 	bl	8006ae4 <__retarget_lock_release_recursive>
 8006e7a:	e7dd      	b.n	8006e38 <_fflush_r+0xc>

08006e7c <fiprintf>:
 8006e7c:	b40e      	push	{r1, r2, r3}
 8006e7e:	b503      	push	{r0, r1, lr}
 8006e80:	4601      	mov	r1, r0
 8006e82:	ab03      	add	r3, sp, #12
 8006e84:	4805      	ldr	r0, [pc, #20]	@ (8006e9c <fiprintf+0x20>)
 8006e86:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e8a:	6800      	ldr	r0, [r0, #0]
 8006e8c:	9301      	str	r3, [sp, #4]
 8006e8e:	f000 f847 	bl	8006f20 <_vfiprintf_r>
 8006e92:	b002      	add	sp, #8
 8006e94:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e98:	b003      	add	sp, #12
 8006e9a:	4770      	bx	lr
 8006e9c:	20000020 	.word	0x20000020

08006ea0 <_sbrk_r>:
 8006ea0:	b538      	push	{r3, r4, r5, lr}
 8006ea2:	4d06      	ldr	r5, [pc, #24]	@ (8006ebc <_sbrk_r+0x1c>)
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	4604      	mov	r4, r0
 8006ea8:	4608      	mov	r0, r1
 8006eaa:	602b      	str	r3, [r5, #0]
 8006eac:	f7fb f8f0 	bl	8002090 <_sbrk>
 8006eb0:	1c43      	adds	r3, r0, #1
 8006eb2:	d102      	bne.n	8006eba <_sbrk_r+0x1a>
 8006eb4:	682b      	ldr	r3, [r5, #0]
 8006eb6:	b103      	cbz	r3, 8006eba <_sbrk_r+0x1a>
 8006eb8:	6023      	str	r3, [r4, #0]
 8006eba:	bd38      	pop	{r3, r4, r5, pc}
 8006ebc:	20004fe0 	.word	0x20004fe0

08006ec0 <abort>:
 8006ec0:	b508      	push	{r3, lr}
 8006ec2:	2006      	movs	r0, #6
 8006ec4:	f000 fb8c 	bl	80075e0 <raise>
 8006ec8:	2001      	movs	r0, #1
 8006eca:	f7fb f869 	bl	8001fa0 <_exit>

08006ece <__sfputc_r>:
 8006ece:	6893      	ldr	r3, [r2, #8]
 8006ed0:	3b01      	subs	r3, #1
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	b410      	push	{r4}
 8006ed6:	6093      	str	r3, [r2, #8]
 8006ed8:	da08      	bge.n	8006eec <__sfputc_r+0x1e>
 8006eda:	6994      	ldr	r4, [r2, #24]
 8006edc:	42a3      	cmp	r3, r4
 8006ede:	db01      	blt.n	8006ee4 <__sfputc_r+0x16>
 8006ee0:	290a      	cmp	r1, #10
 8006ee2:	d103      	bne.n	8006eec <__sfputc_r+0x1e>
 8006ee4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ee8:	f000 babe 	b.w	8007468 <__swbuf_r>
 8006eec:	6813      	ldr	r3, [r2, #0]
 8006eee:	1c58      	adds	r0, r3, #1
 8006ef0:	6010      	str	r0, [r2, #0]
 8006ef2:	7019      	strb	r1, [r3, #0]
 8006ef4:	4608      	mov	r0, r1
 8006ef6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006efa:	4770      	bx	lr

08006efc <__sfputs_r>:
 8006efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006efe:	4606      	mov	r6, r0
 8006f00:	460f      	mov	r7, r1
 8006f02:	4614      	mov	r4, r2
 8006f04:	18d5      	adds	r5, r2, r3
 8006f06:	42ac      	cmp	r4, r5
 8006f08:	d101      	bne.n	8006f0e <__sfputs_r+0x12>
 8006f0a:	2000      	movs	r0, #0
 8006f0c:	e007      	b.n	8006f1e <__sfputs_r+0x22>
 8006f0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f12:	463a      	mov	r2, r7
 8006f14:	4630      	mov	r0, r6
 8006f16:	f7ff ffda 	bl	8006ece <__sfputc_r>
 8006f1a:	1c43      	adds	r3, r0, #1
 8006f1c:	d1f3      	bne.n	8006f06 <__sfputs_r+0xa>
 8006f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006f20 <_vfiprintf_r>:
 8006f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f24:	460d      	mov	r5, r1
 8006f26:	b09d      	sub	sp, #116	@ 0x74
 8006f28:	4614      	mov	r4, r2
 8006f2a:	4698      	mov	r8, r3
 8006f2c:	4606      	mov	r6, r0
 8006f2e:	b118      	cbz	r0, 8006f38 <_vfiprintf_r+0x18>
 8006f30:	6a03      	ldr	r3, [r0, #32]
 8006f32:	b90b      	cbnz	r3, 8006f38 <_vfiprintf_r+0x18>
 8006f34:	f7ff fce2 	bl	80068fc <__sinit>
 8006f38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006f3a:	07d9      	lsls	r1, r3, #31
 8006f3c:	d405      	bmi.n	8006f4a <_vfiprintf_r+0x2a>
 8006f3e:	89ab      	ldrh	r3, [r5, #12]
 8006f40:	059a      	lsls	r2, r3, #22
 8006f42:	d402      	bmi.n	8006f4a <_vfiprintf_r+0x2a>
 8006f44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006f46:	f7ff fdcc 	bl	8006ae2 <__retarget_lock_acquire_recursive>
 8006f4a:	89ab      	ldrh	r3, [r5, #12]
 8006f4c:	071b      	lsls	r3, r3, #28
 8006f4e:	d501      	bpl.n	8006f54 <_vfiprintf_r+0x34>
 8006f50:	692b      	ldr	r3, [r5, #16]
 8006f52:	b99b      	cbnz	r3, 8006f7c <_vfiprintf_r+0x5c>
 8006f54:	4629      	mov	r1, r5
 8006f56:	4630      	mov	r0, r6
 8006f58:	f000 fac4 	bl	80074e4 <__swsetup_r>
 8006f5c:	b170      	cbz	r0, 8006f7c <_vfiprintf_r+0x5c>
 8006f5e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006f60:	07dc      	lsls	r4, r3, #31
 8006f62:	d504      	bpl.n	8006f6e <_vfiprintf_r+0x4e>
 8006f64:	f04f 30ff 	mov.w	r0, #4294967295
 8006f68:	b01d      	add	sp, #116	@ 0x74
 8006f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f6e:	89ab      	ldrh	r3, [r5, #12]
 8006f70:	0598      	lsls	r0, r3, #22
 8006f72:	d4f7      	bmi.n	8006f64 <_vfiprintf_r+0x44>
 8006f74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006f76:	f7ff fdb5 	bl	8006ae4 <__retarget_lock_release_recursive>
 8006f7a:	e7f3      	b.n	8006f64 <_vfiprintf_r+0x44>
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f80:	2320      	movs	r3, #32
 8006f82:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006f86:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f8a:	2330      	movs	r3, #48	@ 0x30
 8006f8c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800713c <_vfiprintf_r+0x21c>
 8006f90:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006f94:	f04f 0901 	mov.w	r9, #1
 8006f98:	4623      	mov	r3, r4
 8006f9a:	469a      	mov	sl, r3
 8006f9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006fa0:	b10a      	cbz	r2, 8006fa6 <_vfiprintf_r+0x86>
 8006fa2:	2a25      	cmp	r2, #37	@ 0x25
 8006fa4:	d1f9      	bne.n	8006f9a <_vfiprintf_r+0x7a>
 8006fa6:	ebba 0b04 	subs.w	fp, sl, r4
 8006faa:	d00b      	beq.n	8006fc4 <_vfiprintf_r+0xa4>
 8006fac:	465b      	mov	r3, fp
 8006fae:	4622      	mov	r2, r4
 8006fb0:	4629      	mov	r1, r5
 8006fb2:	4630      	mov	r0, r6
 8006fb4:	f7ff ffa2 	bl	8006efc <__sfputs_r>
 8006fb8:	3001      	adds	r0, #1
 8006fba:	f000 80a7 	beq.w	800710c <_vfiprintf_r+0x1ec>
 8006fbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006fc0:	445a      	add	r2, fp
 8006fc2:	9209      	str	r2, [sp, #36]	@ 0x24
 8006fc4:	f89a 3000 	ldrb.w	r3, [sl]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	f000 809f 	beq.w	800710c <_vfiprintf_r+0x1ec>
 8006fce:	2300      	movs	r3, #0
 8006fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8006fd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006fd8:	f10a 0a01 	add.w	sl, sl, #1
 8006fdc:	9304      	str	r3, [sp, #16]
 8006fde:	9307      	str	r3, [sp, #28]
 8006fe0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006fe4:	931a      	str	r3, [sp, #104]	@ 0x68
 8006fe6:	4654      	mov	r4, sl
 8006fe8:	2205      	movs	r2, #5
 8006fea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fee:	4853      	ldr	r0, [pc, #332]	@ (800713c <_vfiprintf_r+0x21c>)
 8006ff0:	f7f9 f94e 	bl	8000290 <memchr>
 8006ff4:	9a04      	ldr	r2, [sp, #16]
 8006ff6:	b9d8      	cbnz	r0, 8007030 <_vfiprintf_r+0x110>
 8006ff8:	06d1      	lsls	r1, r2, #27
 8006ffa:	bf44      	itt	mi
 8006ffc:	2320      	movmi	r3, #32
 8006ffe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007002:	0713      	lsls	r3, r2, #28
 8007004:	bf44      	itt	mi
 8007006:	232b      	movmi	r3, #43	@ 0x2b
 8007008:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800700c:	f89a 3000 	ldrb.w	r3, [sl]
 8007010:	2b2a      	cmp	r3, #42	@ 0x2a
 8007012:	d015      	beq.n	8007040 <_vfiprintf_r+0x120>
 8007014:	9a07      	ldr	r2, [sp, #28]
 8007016:	4654      	mov	r4, sl
 8007018:	2000      	movs	r0, #0
 800701a:	f04f 0c0a 	mov.w	ip, #10
 800701e:	4621      	mov	r1, r4
 8007020:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007024:	3b30      	subs	r3, #48	@ 0x30
 8007026:	2b09      	cmp	r3, #9
 8007028:	d94b      	bls.n	80070c2 <_vfiprintf_r+0x1a2>
 800702a:	b1b0      	cbz	r0, 800705a <_vfiprintf_r+0x13a>
 800702c:	9207      	str	r2, [sp, #28]
 800702e:	e014      	b.n	800705a <_vfiprintf_r+0x13a>
 8007030:	eba0 0308 	sub.w	r3, r0, r8
 8007034:	fa09 f303 	lsl.w	r3, r9, r3
 8007038:	4313      	orrs	r3, r2
 800703a:	9304      	str	r3, [sp, #16]
 800703c:	46a2      	mov	sl, r4
 800703e:	e7d2      	b.n	8006fe6 <_vfiprintf_r+0xc6>
 8007040:	9b03      	ldr	r3, [sp, #12]
 8007042:	1d19      	adds	r1, r3, #4
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	9103      	str	r1, [sp, #12]
 8007048:	2b00      	cmp	r3, #0
 800704a:	bfbb      	ittet	lt
 800704c:	425b      	neglt	r3, r3
 800704e:	f042 0202 	orrlt.w	r2, r2, #2
 8007052:	9307      	strge	r3, [sp, #28]
 8007054:	9307      	strlt	r3, [sp, #28]
 8007056:	bfb8      	it	lt
 8007058:	9204      	strlt	r2, [sp, #16]
 800705a:	7823      	ldrb	r3, [r4, #0]
 800705c:	2b2e      	cmp	r3, #46	@ 0x2e
 800705e:	d10a      	bne.n	8007076 <_vfiprintf_r+0x156>
 8007060:	7863      	ldrb	r3, [r4, #1]
 8007062:	2b2a      	cmp	r3, #42	@ 0x2a
 8007064:	d132      	bne.n	80070cc <_vfiprintf_r+0x1ac>
 8007066:	9b03      	ldr	r3, [sp, #12]
 8007068:	1d1a      	adds	r2, r3, #4
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	9203      	str	r2, [sp, #12]
 800706e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007072:	3402      	adds	r4, #2
 8007074:	9305      	str	r3, [sp, #20]
 8007076:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800714c <_vfiprintf_r+0x22c>
 800707a:	7821      	ldrb	r1, [r4, #0]
 800707c:	2203      	movs	r2, #3
 800707e:	4650      	mov	r0, sl
 8007080:	f7f9 f906 	bl	8000290 <memchr>
 8007084:	b138      	cbz	r0, 8007096 <_vfiprintf_r+0x176>
 8007086:	9b04      	ldr	r3, [sp, #16]
 8007088:	eba0 000a 	sub.w	r0, r0, sl
 800708c:	2240      	movs	r2, #64	@ 0x40
 800708e:	4082      	lsls	r2, r0
 8007090:	4313      	orrs	r3, r2
 8007092:	3401      	adds	r4, #1
 8007094:	9304      	str	r3, [sp, #16]
 8007096:	f814 1b01 	ldrb.w	r1, [r4], #1
 800709a:	4829      	ldr	r0, [pc, #164]	@ (8007140 <_vfiprintf_r+0x220>)
 800709c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80070a0:	2206      	movs	r2, #6
 80070a2:	f7f9 f8f5 	bl	8000290 <memchr>
 80070a6:	2800      	cmp	r0, #0
 80070a8:	d03f      	beq.n	800712a <_vfiprintf_r+0x20a>
 80070aa:	4b26      	ldr	r3, [pc, #152]	@ (8007144 <_vfiprintf_r+0x224>)
 80070ac:	bb1b      	cbnz	r3, 80070f6 <_vfiprintf_r+0x1d6>
 80070ae:	9b03      	ldr	r3, [sp, #12]
 80070b0:	3307      	adds	r3, #7
 80070b2:	f023 0307 	bic.w	r3, r3, #7
 80070b6:	3308      	adds	r3, #8
 80070b8:	9303      	str	r3, [sp, #12]
 80070ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070bc:	443b      	add	r3, r7
 80070be:	9309      	str	r3, [sp, #36]	@ 0x24
 80070c0:	e76a      	b.n	8006f98 <_vfiprintf_r+0x78>
 80070c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80070c6:	460c      	mov	r4, r1
 80070c8:	2001      	movs	r0, #1
 80070ca:	e7a8      	b.n	800701e <_vfiprintf_r+0xfe>
 80070cc:	2300      	movs	r3, #0
 80070ce:	3401      	adds	r4, #1
 80070d0:	9305      	str	r3, [sp, #20]
 80070d2:	4619      	mov	r1, r3
 80070d4:	f04f 0c0a 	mov.w	ip, #10
 80070d8:	4620      	mov	r0, r4
 80070da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80070de:	3a30      	subs	r2, #48	@ 0x30
 80070e0:	2a09      	cmp	r2, #9
 80070e2:	d903      	bls.n	80070ec <_vfiprintf_r+0x1cc>
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d0c6      	beq.n	8007076 <_vfiprintf_r+0x156>
 80070e8:	9105      	str	r1, [sp, #20]
 80070ea:	e7c4      	b.n	8007076 <_vfiprintf_r+0x156>
 80070ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80070f0:	4604      	mov	r4, r0
 80070f2:	2301      	movs	r3, #1
 80070f4:	e7f0      	b.n	80070d8 <_vfiprintf_r+0x1b8>
 80070f6:	ab03      	add	r3, sp, #12
 80070f8:	9300      	str	r3, [sp, #0]
 80070fa:	462a      	mov	r2, r5
 80070fc:	4b12      	ldr	r3, [pc, #72]	@ (8007148 <_vfiprintf_r+0x228>)
 80070fe:	a904      	add	r1, sp, #16
 8007100:	4630      	mov	r0, r6
 8007102:	f3af 8000 	nop.w
 8007106:	4607      	mov	r7, r0
 8007108:	1c78      	adds	r0, r7, #1
 800710a:	d1d6      	bne.n	80070ba <_vfiprintf_r+0x19a>
 800710c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800710e:	07d9      	lsls	r1, r3, #31
 8007110:	d405      	bmi.n	800711e <_vfiprintf_r+0x1fe>
 8007112:	89ab      	ldrh	r3, [r5, #12]
 8007114:	059a      	lsls	r2, r3, #22
 8007116:	d402      	bmi.n	800711e <_vfiprintf_r+0x1fe>
 8007118:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800711a:	f7ff fce3 	bl	8006ae4 <__retarget_lock_release_recursive>
 800711e:	89ab      	ldrh	r3, [r5, #12]
 8007120:	065b      	lsls	r3, r3, #25
 8007122:	f53f af1f 	bmi.w	8006f64 <_vfiprintf_r+0x44>
 8007126:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007128:	e71e      	b.n	8006f68 <_vfiprintf_r+0x48>
 800712a:	ab03      	add	r3, sp, #12
 800712c:	9300      	str	r3, [sp, #0]
 800712e:	462a      	mov	r2, r5
 8007130:	4b05      	ldr	r3, [pc, #20]	@ (8007148 <_vfiprintf_r+0x228>)
 8007132:	a904      	add	r1, sp, #16
 8007134:	4630      	mov	r0, r6
 8007136:	f000 f879 	bl	800722c <_printf_i>
 800713a:	e7e4      	b.n	8007106 <_vfiprintf_r+0x1e6>
 800713c:	0801addb 	.word	0x0801addb
 8007140:	0801ade5 	.word	0x0801ade5
 8007144:	00000000 	.word	0x00000000
 8007148:	08006efd 	.word	0x08006efd
 800714c:	0801ade1 	.word	0x0801ade1

08007150 <_printf_common>:
 8007150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007154:	4616      	mov	r6, r2
 8007156:	4698      	mov	r8, r3
 8007158:	688a      	ldr	r2, [r1, #8]
 800715a:	690b      	ldr	r3, [r1, #16]
 800715c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007160:	4293      	cmp	r3, r2
 8007162:	bfb8      	it	lt
 8007164:	4613      	movlt	r3, r2
 8007166:	6033      	str	r3, [r6, #0]
 8007168:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800716c:	4607      	mov	r7, r0
 800716e:	460c      	mov	r4, r1
 8007170:	b10a      	cbz	r2, 8007176 <_printf_common+0x26>
 8007172:	3301      	adds	r3, #1
 8007174:	6033      	str	r3, [r6, #0]
 8007176:	6823      	ldr	r3, [r4, #0]
 8007178:	0699      	lsls	r1, r3, #26
 800717a:	bf42      	ittt	mi
 800717c:	6833      	ldrmi	r3, [r6, #0]
 800717e:	3302      	addmi	r3, #2
 8007180:	6033      	strmi	r3, [r6, #0]
 8007182:	6825      	ldr	r5, [r4, #0]
 8007184:	f015 0506 	ands.w	r5, r5, #6
 8007188:	d106      	bne.n	8007198 <_printf_common+0x48>
 800718a:	f104 0a19 	add.w	sl, r4, #25
 800718e:	68e3      	ldr	r3, [r4, #12]
 8007190:	6832      	ldr	r2, [r6, #0]
 8007192:	1a9b      	subs	r3, r3, r2
 8007194:	42ab      	cmp	r3, r5
 8007196:	dc26      	bgt.n	80071e6 <_printf_common+0x96>
 8007198:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800719c:	6822      	ldr	r2, [r4, #0]
 800719e:	3b00      	subs	r3, #0
 80071a0:	bf18      	it	ne
 80071a2:	2301      	movne	r3, #1
 80071a4:	0692      	lsls	r2, r2, #26
 80071a6:	d42b      	bmi.n	8007200 <_printf_common+0xb0>
 80071a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80071ac:	4641      	mov	r1, r8
 80071ae:	4638      	mov	r0, r7
 80071b0:	47c8      	blx	r9
 80071b2:	3001      	adds	r0, #1
 80071b4:	d01e      	beq.n	80071f4 <_printf_common+0xa4>
 80071b6:	6823      	ldr	r3, [r4, #0]
 80071b8:	6922      	ldr	r2, [r4, #16]
 80071ba:	f003 0306 	and.w	r3, r3, #6
 80071be:	2b04      	cmp	r3, #4
 80071c0:	bf02      	ittt	eq
 80071c2:	68e5      	ldreq	r5, [r4, #12]
 80071c4:	6833      	ldreq	r3, [r6, #0]
 80071c6:	1aed      	subeq	r5, r5, r3
 80071c8:	68a3      	ldr	r3, [r4, #8]
 80071ca:	bf0c      	ite	eq
 80071cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80071d0:	2500      	movne	r5, #0
 80071d2:	4293      	cmp	r3, r2
 80071d4:	bfc4      	itt	gt
 80071d6:	1a9b      	subgt	r3, r3, r2
 80071d8:	18ed      	addgt	r5, r5, r3
 80071da:	2600      	movs	r6, #0
 80071dc:	341a      	adds	r4, #26
 80071de:	42b5      	cmp	r5, r6
 80071e0:	d11a      	bne.n	8007218 <_printf_common+0xc8>
 80071e2:	2000      	movs	r0, #0
 80071e4:	e008      	b.n	80071f8 <_printf_common+0xa8>
 80071e6:	2301      	movs	r3, #1
 80071e8:	4652      	mov	r2, sl
 80071ea:	4641      	mov	r1, r8
 80071ec:	4638      	mov	r0, r7
 80071ee:	47c8      	blx	r9
 80071f0:	3001      	adds	r0, #1
 80071f2:	d103      	bne.n	80071fc <_printf_common+0xac>
 80071f4:	f04f 30ff 	mov.w	r0, #4294967295
 80071f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071fc:	3501      	adds	r5, #1
 80071fe:	e7c6      	b.n	800718e <_printf_common+0x3e>
 8007200:	18e1      	adds	r1, r4, r3
 8007202:	1c5a      	adds	r2, r3, #1
 8007204:	2030      	movs	r0, #48	@ 0x30
 8007206:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800720a:	4422      	add	r2, r4
 800720c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007210:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007214:	3302      	adds	r3, #2
 8007216:	e7c7      	b.n	80071a8 <_printf_common+0x58>
 8007218:	2301      	movs	r3, #1
 800721a:	4622      	mov	r2, r4
 800721c:	4641      	mov	r1, r8
 800721e:	4638      	mov	r0, r7
 8007220:	47c8      	blx	r9
 8007222:	3001      	adds	r0, #1
 8007224:	d0e6      	beq.n	80071f4 <_printf_common+0xa4>
 8007226:	3601      	adds	r6, #1
 8007228:	e7d9      	b.n	80071de <_printf_common+0x8e>
	...

0800722c <_printf_i>:
 800722c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007230:	7e0f      	ldrb	r7, [r1, #24]
 8007232:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007234:	2f78      	cmp	r7, #120	@ 0x78
 8007236:	4691      	mov	r9, r2
 8007238:	4680      	mov	r8, r0
 800723a:	460c      	mov	r4, r1
 800723c:	469a      	mov	sl, r3
 800723e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007242:	d807      	bhi.n	8007254 <_printf_i+0x28>
 8007244:	2f62      	cmp	r7, #98	@ 0x62
 8007246:	d80a      	bhi.n	800725e <_printf_i+0x32>
 8007248:	2f00      	cmp	r7, #0
 800724a:	f000 80d1 	beq.w	80073f0 <_printf_i+0x1c4>
 800724e:	2f58      	cmp	r7, #88	@ 0x58
 8007250:	f000 80b8 	beq.w	80073c4 <_printf_i+0x198>
 8007254:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007258:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800725c:	e03a      	b.n	80072d4 <_printf_i+0xa8>
 800725e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007262:	2b15      	cmp	r3, #21
 8007264:	d8f6      	bhi.n	8007254 <_printf_i+0x28>
 8007266:	a101      	add	r1, pc, #4	@ (adr r1, 800726c <_printf_i+0x40>)
 8007268:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800726c:	080072c5 	.word	0x080072c5
 8007270:	080072d9 	.word	0x080072d9
 8007274:	08007255 	.word	0x08007255
 8007278:	08007255 	.word	0x08007255
 800727c:	08007255 	.word	0x08007255
 8007280:	08007255 	.word	0x08007255
 8007284:	080072d9 	.word	0x080072d9
 8007288:	08007255 	.word	0x08007255
 800728c:	08007255 	.word	0x08007255
 8007290:	08007255 	.word	0x08007255
 8007294:	08007255 	.word	0x08007255
 8007298:	080073d7 	.word	0x080073d7
 800729c:	08007303 	.word	0x08007303
 80072a0:	08007391 	.word	0x08007391
 80072a4:	08007255 	.word	0x08007255
 80072a8:	08007255 	.word	0x08007255
 80072ac:	080073f9 	.word	0x080073f9
 80072b0:	08007255 	.word	0x08007255
 80072b4:	08007303 	.word	0x08007303
 80072b8:	08007255 	.word	0x08007255
 80072bc:	08007255 	.word	0x08007255
 80072c0:	08007399 	.word	0x08007399
 80072c4:	6833      	ldr	r3, [r6, #0]
 80072c6:	1d1a      	adds	r2, r3, #4
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	6032      	str	r2, [r6, #0]
 80072cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80072d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80072d4:	2301      	movs	r3, #1
 80072d6:	e09c      	b.n	8007412 <_printf_i+0x1e6>
 80072d8:	6833      	ldr	r3, [r6, #0]
 80072da:	6820      	ldr	r0, [r4, #0]
 80072dc:	1d19      	adds	r1, r3, #4
 80072de:	6031      	str	r1, [r6, #0]
 80072e0:	0606      	lsls	r6, r0, #24
 80072e2:	d501      	bpl.n	80072e8 <_printf_i+0xbc>
 80072e4:	681d      	ldr	r5, [r3, #0]
 80072e6:	e003      	b.n	80072f0 <_printf_i+0xc4>
 80072e8:	0645      	lsls	r5, r0, #25
 80072ea:	d5fb      	bpl.n	80072e4 <_printf_i+0xb8>
 80072ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80072f0:	2d00      	cmp	r5, #0
 80072f2:	da03      	bge.n	80072fc <_printf_i+0xd0>
 80072f4:	232d      	movs	r3, #45	@ 0x2d
 80072f6:	426d      	negs	r5, r5
 80072f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80072fc:	4858      	ldr	r0, [pc, #352]	@ (8007460 <_printf_i+0x234>)
 80072fe:	230a      	movs	r3, #10
 8007300:	e011      	b.n	8007326 <_printf_i+0xfa>
 8007302:	6821      	ldr	r1, [r4, #0]
 8007304:	6833      	ldr	r3, [r6, #0]
 8007306:	0608      	lsls	r0, r1, #24
 8007308:	f853 5b04 	ldr.w	r5, [r3], #4
 800730c:	d402      	bmi.n	8007314 <_printf_i+0xe8>
 800730e:	0649      	lsls	r1, r1, #25
 8007310:	bf48      	it	mi
 8007312:	b2ad      	uxthmi	r5, r5
 8007314:	2f6f      	cmp	r7, #111	@ 0x6f
 8007316:	4852      	ldr	r0, [pc, #328]	@ (8007460 <_printf_i+0x234>)
 8007318:	6033      	str	r3, [r6, #0]
 800731a:	bf14      	ite	ne
 800731c:	230a      	movne	r3, #10
 800731e:	2308      	moveq	r3, #8
 8007320:	2100      	movs	r1, #0
 8007322:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007326:	6866      	ldr	r6, [r4, #4]
 8007328:	60a6      	str	r6, [r4, #8]
 800732a:	2e00      	cmp	r6, #0
 800732c:	db05      	blt.n	800733a <_printf_i+0x10e>
 800732e:	6821      	ldr	r1, [r4, #0]
 8007330:	432e      	orrs	r6, r5
 8007332:	f021 0104 	bic.w	r1, r1, #4
 8007336:	6021      	str	r1, [r4, #0]
 8007338:	d04b      	beq.n	80073d2 <_printf_i+0x1a6>
 800733a:	4616      	mov	r6, r2
 800733c:	fbb5 f1f3 	udiv	r1, r5, r3
 8007340:	fb03 5711 	mls	r7, r3, r1, r5
 8007344:	5dc7      	ldrb	r7, [r0, r7]
 8007346:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800734a:	462f      	mov	r7, r5
 800734c:	42bb      	cmp	r3, r7
 800734e:	460d      	mov	r5, r1
 8007350:	d9f4      	bls.n	800733c <_printf_i+0x110>
 8007352:	2b08      	cmp	r3, #8
 8007354:	d10b      	bne.n	800736e <_printf_i+0x142>
 8007356:	6823      	ldr	r3, [r4, #0]
 8007358:	07df      	lsls	r7, r3, #31
 800735a:	d508      	bpl.n	800736e <_printf_i+0x142>
 800735c:	6923      	ldr	r3, [r4, #16]
 800735e:	6861      	ldr	r1, [r4, #4]
 8007360:	4299      	cmp	r1, r3
 8007362:	bfde      	ittt	le
 8007364:	2330      	movle	r3, #48	@ 0x30
 8007366:	f806 3c01 	strble.w	r3, [r6, #-1]
 800736a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800736e:	1b92      	subs	r2, r2, r6
 8007370:	6122      	str	r2, [r4, #16]
 8007372:	f8cd a000 	str.w	sl, [sp]
 8007376:	464b      	mov	r3, r9
 8007378:	aa03      	add	r2, sp, #12
 800737a:	4621      	mov	r1, r4
 800737c:	4640      	mov	r0, r8
 800737e:	f7ff fee7 	bl	8007150 <_printf_common>
 8007382:	3001      	adds	r0, #1
 8007384:	d14a      	bne.n	800741c <_printf_i+0x1f0>
 8007386:	f04f 30ff 	mov.w	r0, #4294967295
 800738a:	b004      	add	sp, #16
 800738c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007390:	6823      	ldr	r3, [r4, #0]
 8007392:	f043 0320 	orr.w	r3, r3, #32
 8007396:	6023      	str	r3, [r4, #0]
 8007398:	4832      	ldr	r0, [pc, #200]	@ (8007464 <_printf_i+0x238>)
 800739a:	2778      	movs	r7, #120	@ 0x78
 800739c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80073a0:	6823      	ldr	r3, [r4, #0]
 80073a2:	6831      	ldr	r1, [r6, #0]
 80073a4:	061f      	lsls	r7, r3, #24
 80073a6:	f851 5b04 	ldr.w	r5, [r1], #4
 80073aa:	d402      	bmi.n	80073b2 <_printf_i+0x186>
 80073ac:	065f      	lsls	r7, r3, #25
 80073ae:	bf48      	it	mi
 80073b0:	b2ad      	uxthmi	r5, r5
 80073b2:	6031      	str	r1, [r6, #0]
 80073b4:	07d9      	lsls	r1, r3, #31
 80073b6:	bf44      	itt	mi
 80073b8:	f043 0320 	orrmi.w	r3, r3, #32
 80073bc:	6023      	strmi	r3, [r4, #0]
 80073be:	b11d      	cbz	r5, 80073c8 <_printf_i+0x19c>
 80073c0:	2310      	movs	r3, #16
 80073c2:	e7ad      	b.n	8007320 <_printf_i+0xf4>
 80073c4:	4826      	ldr	r0, [pc, #152]	@ (8007460 <_printf_i+0x234>)
 80073c6:	e7e9      	b.n	800739c <_printf_i+0x170>
 80073c8:	6823      	ldr	r3, [r4, #0]
 80073ca:	f023 0320 	bic.w	r3, r3, #32
 80073ce:	6023      	str	r3, [r4, #0]
 80073d0:	e7f6      	b.n	80073c0 <_printf_i+0x194>
 80073d2:	4616      	mov	r6, r2
 80073d4:	e7bd      	b.n	8007352 <_printf_i+0x126>
 80073d6:	6833      	ldr	r3, [r6, #0]
 80073d8:	6825      	ldr	r5, [r4, #0]
 80073da:	6961      	ldr	r1, [r4, #20]
 80073dc:	1d18      	adds	r0, r3, #4
 80073de:	6030      	str	r0, [r6, #0]
 80073e0:	062e      	lsls	r6, r5, #24
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	d501      	bpl.n	80073ea <_printf_i+0x1be>
 80073e6:	6019      	str	r1, [r3, #0]
 80073e8:	e002      	b.n	80073f0 <_printf_i+0x1c4>
 80073ea:	0668      	lsls	r0, r5, #25
 80073ec:	d5fb      	bpl.n	80073e6 <_printf_i+0x1ba>
 80073ee:	8019      	strh	r1, [r3, #0]
 80073f0:	2300      	movs	r3, #0
 80073f2:	6123      	str	r3, [r4, #16]
 80073f4:	4616      	mov	r6, r2
 80073f6:	e7bc      	b.n	8007372 <_printf_i+0x146>
 80073f8:	6833      	ldr	r3, [r6, #0]
 80073fa:	1d1a      	adds	r2, r3, #4
 80073fc:	6032      	str	r2, [r6, #0]
 80073fe:	681e      	ldr	r6, [r3, #0]
 8007400:	6862      	ldr	r2, [r4, #4]
 8007402:	2100      	movs	r1, #0
 8007404:	4630      	mov	r0, r6
 8007406:	f7f8 ff43 	bl	8000290 <memchr>
 800740a:	b108      	cbz	r0, 8007410 <_printf_i+0x1e4>
 800740c:	1b80      	subs	r0, r0, r6
 800740e:	6060      	str	r0, [r4, #4]
 8007410:	6863      	ldr	r3, [r4, #4]
 8007412:	6123      	str	r3, [r4, #16]
 8007414:	2300      	movs	r3, #0
 8007416:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800741a:	e7aa      	b.n	8007372 <_printf_i+0x146>
 800741c:	6923      	ldr	r3, [r4, #16]
 800741e:	4632      	mov	r2, r6
 8007420:	4649      	mov	r1, r9
 8007422:	4640      	mov	r0, r8
 8007424:	47d0      	blx	sl
 8007426:	3001      	adds	r0, #1
 8007428:	d0ad      	beq.n	8007386 <_printf_i+0x15a>
 800742a:	6823      	ldr	r3, [r4, #0]
 800742c:	079b      	lsls	r3, r3, #30
 800742e:	d413      	bmi.n	8007458 <_printf_i+0x22c>
 8007430:	68e0      	ldr	r0, [r4, #12]
 8007432:	9b03      	ldr	r3, [sp, #12]
 8007434:	4298      	cmp	r0, r3
 8007436:	bfb8      	it	lt
 8007438:	4618      	movlt	r0, r3
 800743a:	e7a6      	b.n	800738a <_printf_i+0x15e>
 800743c:	2301      	movs	r3, #1
 800743e:	4632      	mov	r2, r6
 8007440:	4649      	mov	r1, r9
 8007442:	4640      	mov	r0, r8
 8007444:	47d0      	blx	sl
 8007446:	3001      	adds	r0, #1
 8007448:	d09d      	beq.n	8007386 <_printf_i+0x15a>
 800744a:	3501      	adds	r5, #1
 800744c:	68e3      	ldr	r3, [r4, #12]
 800744e:	9903      	ldr	r1, [sp, #12]
 8007450:	1a5b      	subs	r3, r3, r1
 8007452:	42ab      	cmp	r3, r5
 8007454:	dcf2      	bgt.n	800743c <_printf_i+0x210>
 8007456:	e7eb      	b.n	8007430 <_printf_i+0x204>
 8007458:	2500      	movs	r5, #0
 800745a:	f104 0619 	add.w	r6, r4, #25
 800745e:	e7f5      	b.n	800744c <_printf_i+0x220>
 8007460:	0801adec 	.word	0x0801adec
 8007464:	0801adfd 	.word	0x0801adfd

08007468 <__swbuf_r>:
 8007468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800746a:	460e      	mov	r6, r1
 800746c:	4614      	mov	r4, r2
 800746e:	4605      	mov	r5, r0
 8007470:	b118      	cbz	r0, 800747a <__swbuf_r+0x12>
 8007472:	6a03      	ldr	r3, [r0, #32]
 8007474:	b90b      	cbnz	r3, 800747a <__swbuf_r+0x12>
 8007476:	f7ff fa41 	bl	80068fc <__sinit>
 800747a:	69a3      	ldr	r3, [r4, #24]
 800747c:	60a3      	str	r3, [r4, #8]
 800747e:	89a3      	ldrh	r3, [r4, #12]
 8007480:	071a      	lsls	r2, r3, #28
 8007482:	d501      	bpl.n	8007488 <__swbuf_r+0x20>
 8007484:	6923      	ldr	r3, [r4, #16]
 8007486:	b943      	cbnz	r3, 800749a <__swbuf_r+0x32>
 8007488:	4621      	mov	r1, r4
 800748a:	4628      	mov	r0, r5
 800748c:	f000 f82a 	bl	80074e4 <__swsetup_r>
 8007490:	b118      	cbz	r0, 800749a <__swbuf_r+0x32>
 8007492:	f04f 37ff 	mov.w	r7, #4294967295
 8007496:	4638      	mov	r0, r7
 8007498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800749a:	6823      	ldr	r3, [r4, #0]
 800749c:	6922      	ldr	r2, [r4, #16]
 800749e:	1a98      	subs	r0, r3, r2
 80074a0:	6963      	ldr	r3, [r4, #20]
 80074a2:	b2f6      	uxtb	r6, r6
 80074a4:	4283      	cmp	r3, r0
 80074a6:	4637      	mov	r7, r6
 80074a8:	dc05      	bgt.n	80074b6 <__swbuf_r+0x4e>
 80074aa:	4621      	mov	r1, r4
 80074ac:	4628      	mov	r0, r5
 80074ae:	f7ff fcbd 	bl	8006e2c <_fflush_r>
 80074b2:	2800      	cmp	r0, #0
 80074b4:	d1ed      	bne.n	8007492 <__swbuf_r+0x2a>
 80074b6:	68a3      	ldr	r3, [r4, #8]
 80074b8:	3b01      	subs	r3, #1
 80074ba:	60a3      	str	r3, [r4, #8]
 80074bc:	6823      	ldr	r3, [r4, #0]
 80074be:	1c5a      	adds	r2, r3, #1
 80074c0:	6022      	str	r2, [r4, #0]
 80074c2:	701e      	strb	r6, [r3, #0]
 80074c4:	6962      	ldr	r2, [r4, #20]
 80074c6:	1c43      	adds	r3, r0, #1
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d004      	beq.n	80074d6 <__swbuf_r+0x6e>
 80074cc:	89a3      	ldrh	r3, [r4, #12]
 80074ce:	07db      	lsls	r3, r3, #31
 80074d0:	d5e1      	bpl.n	8007496 <__swbuf_r+0x2e>
 80074d2:	2e0a      	cmp	r6, #10
 80074d4:	d1df      	bne.n	8007496 <__swbuf_r+0x2e>
 80074d6:	4621      	mov	r1, r4
 80074d8:	4628      	mov	r0, r5
 80074da:	f7ff fca7 	bl	8006e2c <_fflush_r>
 80074de:	2800      	cmp	r0, #0
 80074e0:	d0d9      	beq.n	8007496 <__swbuf_r+0x2e>
 80074e2:	e7d6      	b.n	8007492 <__swbuf_r+0x2a>

080074e4 <__swsetup_r>:
 80074e4:	b538      	push	{r3, r4, r5, lr}
 80074e6:	4b29      	ldr	r3, [pc, #164]	@ (800758c <__swsetup_r+0xa8>)
 80074e8:	4605      	mov	r5, r0
 80074ea:	6818      	ldr	r0, [r3, #0]
 80074ec:	460c      	mov	r4, r1
 80074ee:	b118      	cbz	r0, 80074f8 <__swsetup_r+0x14>
 80074f0:	6a03      	ldr	r3, [r0, #32]
 80074f2:	b90b      	cbnz	r3, 80074f8 <__swsetup_r+0x14>
 80074f4:	f7ff fa02 	bl	80068fc <__sinit>
 80074f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074fc:	0719      	lsls	r1, r3, #28
 80074fe:	d422      	bmi.n	8007546 <__swsetup_r+0x62>
 8007500:	06da      	lsls	r2, r3, #27
 8007502:	d407      	bmi.n	8007514 <__swsetup_r+0x30>
 8007504:	2209      	movs	r2, #9
 8007506:	602a      	str	r2, [r5, #0]
 8007508:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800750c:	81a3      	strh	r3, [r4, #12]
 800750e:	f04f 30ff 	mov.w	r0, #4294967295
 8007512:	e033      	b.n	800757c <__swsetup_r+0x98>
 8007514:	0758      	lsls	r0, r3, #29
 8007516:	d512      	bpl.n	800753e <__swsetup_r+0x5a>
 8007518:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800751a:	b141      	cbz	r1, 800752e <__swsetup_r+0x4a>
 800751c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007520:	4299      	cmp	r1, r3
 8007522:	d002      	beq.n	800752a <__swsetup_r+0x46>
 8007524:	4628      	mov	r0, r5
 8007526:	f7ff fafd 	bl	8006b24 <_free_r>
 800752a:	2300      	movs	r3, #0
 800752c:	6363      	str	r3, [r4, #52]	@ 0x34
 800752e:	89a3      	ldrh	r3, [r4, #12]
 8007530:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007534:	81a3      	strh	r3, [r4, #12]
 8007536:	2300      	movs	r3, #0
 8007538:	6063      	str	r3, [r4, #4]
 800753a:	6923      	ldr	r3, [r4, #16]
 800753c:	6023      	str	r3, [r4, #0]
 800753e:	89a3      	ldrh	r3, [r4, #12]
 8007540:	f043 0308 	orr.w	r3, r3, #8
 8007544:	81a3      	strh	r3, [r4, #12]
 8007546:	6923      	ldr	r3, [r4, #16]
 8007548:	b94b      	cbnz	r3, 800755e <__swsetup_r+0x7a>
 800754a:	89a3      	ldrh	r3, [r4, #12]
 800754c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007550:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007554:	d003      	beq.n	800755e <__swsetup_r+0x7a>
 8007556:	4621      	mov	r1, r4
 8007558:	4628      	mov	r0, r5
 800755a:	f000 f883 	bl	8007664 <__smakebuf_r>
 800755e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007562:	f013 0201 	ands.w	r2, r3, #1
 8007566:	d00a      	beq.n	800757e <__swsetup_r+0x9a>
 8007568:	2200      	movs	r2, #0
 800756a:	60a2      	str	r2, [r4, #8]
 800756c:	6962      	ldr	r2, [r4, #20]
 800756e:	4252      	negs	r2, r2
 8007570:	61a2      	str	r2, [r4, #24]
 8007572:	6922      	ldr	r2, [r4, #16]
 8007574:	b942      	cbnz	r2, 8007588 <__swsetup_r+0xa4>
 8007576:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800757a:	d1c5      	bne.n	8007508 <__swsetup_r+0x24>
 800757c:	bd38      	pop	{r3, r4, r5, pc}
 800757e:	0799      	lsls	r1, r3, #30
 8007580:	bf58      	it	pl
 8007582:	6962      	ldrpl	r2, [r4, #20]
 8007584:	60a2      	str	r2, [r4, #8]
 8007586:	e7f4      	b.n	8007572 <__swsetup_r+0x8e>
 8007588:	2000      	movs	r0, #0
 800758a:	e7f7      	b.n	800757c <__swsetup_r+0x98>
 800758c:	20000020 	.word	0x20000020

08007590 <_raise_r>:
 8007590:	291f      	cmp	r1, #31
 8007592:	b538      	push	{r3, r4, r5, lr}
 8007594:	4605      	mov	r5, r0
 8007596:	460c      	mov	r4, r1
 8007598:	d904      	bls.n	80075a4 <_raise_r+0x14>
 800759a:	2316      	movs	r3, #22
 800759c:	6003      	str	r3, [r0, #0]
 800759e:	f04f 30ff 	mov.w	r0, #4294967295
 80075a2:	bd38      	pop	{r3, r4, r5, pc}
 80075a4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80075a6:	b112      	cbz	r2, 80075ae <_raise_r+0x1e>
 80075a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80075ac:	b94b      	cbnz	r3, 80075c2 <_raise_r+0x32>
 80075ae:	4628      	mov	r0, r5
 80075b0:	f000 f830 	bl	8007614 <_getpid_r>
 80075b4:	4622      	mov	r2, r4
 80075b6:	4601      	mov	r1, r0
 80075b8:	4628      	mov	r0, r5
 80075ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075be:	f000 b817 	b.w	80075f0 <_kill_r>
 80075c2:	2b01      	cmp	r3, #1
 80075c4:	d00a      	beq.n	80075dc <_raise_r+0x4c>
 80075c6:	1c59      	adds	r1, r3, #1
 80075c8:	d103      	bne.n	80075d2 <_raise_r+0x42>
 80075ca:	2316      	movs	r3, #22
 80075cc:	6003      	str	r3, [r0, #0]
 80075ce:	2001      	movs	r0, #1
 80075d0:	e7e7      	b.n	80075a2 <_raise_r+0x12>
 80075d2:	2100      	movs	r1, #0
 80075d4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80075d8:	4620      	mov	r0, r4
 80075da:	4798      	blx	r3
 80075dc:	2000      	movs	r0, #0
 80075de:	e7e0      	b.n	80075a2 <_raise_r+0x12>

080075e0 <raise>:
 80075e0:	4b02      	ldr	r3, [pc, #8]	@ (80075ec <raise+0xc>)
 80075e2:	4601      	mov	r1, r0
 80075e4:	6818      	ldr	r0, [r3, #0]
 80075e6:	f7ff bfd3 	b.w	8007590 <_raise_r>
 80075ea:	bf00      	nop
 80075ec:	20000020 	.word	0x20000020

080075f0 <_kill_r>:
 80075f0:	b538      	push	{r3, r4, r5, lr}
 80075f2:	4d07      	ldr	r5, [pc, #28]	@ (8007610 <_kill_r+0x20>)
 80075f4:	2300      	movs	r3, #0
 80075f6:	4604      	mov	r4, r0
 80075f8:	4608      	mov	r0, r1
 80075fa:	4611      	mov	r1, r2
 80075fc:	602b      	str	r3, [r5, #0]
 80075fe:	f7fa fcbf 	bl	8001f80 <_kill>
 8007602:	1c43      	adds	r3, r0, #1
 8007604:	d102      	bne.n	800760c <_kill_r+0x1c>
 8007606:	682b      	ldr	r3, [r5, #0]
 8007608:	b103      	cbz	r3, 800760c <_kill_r+0x1c>
 800760a:	6023      	str	r3, [r4, #0]
 800760c:	bd38      	pop	{r3, r4, r5, pc}
 800760e:	bf00      	nop
 8007610:	20004fe0 	.word	0x20004fe0

08007614 <_getpid_r>:
 8007614:	f7fa bcac 	b.w	8001f70 <_getpid>

08007618 <__swhatbuf_r>:
 8007618:	b570      	push	{r4, r5, r6, lr}
 800761a:	460c      	mov	r4, r1
 800761c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007620:	2900      	cmp	r1, #0
 8007622:	b096      	sub	sp, #88	@ 0x58
 8007624:	4615      	mov	r5, r2
 8007626:	461e      	mov	r6, r3
 8007628:	da0d      	bge.n	8007646 <__swhatbuf_r+0x2e>
 800762a:	89a3      	ldrh	r3, [r4, #12]
 800762c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007630:	f04f 0100 	mov.w	r1, #0
 8007634:	bf14      	ite	ne
 8007636:	2340      	movne	r3, #64	@ 0x40
 8007638:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800763c:	2000      	movs	r0, #0
 800763e:	6031      	str	r1, [r6, #0]
 8007640:	602b      	str	r3, [r5, #0]
 8007642:	b016      	add	sp, #88	@ 0x58
 8007644:	bd70      	pop	{r4, r5, r6, pc}
 8007646:	466a      	mov	r2, sp
 8007648:	f000 f848 	bl	80076dc <_fstat_r>
 800764c:	2800      	cmp	r0, #0
 800764e:	dbec      	blt.n	800762a <__swhatbuf_r+0x12>
 8007650:	9901      	ldr	r1, [sp, #4]
 8007652:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007656:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800765a:	4259      	negs	r1, r3
 800765c:	4159      	adcs	r1, r3
 800765e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007662:	e7eb      	b.n	800763c <__swhatbuf_r+0x24>

08007664 <__smakebuf_r>:
 8007664:	898b      	ldrh	r3, [r1, #12]
 8007666:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007668:	079d      	lsls	r5, r3, #30
 800766a:	4606      	mov	r6, r0
 800766c:	460c      	mov	r4, r1
 800766e:	d507      	bpl.n	8007680 <__smakebuf_r+0x1c>
 8007670:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007674:	6023      	str	r3, [r4, #0]
 8007676:	6123      	str	r3, [r4, #16]
 8007678:	2301      	movs	r3, #1
 800767a:	6163      	str	r3, [r4, #20]
 800767c:	b003      	add	sp, #12
 800767e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007680:	ab01      	add	r3, sp, #4
 8007682:	466a      	mov	r2, sp
 8007684:	f7ff ffc8 	bl	8007618 <__swhatbuf_r>
 8007688:	9f00      	ldr	r7, [sp, #0]
 800768a:	4605      	mov	r5, r0
 800768c:	4639      	mov	r1, r7
 800768e:	4630      	mov	r0, r6
 8007690:	f7ff fabc 	bl	8006c0c <_malloc_r>
 8007694:	b948      	cbnz	r0, 80076aa <__smakebuf_r+0x46>
 8007696:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800769a:	059a      	lsls	r2, r3, #22
 800769c:	d4ee      	bmi.n	800767c <__smakebuf_r+0x18>
 800769e:	f023 0303 	bic.w	r3, r3, #3
 80076a2:	f043 0302 	orr.w	r3, r3, #2
 80076a6:	81a3      	strh	r3, [r4, #12]
 80076a8:	e7e2      	b.n	8007670 <__smakebuf_r+0xc>
 80076aa:	89a3      	ldrh	r3, [r4, #12]
 80076ac:	6020      	str	r0, [r4, #0]
 80076ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076b2:	81a3      	strh	r3, [r4, #12]
 80076b4:	9b01      	ldr	r3, [sp, #4]
 80076b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80076ba:	b15b      	cbz	r3, 80076d4 <__smakebuf_r+0x70>
 80076bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076c0:	4630      	mov	r0, r6
 80076c2:	f000 f81d 	bl	8007700 <_isatty_r>
 80076c6:	b128      	cbz	r0, 80076d4 <__smakebuf_r+0x70>
 80076c8:	89a3      	ldrh	r3, [r4, #12]
 80076ca:	f023 0303 	bic.w	r3, r3, #3
 80076ce:	f043 0301 	orr.w	r3, r3, #1
 80076d2:	81a3      	strh	r3, [r4, #12]
 80076d4:	89a3      	ldrh	r3, [r4, #12]
 80076d6:	431d      	orrs	r5, r3
 80076d8:	81a5      	strh	r5, [r4, #12]
 80076da:	e7cf      	b.n	800767c <__smakebuf_r+0x18>

080076dc <_fstat_r>:
 80076dc:	b538      	push	{r3, r4, r5, lr}
 80076de:	4d07      	ldr	r5, [pc, #28]	@ (80076fc <_fstat_r+0x20>)
 80076e0:	2300      	movs	r3, #0
 80076e2:	4604      	mov	r4, r0
 80076e4:	4608      	mov	r0, r1
 80076e6:	4611      	mov	r1, r2
 80076e8:	602b      	str	r3, [r5, #0]
 80076ea:	f7fa fca9 	bl	8002040 <_fstat>
 80076ee:	1c43      	adds	r3, r0, #1
 80076f0:	d102      	bne.n	80076f8 <_fstat_r+0x1c>
 80076f2:	682b      	ldr	r3, [r5, #0]
 80076f4:	b103      	cbz	r3, 80076f8 <_fstat_r+0x1c>
 80076f6:	6023      	str	r3, [r4, #0]
 80076f8:	bd38      	pop	{r3, r4, r5, pc}
 80076fa:	bf00      	nop
 80076fc:	20004fe0 	.word	0x20004fe0

08007700 <_isatty_r>:
 8007700:	b538      	push	{r3, r4, r5, lr}
 8007702:	4d06      	ldr	r5, [pc, #24]	@ (800771c <_isatty_r+0x1c>)
 8007704:	2300      	movs	r3, #0
 8007706:	4604      	mov	r4, r0
 8007708:	4608      	mov	r0, r1
 800770a:	602b      	str	r3, [r5, #0]
 800770c:	f7fa fca8 	bl	8002060 <_isatty>
 8007710:	1c43      	adds	r3, r0, #1
 8007712:	d102      	bne.n	800771a <_isatty_r+0x1a>
 8007714:	682b      	ldr	r3, [r5, #0]
 8007716:	b103      	cbz	r3, 800771a <_isatty_r+0x1a>
 8007718:	6023      	str	r3, [r4, #0]
 800771a:	bd38      	pop	{r3, r4, r5, pc}
 800771c:	20004fe0 	.word	0x20004fe0

08007720 <fmodf>:
 8007720:	b508      	push	{r3, lr}
 8007722:	ed2d 8b02 	vpush	{d8}
 8007726:	eef0 8a40 	vmov.f32	s17, s0
 800772a:	eeb0 8a60 	vmov.f32	s16, s1
 800772e:	f000 f839 	bl	80077a4 <__ieee754_fmodf>
 8007732:	eef4 8a48 	vcmp.f32	s17, s16
 8007736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800773a:	d60c      	bvs.n	8007756 <fmodf+0x36>
 800773c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800775c <fmodf+0x3c>
 8007740:	eeb4 8a68 	vcmp.f32	s16, s17
 8007744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007748:	d105      	bne.n	8007756 <fmodf+0x36>
 800774a:	f7ff f99f 	bl	8006a8c <__errno>
 800774e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8007752:	2321      	movs	r3, #33	@ 0x21
 8007754:	6003      	str	r3, [r0, #0]
 8007756:	ecbd 8b02 	vpop	{d8}
 800775a:	bd08      	pop	{r3, pc}
 800775c:	00000000 	.word	0x00000000

08007760 <sqrtf>:
 8007760:	b508      	push	{r3, lr}
 8007762:	ed2d 8b02 	vpush	{d8}
 8007766:	eeb0 8a40 	vmov.f32	s16, s0
 800776a:	f000 f817 	bl	800779c <__ieee754_sqrtf>
 800776e:	eeb4 8a48 	vcmp.f32	s16, s16
 8007772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007776:	d60c      	bvs.n	8007792 <sqrtf+0x32>
 8007778:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8007798 <sqrtf+0x38>
 800777c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8007780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007784:	d505      	bpl.n	8007792 <sqrtf+0x32>
 8007786:	f7ff f981 	bl	8006a8c <__errno>
 800778a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800778e:	2321      	movs	r3, #33	@ 0x21
 8007790:	6003      	str	r3, [r0, #0]
 8007792:	ecbd 8b02 	vpop	{d8}
 8007796:	bd08      	pop	{r3, pc}
 8007798:	00000000 	.word	0x00000000

0800779c <__ieee754_sqrtf>:
 800779c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80077a0:	4770      	bx	lr
	...

080077a4 <__ieee754_fmodf>:
 80077a4:	b570      	push	{r4, r5, r6, lr}
 80077a6:	ee10 6a90 	vmov	r6, s1
 80077aa:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80077ae:	1e5a      	subs	r2, r3, #1
 80077b0:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80077b4:	d206      	bcs.n	80077c4 <__ieee754_fmodf+0x20>
 80077b6:	ee10 4a10 	vmov	r4, s0
 80077ba:	f024 4100 	bic.w	r1, r4, #2147483648	@ 0x80000000
 80077be:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80077c2:	d304      	bcc.n	80077ce <__ieee754_fmodf+0x2a>
 80077c4:	ee60 0a20 	vmul.f32	s1, s0, s1
 80077c8:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 80077cc:	bd70      	pop	{r4, r5, r6, pc}
 80077ce:	4299      	cmp	r1, r3
 80077d0:	dbfc      	blt.n	80077cc <__ieee754_fmodf+0x28>
 80077d2:	f004 4500 	and.w	r5, r4, #2147483648	@ 0x80000000
 80077d6:	d105      	bne.n	80077e4 <__ieee754_fmodf+0x40>
 80077d8:	4b32      	ldr	r3, [pc, #200]	@ (80078a4 <__ieee754_fmodf+0x100>)
 80077da:	eb03 7355 	add.w	r3, r3, r5, lsr #29
 80077de:	ed93 0a00 	vldr	s0, [r3]
 80077e2:	e7f3      	b.n	80077cc <__ieee754_fmodf+0x28>
 80077e4:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 80077e8:	d146      	bne.n	8007878 <__ieee754_fmodf+0xd4>
 80077ea:	020a      	lsls	r2, r1, #8
 80077ec:	f06f 007d 	mvn.w	r0, #125	@ 0x7d
 80077f0:	2a00      	cmp	r2, #0
 80077f2:	dc3e      	bgt.n	8007872 <__ieee754_fmodf+0xce>
 80077f4:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 80077f8:	bf01      	itttt	eq
 80077fa:	021a      	lsleq	r2, r3, #8
 80077fc:	fab2 f282 	clzeq	r2, r2
 8007800:	f1c2 22ff 	rsbeq	r2, r2, #4278255360	@ 0xff00ff00
 8007804:	f502 027f 	addeq.w	r2, r2, #16711680	@ 0xff0000
 8007808:	bf16      	itet	ne
 800780a:	15da      	asrne	r2, r3, #23
 800780c:	3282      	addeq	r2, #130	@ 0x82
 800780e:	3a7f      	subne	r2, #127	@ 0x7f
 8007810:	f110 0f7e 	cmn.w	r0, #126	@ 0x7e
 8007814:	bfbb      	ittet	lt
 8007816:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 800781a:	1a24      	sublt	r4, r4, r0
 800781c:	f3c4 0416 	ubfxge	r4, r4, #0, #23
 8007820:	40a1      	lsllt	r1, r4
 8007822:	bfa8      	it	ge
 8007824:	f444 0100 	orrge.w	r1, r4, #8388608	@ 0x800000
 8007828:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800782c:	bfb5      	itete	lt
 800782e:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 8007832:	f3c6 0616 	ubfxge	r6, r6, #0, #23
 8007836:	1aa4      	sublt	r4, r4, r2
 8007838:	f446 0400 	orrge.w	r4, r6, #8388608	@ 0x800000
 800783c:	bfb8      	it	lt
 800783e:	fa03 f404 	lsllt.w	r4, r3, r4
 8007842:	1a80      	subs	r0, r0, r2
 8007844:	1b0b      	subs	r3, r1, r4
 8007846:	b9d0      	cbnz	r0, 800787e <__ieee754_fmodf+0xda>
 8007848:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 800784c:	bf28      	it	cs
 800784e:	460b      	movcs	r3, r1
 8007850:	2b00      	cmp	r3, #0
 8007852:	d0c1      	beq.n	80077d8 <__ieee754_fmodf+0x34>
 8007854:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007858:	db19      	blt.n	800788e <__ieee754_fmodf+0xea>
 800785a:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800785e:	db19      	blt.n	8007894 <__ieee754_fmodf+0xf0>
 8007860:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8007864:	327f      	adds	r2, #127	@ 0x7f
 8007866:	432b      	orrs	r3, r5
 8007868:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800786c:	ee00 3a10 	vmov	s0, r3
 8007870:	e7ac      	b.n	80077cc <__ieee754_fmodf+0x28>
 8007872:	3801      	subs	r0, #1
 8007874:	0052      	lsls	r2, r2, #1
 8007876:	e7bb      	b.n	80077f0 <__ieee754_fmodf+0x4c>
 8007878:	15c8      	asrs	r0, r1, #23
 800787a:	387f      	subs	r0, #127	@ 0x7f
 800787c:	e7ba      	b.n	80077f4 <__ieee754_fmodf+0x50>
 800787e:	2b00      	cmp	r3, #0
 8007880:	da02      	bge.n	8007888 <__ieee754_fmodf+0xe4>
 8007882:	0049      	lsls	r1, r1, #1
 8007884:	3801      	subs	r0, #1
 8007886:	e7dd      	b.n	8007844 <__ieee754_fmodf+0xa0>
 8007888:	d0a6      	beq.n	80077d8 <__ieee754_fmodf+0x34>
 800788a:	0059      	lsls	r1, r3, #1
 800788c:	e7fa      	b.n	8007884 <__ieee754_fmodf+0xe0>
 800788e:	005b      	lsls	r3, r3, #1
 8007890:	3a01      	subs	r2, #1
 8007892:	e7df      	b.n	8007854 <__ieee754_fmodf+0xb0>
 8007894:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 8007898:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800789c:	3282      	adds	r2, #130	@ 0x82
 800789e:	4113      	asrs	r3, r2
 80078a0:	432b      	orrs	r3, r5
 80078a2:	e7e3      	b.n	800786c <__ieee754_fmodf+0xc8>
 80078a4:	0801ae10 	.word	0x0801ae10

080078a8 <_init>:
 80078a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078aa:	bf00      	nop
 80078ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078ae:	bc08      	pop	{r3}
 80078b0:	469e      	mov	lr, r3
 80078b2:	4770      	bx	lr

080078b4 <_fini>:
 80078b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078b6:	bf00      	nop
 80078b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078ba:	bc08      	pop	{r3}
 80078bc:	469e      	mov	lr, r3
 80078be:	4770      	bx	lr
