
STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055e0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08005770  08005770  00006770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005868  08005868  0000706c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005868  08005868  00006868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005870  08005870  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005870  08005870  00006870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005874  08005874  00006874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08005878  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000706c  2**0
                  CONTENTS
 10 .bss          00000ea4  2000006c  2000006c  0000706c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000f10  20000f10  0000706c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c7d2  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002099  00000000  00000000  0001386e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cd8  00000000  00000000  00015908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009f5  00000000  00000000  000165e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002314a  00000000  00000000  00016fd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000eb28  00000000  00000000  0003a11f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d816e  00000000  00000000  00048c47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00120db5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003ee8  00000000  00000000  00120df8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  00124ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005758 	.word	0x08005758

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08005758 	.word	0x08005758

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <calculate_middle_point>:





void calculate_middle_point(){
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
	uint32_t sum = 0;
 80005a2:	2300      	movs	r3, #0
 80005a4:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < 32; i++){
 80005a6:	2300      	movs	r3, #0
 80005a8:	603b      	str	r3, [r7, #0]
 80005aa:	e019      	b.n	80005e0 <calculate_middle_point+0x44>
		  HAL_ADC_Start(&hadc1);
 80005ac:	4812      	ldr	r0, [pc, #72]	@ (80005f8 <calculate_middle_point+0x5c>)
 80005ae:	f000 ffdb 	bl	8001568 <HAL_ADC_Start>
		  if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK)
 80005b2:	210a      	movs	r1, #10
 80005b4:	4810      	ldr	r0, [pc, #64]	@ (80005f8 <calculate_middle_point+0x5c>)
 80005b6:	f001 f8dc 	bl	8001772 <HAL_ADC_PollForConversion>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d106      	bne.n	80005ce <calculate_middle_point+0x32>
			  sum += HAL_ADC_GetValue(&hadc1);
 80005c0:	480d      	ldr	r0, [pc, #52]	@ (80005f8 <calculate_middle_point+0x5c>)
 80005c2:	f001 fa71 	bl	8001aa8 <HAL_ADC_GetValue>
 80005c6:	4602      	mov	r2, r0
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	4413      	add	r3, r2
 80005cc:	607b      	str	r3, [r7, #4]
		  HAL_ADC_Stop(&hadc1);
 80005ce:	480a      	ldr	r0, [pc, #40]	@ (80005f8 <calculate_middle_point+0x5c>)
 80005d0:	f001 f89c 	bl	800170c <HAL_ADC_Stop>
		  HAL_Delay(1);
 80005d4:	2001      	movs	r0, #1
 80005d6:	f000 ff5f 	bl	8001498 <HAL_Delay>
	for (int i = 0; i < 32; i++){
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	3301      	adds	r3, #1
 80005de:	603b      	str	r3, [r7, #0]
 80005e0:	683b      	ldr	r3, [r7, #0]
 80005e2:	2b1f      	cmp	r3, #31
 80005e4:	dde2      	ble.n	80005ac <calculate_middle_point+0x10>
	  }

	middle_point = (uint16_t)(sum / 32);
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	095b      	lsrs	r3, r3, #5
 80005ea:	b29a      	uxth	r2, r3
 80005ec:	4b03      	ldr	r3, [pc, #12]	@ (80005fc <calculate_middle_point+0x60>)
 80005ee:	801a      	strh	r2, [r3, #0]
}
 80005f0:	bf00      	nop
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	20000088 	.word	0x20000088
 80005fc:	20000db8 	.word	0x20000db8

08000600 <get_amp>:


uint16_t get_amp()
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
	uint16_t temp = HAL_ADC_GetValue(&hadc1);
 8000606:	4808      	ldr	r0, [pc, #32]	@ (8000628 <get_amp+0x28>)
 8000608:	f001 fa4e 	bl	8001aa8 <HAL_ADC_GetValue>
 800060c:	4603      	mov	r3, r0
 800060e:	80fb      	strh	r3, [r7, #6]
	return abs(temp - middle_point);
 8000610:	88fb      	ldrh	r3, [r7, #6]
 8000612:	4a06      	ldr	r2, [pc, #24]	@ (800062c <get_amp+0x2c>)
 8000614:	8812      	ldrh	r2, [r2, #0]
 8000616:	1a9b      	subs	r3, r3, r2
 8000618:	2b00      	cmp	r3, #0
 800061a:	bfb8      	it	lt
 800061c:	425b      	neglt	r3, r3
 800061e:	b29b      	uxth	r3, r3
}
 8000620:	4618      	mov	r0, r3
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000088 	.word	0x20000088
 800062c:	20000db8 	.word	0x20000db8

08000630 <HAL_TIM_PWM_PulseFinishedCallback>:



void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
    if (htim == &htim1) {
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	4a07      	ldr	r2, [pc, #28]	@ (8000658 <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 800063c:	4293      	cmp	r3, r2
 800063e:	d106      	bne.n	800064e <HAL_TIM_PWM_PulseFinishedCallback+0x1e>
        HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8000640:	2100      	movs	r1, #0
 8000642:	4805      	ldr	r0, [pc, #20]	@ (8000658 <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 8000644:	f003 f998 	bl	8003978 <HAL_TIM_PWM_Stop_DMA>
        datasentflag = 1;
 8000648:	4b04      	ldr	r3, [pc, #16]	@ (800065c <HAL_TIM_PWM_PulseFinishedCallback+0x2c>)
 800064a:	2201      	movs	r2, #1
 800064c:	601a      	str	r2, [r3, #0]
    }
}
 800064e:	bf00      	nop
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	200000d0 	.word	0x200000d0
 800065c:	20000330 	.word	0x20000330

08000660 <Set_LED>:


void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 8000660:	b480      	push	{r7}
 8000662:	b085      	sub	sp, #20
 8000664:	af00      	add	r7, sp, #0
 8000666:	60f8      	str	r0, [r7, #12]
 8000668:	60b9      	str	r1, [r7, #8]
 800066a:	607a      	str	r2, [r7, #4]
 800066c:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	b2d9      	uxtb	r1, r3
 8000672:	4a11      	ldr	r2, [pc, #68]	@ (80006b8 <Set_LED+0x58>)
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	b2d9      	uxtb	r1, r3
 800067e:	4a0e      	ldr	r2, [pc, #56]	@ (80006b8 <Set_LED+0x58>)
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	009b      	lsls	r3, r3, #2
 8000684:	4413      	add	r3, r2
 8000686:	460a      	mov	r2, r1
 8000688:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 800068a:	68bb      	ldr	r3, [r7, #8]
 800068c:	b2d9      	uxtb	r1, r3
 800068e:	4a0a      	ldr	r2, [pc, #40]	@ (80006b8 <Set_LED+0x58>)
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	009b      	lsls	r3, r3, #2
 8000694:	4413      	add	r3, r2
 8000696:	460a      	mov	r2, r1
 8000698:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	b2d9      	uxtb	r1, r3
 800069e:	4a06      	ldr	r2, [pc, #24]	@ (80006b8 <Set_LED+0x58>)
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	009b      	lsls	r3, r3, #2
 80006a4:	4413      	add	r3, r2
 80006a6:	460a      	mov	r2, r1
 80006a8:	70da      	strb	r2, [r3, #3]
}
 80006aa:	bf00      	nop
 80006ac:	3714      	adds	r7, #20
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	20000180 	.word	0x20000180

080006bc <Set_Brightness>:

void Set_Brightness (int brightness)  // 0–NORMAL_BRIGHTNESS
{
 80006bc:	b480      	push	{r7}
 80006be:	b085      	sub	sp, #20
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS
    if (brightness > NORMAL_BRIGHTNESS) brightness = NORMAL_BRIGHTNESS;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	2b14      	cmp	r3, #20
 80006c8:	dd01      	ble.n	80006ce <Set_Brightness+0x12>
 80006ca:	2314      	movs	r3, #20
 80006cc:	607b      	str	r3, [r7, #4]
    float scale = brightness / (float)NORMAL_BRIGHTNESS;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	ee07 3a90 	vmov	s15, r3
 80006d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006d8:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 80006dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006e0:	edc7 7a02 	vstr	s15, [r7, #8]

    for (int i = 0; i < MAX_LED; i++)
 80006e4:	2300      	movs	r3, #0
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	e055      	b.n	8000796 <Set_Brightness+0xda>
    {
        // preserve the “LED number” byte
        LED_Mod[i][0] = LED_Data[i][0];
 80006ea:	4a30      	ldr	r2, [pc, #192]	@ (80007ac <Set_Brightness+0xf0>)
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 80006f2:	4a2f      	ldr	r2, [pc, #188]	@ (80007b0 <Set_Brightness+0xf4>)
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
        // scale each color channel linearly
        LED_Mod[i][1] = (uint8_t)(LED_Data[i][1] * scale);
 80006fa:	4a2c      	ldr	r2, [pc, #176]	@ (80007ac <Set_Brightness+0xf0>)
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	009b      	lsls	r3, r3, #2
 8000700:	4413      	add	r3, r2
 8000702:	785b      	ldrb	r3, [r3, #1]
 8000704:	ee07 3a90 	vmov	s15, r3
 8000708:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800070c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000710:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000714:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000718:	edc7 7a00 	vstr	s15, [r7]
 800071c:	783b      	ldrb	r3, [r7, #0]
 800071e:	b2d9      	uxtb	r1, r3
 8000720:	4a23      	ldr	r2, [pc, #140]	@ (80007b0 <Set_Brightness+0xf4>)
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	009b      	lsls	r3, r3, #2
 8000726:	4413      	add	r3, r2
 8000728:	460a      	mov	r2, r1
 800072a:	705a      	strb	r2, [r3, #1]
        LED_Mod[i][2] = (uint8_t)(LED_Data[i][2] * scale);
 800072c:	4a1f      	ldr	r2, [pc, #124]	@ (80007ac <Set_Brightness+0xf0>)
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	009b      	lsls	r3, r3, #2
 8000732:	4413      	add	r3, r2
 8000734:	789b      	ldrb	r3, [r3, #2]
 8000736:	ee07 3a90 	vmov	s15, r3
 800073a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800073e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000746:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800074a:	edc7 7a00 	vstr	s15, [r7]
 800074e:	783b      	ldrb	r3, [r7, #0]
 8000750:	b2d9      	uxtb	r1, r3
 8000752:	4a17      	ldr	r2, [pc, #92]	@ (80007b0 <Set_Brightness+0xf4>)
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	009b      	lsls	r3, r3, #2
 8000758:	4413      	add	r3, r2
 800075a:	460a      	mov	r2, r1
 800075c:	709a      	strb	r2, [r3, #2]
        LED_Mod[i][3] = (uint8_t)(LED_Data[i][3] * scale);
 800075e:	4a13      	ldr	r2, [pc, #76]	@ (80007ac <Set_Brightness+0xf0>)
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	009b      	lsls	r3, r3, #2
 8000764:	4413      	add	r3, r2
 8000766:	78db      	ldrb	r3, [r3, #3]
 8000768:	ee07 3a90 	vmov	s15, r3
 800076c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000770:	edd7 7a02 	vldr	s15, [r7, #8]
 8000774:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000778:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800077c:	edc7 7a00 	vstr	s15, [r7]
 8000780:	783b      	ldrb	r3, [r7, #0]
 8000782:	b2d9      	uxtb	r1, r3
 8000784:	4a0a      	ldr	r2, [pc, #40]	@ (80007b0 <Set_Brightness+0xf4>)
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	009b      	lsls	r3, r3, #2
 800078a:	4413      	add	r3, r2
 800078c:	460a      	mov	r2, r1
 800078e:	70da      	strb	r2, [r3, #3]
    for (int i = 0; i < MAX_LED; i++)
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	3301      	adds	r3, #1
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	2b35      	cmp	r3, #53	@ 0x35
 800079a:	dda6      	ble.n	80006ea <Set_Brightness+0x2e>
    }
#endif
}
 800079c:	bf00      	nop
 800079e:	bf00      	nop
 80007a0:	3714      	adds	r7, #20
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	20000180 	.word	0x20000180
 80007b0:	20000258 	.word	0x20000258

080007b4 <WS2812_Send>:

void WS2812_Send (void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b086      	sub	sp, #24
 80007b8:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 80007ba:	2300      	movs	r3, #0
 80007bc:	617b      	str	r3, [r7, #20]
	uint32_t color;


	for (int i= 0; i<MAX_LED; i++)
 80007be:	2300      	movs	r3, #0
 80007c0:	613b      	str	r3, [r7, #16]
 80007c2:	e036      	b.n	8000832 <WS2812_Send+0x7e>
	{
#if USE_BRIGHTNESS
		color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
 80007c4:	4a2e      	ldr	r2, [pc, #184]	@ (8000880 <WS2812_Send+0xcc>)
 80007c6:	693b      	ldr	r3, [r7, #16]
 80007c8:	009b      	lsls	r3, r3, #2
 80007ca:	4413      	add	r3, r2
 80007cc:	785b      	ldrb	r3, [r3, #1]
 80007ce:	041a      	lsls	r2, r3, #16
 80007d0:	492b      	ldr	r1, [pc, #172]	@ (8000880 <WS2812_Send+0xcc>)
 80007d2:	693b      	ldr	r3, [r7, #16]
 80007d4:	009b      	lsls	r3, r3, #2
 80007d6:	440b      	add	r3, r1
 80007d8:	789b      	ldrb	r3, [r3, #2]
 80007da:	021b      	lsls	r3, r3, #8
 80007dc:	431a      	orrs	r2, r3
 80007de:	4928      	ldr	r1, [pc, #160]	@ (8000880 <WS2812_Send+0xcc>)
 80007e0:	693b      	ldr	r3, [r7, #16]
 80007e2:	009b      	lsls	r3, r3, #2
 80007e4:	440b      	add	r3, r1
 80007e6:	78db      	ldrb	r3, [r3, #3]
 80007e8:	4313      	orrs	r3, r2
 80007ea:	607b      	str	r3, [r7, #4]
#else
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
#endif

		for (int i=23; i>=0; i--)
 80007ec:	2317      	movs	r3, #23
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	e019      	b.n	8000826 <WS2812_Send+0x72>
		{
			if (color&(1<<i))
 80007f2:	2201      	movs	r2, #1
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	fa02 f303 	lsl.w	r3, r2, r3
 80007fa:	461a      	mov	r2, r3
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	4013      	ands	r3, r2
 8000800:	2b00      	cmp	r3, #0
 8000802:	d005      	beq.n	8000810 <WS2812_Send+0x5c>
			{
				pwmData[indx] = 60;  // 2/3 of 90
 8000804:	4a1f      	ldr	r2, [pc, #124]	@ (8000884 <WS2812_Send+0xd0>)
 8000806:	697b      	ldr	r3, [r7, #20]
 8000808:	213c      	movs	r1, #60	@ 0x3c
 800080a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800080e:	e004      	b.n	800081a <WS2812_Send+0x66>
			}

			else pwmData[indx] = 30;  // 1/3 of 90
 8000810:	4a1c      	ldr	r2, [pc, #112]	@ (8000884 <WS2812_Send+0xd0>)
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	211e      	movs	r1, #30
 8000816:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			indx++;
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	3301      	adds	r3, #1
 800081e:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	3b01      	subs	r3, #1
 8000824:	60fb      	str	r3, [r7, #12]
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	2b00      	cmp	r3, #0
 800082a:	dae2      	bge.n	80007f2 <WS2812_Send+0x3e>
	for (int i= 0; i<MAX_LED; i++)
 800082c:	693b      	ldr	r3, [r7, #16]
 800082e:	3301      	adds	r3, #1
 8000830:	613b      	str	r3, [r7, #16]
 8000832:	693b      	ldr	r3, [r7, #16]
 8000834:	2b35      	cmp	r3, #53	@ 0x35
 8000836:	ddc5      	ble.n	80007c4 <WS2812_Send+0x10>
		}

	}

	for (int i=0; i<50; i++)
 8000838:	2300      	movs	r3, #0
 800083a:	60bb      	str	r3, [r7, #8]
 800083c:	e00a      	b.n	8000854 <WS2812_Send+0xa0>
	{
		pwmData[indx] = 0;
 800083e:	4a11      	ldr	r2, [pc, #68]	@ (8000884 <WS2812_Send+0xd0>)
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	2100      	movs	r1, #0
 8000844:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	3301      	adds	r3, #1
 800084c:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 800084e:	68bb      	ldr	r3, [r7, #8]
 8000850:	3301      	adds	r3, #1
 8000852:	60bb      	str	r3, [r7, #8]
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	2b31      	cmp	r3, #49	@ 0x31
 8000858:	ddf1      	ble.n	800083e <WS2812_Send+0x8a>
	}

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 800085a:	697b      	ldr	r3, [r7, #20]
 800085c:	b29b      	uxth	r3, r3
 800085e:	4a09      	ldr	r2, [pc, #36]	@ (8000884 <WS2812_Send+0xd0>)
 8000860:	2100      	movs	r1, #0
 8000862:	4809      	ldr	r0, [pc, #36]	@ (8000888 <WS2812_Send+0xd4>)
 8000864:	f002 fec0 	bl	80035e8 <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag){};
 8000868:	bf00      	nop
 800086a:	4b08      	ldr	r3, [pc, #32]	@ (800088c <WS2812_Send+0xd8>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d0fb      	beq.n	800086a <WS2812_Send+0xb6>
	datasentflag = 0;
 8000872:	4b06      	ldr	r3, [pc, #24]	@ (800088c <WS2812_Send+0xd8>)
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
}
 8000878:	bf00      	nop
 800087a:	3718      	adds	r7, #24
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	20000258 	.word	0x20000258
 8000884:	20000334 	.word	0x20000334
 8000888:	200000d0 	.word	0x200000d0
 800088c:	20000330 	.word	0x20000330

08000890 <Set_LEDs_color_at_once>:
    *g = (uint8_t)(g_ * 255);
    *b = (uint8_t)(b_ * 255);
}

//effect
void Set_LEDs_color_at_once(int start, int end, int step, int r, int g, int b){
 8000890:	b580      	push	{r7, lr}
 8000892:	b086      	sub	sp, #24
 8000894:	af00      	add	r7, sp, #0
 8000896:	60f8      	str	r0, [r7, #12]
 8000898:	60b9      	str	r1, [r7, #8]
 800089a:	607a      	str	r2, [r7, #4]
 800089c:	603b      	str	r3, [r7, #0]
	for (int pos = start; pos < end; pos += step){
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	617b      	str	r3, [r7, #20]
 80008a2:	e009      	b.n	80008b8 <Set_LEDs_color_at_once+0x28>
		Set_LED(pos, r, g, b);		// purple
 80008a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008a6:	6a3a      	ldr	r2, [r7, #32]
 80008a8:	6839      	ldr	r1, [r7, #0]
 80008aa:	6978      	ldr	r0, [r7, #20]
 80008ac:	f7ff fed8 	bl	8000660 <Set_LED>
	for (int pos = start; pos < end; pos += step){
 80008b0:	697a      	ldr	r2, [r7, #20]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4413      	add	r3, r2
 80008b6:	617b      	str	r3, [r7, #20]
 80008b8:	697a      	ldr	r2, [r7, #20]
 80008ba:	68bb      	ldr	r3, [r7, #8]
 80008bc:	429a      	cmp	r2, r3
 80008be:	dbf1      	blt.n	80008a4 <Set_LEDs_color_at_once+0x14>
	}
}
 80008c0:	bf00      	nop
 80008c2:	bf00      	nop
 80008c4:	3718      	adds	r7, #24
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}

080008ca <Turn_off_all_at_once>:
	WS2812_Send();
}



void Turn_off_all_at_once(void){
 80008ca:	b580      	push	{r7, lr}
 80008cc:	b082      	sub	sp, #8
 80008ce:	af02      	add	r7, sp, #8
	Set_LEDs_color_at_once(0, MAX_LED, 1, 0, 0, 0);
 80008d0:	2300      	movs	r3, #0
 80008d2:	9301      	str	r3, [sp, #4]
 80008d4:	2300      	movs	r3, #0
 80008d6:	9300      	str	r3, [sp, #0]
 80008d8:	2300      	movs	r3, #0
 80008da:	2201      	movs	r2, #1
 80008dc:	2136      	movs	r1, #54	@ 0x36
 80008de:	2000      	movs	r0, #0
 80008e0:	f7ff ffd6 	bl	8000890 <Set_LEDs_color_at_once>
	Set_Brightness(NORMAL_BRIGHTNESS);
 80008e4:	2014      	movs	r0, #20
 80008e6:	f7ff fee9 	bl	80006bc <Set_Brightness>
	WS2812_Send();
 80008ea:	f7ff ff63 	bl	80007b4 <WS2812_Send>
}
 80008ee:	bf00      	nop
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <effect_sound_color>:
    *red = rr;
    *green = gg;
    *blue = bb;
}

void effect_sound_color(uint16_t amplitude) {
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08a      	sub	sp, #40	@ 0x28
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	80fb      	strh	r3, [r7, #6]
    float ratio = (float)amplitude / amp_maxn;
 80008fe:	88fb      	ldrh	r3, [r7, #6]
 8000900:	ee07 3a90 	vmov	s15, r3
 8000904:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000908:	4b6c      	ldr	r3, [pc, #432]	@ (8000abc <effect_sound_color+0x1c8>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	ee07 3a90 	vmov	s15, r3
 8000910:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000914:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000918:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    if (ratio > 1.0) ratio = 1.0;
 800091c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000920:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000924:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800092c:	dd02      	ble.n	8000934 <effect_sound_color+0x40>
 800092e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000932:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ratio <= 0.05f) {
 8000934:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000938:	ed9f 7a61 	vldr	s14, [pc, #388]	@ 8000ac0 <effect_sound_color+0x1cc>
 800093c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000944:	d804      	bhi.n	8000950 <effect_sound_color+0x5c>
    	Turn_off_all_at_once();
 8000946:	f7ff ffc0 	bl	80008ca <Turn_off_all_at_once>
    	WS2812_Send();
 800094a:	f7ff ff33 	bl	80007b4 <WS2812_Send>
    	return;
 800094e:	e0b1      	b.n	8000ab4 <effect_sound_color+0x1c0>
    }

    int brightness = 5 + (int)(ratio * (NORMAL_BRIGHTNESS - 5));
 8000950:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000954:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8000958:	ee67 7a87 	vmul.f32	s15, s15, s14
 800095c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000960:	ee17 3a90 	vmov	r3, s15
 8000964:	3305      	adds	r3, #5
 8000966:	61bb      	str	r3, [r7, #24]
    Set_Brightness(brightness);
 8000968:	69b8      	ldr	r0, [r7, #24]
 800096a:	f7ff fea7 	bl	80006bc <Set_Brightness>

    uint8_t r, g, b;

    if (ratio < 0.5f) {
 800096e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000972:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000976:	eef4 7ac7 	vcmpe.f32	s15, s14
 800097a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800097e:	d52d      	bpl.n	80009dc <effect_sound_color+0xe8>
        float t = ratio / 0.5f;
 8000980:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8000984:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8000988:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800098c:	edc7 7a02 	vstr	s15, [r7, #8]
        r = (uint8_t)(0 + t * (148 - 0));
 8000990:	edd7 7a02 	vldr	s15, [r7, #8]
 8000994:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8000ac4 <effect_sound_color+0x1d0>
 8000998:	ee67 7a87 	vmul.f32	s15, s15, s14
 800099c:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8000ac8 <effect_sound_color+0x1d4>
 80009a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80009a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009a8:	edc7 7a00 	vstr	s15, [r7]
 80009ac:	783b      	ldrb	r3, [r7, #0]
 80009ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        g = 0;
 80009b2:	2300      	movs	r3, #0
 80009b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        b = (uint8_t)(255 + t * (211 - 255));
 80009b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80009bc:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8000acc <effect_sound_color+0x1d8>
 80009c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009c4:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8000ad0 <effect_sound_color+0x1dc>
 80009c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80009cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009d0:	edc7 7a00 	vstr	s15, [r7]
 80009d4:	783b      	ldrb	r3, [r7, #0]
 80009d6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 80009da:	e057      	b.n	8000a8c <effect_sound_color+0x198>
    } else {
        float t = (ratio - 0.5f) / 0.5f;
 80009dc:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80009e0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80009e4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80009e8:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 80009ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009f0:	edc7 7a05 	vstr	s15, [r7, #20]
        if (t < 0.5f) {
 80009f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80009f8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80009fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a04:	d51f      	bpl.n	8000a46 <effect_sound_color+0x152>
            float t2 = t / 0.5f;
 8000a06:	ed97 7a05 	vldr	s14, [r7, #20]
 8000a0a:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8000a0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a12:	edc7 7a03 	vstr	s15, [r7, #12]
            r = 255;
 8000a16:	23ff      	movs	r3, #255	@ 0xff
 8000a18:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            g = (uint8_t)(0 + t2 * (127 - 0));
 8000a1c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a20:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8000ad4 <effect_sound_color+0x1e0>
 8000a24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a28:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8000ac8 <effect_sound_color+0x1d4>
 8000a2c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000a30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a34:	edc7 7a00 	vstr	s15, [r7]
 8000a38:	783b      	ldrb	r3, [r7, #0]
 8000a3a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            b = 0;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 8000a44:	e022      	b.n	8000a8c <effect_sound_color+0x198>
        } else {
            float t2 = (t - 0.5f) / 0.5f;
 8000a46:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a4a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000a4e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000a52:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8000a56:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a5a:	edc7 7a04 	vstr	s15, [r7, #16]
            r = 255;
 8000a5e:	23ff      	movs	r3, #255	@ 0xff
 8000a60:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            g = (uint8_t)(127 + t2 * (255 - 127));
 8000a64:	edd7 7a04 	vldr	s15, [r7, #16]
 8000a68:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8000ad8 <effect_sound_color+0x1e4>
 8000a6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a70:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8000ad4 <effect_sound_color+0x1e0>
 8000a74:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000a78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a7c:	edc7 7a00 	vstr	s15, [r7]
 8000a80:	783b      	ldrb	r3, [r7, #0]
 8000a82:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            b = 0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        }
    }

    for (int i = 0; i < MAX_LED; i++) {
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	61fb      	str	r3, [r7, #28]
 8000a90:	e00b      	b.n	8000aaa <effect_sound_color+0x1b6>
        Set_LED(i, r, g, b);
 8000a92:	f897 1023 	ldrb.w	r1, [r7, #35]	@ 0x23
 8000a96:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8000a9a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8000a9e:	69f8      	ldr	r0, [r7, #28]
 8000aa0:	f7ff fdde 	bl	8000660 <Set_LED>
    for (int i = 0; i < MAX_LED; i++) {
 8000aa4:	69fb      	ldr	r3, [r7, #28]
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	61fb      	str	r3, [r7, #28]
 8000aaa:	69fb      	ldr	r3, [r7, #28]
 8000aac:	2b35      	cmp	r3, #53	@ 0x35
 8000aae:	ddf0      	ble.n	8000a92 <effect_sound_color+0x19e>
    }
    WS2812_Send();
 8000ab0:	f7ff fe80 	bl	80007b4 <WS2812_Send>
}
 8000ab4:	3728      	adds	r7, #40	@ 0x28
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20000000 	.word	0x20000000
 8000ac0:	3d4ccccd 	.word	0x3d4ccccd
 8000ac4:	43140000 	.word	0x43140000
 8000ac8:	00000000 	.word	0x00000000
 8000acc:	c2300000 	.word	0xc2300000
 8000ad0:	437f0000 	.word	0x437f0000
 8000ad4:	42fe0000 	.word	0x42fe0000
 8000ad8:	43000000 	.word	0x43000000

08000adc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	srand(HAL_GetTick());
 8000ae0:	f000 fcce 	bl	8001480 <HAL_GetTick>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f003 fe6a 	bl	80047c0 <srand>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aec:	f000 fc62 	bl	80013b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000af0:	f000 f85a 	bl	8000ba8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000af4:	f000 f9d4 	bl	8000ea0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000af8:	f000 f9b2 	bl	8000e60 <MX_DMA_Init>
  MX_TIM1_Init();
 8000afc:	f000 f910 	bl	8000d20 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000b00:	f000 f8bc 	bl	8000c7c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// DUNG CO DUNG VAO
  calculate_middle_point();
 8000b04:	f7ff fd4a 	bl	800059c <calculate_middle_point>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start(&hadc1);
 8000b08:	4823      	ldr	r0, [pc, #140]	@ (8000b98 <main+0xbc>)
 8000b0a:	f000 fd2d 	bl	8001568 <HAL_ADC_Start>
	  if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK)
 8000b0e:	210a      	movs	r1, #10
 8000b10:	4821      	ldr	r0, [pc, #132]	@ (8000b98 <main+0xbc>)
 8000b12:	f000 fe2e 	bl	8001772 <HAL_ADC_PollForConversion>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d105      	bne.n	8000b28 <main+0x4c>
		  amp = get_amp();
 8000b1c:	f7ff fd70 	bl	8000600 <get_amp>
 8000b20:	4603      	mov	r3, r0
 8000b22:	461a      	mov	r2, r3
 8000b24:	4b1d      	ldr	r3, [pc, #116]	@ (8000b9c <main+0xc0>)
 8000b26:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc1);
 8000b28:	481b      	ldr	r0, [pc, #108]	@ (8000b98 <main+0xbc>)
 8000b2a:	f000 fdef 	bl	800170c <HAL_ADC_Stop>
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
      // This for running every blink effect
	  // BEGIN
	  if (!led_is_on && amp > 700)
 8000b2e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ba0 <main+0xc4>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	f083 0301 	eor.w	r3, r3, #1
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d00c      	beq.n	8000b56 <main+0x7a>
 8000b3c:	4b17      	ldr	r3, [pc, #92]	@ (8000b9c <main+0xc0>)
 8000b3e:	881b      	ldrh	r3, [r3, #0]
 8000b40:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8000b44:	d907      	bls.n	8000b56 <main+0x7a>
      {
          led_on_start = HAL_GetTick();
 8000b46:	f000 fc9b 	bl	8001480 <HAL_GetTick>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	4a15      	ldr	r2, [pc, #84]	@ (8000ba4 <main+0xc8>)
 8000b4e:	6013      	str	r3, [r2, #0]
          led_is_on    = true;
 8000b50:	4b13      	ldr	r3, [pc, #76]	@ (8000ba0 <main+0xc4>)
 8000b52:	2201      	movs	r2, #1
 8000b54:	701a      	strb	r2, [r3, #0]
      }

      /* While led_is_on, run effect; after 50 ms, stop --- */
      if (led_is_on)
 8000b56:	4b12      	ldr	r3, [pc, #72]	@ (8000ba0 <main+0xc4>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d014      	beq.n	8000b88 <main+0xac>
      {
    	  effect_sound_color(amp);
 8000b5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b9c <main+0xc0>)
 8000b60:	881b      	ldrh	r3, [r3, #0]
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff fec6 	bl	80008f4 <effect_sound_color>
//    	  ripple_effect(amp);
//    	  effect_random_one_in_six_leds_by_sound(amp);

          if ((HAL_GetTick() - led_on_start) >= 50)
 8000b68:	f000 fc8a 	bl	8001480 <HAL_GetTick>
 8000b6c:	4602      	mov	r2, r0
 8000b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ba4 <main+0xc8>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	1ad3      	subs	r3, r2, r3
 8000b74:	2b31      	cmp	r3, #49	@ 0x31
 8000b76:	d90b      	bls.n	8000b90 <main+0xb4>
          {
              Turn_off_all_at_once();
 8000b78:	f7ff fea7 	bl	80008ca <Turn_off_all_at_once>
              WS2812_Send();
 8000b7c:	f7ff fe1a 	bl	80007b4 <WS2812_Send>
              led_is_on = false;
 8000b80:	4b07      	ldr	r3, [pc, #28]	@ (8000ba0 <main+0xc4>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	701a      	strb	r2, [r3, #0]
 8000b86:	e003      	b.n	8000b90 <main+0xb4>
          }
      }
      else
      {
          Turn_off_all_at_once();
 8000b88:	f7ff fe9f 	bl	80008ca <Turn_off_all_at_once>
          WS2812_Send();
 8000b8c:	f7ff fe12 	bl	80007b4 <WS2812_Send>
	  //BEGIN this for running hue effect
      //sound_bar_hue_gradient(amp);
      // END

      //This line get the sample of the mic at 1KHz
	  HAL_Delay(1);
 8000b90:	2001      	movs	r0, #1
 8000b92:	f000 fc81 	bl	8001498 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 8000b96:	e7b7      	b.n	8000b08 <main+0x2c>
 8000b98:	20000088 	.word	0x20000088
 8000b9c:	20000178 	.word	0x20000178
 8000ba0:	2000017a 	.word	0x2000017a
 8000ba4:	2000017c 	.word	0x2000017c

08000ba8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b094      	sub	sp, #80	@ 0x50
 8000bac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bae:	f107 0320 	add.w	r3, r7, #32
 8000bb2:	2230      	movs	r2, #48	@ 0x30
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f003 ff35 	bl	8004a26 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bbc:	f107 030c 	add.w	r3, r7, #12
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
 8000bca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60bb      	str	r3, [r7, #8]
 8000bd0:	4b28      	ldr	r3, [pc, #160]	@ (8000c74 <SystemClock_Config+0xcc>)
 8000bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd4:	4a27      	ldr	r2, [pc, #156]	@ (8000c74 <SystemClock_Config+0xcc>)
 8000bd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bda:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bdc:	4b25      	ldr	r3, [pc, #148]	@ (8000c74 <SystemClock_Config+0xcc>)
 8000bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000be4:	60bb      	str	r3, [r7, #8]
 8000be6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000be8:	2300      	movs	r3, #0
 8000bea:	607b      	str	r3, [r7, #4]
 8000bec:	4b22      	ldr	r3, [pc, #136]	@ (8000c78 <SystemClock_Config+0xd0>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a21      	ldr	r2, [pc, #132]	@ (8000c78 <SystemClock_Config+0xd0>)
 8000bf2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bf6:	6013      	str	r3, [r2, #0]
 8000bf8:	4b1f      	ldr	r3, [pc, #124]	@ (8000c78 <SystemClock_Config+0xd0>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c00:	607b      	str	r3, [r7, #4]
 8000c02:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c04:	2302      	movs	r3, #2
 8000c06:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c0c:	2310      	movs	r3, #16
 8000c0e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c10:	2302      	movs	r3, #2
 8000c12:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c14:	2300      	movs	r3, #0
 8000c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c18:	2308      	movs	r3, #8
 8000c1a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000c1c:	2348      	movs	r3, #72	@ 0x48
 8000c1e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c20:	2302      	movs	r3, #2
 8000c22:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c24:	2304      	movs	r3, #4
 8000c26:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c28:	f107 0320 	add.w	r3, r7, #32
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f001 ffcf 	bl	8002bd0 <HAL_RCC_OscConfig>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c38:	f000 f96e 	bl	8000f18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c3c:	230f      	movs	r3, #15
 8000c3e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c40:	2302      	movs	r3, #2
 8000c42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c44:	2300      	movs	r3, #0
 8000c46:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c4c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c52:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c54:	f107 030c 	add.w	r3, r7, #12
 8000c58:	2102      	movs	r1, #2
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f002 fa30 	bl	80030c0 <HAL_RCC_ClockConfig>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000c66:	f000 f957 	bl	8000f18 <Error_Handler>
  }
}
 8000c6a:	bf00      	nop
 8000c6c:	3750      	adds	r7, #80	@ 0x50
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40023800 	.word	0x40023800
 8000c78:	40007000 	.word	0x40007000

08000c7c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c82:	463b      	mov	r3, r7
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c8e:	4b21      	ldr	r3, [pc, #132]	@ (8000d14 <MX_ADC1_Init+0x98>)
 8000c90:	4a21      	ldr	r2, [pc, #132]	@ (8000d18 <MX_ADC1_Init+0x9c>)
 8000c92:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000c94:	4b1f      	ldr	r3, [pc, #124]	@ (8000d14 <MX_ADC1_Init+0x98>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c9a:	4b1e      	ldr	r3, [pc, #120]	@ (8000d14 <MX_ADC1_Init+0x98>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000ca0:	4b1c      	ldr	r3, [pc, #112]	@ (8000d14 <MX_ADC1_Init+0x98>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ca6:	4b1b      	ldr	r3, [pc, #108]	@ (8000d14 <MX_ADC1_Init+0x98>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cac:	4b19      	ldr	r3, [pc, #100]	@ (8000d14 <MX_ADC1_Init+0x98>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cb4:	4b17      	ldr	r3, [pc, #92]	@ (8000d14 <MX_ADC1_Init+0x98>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cba:	4b16      	ldr	r3, [pc, #88]	@ (8000d14 <MX_ADC1_Init+0x98>)
 8000cbc:	4a17      	ldr	r2, [pc, #92]	@ (8000d1c <MX_ADC1_Init+0xa0>)
 8000cbe:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cc0:	4b14      	ldr	r3, [pc, #80]	@ (8000d14 <MX_ADC1_Init+0x98>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000cc6:	4b13      	ldr	r3, [pc, #76]	@ (8000d14 <MX_ADC1_Init+0x98>)
 8000cc8:	2201      	movs	r2, #1
 8000cca:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ccc:	4b11      	ldr	r3, [pc, #68]	@ (8000d14 <MX_ADC1_Init+0x98>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cd4:	4b0f      	ldr	r3, [pc, #60]	@ (8000d14 <MX_ADC1_Init+0x98>)
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cda:	480e      	ldr	r0, [pc, #56]	@ (8000d14 <MX_ADC1_Init+0x98>)
 8000cdc:	f000 fc00 	bl	80014e0 <HAL_ADC_Init>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000ce6:	f000 f917 	bl	8000f18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000cea:	2300      	movs	r3, #0
 8000cec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cf6:	463b      	mov	r3, r7
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4806      	ldr	r0, [pc, #24]	@ (8000d14 <MX_ADC1_Init+0x98>)
 8000cfc:	f000 ff00 	bl	8001b00 <HAL_ADC_ConfigChannel>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000d06:	f000 f907 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d0a:	bf00      	nop
 8000d0c:	3710      	adds	r7, #16
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000088 	.word	0x20000088
 8000d18:	40012000 	.word	0x40012000
 8000d1c:	0f000001 	.word	0x0f000001

08000d20 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b096      	sub	sp, #88	@ 0x58
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d26:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	605a      	str	r2, [r3, #4]
 8000d30:	609a      	str	r2, [r3, #8]
 8000d32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d34:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	605a      	str	r2, [r3, #4]
 8000d48:	609a      	str	r2, [r3, #8]
 8000d4a:	60da      	str	r2, [r3, #12]
 8000d4c:	611a      	str	r2, [r3, #16]
 8000d4e:	615a      	str	r2, [r3, #20]
 8000d50:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d52:	1d3b      	adds	r3, r7, #4
 8000d54:	2220      	movs	r2, #32
 8000d56:	2100      	movs	r1, #0
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f003 fe64 	bl	8004a26 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d5e:	4b3e      	ldr	r3, [pc, #248]	@ (8000e58 <MX_TIM1_Init+0x138>)
 8000d60:	4a3e      	ldr	r2, [pc, #248]	@ (8000e5c <MX_TIM1_Init+0x13c>)
 8000d62:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000d64:	4b3c      	ldr	r3, [pc, #240]	@ (8000e58 <MX_TIM1_Init+0x138>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d6a:	4b3b      	ldr	r3, [pc, #236]	@ (8000e58 <MX_TIM1_Init+0x138>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90 - 1;
 8000d70:	4b39      	ldr	r3, [pc, #228]	@ (8000e58 <MX_TIM1_Init+0x138>)
 8000d72:	2259      	movs	r2, #89	@ 0x59
 8000d74:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d76:	4b38      	ldr	r3, [pc, #224]	@ (8000e58 <MX_TIM1_Init+0x138>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d7c:	4b36      	ldr	r3, [pc, #216]	@ (8000e58 <MX_TIM1_Init+0x138>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d82:	4b35      	ldr	r3, [pc, #212]	@ (8000e58 <MX_TIM1_Init+0x138>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d88:	4833      	ldr	r0, [pc, #204]	@ (8000e58 <MX_TIM1_Init+0x138>)
 8000d8a:	f002 fb85 	bl	8003498 <HAL_TIM_Base_Init>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000d94:	f000 f8c0 	bl	8000f18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d9c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d9e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000da2:	4619      	mov	r1, r3
 8000da4:	482c      	ldr	r0, [pc, #176]	@ (8000e58 <MX_TIM1_Init+0x138>)
 8000da6:	f002 ff7b 	bl	8003ca0 <HAL_TIM_ConfigClockSource>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000db0:	f000 f8b2 	bl	8000f18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000db4:	4828      	ldr	r0, [pc, #160]	@ (8000e58 <MX_TIM1_Init+0x138>)
 8000db6:	f002 fbbe 	bl	8003536 <HAL_TIM_PWM_Init>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000dc0:	f000 f8aa 	bl	8000f18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000dcc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4821      	ldr	r0, [pc, #132]	@ (8000e58 <MX_TIM1_Init+0x138>)
 8000dd4:	f003 fc26 	bl	8004624 <HAL_TIMEx_MasterConfigSynchronization>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000dde:	f000 f89b 	bl	8000f18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000de2:	2360      	movs	r3, #96	@ 0x60
 8000de4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000de6:	2300      	movs	r3, #0
 8000de8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dea:	2300      	movs	r3, #0
 8000dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000dee:	2300      	movs	r3, #0
 8000df0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000df2:	2300      	movs	r3, #0
 8000df4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000df6:	2300      	movs	r3, #0
 8000df8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e02:	2200      	movs	r2, #0
 8000e04:	4619      	mov	r1, r3
 8000e06:	4814      	ldr	r0, [pc, #80]	@ (8000e58 <MX_TIM1_Init+0x138>)
 8000e08:	f002 fe88 	bl	8003b1c <HAL_TIM_PWM_ConfigChannel>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000e12:	f000 f881 	bl	8000f18 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e16:	2300      	movs	r3, #0
 8000e18:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e2a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e2e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e30:	2300      	movs	r3, #0
 8000e32:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e34:	1d3b      	adds	r3, r7, #4
 8000e36:	4619      	mov	r1, r3
 8000e38:	4807      	ldr	r0, [pc, #28]	@ (8000e58 <MX_TIM1_Init+0x138>)
 8000e3a:	f003 fc6f 	bl	800471c <HAL_TIMEx_ConfigBreakDeadTime>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000e44:	f000 f868 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e48:	4803      	ldr	r0, [pc, #12]	@ (8000e58 <MX_TIM1_Init+0x138>)
 8000e4a:	f000 f933 	bl	80010b4 <HAL_TIM_MspPostInit>

}
 8000e4e:	bf00      	nop
 8000e50:	3758      	adds	r7, #88	@ 0x58
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	200000d0 	.word	0x200000d0
 8000e5c:	40010000 	.word	0x40010000

08000e60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	607b      	str	r3, [r7, #4]
 8000e6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e9c <MX_DMA_Init+0x3c>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6e:	4a0b      	ldr	r2, [pc, #44]	@ (8000e9c <MX_DMA_Init+0x3c>)
 8000e70:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e76:	4b09      	ldr	r3, [pc, #36]	@ (8000e9c <MX_DMA_Init+0x3c>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e7e:	607b      	str	r3, [r7, #4]
 8000e80:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2105      	movs	r1, #5
 8000e86:	2039      	movs	r0, #57	@ 0x39
 8000e88:	f001 f93d 	bl	8002106 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000e8c:	2039      	movs	r0, #57	@ 0x39
 8000e8e:	f001 f956 	bl	800213e <HAL_NVIC_EnableIRQ>

}
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40023800 	.word	0x40023800

08000ea0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b088      	sub	sp, #32
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60bb      	str	r3, [r7, #8]
 8000eaa:	4b19      	ldr	r3, [pc, #100]	@ (8000f10 <MX_GPIO_Init+0x70>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eae:	4a18      	ldr	r2, [pc, #96]	@ (8000f10 <MX_GPIO_Init+0x70>)
 8000eb0:	f043 0301 	orr.w	r3, r3, #1
 8000eb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eb6:	4b16      	ldr	r3, [pc, #88]	@ (8000f10 <MX_GPIO_Init+0x70>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	60bb      	str	r3, [r7, #8]
 8000ec0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	607b      	str	r3, [r7, #4]
 8000ec6:	4b12      	ldr	r3, [pc, #72]	@ (8000f10 <MX_GPIO_Init+0x70>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eca:	4a11      	ldr	r2, [pc, #68]	@ (8000f10 <MX_GPIO_Init+0x70>)
 8000ecc:	f043 0310 	orr.w	r3, r3, #16
 8000ed0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ed2:	4b0f      	ldr	r3, [pc, #60]	@ (8000f10 <MX_GPIO_Init+0x70>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed6:	f003 0310 	and.w	r3, r3, #16
 8000eda:	607b      	str	r3, [r7, #4]
 8000edc:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ede:	f107 030c 	add.w	r3, r7, #12
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]
 8000ee8:	609a      	str	r2, [r3, #8]
 8000eea:	60da      	str	r2, [r3, #12]
 8000eec:	611a      	str	r2, [r3, #16]
     GPIO_InitStruct.Pin  = GPIO_PIN_0;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	60fb      	str	r3, [r7, #12]
     GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	613b      	str	r3, [r7, #16]
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	617b      	str	r3, [r7, #20]
     HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efa:	f107 030c 	add.w	r3, r7, #12
 8000efe:	4619      	mov	r1, r3
 8000f00:	4804      	ldr	r0, [pc, #16]	@ (8000f14 <MX_GPIO_Init+0x74>)
 8000f02:	f001 fcc9 	bl	8002898 <HAL_GPIO_Init>
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000f06:	bf00      	nop
 8000f08:	3720      	adds	r7, #32
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40023800 	.word	0x40023800
 8000f14:	40020000 	.word	0x40020000

08000f18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f1c:	b672      	cpsid	i
}
 8000f1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f20:	bf00      	nop
 8000f22:	e7fd      	b.n	8000f20 <Error_Handler+0x8>

08000f24 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	607b      	str	r3, [r7, #4]
 8000f2e:	4b10      	ldr	r3, [pc, #64]	@ (8000f70 <HAL_MspInit+0x4c>)
 8000f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f32:	4a0f      	ldr	r2, [pc, #60]	@ (8000f70 <HAL_MspInit+0x4c>)
 8000f34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f38:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f70 <HAL_MspInit+0x4c>)
 8000f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f42:	607b      	str	r3, [r7, #4]
 8000f44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	603b      	str	r3, [r7, #0]
 8000f4a:	4b09      	ldr	r3, [pc, #36]	@ (8000f70 <HAL_MspInit+0x4c>)
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f4e:	4a08      	ldr	r2, [pc, #32]	@ (8000f70 <HAL_MspInit+0x4c>)
 8000f50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f54:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f56:	4b06      	ldr	r3, [pc, #24]	@ (8000f70 <HAL_MspInit+0x4c>)
 8000f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f5e:	603b      	str	r3, [r7, #0]
 8000f60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f62:	bf00      	nop
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	40023800 	.word	0x40023800

08000f74 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08a      	sub	sp, #40	@ 0x28
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7c:	f107 0314 	add.w	r3, r7, #20
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
 8000f8a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a1b      	ldr	r2, [pc, #108]	@ (8001000 <HAL_ADC_MspInit+0x8c>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d12f      	bne.n	8000ff6 <HAL_ADC_MspInit+0x82>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	613b      	str	r3, [r7, #16]
 8000f9a:	4b1a      	ldr	r3, [pc, #104]	@ (8001004 <HAL_ADC_MspInit+0x90>)
 8000f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f9e:	4a19      	ldr	r2, [pc, #100]	@ (8001004 <HAL_ADC_MspInit+0x90>)
 8000fa0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fa4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fa6:	4b17      	ldr	r3, [pc, #92]	@ (8001004 <HAL_ADC_MspInit+0x90>)
 8000fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000faa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fae:	613b      	str	r3, [r7, #16]
 8000fb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	4b13      	ldr	r3, [pc, #76]	@ (8001004 <HAL_ADC_MspInit+0x90>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fba:	4a12      	ldr	r2, [pc, #72]	@ (8001004 <HAL_ADC_MspInit+0x90>)
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fc2:	4b10      	ldr	r3, [pc, #64]	@ (8001004 <HAL_ADC_MspInit+0x90>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fda:	f107 0314 	add.w	r3, r7, #20
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4809      	ldr	r0, [pc, #36]	@ (8001008 <HAL_ADC_MspInit+0x94>)
 8000fe2:	f001 fc59 	bl	8002898 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	2100      	movs	r1, #0
 8000fea:	2012      	movs	r0, #18
 8000fec:	f001 f88b 	bl	8002106 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000ff0:	2012      	movs	r0, #18
 8000ff2:	f001 f8a4 	bl	800213e <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000ff6:	bf00      	nop
 8000ff8:	3728      	adds	r7, #40	@ 0x28
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40012000 	.word	0x40012000
 8001004:	40023800 	.word	0x40023800
 8001008:	40020000 	.word	0x40020000

0800100c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a22      	ldr	r2, [pc, #136]	@ (80010a4 <HAL_TIM_Base_MspInit+0x98>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d13e      	bne.n	800109c <HAL_TIM_Base_MspInit+0x90>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	4b21      	ldr	r3, [pc, #132]	@ (80010a8 <HAL_TIM_Base_MspInit+0x9c>)
 8001024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001026:	4a20      	ldr	r2, [pc, #128]	@ (80010a8 <HAL_TIM_Base_MspInit+0x9c>)
 8001028:	f043 0301 	orr.w	r3, r3, #1
 800102c:	6453      	str	r3, [r2, #68]	@ 0x44
 800102e:	4b1e      	ldr	r3, [pc, #120]	@ (80010a8 <HAL_TIM_Base_MspInit+0x9c>)
 8001030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 800103a:	4b1c      	ldr	r3, [pc, #112]	@ (80010ac <HAL_TIM_Base_MspInit+0xa0>)
 800103c:	4a1c      	ldr	r2, [pc, #112]	@ (80010b0 <HAL_TIM_Base_MspInit+0xa4>)
 800103e:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8001040:	4b1a      	ldr	r3, [pc, #104]	@ (80010ac <HAL_TIM_Base_MspInit+0xa0>)
 8001042:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8001046:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001048:	4b18      	ldr	r3, [pc, #96]	@ (80010ac <HAL_TIM_Base_MspInit+0xa0>)
 800104a:	2240      	movs	r2, #64	@ 0x40
 800104c:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800104e:	4b17      	ldr	r3, [pc, #92]	@ (80010ac <HAL_TIM_Base_MspInit+0xa0>)
 8001050:	2200      	movs	r2, #0
 8001052:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001054:	4b15      	ldr	r3, [pc, #84]	@ (80010ac <HAL_TIM_Base_MspInit+0xa0>)
 8001056:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800105a:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800105c:	4b13      	ldr	r3, [pc, #76]	@ (80010ac <HAL_TIM_Base_MspInit+0xa0>)
 800105e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001062:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001064:	4b11      	ldr	r3, [pc, #68]	@ (80010ac <HAL_TIM_Base_MspInit+0xa0>)
 8001066:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800106a:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 800106c:	4b0f      	ldr	r3, [pc, #60]	@ (80010ac <HAL_TIM_Base_MspInit+0xa0>)
 800106e:	2200      	movs	r2, #0
 8001070:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8001072:	4b0e      	ldr	r3, [pc, #56]	@ (80010ac <HAL_TIM_Base_MspInit+0xa0>)
 8001074:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001078:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800107a:	4b0c      	ldr	r3, [pc, #48]	@ (80010ac <HAL_TIM_Base_MspInit+0xa0>)
 800107c:	2200      	movs	r2, #0
 800107e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001080:	480a      	ldr	r0, [pc, #40]	@ (80010ac <HAL_TIM_Base_MspInit+0xa0>)
 8001082:	f001 f877 	bl	8002174 <HAL_DMA_Init>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 800108c:	f7ff ff44 	bl	8000f18 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	4a06      	ldr	r2, [pc, #24]	@ (80010ac <HAL_TIM_Base_MspInit+0xa0>)
 8001094:	625a      	str	r2, [r3, #36]	@ 0x24
 8001096:	4a05      	ldr	r2, [pc, #20]	@ (80010ac <HAL_TIM_Base_MspInit+0xa0>)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 800109c:	bf00      	nop
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40010000 	.word	0x40010000
 80010a8:	40023800 	.word	0x40023800
 80010ac:	20000118 	.word	0x20000118
 80010b0:	40026428 	.word	0x40026428

080010b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b088      	sub	sp, #32
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010bc:	f107 030c 	add.w	r3, r7, #12
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a12      	ldr	r2, [pc, #72]	@ (800111c <HAL_TIM_MspPostInit+0x68>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d11e      	bne.n	8001114 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	60bb      	str	r3, [r7, #8]
 80010da:	4b11      	ldr	r3, [pc, #68]	@ (8001120 <HAL_TIM_MspPostInit+0x6c>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010de:	4a10      	ldr	r2, [pc, #64]	@ (8001120 <HAL_TIM_MspPostInit+0x6c>)
 80010e0:	f043 0310 	orr.w	r3, r3, #16
 80010e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001120 <HAL_TIM_MspPostInit+0x6c>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ea:	f003 0310 	and.w	r3, r3, #16
 80010ee:	60bb      	str	r3, [r7, #8]
 80010f0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = RGB_LED_Pin;
 80010f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010f6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f8:	2302      	movs	r3, #2
 80010fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001100:	2300      	movs	r3, #0
 8001102:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001104:	2301      	movs	r3, #1
 8001106:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(RGB_LED_GPIO_Port, &GPIO_InitStruct);
 8001108:	f107 030c 	add.w	r3, r7, #12
 800110c:	4619      	mov	r1, r3
 800110e:	4805      	ldr	r0, [pc, #20]	@ (8001124 <HAL_TIM_MspPostInit+0x70>)
 8001110:	f001 fbc2 	bl	8002898 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001114:	bf00      	nop
 8001116:	3720      	adds	r7, #32
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40010000 	.word	0x40010000
 8001120:	40023800 	.word	0x40023800
 8001124:	40021000 	.word	0x40021000

08001128 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800112c:	bf00      	nop
 800112e:	e7fd      	b.n	800112c <NMI_Handler+0x4>

08001130 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001134:	bf00      	nop
 8001136:	e7fd      	b.n	8001134 <HardFault_Handler+0x4>

08001138 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800113c:	bf00      	nop
 800113e:	e7fd      	b.n	800113c <MemManage_Handler+0x4>

08001140 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001144:	bf00      	nop
 8001146:	e7fd      	b.n	8001144 <BusFault_Handler+0x4>

08001148 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800114c:	bf00      	nop
 800114e:	e7fd      	b.n	800114c <UsageFault_Handler+0x4>

08001150 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr

0800115e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800115e:	b480      	push	{r7}
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr

0800117a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800117e:	f000 f96b 	bl	8001458 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
	...

08001188 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800118c:	4802      	ldr	r0, [pc, #8]	@ (8001198 <ADC_IRQHandler+0x10>)
 800118e:	f000 fb7b 	bl	8001888 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000088 	.word	0x20000088

0800119c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80011a0:	4802      	ldr	r0, [pc, #8]	@ (80011ac <DMA2_Stream1_IRQHandler+0x10>)
 80011a2:	f001 f90f 	bl	80023c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20000118 	.word	0x20000118

080011b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  return 1;
 80011b4:	2301      	movs	r3, #1
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <_kill>:

int _kill(int pid, int sig)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80011ca:	f003 fc7b 	bl	8004ac4 <__errno>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2216      	movs	r2, #22
 80011d2:	601a      	str	r2, [r3, #0]
  return -1;
 80011d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <_exit>:

void _exit (int status)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80011e8:	f04f 31ff 	mov.w	r1, #4294967295
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f7ff ffe7 	bl	80011c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80011f2:	bf00      	nop
 80011f4:	e7fd      	b.n	80011f2 <_exit+0x12>

080011f6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b086      	sub	sp, #24
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	60f8      	str	r0, [r7, #12]
 80011fe:	60b9      	str	r1, [r7, #8]
 8001200:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001202:	2300      	movs	r3, #0
 8001204:	617b      	str	r3, [r7, #20]
 8001206:	e00a      	b.n	800121e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001208:	f3af 8000 	nop.w
 800120c:	4601      	mov	r1, r0
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	1c5a      	adds	r2, r3, #1
 8001212:	60ba      	str	r2, [r7, #8]
 8001214:	b2ca      	uxtb	r2, r1
 8001216:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	3301      	adds	r3, #1
 800121c:	617b      	str	r3, [r7, #20]
 800121e:	697a      	ldr	r2, [r7, #20]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	429a      	cmp	r2, r3
 8001224:	dbf0      	blt.n	8001208 <_read+0x12>
  }

  return len;
 8001226:	687b      	ldr	r3, [r7, #4]
}
 8001228:	4618      	mov	r0, r3
 800122a:	3718      	adds	r7, #24
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800123c:	2300      	movs	r3, #0
 800123e:	617b      	str	r3, [r7, #20]
 8001240:	e009      	b.n	8001256 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	1c5a      	adds	r2, r3, #1
 8001246:	60ba      	str	r2, [r7, #8]
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	4618      	mov	r0, r3
 800124c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	3301      	adds	r3, #1
 8001254:	617b      	str	r3, [r7, #20]
 8001256:	697a      	ldr	r2, [r7, #20]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	429a      	cmp	r2, r3
 800125c:	dbf1      	blt.n	8001242 <_write+0x12>
  }
  return len;
 800125e:	687b      	ldr	r3, [r7, #4]
}
 8001260:	4618      	mov	r0, r3
 8001262:	3718      	adds	r7, #24
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <_close>:

int _close(int file)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001270:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001274:	4618      	mov	r0, r3
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001290:	605a      	str	r2, [r3, #4]
  return 0;
 8001292:	2300      	movs	r3, #0
}
 8001294:	4618      	mov	r0, r3
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <_isatty>:

int _isatty(int file)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012a8:	2301      	movs	r3, #1
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr

080012b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012b6:	b480      	push	{r7}
 80012b8:	b085      	sub	sp, #20
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	60f8      	str	r0, [r7, #12]
 80012be:	60b9      	str	r1, [r7, #8]
 80012c0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012c2:	2300      	movs	r3, #0
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3714      	adds	r7, #20
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012d8:	4a14      	ldr	r2, [pc, #80]	@ (800132c <_sbrk+0x5c>)
 80012da:	4b15      	ldr	r3, [pc, #84]	@ (8001330 <_sbrk+0x60>)
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012e4:	4b13      	ldr	r3, [pc, #76]	@ (8001334 <_sbrk+0x64>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d102      	bne.n	80012f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012ec:	4b11      	ldr	r3, [pc, #68]	@ (8001334 <_sbrk+0x64>)
 80012ee:	4a12      	ldr	r2, [pc, #72]	@ (8001338 <_sbrk+0x68>)
 80012f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012f2:	4b10      	ldr	r3, [pc, #64]	@ (8001334 <_sbrk+0x64>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4413      	add	r3, r2
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d207      	bcs.n	8001310 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001300:	f003 fbe0 	bl	8004ac4 <__errno>
 8001304:	4603      	mov	r3, r0
 8001306:	220c      	movs	r2, #12
 8001308:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800130a:	f04f 33ff 	mov.w	r3, #4294967295
 800130e:	e009      	b.n	8001324 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001310:	4b08      	ldr	r3, [pc, #32]	@ (8001334 <_sbrk+0x64>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001316:	4b07      	ldr	r3, [pc, #28]	@ (8001334 <_sbrk+0x64>)
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4413      	add	r3, r2
 800131e:	4a05      	ldr	r2, [pc, #20]	@ (8001334 <_sbrk+0x64>)
 8001320:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001322:	68fb      	ldr	r3, [r7, #12]
}
 8001324:	4618      	mov	r0, r3
 8001326:	3718      	adds	r7, #24
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	20020000 	.word	0x20020000
 8001330:	00000400 	.word	0x00000400
 8001334:	20000dbc 	.word	0x20000dbc
 8001338:	20000f10 	.word	0x20000f10

0800133c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001340:	4b06      	ldr	r3, [pc, #24]	@ (800135c <SystemInit+0x20>)
 8001342:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001346:	4a05      	ldr	r2, [pc, #20]	@ (800135c <SystemInit+0x20>)
 8001348:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800134c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	e000ed00 	.word	0xe000ed00

08001360 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001360:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001398 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001364:	f7ff ffea 	bl	800133c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001368:	480c      	ldr	r0, [pc, #48]	@ (800139c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800136a:	490d      	ldr	r1, [pc, #52]	@ (80013a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800136c:	4a0d      	ldr	r2, [pc, #52]	@ (80013a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800136e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001370:	e002      	b.n	8001378 <LoopCopyDataInit>

08001372 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001372:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001374:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001376:	3304      	adds	r3, #4

08001378 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001378:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800137a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800137c:	d3f9      	bcc.n	8001372 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800137e:	4a0a      	ldr	r2, [pc, #40]	@ (80013a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001380:	4c0a      	ldr	r4, [pc, #40]	@ (80013ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001382:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001384:	e001      	b.n	800138a <LoopFillZerobss>

08001386 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001386:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001388:	3204      	adds	r2, #4

0800138a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800138a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800138c:	d3fb      	bcc.n	8001386 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800138e:	f003 fb9f 	bl	8004ad0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001392:	f7ff fba3 	bl	8000adc <main>
  bx  lr    
 8001396:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001398:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800139c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013a0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80013a4:	08005878 	.word	0x08005878
  ldr r2, =_sbss
 80013a8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80013ac:	20000f10 	.word	0x20000f10

080013b0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013b0:	e7fe      	b.n	80013b0 <CAN1_RX0_IRQHandler>
	...

080013b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013b8:	4b0e      	ldr	r3, [pc, #56]	@ (80013f4 <HAL_Init+0x40>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a0d      	ldr	r2, [pc, #52]	@ (80013f4 <HAL_Init+0x40>)
 80013be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013c4:	4b0b      	ldr	r3, [pc, #44]	@ (80013f4 <HAL_Init+0x40>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a0a      	ldr	r2, [pc, #40]	@ (80013f4 <HAL_Init+0x40>)
 80013ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013d0:	4b08      	ldr	r3, [pc, #32]	@ (80013f4 <HAL_Init+0x40>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a07      	ldr	r2, [pc, #28]	@ (80013f4 <HAL_Init+0x40>)
 80013d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013dc:	2003      	movs	r0, #3
 80013de:	f000 fe87 	bl	80020f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013e2:	200f      	movs	r0, #15
 80013e4:	f000 f808 	bl	80013f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013e8:	f7ff fd9c 	bl	8000f24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40023c00 	.word	0x40023c00

080013f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001400:	4b12      	ldr	r3, [pc, #72]	@ (800144c <HAL_InitTick+0x54>)
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	4b12      	ldr	r3, [pc, #72]	@ (8001450 <HAL_InitTick+0x58>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	4619      	mov	r1, r3
 800140a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800140e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001412:	fbb2 f3f3 	udiv	r3, r2, r3
 8001416:	4618      	mov	r0, r3
 8001418:	f000 fe9f 	bl	800215a <HAL_SYSTICK_Config>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e00e      	b.n	8001444 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2b0f      	cmp	r3, #15
 800142a:	d80a      	bhi.n	8001442 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800142c:	2200      	movs	r2, #0
 800142e:	6879      	ldr	r1, [r7, #4]
 8001430:	f04f 30ff 	mov.w	r0, #4294967295
 8001434:	f000 fe67 	bl	8002106 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001438:	4a06      	ldr	r2, [pc, #24]	@ (8001454 <HAL_InitTick+0x5c>)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800143e:	2300      	movs	r3, #0
 8001440:	e000      	b.n	8001444 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
}
 8001444:	4618      	mov	r0, r3
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20000004 	.word	0x20000004
 8001450:	2000000c 	.word	0x2000000c
 8001454:	20000008 	.word	0x20000008

08001458 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800145c:	4b06      	ldr	r3, [pc, #24]	@ (8001478 <HAL_IncTick+0x20>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	461a      	mov	r2, r3
 8001462:	4b06      	ldr	r3, [pc, #24]	@ (800147c <HAL_IncTick+0x24>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4413      	add	r3, r2
 8001468:	4a04      	ldr	r2, [pc, #16]	@ (800147c <HAL_IncTick+0x24>)
 800146a:	6013      	str	r3, [r2, #0]
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	2000000c 	.word	0x2000000c
 800147c:	20000dc0 	.word	0x20000dc0

08001480 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  return uwTick;
 8001484:	4b03      	ldr	r3, [pc, #12]	@ (8001494 <HAL_GetTick+0x14>)
 8001486:	681b      	ldr	r3, [r3, #0]
}
 8001488:	4618      	mov	r0, r3
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	20000dc0 	.word	0x20000dc0

08001498 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014a0:	f7ff ffee 	bl	8001480 <HAL_GetTick>
 80014a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014b0:	d005      	beq.n	80014be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014b2:	4b0a      	ldr	r3, [pc, #40]	@ (80014dc <HAL_Delay+0x44>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	461a      	mov	r2, r3
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	4413      	add	r3, r2
 80014bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014be:	bf00      	nop
 80014c0:	f7ff ffde 	bl	8001480 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	68fa      	ldr	r2, [r7, #12]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d8f7      	bhi.n	80014c0 <HAL_Delay+0x28>
  {
  }
}
 80014d0:	bf00      	nop
 80014d2:	bf00      	nop
 80014d4:	3710      	adds	r7, #16
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	2000000c 	.word	0x2000000c

080014e0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014e8:	2300      	movs	r3, #0
 80014ea:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d101      	bne.n	80014f6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e033      	b.n	800155e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d109      	bne.n	8001512 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7ff fd38 	bl	8000f74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2200      	movs	r2, #0
 8001508:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2200      	movs	r2, #0
 800150e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001516:	f003 0310 	and.w	r3, r3, #16
 800151a:	2b00      	cmp	r3, #0
 800151c:	d118      	bne.n	8001550 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001522:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001526:	f023 0302 	bic.w	r3, r3, #2
 800152a:	f043 0202 	orr.w	r2, r3, #2
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f000 fc06 	bl	8001d44 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2200      	movs	r2, #0
 800153c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001542:	f023 0303 	bic.w	r3, r3, #3
 8001546:	f043 0201 	orr.w	r2, r3, #1
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	641a      	str	r2, [r3, #64]	@ 0x40
 800154e:	e001      	b.n	8001554 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800155c:	7bfb      	ldrb	r3, [r7, #15]
}
 800155e:	4618      	mov	r0, r3
 8001560:	3710      	adds	r7, #16
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
	...

08001568 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001570:	2300      	movs	r3, #0
 8001572:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800157a:	2b01      	cmp	r3, #1
 800157c:	d101      	bne.n	8001582 <HAL_ADC_Start+0x1a>
 800157e:	2302      	movs	r3, #2
 8001580:	e0b2      	b.n	80016e8 <HAL_ADC_Start+0x180>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2201      	movs	r2, #1
 8001586:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	f003 0301 	and.w	r3, r3, #1
 8001594:	2b01      	cmp	r3, #1
 8001596:	d018      	beq.n	80015ca <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	689a      	ldr	r2, [r3, #8]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f042 0201 	orr.w	r2, r2, #1
 80015a6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80015a8:	4b52      	ldr	r3, [pc, #328]	@ (80016f4 <HAL_ADC_Start+0x18c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a52      	ldr	r2, [pc, #328]	@ (80016f8 <HAL_ADC_Start+0x190>)
 80015ae:	fba2 2303 	umull	r2, r3, r2, r3
 80015b2:	0c9a      	lsrs	r2, r3, #18
 80015b4:	4613      	mov	r3, r2
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	4413      	add	r3, r2
 80015ba:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80015bc:	e002      	b.n	80015c4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	3b01      	subs	r3, #1
 80015c2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d1f9      	bne.n	80015be <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	f003 0301 	and.w	r3, r3, #1
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d17a      	bne.n	80016ce <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015dc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80015e0:	f023 0301 	bic.w	r3, r3, #1
 80015e4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d007      	beq.n	800160a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015fe:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001602:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001612:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001616:	d106      	bne.n	8001626 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800161c:	f023 0206 	bic.w	r2, r3, #6
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	645a      	str	r2, [r3, #68]	@ 0x44
 8001624:	e002      	b.n	800162c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2200      	movs	r2, #0
 8001630:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001634:	4b31      	ldr	r3, [pc, #196]	@ (80016fc <HAL_ADC_Start+0x194>)
 8001636:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001640:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f003 031f 	and.w	r3, r3, #31
 800164a:	2b00      	cmp	r3, #0
 800164c:	d12a      	bne.n	80016a4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a2b      	ldr	r2, [pc, #172]	@ (8001700 <HAL_ADC_Start+0x198>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d015      	beq.n	8001684 <HAL_ADC_Start+0x11c>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a29      	ldr	r2, [pc, #164]	@ (8001704 <HAL_ADC_Start+0x19c>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d105      	bne.n	800166e <HAL_ADC_Start+0x106>
 8001662:	4b26      	ldr	r3, [pc, #152]	@ (80016fc <HAL_ADC_Start+0x194>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f003 031f 	and.w	r3, r3, #31
 800166a:	2b00      	cmp	r3, #0
 800166c:	d00a      	beq.n	8001684 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a25      	ldr	r2, [pc, #148]	@ (8001708 <HAL_ADC_Start+0x1a0>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d136      	bne.n	80016e6 <HAL_ADC_Start+0x17e>
 8001678:	4b20      	ldr	r3, [pc, #128]	@ (80016fc <HAL_ADC_Start+0x194>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f003 0310 	and.w	r3, r3, #16
 8001680:	2b00      	cmp	r3, #0
 8001682:	d130      	bne.n	80016e6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d129      	bne.n	80016e6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	689a      	ldr	r2, [r3, #8]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80016a0:	609a      	str	r2, [r3, #8]
 80016a2:	e020      	b.n	80016e6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a15      	ldr	r2, [pc, #84]	@ (8001700 <HAL_ADC_Start+0x198>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d11b      	bne.n	80016e6 <HAL_ADC_Start+0x17e>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d114      	bne.n	80016e6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	689a      	ldr	r2, [r3, #8]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	e00b      	b.n	80016e6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d2:	f043 0210 	orr.w	r2, r3, #16
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016de:	f043 0201 	orr.w	r2, r3, #1
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80016e6:	2300      	movs	r3, #0
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3714      	adds	r7, #20
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	20000004 	.word	0x20000004
 80016f8:	431bde83 	.word	0x431bde83
 80016fc:	40012300 	.word	0x40012300
 8001700:	40012000 	.word	0x40012000
 8001704:	40012100 	.word	0x40012100
 8001708:	40012200 	.word	0x40012200

0800170c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800171a:	2b01      	cmp	r3, #1
 800171c:	d101      	bne.n	8001722 <HAL_ADC_Stop+0x16>
 800171e:	2302      	movs	r3, #2
 8001720:	e021      	b.n	8001766 <HAL_ADC_Stop+0x5a>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2201      	movs	r2, #1
 8001726:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	689a      	ldr	r2, [r3, #8]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f022 0201 	bic.w	r2, r2, #1
 8001738:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f003 0301 	and.w	r3, r3, #1
 8001744:	2b00      	cmp	r3, #0
 8001746:	d109      	bne.n	800175c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001750:	f023 0301 	bic.w	r3, r3, #1
 8001754:	f043 0201 	orr.w	r2, r3, #1
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b084      	sub	sp, #16
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
 800177a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800177c:	2300      	movs	r3, #0
 800177e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800178a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800178e:	d113      	bne.n	80017b8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800179a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800179e:	d10b      	bne.n	80017b8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a4:	f043 0220 	orr.w	r2, r3, #32
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2200      	movs	r2, #0
 80017b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e063      	b.n	8001880 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80017b8:	f7ff fe62 	bl	8001480 <HAL_GetTick>
 80017bc:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80017be:	e021      	b.n	8001804 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017c6:	d01d      	beq.n	8001804 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d007      	beq.n	80017de <HAL_ADC_PollForConversion+0x6c>
 80017ce:	f7ff fe57 	bl	8001480 <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	429a      	cmp	r2, r3
 80017dc:	d212      	bcs.n	8001804 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0302 	and.w	r3, r3, #2
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d00b      	beq.n	8001804 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f0:	f043 0204 	orr.w	r2, r3, #4
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2200      	movs	r2, #0
 80017fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e03d      	b.n	8001880 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b02      	cmp	r3, #2
 8001810:	d1d6      	bne.n	80017c0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f06f 0212 	mvn.w	r2, #18
 800181a:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001820:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d123      	bne.n	800187e <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800183a:	2b00      	cmp	r3, #0
 800183c:	d11f      	bne.n	800187e <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001844:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001848:	2b00      	cmp	r3, #0
 800184a:	d006      	beq.n	800185a <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001856:	2b00      	cmp	r3, #0
 8001858:	d111      	bne.n	800187e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800185e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d105      	bne.n	800187e <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001876:	f043 0201 	orr.w	r2, r3, #1
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800187e:	2300      	movs	r3, #0
}
 8001880:	4618      	mov	r0, r3
 8001882:	3710      	adds	r7, #16
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001890:	2300      	movs	r3, #0
 8001892:	617b      	str	r3, [r7, #20]
 8001894:	2300      	movs	r3, #0
 8001896:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	f003 0320 	and.w	r3, r3, #32
 80018b6:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d049      	beq.n	8001952 <HAL_ADC_IRQHandler+0xca>
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d046      	beq.n	8001952 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c8:	f003 0310 	and.w	r3, r3, #16
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d105      	bne.n	80018dc <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d12b      	bne.n	8001942 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d127      	bne.n	8001942 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018f8:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d006      	beq.n	800190e <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800190a:	2b00      	cmp	r3, #0
 800190c:	d119      	bne.n	8001942 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	685a      	ldr	r2, [r3, #4]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f022 0220 	bic.w	r2, r2, #32
 800191c:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001922:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d105      	bne.n	8001942 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193a:	f043 0201 	orr.w	r2, r3, #1
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f000 f8bd 	bl	8001ac2 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f06f 0212 	mvn.w	r2, #18
 8001950:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f003 0304 	and.w	r3, r3, #4
 8001958:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001960:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d057      	beq.n	8001a18 <HAL_ADC_IRQHandler+0x190>
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d054      	beq.n	8001a18 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001972:	f003 0310 	and.w	r3, r3, #16
 8001976:	2b00      	cmp	r3, #0
 8001978:	d105      	bne.n	8001986 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d139      	bne.n	8001a08 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800199a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d006      	beq.n	80019b0 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d12b      	bne.n	8001a08 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d124      	bne.n	8001a08 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d11d      	bne.n	8001a08 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d119      	bne.n	8001a08 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	685a      	ldr	r2, [r3, #4]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80019e2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d105      	bne.n	8001a08 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a00:	f043 0201 	orr.w	r2, r3, #1
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f000 fa97 	bl	8001f3c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f06f 020c 	mvn.w	r2, #12
 8001a16:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a26:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d017      	beq.n	8001a5e <HAL_ADC_IRQHandler+0x1d6>
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d014      	beq.n	8001a5e <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d10d      	bne.n	8001a5e <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a46:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f000 f841 	bl	8001ad6 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f06f 0201 	mvn.w	r2, #1
 8001a5c:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f003 0320 	and.w	r3, r3, #32
 8001a64:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001a6c:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d015      	beq.n	8001aa0 <HAL_ADC_IRQHandler+0x218>
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d012      	beq.n	8001aa0 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a7e:	f043 0202 	orr.w	r2, r3, #2
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f06f 0220 	mvn.w	r2, #32
 8001a8e:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f000 f82a 	bl	8001aea <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f06f 0220 	mvn.w	r2, #32
 8001a9e:	601a      	str	r2, [r3, #0]
  }
}
 8001aa0:	bf00      	nop
 8001aa2:	3718      	adds	r7, #24
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr

08001ac2 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	b083      	sub	sp, #12
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001aca:	bf00      	nop
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001aea:	b480      	push	{r7}
 8001aec:	b083      	sub	sp, #12
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
	...

08001b00 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d101      	bne.n	8001b1c <HAL_ADC_ConfigChannel+0x1c>
 8001b18:	2302      	movs	r3, #2
 8001b1a:	e105      	b.n	8001d28 <HAL_ADC_ConfigChannel+0x228>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2b09      	cmp	r3, #9
 8001b2a:	d925      	bls.n	8001b78 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	68d9      	ldr	r1, [r3, #12]
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	461a      	mov	r2, r3
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	4413      	add	r3, r2
 8001b40:	3b1e      	subs	r3, #30
 8001b42:	2207      	movs	r2, #7
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	43da      	mvns	r2, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	400a      	ands	r2, r1
 8001b50:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	68d9      	ldr	r1, [r3, #12]
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	689a      	ldr	r2, [r3, #8]
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	4618      	mov	r0, r3
 8001b64:	4603      	mov	r3, r0
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	4403      	add	r3, r0
 8001b6a:	3b1e      	subs	r3, #30
 8001b6c:	409a      	lsls	r2, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	430a      	orrs	r2, r1
 8001b74:	60da      	str	r2, [r3, #12]
 8001b76:	e022      	b.n	8001bbe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	6919      	ldr	r1, [r3, #16]
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	461a      	mov	r2, r3
 8001b86:	4613      	mov	r3, r2
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	4413      	add	r3, r2
 8001b8c:	2207      	movs	r2, #7
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	43da      	mvns	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	400a      	ands	r2, r1
 8001b9a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	6919      	ldr	r1, [r3, #16]
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	689a      	ldr	r2, [r3, #8]
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	4618      	mov	r0, r3
 8001bae:	4603      	mov	r3, r0
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	4403      	add	r3, r0
 8001bb4:	409a      	lsls	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	430a      	orrs	r2, r1
 8001bbc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	2b06      	cmp	r3, #6
 8001bc4:	d824      	bhi.n	8001c10 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685a      	ldr	r2, [r3, #4]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	4413      	add	r3, r2
 8001bd6:	3b05      	subs	r3, #5
 8001bd8:	221f      	movs	r2, #31
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	43da      	mvns	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	400a      	ands	r2, r1
 8001be6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685a      	ldr	r2, [r3, #4]
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	4413      	add	r3, r2
 8001c00:	3b05      	subs	r3, #5
 8001c02:	fa00 f203 	lsl.w	r2, r0, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c0e:	e04c      	b.n	8001caa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	2b0c      	cmp	r3, #12
 8001c16:	d824      	bhi.n	8001c62 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685a      	ldr	r2, [r3, #4]
 8001c22:	4613      	mov	r3, r2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	4413      	add	r3, r2
 8001c28:	3b23      	subs	r3, #35	@ 0x23
 8001c2a:	221f      	movs	r2, #31
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	43da      	mvns	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	400a      	ands	r2, r1
 8001c38:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	4618      	mov	r0, r3
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685a      	ldr	r2, [r3, #4]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	4413      	add	r3, r2
 8001c52:	3b23      	subs	r3, #35	@ 0x23
 8001c54:	fa00 f203 	lsl.w	r2, r0, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c60:	e023      	b.n	8001caa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685a      	ldr	r2, [r3, #4]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	4413      	add	r3, r2
 8001c72:	3b41      	subs	r3, #65	@ 0x41
 8001c74:	221f      	movs	r2, #31
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	43da      	mvns	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	400a      	ands	r2, r1
 8001c82:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	4618      	mov	r0, r3
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685a      	ldr	r2, [r3, #4]
 8001c96:	4613      	mov	r3, r2
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	4413      	add	r3, r2
 8001c9c:	3b41      	subs	r3, #65	@ 0x41
 8001c9e:	fa00 f203 	lsl.w	r2, r0, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001caa:	4b22      	ldr	r3, [pc, #136]	@ (8001d34 <HAL_ADC_ConfigChannel+0x234>)
 8001cac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a21      	ldr	r2, [pc, #132]	@ (8001d38 <HAL_ADC_ConfigChannel+0x238>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d109      	bne.n	8001ccc <HAL_ADC_ConfigChannel+0x1cc>
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2b12      	cmp	r3, #18
 8001cbe:	d105      	bne.n	8001ccc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a19      	ldr	r2, [pc, #100]	@ (8001d38 <HAL_ADC_ConfigChannel+0x238>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d123      	bne.n	8001d1e <HAL_ADC_ConfigChannel+0x21e>
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2b10      	cmp	r3, #16
 8001cdc:	d003      	beq.n	8001ce6 <HAL_ADC_ConfigChannel+0x1e6>
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2b11      	cmp	r3, #17
 8001ce4:	d11b      	bne.n	8001d1e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2b10      	cmp	r3, #16
 8001cf8:	d111      	bne.n	8001d1e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001cfa:	4b10      	ldr	r3, [pc, #64]	@ (8001d3c <HAL_ADC_ConfigChannel+0x23c>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a10      	ldr	r2, [pc, #64]	@ (8001d40 <HAL_ADC_ConfigChannel+0x240>)
 8001d00:	fba2 2303 	umull	r2, r3, r2, r3
 8001d04:	0c9a      	lsrs	r2, r3, #18
 8001d06:	4613      	mov	r3, r2
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	4413      	add	r3, r2
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001d10:	e002      	b.n	8001d18 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	3b01      	subs	r3, #1
 8001d16:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d1f9      	bne.n	8001d12 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3714      	adds	r7, #20
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	40012300 	.word	0x40012300
 8001d38:	40012000 	.word	0x40012000
 8001d3c:	20000004 	.word	0x20000004
 8001d40:	431bde83 	.word	0x431bde83

08001d44 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d4c:	4b79      	ldr	r3, [pc, #484]	@ (8001f34 <ADC_Init+0x1f0>)
 8001d4e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	685a      	ldr	r2, [r3, #4]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	431a      	orrs	r2, r3
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	685a      	ldr	r2, [r3, #4]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d78:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	6859      	ldr	r1, [r3, #4]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	691b      	ldr	r3, [r3, #16]
 8001d84:	021a      	lsls	r2, r3, #8
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	685a      	ldr	r2, [r3, #4]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001d9c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	6859      	ldr	r1, [r3, #4]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689a      	ldr	r2, [r3, #8]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	430a      	orrs	r2, r1
 8001dae:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	689a      	ldr	r2, [r3, #8]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001dbe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	6899      	ldr	r1, [r3, #8]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	68da      	ldr	r2, [r3, #12]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dd6:	4a58      	ldr	r2, [pc, #352]	@ (8001f38 <ADC_Init+0x1f4>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d022      	beq.n	8001e22 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	689a      	ldr	r2, [r3, #8]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001dea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	6899      	ldr	r1, [r3, #8]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	689a      	ldr	r2, [r3, #8]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001e0c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	6899      	ldr	r1, [r3, #8]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	430a      	orrs	r2, r1
 8001e1e:	609a      	str	r2, [r3, #8]
 8001e20:	e00f      	b.n	8001e42 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	689a      	ldr	r2, [r3, #8]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e30:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	689a      	ldr	r2, [r3, #8]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001e40:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	689a      	ldr	r2, [r3, #8]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f022 0202 	bic.w	r2, r2, #2
 8001e50:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	6899      	ldr	r1, [r3, #8]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	7e1b      	ldrb	r3, [r3, #24]
 8001e5c:	005a      	lsls	r2, r3, #1
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	430a      	orrs	r2, r1
 8001e64:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d01b      	beq.n	8001ea8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	685a      	ldr	r2, [r3, #4]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e7e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	685a      	ldr	r2, [r3, #4]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001e8e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6859      	ldr	r1, [r3, #4]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	035a      	lsls	r2, r3, #13
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	605a      	str	r2, [r3, #4]
 8001ea6:	e007      	b.n	8001eb8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	685a      	ldr	r2, [r3, #4]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001eb6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001ec6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	69db      	ldr	r3, [r3, #28]
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	051a      	lsls	r2, r3, #20
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	430a      	orrs	r2, r1
 8001edc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	689a      	ldr	r2, [r3, #8]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001eec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	6899      	ldr	r1, [r3, #8]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001efa:	025a      	lsls	r2, r3, #9
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	430a      	orrs	r2, r1
 8001f02:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	689a      	ldr	r2, [r3, #8]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6899      	ldr	r1, [r3, #8]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	695b      	ldr	r3, [r3, #20]
 8001f1e:	029a      	lsls	r2, r3, #10
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	430a      	orrs	r2, r1
 8001f26:	609a      	str	r2, [r3, #8]
}
 8001f28:	bf00      	nop
 8001f2a:	3714      	adds	r7, #20
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	40012300 	.word	0x40012300
 8001f38:	0f000001 	.word	0x0f000001

08001f3c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f003 0307 	and.w	r3, r3, #7
 8001f5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f60:	4b0c      	ldr	r3, [pc, #48]	@ (8001f94 <__NVIC_SetPriorityGrouping+0x44>)
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f66:	68ba      	ldr	r2, [r7, #8]
 8001f68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f82:	4a04      	ldr	r2, [pc, #16]	@ (8001f94 <__NVIC_SetPriorityGrouping+0x44>)
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	60d3      	str	r3, [r2, #12]
}
 8001f88:	bf00      	nop
 8001f8a:	3714      	adds	r7, #20
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	e000ed00 	.word	0xe000ed00

08001f98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f9c:	4b04      	ldr	r3, [pc, #16]	@ (8001fb0 <__NVIC_GetPriorityGrouping+0x18>)
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	0a1b      	lsrs	r3, r3, #8
 8001fa2:	f003 0307 	and.w	r3, r3, #7
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr
 8001fb0:	e000ed00 	.word	0xe000ed00

08001fb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	db0b      	blt.n	8001fde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fc6:	79fb      	ldrb	r3, [r7, #7]
 8001fc8:	f003 021f 	and.w	r2, r3, #31
 8001fcc:	4907      	ldr	r1, [pc, #28]	@ (8001fec <__NVIC_EnableIRQ+0x38>)
 8001fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd2:	095b      	lsrs	r3, r3, #5
 8001fd4:	2001      	movs	r0, #1
 8001fd6:	fa00 f202 	lsl.w	r2, r0, r2
 8001fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001fde:	bf00      	nop
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	e000e100 	.word	0xe000e100

08001ff0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	6039      	str	r1, [r7, #0]
 8001ffa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002000:	2b00      	cmp	r3, #0
 8002002:	db0a      	blt.n	800201a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	b2da      	uxtb	r2, r3
 8002008:	490c      	ldr	r1, [pc, #48]	@ (800203c <__NVIC_SetPriority+0x4c>)
 800200a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200e:	0112      	lsls	r2, r2, #4
 8002010:	b2d2      	uxtb	r2, r2
 8002012:	440b      	add	r3, r1
 8002014:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002018:	e00a      	b.n	8002030 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	b2da      	uxtb	r2, r3
 800201e:	4908      	ldr	r1, [pc, #32]	@ (8002040 <__NVIC_SetPriority+0x50>)
 8002020:	79fb      	ldrb	r3, [r7, #7]
 8002022:	f003 030f 	and.w	r3, r3, #15
 8002026:	3b04      	subs	r3, #4
 8002028:	0112      	lsls	r2, r2, #4
 800202a:	b2d2      	uxtb	r2, r2
 800202c:	440b      	add	r3, r1
 800202e:	761a      	strb	r2, [r3, #24]
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr
 800203c:	e000e100 	.word	0xe000e100
 8002040:	e000ed00 	.word	0xe000ed00

08002044 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002044:	b480      	push	{r7}
 8002046:	b089      	sub	sp, #36	@ 0x24
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f003 0307 	and.w	r3, r3, #7
 8002056:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	f1c3 0307 	rsb	r3, r3, #7
 800205e:	2b04      	cmp	r3, #4
 8002060:	bf28      	it	cs
 8002062:	2304      	movcs	r3, #4
 8002064:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	3304      	adds	r3, #4
 800206a:	2b06      	cmp	r3, #6
 800206c:	d902      	bls.n	8002074 <NVIC_EncodePriority+0x30>
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	3b03      	subs	r3, #3
 8002072:	e000      	b.n	8002076 <NVIC_EncodePriority+0x32>
 8002074:	2300      	movs	r3, #0
 8002076:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002078:	f04f 32ff 	mov.w	r2, #4294967295
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	43da      	mvns	r2, r3
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	401a      	ands	r2, r3
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800208c:	f04f 31ff 	mov.w	r1, #4294967295
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	fa01 f303 	lsl.w	r3, r1, r3
 8002096:	43d9      	mvns	r1, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800209c:	4313      	orrs	r3, r2
         );
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3724      	adds	r7, #36	@ 0x24
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
	...

080020ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	3b01      	subs	r3, #1
 80020b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020bc:	d301      	bcc.n	80020c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020be:	2301      	movs	r3, #1
 80020c0:	e00f      	b.n	80020e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020c2:	4a0a      	ldr	r2, [pc, #40]	@ (80020ec <SysTick_Config+0x40>)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3b01      	subs	r3, #1
 80020c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020ca:	210f      	movs	r1, #15
 80020cc:	f04f 30ff 	mov.w	r0, #4294967295
 80020d0:	f7ff ff8e 	bl	8001ff0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020d4:	4b05      	ldr	r3, [pc, #20]	@ (80020ec <SysTick_Config+0x40>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020da:	4b04      	ldr	r3, [pc, #16]	@ (80020ec <SysTick_Config+0x40>)
 80020dc:	2207      	movs	r2, #7
 80020de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	e000e010 	.word	0xe000e010

080020f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f7ff ff29 	bl	8001f50 <__NVIC_SetPriorityGrouping>
}
 80020fe:	bf00      	nop
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002106:	b580      	push	{r7, lr}
 8002108:	b086      	sub	sp, #24
 800210a:	af00      	add	r7, sp, #0
 800210c:	4603      	mov	r3, r0
 800210e:	60b9      	str	r1, [r7, #8]
 8002110:	607a      	str	r2, [r7, #4]
 8002112:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002114:	2300      	movs	r3, #0
 8002116:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002118:	f7ff ff3e 	bl	8001f98 <__NVIC_GetPriorityGrouping>
 800211c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	68b9      	ldr	r1, [r7, #8]
 8002122:	6978      	ldr	r0, [r7, #20]
 8002124:	f7ff ff8e 	bl	8002044 <NVIC_EncodePriority>
 8002128:	4602      	mov	r2, r0
 800212a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800212e:	4611      	mov	r1, r2
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff ff5d 	bl	8001ff0 <__NVIC_SetPriority>
}
 8002136:	bf00      	nop
 8002138:	3718      	adds	r7, #24
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800213e:	b580      	push	{r7, lr}
 8002140:	b082      	sub	sp, #8
 8002142:	af00      	add	r7, sp, #0
 8002144:	4603      	mov	r3, r0
 8002146:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214c:	4618      	mov	r0, r3
 800214e:	f7ff ff31 	bl	8001fb4 <__NVIC_EnableIRQ>
}
 8002152:	bf00      	nop
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b082      	sub	sp, #8
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f7ff ffa2 	bl	80020ac <SysTick_Config>
 8002168:	4603      	mov	r3, r0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
	...

08002174 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b086      	sub	sp, #24
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800217c:	2300      	movs	r3, #0
 800217e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002180:	f7ff f97e 	bl	8001480 <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d101      	bne.n	8002190 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e099      	b.n	80022c4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2202      	movs	r2, #2
 8002194:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f022 0201 	bic.w	r2, r2, #1
 80021ae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021b0:	e00f      	b.n	80021d2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021b2:	f7ff f965 	bl	8001480 <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	2b05      	cmp	r3, #5
 80021be:	d908      	bls.n	80021d2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2220      	movs	r2, #32
 80021c4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2203      	movs	r2, #3
 80021ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e078      	b.n	80022c4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0301 	and.w	r3, r3, #1
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d1e8      	bne.n	80021b2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021e8:	697a      	ldr	r2, [r7, #20]
 80021ea:	4b38      	ldr	r3, [pc, #224]	@ (80022cc <HAL_DMA_Init+0x158>)
 80021ec:	4013      	ands	r3, r2
 80021ee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685a      	ldr	r2, [r3, #4]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	691b      	ldr	r3, [r3, #16]
 8002204:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800220a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002216:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a1b      	ldr	r3, [r3, #32]
 800221c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800221e:	697a      	ldr	r2, [r7, #20]
 8002220:	4313      	orrs	r3, r2
 8002222:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002228:	2b04      	cmp	r3, #4
 800222a:	d107      	bne.n	800223c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002234:	4313      	orrs	r3, r2
 8002236:	697a      	ldr	r2, [r7, #20]
 8002238:	4313      	orrs	r3, r2
 800223a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	697a      	ldr	r2, [r7, #20]
 8002242:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	695b      	ldr	r3, [r3, #20]
 800224a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	f023 0307 	bic.w	r3, r3, #7
 8002252:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002258:	697a      	ldr	r2, [r7, #20]
 800225a:	4313      	orrs	r3, r2
 800225c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002262:	2b04      	cmp	r3, #4
 8002264:	d117      	bne.n	8002296 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800226a:	697a      	ldr	r2, [r7, #20]
 800226c:	4313      	orrs	r3, r2
 800226e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002274:	2b00      	cmp	r3, #0
 8002276:	d00e      	beq.n	8002296 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f000 fa91 	bl	80027a0 <DMA_CheckFifoParam>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d008      	beq.n	8002296 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2240      	movs	r2, #64	@ 0x40
 8002288:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2201      	movs	r2, #1
 800228e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002292:	2301      	movs	r3, #1
 8002294:	e016      	b.n	80022c4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	697a      	ldr	r2, [r7, #20]
 800229c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f000 fa48 	bl	8002734 <DMA_CalcBaseAndBitshift>
 80022a4:	4603      	mov	r3, r0
 80022a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022ac:	223f      	movs	r2, #63	@ 0x3f
 80022ae:	409a      	lsls	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2201      	movs	r2, #1
 80022be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80022c2:	2300      	movs	r3, #0
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3718      	adds	r7, #24
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	f010803f 	.word	0xf010803f

080022d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
 80022dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022de:	2300      	movs	r3, #0
 80022e0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022e6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d101      	bne.n	80022f6 <HAL_DMA_Start_IT+0x26>
 80022f2:	2302      	movs	r3, #2
 80022f4:	e040      	b.n	8002378 <HAL_DMA_Start_IT+0xa8>
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2201      	movs	r2, #1
 80022fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b01      	cmp	r3, #1
 8002308:	d12f      	bne.n	800236a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2202      	movs	r2, #2
 800230e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2200      	movs	r2, #0
 8002316:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	68b9      	ldr	r1, [r7, #8]
 800231e:	68f8      	ldr	r0, [r7, #12]
 8002320:	f000 f9da 	bl	80026d8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002328:	223f      	movs	r2, #63	@ 0x3f
 800232a:	409a      	lsls	r2, r3
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f042 0216 	orr.w	r2, r2, #22
 800233e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002344:	2b00      	cmp	r3, #0
 8002346:	d007      	beq.n	8002358 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f042 0208 	orr.w	r2, r2, #8
 8002356:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f042 0201 	orr.w	r2, r2, #1
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	e005      	b.n	8002376 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2200      	movs	r2, #0
 800236e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002372:	2302      	movs	r3, #2
 8002374:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002376:	7dfb      	ldrb	r3, [r7, #23]
}
 8002378:	4618      	mov	r0, r3
 800237a:	3718      	adds	r7, #24
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}

08002380 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800238e:	b2db      	uxtb	r3, r3
 8002390:	2b02      	cmp	r3, #2
 8002392:	d004      	beq.n	800239e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2280      	movs	r2, #128	@ 0x80
 8002398:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e00c      	b.n	80023b8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2205      	movs	r2, #5
 80023a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f022 0201 	bic.w	r2, r2, #1
 80023b4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b086      	sub	sp, #24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80023cc:	2300      	movs	r3, #0
 80023ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80023d0:	4b8e      	ldr	r3, [pc, #568]	@ (800260c <HAL_DMA_IRQHandler+0x248>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a8e      	ldr	r2, [pc, #568]	@ (8002610 <HAL_DMA_IRQHandler+0x24c>)
 80023d6:	fba2 2303 	umull	r2, r3, r2, r3
 80023da:	0a9b      	lsrs	r3, r3, #10
 80023dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023ee:	2208      	movs	r2, #8
 80023f0:	409a      	lsls	r2, r3
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	4013      	ands	r3, r2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d01a      	beq.n	8002430 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0304 	and.w	r3, r3, #4
 8002404:	2b00      	cmp	r3, #0
 8002406:	d013      	beq.n	8002430 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f022 0204 	bic.w	r2, r2, #4
 8002416:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800241c:	2208      	movs	r2, #8
 800241e:	409a      	lsls	r2, r3
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002428:	f043 0201 	orr.w	r2, r3, #1
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002434:	2201      	movs	r2, #1
 8002436:	409a      	lsls	r2, r3
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	4013      	ands	r3, r2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d012      	beq.n	8002466 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	695b      	ldr	r3, [r3, #20]
 8002446:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800244a:	2b00      	cmp	r3, #0
 800244c:	d00b      	beq.n	8002466 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002452:	2201      	movs	r2, #1
 8002454:	409a      	lsls	r2, r3
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800245e:	f043 0202 	orr.w	r2, r3, #2
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800246a:	2204      	movs	r2, #4
 800246c:	409a      	lsls	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	4013      	ands	r3, r2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d012      	beq.n	800249c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	2b00      	cmp	r3, #0
 8002482:	d00b      	beq.n	800249c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002488:	2204      	movs	r2, #4
 800248a:	409a      	lsls	r2, r3
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002494:	f043 0204 	orr.w	r2, r3, #4
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024a0:	2210      	movs	r2, #16
 80024a2:	409a      	lsls	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	4013      	ands	r3, r2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d043      	beq.n	8002534 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0308 	and.w	r3, r3, #8
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d03c      	beq.n	8002534 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024be:	2210      	movs	r2, #16
 80024c0:	409a      	lsls	r2, r3
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d018      	beq.n	8002506 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d108      	bne.n	80024f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d024      	beq.n	8002534 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	4798      	blx	r3
 80024f2:	e01f      	b.n	8002534 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d01b      	beq.n	8002534 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	4798      	blx	r3
 8002504:	e016      	b.n	8002534 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002510:	2b00      	cmp	r3, #0
 8002512:	d107      	bne.n	8002524 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f022 0208 	bic.w	r2, r2, #8
 8002522:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002528:	2b00      	cmp	r3, #0
 800252a:	d003      	beq.n	8002534 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002538:	2220      	movs	r2, #32
 800253a:	409a      	lsls	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	4013      	ands	r3, r2
 8002540:	2b00      	cmp	r3, #0
 8002542:	f000 808f 	beq.w	8002664 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0310 	and.w	r3, r3, #16
 8002550:	2b00      	cmp	r3, #0
 8002552:	f000 8087 	beq.w	8002664 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800255a:	2220      	movs	r2, #32
 800255c:	409a      	lsls	r2, r3
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2b05      	cmp	r3, #5
 800256c:	d136      	bne.n	80025dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f022 0216 	bic.w	r2, r2, #22
 800257c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	695a      	ldr	r2, [r3, #20]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800258c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002592:	2b00      	cmp	r3, #0
 8002594:	d103      	bne.n	800259e <HAL_DMA_IRQHandler+0x1da>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800259a:	2b00      	cmp	r3, #0
 800259c:	d007      	beq.n	80025ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f022 0208 	bic.w	r2, r2, #8
 80025ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025b2:	223f      	movs	r2, #63	@ 0x3f
 80025b4:	409a      	lsls	r2, r3
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2201      	movs	r2, #1
 80025be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d07e      	beq.n	80026d0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	4798      	blx	r3
        }
        return;
 80025da:	e079      	b.n	80026d0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d01d      	beq.n	8002626 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d10d      	bne.n	8002614 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d031      	beq.n	8002664 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	4798      	blx	r3
 8002608:	e02c      	b.n	8002664 <HAL_DMA_IRQHandler+0x2a0>
 800260a:	bf00      	nop
 800260c:	20000004 	.word	0x20000004
 8002610:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002618:	2b00      	cmp	r3, #0
 800261a:	d023      	beq.n	8002664 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	4798      	blx	r3
 8002624:	e01e      	b.n	8002664 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002630:	2b00      	cmp	r3, #0
 8002632:	d10f      	bne.n	8002654 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f022 0210 	bic.w	r2, r2, #16
 8002642:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002658:	2b00      	cmp	r3, #0
 800265a:	d003      	beq.n	8002664 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002668:	2b00      	cmp	r3, #0
 800266a:	d032      	beq.n	80026d2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002670:	f003 0301 	and.w	r3, r3, #1
 8002674:	2b00      	cmp	r3, #0
 8002676:	d022      	beq.n	80026be <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2205      	movs	r2, #5
 800267c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f022 0201 	bic.w	r2, r2, #1
 800268e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	3301      	adds	r3, #1
 8002694:	60bb      	str	r3, [r7, #8]
 8002696:	697a      	ldr	r2, [r7, #20]
 8002698:	429a      	cmp	r2, r3
 800269a:	d307      	bcc.n	80026ac <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1f2      	bne.n	8002690 <HAL_DMA_IRQHandler+0x2cc>
 80026aa:	e000      	b.n	80026ae <HAL_DMA_IRQHandler+0x2ea>
          break;
 80026ac:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2201      	movs	r2, #1
 80026b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d005      	beq.n	80026d2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	4798      	blx	r3
 80026ce:	e000      	b.n	80026d2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80026d0:	bf00      	nop
    }
  }
}
 80026d2:	3718      	adds	r7, #24
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	607a      	str	r2, [r7, #4]
 80026e4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80026f4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	2b40      	cmp	r3, #64	@ 0x40
 8002704:	d108      	bne.n	8002718 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68ba      	ldr	r2, [r7, #8]
 8002714:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002716:	e007      	b.n	8002728 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68ba      	ldr	r2, [r7, #8]
 800271e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	60da      	str	r2, [r3, #12]
}
 8002728:	bf00      	nop
 800272a:	3714      	adds	r7, #20
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002734:	b480      	push	{r7}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	b2db      	uxtb	r3, r3
 8002742:	3b10      	subs	r3, #16
 8002744:	4a14      	ldr	r2, [pc, #80]	@ (8002798 <DMA_CalcBaseAndBitshift+0x64>)
 8002746:	fba2 2303 	umull	r2, r3, r2, r3
 800274a:	091b      	lsrs	r3, r3, #4
 800274c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800274e:	4a13      	ldr	r2, [pc, #76]	@ (800279c <DMA_CalcBaseAndBitshift+0x68>)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	4413      	add	r3, r2
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	461a      	mov	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2b03      	cmp	r3, #3
 8002760:	d909      	bls.n	8002776 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800276a:	f023 0303 	bic.w	r3, r3, #3
 800276e:	1d1a      	adds	r2, r3, #4
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	659a      	str	r2, [r3, #88]	@ 0x58
 8002774:	e007      	b.n	8002786 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800277e:	f023 0303 	bic.w	r3, r3, #3
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800278a:	4618      	mov	r0, r3
 800278c:	3714      	adds	r7, #20
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	aaaaaaab 	.word	0xaaaaaaab
 800279c:	08005780 	.word	0x08005780

080027a0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027a8:	2300      	movs	r3, #0
 80027aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027b0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	699b      	ldr	r3, [r3, #24]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d11f      	bne.n	80027fa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	2b03      	cmp	r3, #3
 80027be:	d856      	bhi.n	800286e <DMA_CheckFifoParam+0xce>
 80027c0:	a201      	add	r2, pc, #4	@ (adr r2, 80027c8 <DMA_CheckFifoParam+0x28>)
 80027c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027c6:	bf00      	nop
 80027c8:	080027d9 	.word	0x080027d9
 80027cc:	080027eb 	.word	0x080027eb
 80027d0:	080027d9 	.word	0x080027d9
 80027d4:	0800286f 	.word	0x0800286f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d046      	beq.n	8002872 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027e8:	e043      	b.n	8002872 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ee:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80027f2:	d140      	bne.n	8002876 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027f8:	e03d      	b.n	8002876 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002802:	d121      	bne.n	8002848 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	2b03      	cmp	r3, #3
 8002808:	d837      	bhi.n	800287a <DMA_CheckFifoParam+0xda>
 800280a:	a201      	add	r2, pc, #4	@ (adr r2, 8002810 <DMA_CheckFifoParam+0x70>)
 800280c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002810:	08002821 	.word	0x08002821
 8002814:	08002827 	.word	0x08002827
 8002818:	08002821 	.word	0x08002821
 800281c:	08002839 	.word	0x08002839
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	73fb      	strb	r3, [r7, #15]
      break;
 8002824:	e030      	b.n	8002888 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800282a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d025      	beq.n	800287e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002836:	e022      	b.n	800287e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800283c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002840:	d11f      	bne.n	8002882 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002846:	e01c      	b.n	8002882 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	2b02      	cmp	r3, #2
 800284c:	d903      	bls.n	8002856 <DMA_CheckFifoParam+0xb6>
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	2b03      	cmp	r3, #3
 8002852:	d003      	beq.n	800285c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002854:	e018      	b.n	8002888 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	73fb      	strb	r3, [r7, #15]
      break;
 800285a:	e015      	b.n	8002888 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002860:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d00e      	beq.n	8002886 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	73fb      	strb	r3, [r7, #15]
      break;
 800286c:	e00b      	b.n	8002886 <DMA_CheckFifoParam+0xe6>
      break;
 800286e:	bf00      	nop
 8002870:	e00a      	b.n	8002888 <DMA_CheckFifoParam+0xe8>
      break;
 8002872:	bf00      	nop
 8002874:	e008      	b.n	8002888 <DMA_CheckFifoParam+0xe8>
      break;
 8002876:	bf00      	nop
 8002878:	e006      	b.n	8002888 <DMA_CheckFifoParam+0xe8>
      break;
 800287a:	bf00      	nop
 800287c:	e004      	b.n	8002888 <DMA_CheckFifoParam+0xe8>
      break;
 800287e:	bf00      	nop
 8002880:	e002      	b.n	8002888 <DMA_CheckFifoParam+0xe8>
      break;   
 8002882:	bf00      	nop
 8002884:	e000      	b.n	8002888 <DMA_CheckFifoParam+0xe8>
      break;
 8002886:	bf00      	nop
    }
  } 
  
  return status; 
 8002888:	7bfb      	ldrb	r3, [r7, #15]
}
 800288a:	4618      	mov	r0, r3
 800288c:	3714      	adds	r7, #20
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop

08002898 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002898:	b480      	push	{r7}
 800289a:	b089      	sub	sp, #36	@ 0x24
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028a2:	2300      	movs	r3, #0
 80028a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028a6:	2300      	movs	r3, #0
 80028a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028aa:	2300      	movs	r3, #0
 80028ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028ae:	2300      	movs	r3, #0
 80028b0:	61fb      	str	r3, [r7, #28]
 80028b2:	e16b      	b.n	8002b8c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028b4:	2201      	movs	r2, #1
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	697a      	ldr	r2, [r7, #20]
 80028c4:	4013      	ands	r3, r2
 80028c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028c8:	693a      	ldr	r2, [r7, #16]
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	f040 815a 	bne.w	8002b86 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f003 0303 	and.w	r3, r3, #3
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d005      	beq.n	80028ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d130      	bne.n	800294c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	2203      	movs	r2, #3
 80028f6:	fa02 f303 	lsl.w	r3, r2, r3
 80028fa:	43db      	mvns	r3, r3
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	4013      	ands	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	68da      	ldr	r2, [r3, #12]
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	fa02 f303 	lsl.w	r3, r2, r3
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	4313      	orrs	r3, r2
 8002912:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002920:	2201      	movs	r2, #1
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	43db      	mvns	r3, r3
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	4013      	ands	r3, r2
 800292e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	091b      	lsrs	r3, r3, #4
 8002936:	f003 0201 	and.w	r2, r3, #1
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	4313      	orrs	r3, r2
 8002944:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f003 0303 	and.w	r3, r3, #3
 8002954:	2b03      	cmp	r3, #3
 8002956:	d017      	beq.n	8002988 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	2203      	movs	r2, #3
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	43db      	mvns	r3, r3
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	4013      	ands	r3, r2
 800296e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	689a      	ldr	r2, [r3, #8]
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	4313      	orrs	r3, r2
 8002980:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f003 0303 	and.w	r3, r3, #3
 8002990:	2b02      	cmp	r3, #2
 8002992:	d123      	bne.n	80029dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	08da      	lsrs	r2, r3, #3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	3208      	adds	r2, #8
 800299c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	f003 0307 	and.w	r3, r3, #7
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	220f      	movs	r2, #15
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	43db      	mvns	r3, r3
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	4013      	ands	r3, r2
 80029b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	691a      	ldr	r2, [r3, #16]
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	f003 0307 	and.w	r3, r3, #7
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	08da      	lsrs	r2, r3, #3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	3208      	adds	r2, #8
 80029d6:	69b9      	ldr	r1, [r7, #24]
 80029d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	2203      	movs	r2, #3
 80029e8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ec:	43db      	mvns	r3, r3
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	4013      	ands	r3, r2
 80029f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f003 0203 	and.w	r2, r3, #3
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f000 80b4 	beq.w	8002b86 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a1e:	2300      	movs	r3, #0
 8002a20:	60fb      	str	r3, [r7, #12]
 8002a22:	4b60      	ldr	r3, [pc, #384]	@ (8002ba4 <HAL_GPIO_Init+0x30c>)
 8002a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a26:	4a5f      	ldr	r2, [pc, #380]	@ (8002ba4 <HAL_GPIO_Init+0x30c>)
 8002a28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a2e:	4b5d      	ldr	r3, [pc, #372]	@ (8002ba4 <HAL_GPIO_Init+0x30c>)
 8002a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a36:	60fb      	str	r3, [r7, #12]
 8002a38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a3a:	4a5b      	ldr	r2, [pc, #364]	@ (8002ba8 <HAL_GPIO_Init+0x310>)
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	089b      	lsrs	r3, r3, #2
 8002a40:	3302      	adds	r3, #2
 8002a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	f003 0303 	and.w	r3, r3, #3
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	220f      	movs	r2, #15
 8002a52:	fa02 f303 	lsl.w	r3, r2, r3
 8002a56:	43db      	mvns	r3, r3
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a52      	ldr	r2, [pc, #328]	@ (8002bac <HAL_GPIO_Init+0x314>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d02b      	beq.n	8002abe <HAL_GPIO_Init+0x226>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a51      	ldr	r2, [pc, #324]	@ (8002bb0 <HAL_GPIO_Init+0x318>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d025      	beq.n	8002aba <HAL_GPIO_Init+0x222>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a50      	ldr	r2, [pc, #320]	@ (8002bb4 <HAL_GPIO_Init+0x31c>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d01f      	beq.n	8002ab6 <HAL_GPIO_Init+0x21e>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a4f      	ldr	r2, [pc, #316]	@ (8002bb8 <HAL_GPIO_Init+0x320>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d019      	beq.n	8002ab2 <HAL_GPIO_Init+0x21a>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a4e      	ldr	r2, [pc, #312]	@ (8002bbc <HAL_GPIO_Init+0x324>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d013      	beq.n	8002aae <HAL_GPIO_Init+0x216>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a4d      	ldr	r2, [pc, #308]	@ (8002bc0 <HAL_GPIO_Init+0x328>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d00d      	beq.n	8002aaa <HAL_GPIO_Init+0x212>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a4c      	ldr	r2, [pc, #304]	@ (8002bc4 <HAL_GPIO_Init+0x32c>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d007      	beq.n	8002aa6 <HAL_GPIO_Init+0x20e>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a4b      	ldr	r2, [pc, #300]	@ (8002bc8 <HAL_GPIO_Init+0x330>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d101      	bne.n	8002aa2 <HAL_GPIO_Init+0x20a>
 8002a9e:	2307      	movs	r3, #7
 8002aa0:	e00e      	b.n	8002ac0 <HAL_GPIO_Init+0x228>
 8002aa2:	2308      	movs	r3, #8
 8002aa4:	e00c      	b.n	8002ac0 <HAL_GPIO_Init+0x228>
 8002aa6:	2306      	movs	r3, #6
 8002aa8:	e00a      	b.n	8002ac0 <HAL_GPIO_Init+0x228>
 8002aaa:	2305      	movs	r3, #5
 8002aac:	e008      	b.n	8002ac0 <HAL_GPIO_Init+0x228>
 8002aae:	2304      	movs	r3, #4
 8002ab0:	e006      	b.n	8002ac0 <HAL_GPIO_Init+0x228>
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e004      	b.n	8002ac0 <HAL_GPIO_Init+0x228>
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	e002      	b.n	8002ac0 <HAL_GPIO_Init+0x228>
 8002aba:	2301      	movs	r3, #1
 8002abc:	e000      	b.n	8002ac0 <HAL_GPIO_Init+0x228>
 8002abe:	2300      	movs	r3, #0
 8002ac0:	69fa      	ldr	r2, [r7, #28]
 8002ac2:	f002 0203 	and.w	r2, r2, #3
 8002ac6:	0092      	lsls	r2, r2, #2
 8002ac8:	4093      	lsls	r3, r2
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ad0:	4935      	ldr	r1, [pc, #212]	@ (8002ba8 <HAL_GPIO_Init+0x310>)
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	089b      	lsrs	r3, r3, #2
 8002ad6:	3302      	adds	r3, #2
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ade:	4b3b      	ldr	r3, [pc, #236]	@ (8002bcc <HAL_GPIO_Init+0x334>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	43db      	mvns	r3, r3
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	4013      	ands	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d003      	beq.n	8002b02 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b02:	4a32      	ldr	r2, [pc, #200]	@ (8002bcc <HAL_GPIO_Init+0x334>)
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b08:	4b30      	ldr	r3, [pc, #192]	@ (8002bcc <HAL_GPIO_Init+0x334>)
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	43db      	mvns	r3, r3
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	4013      	ands	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d003      	beq.n	8002b2c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b2c:	4a27      	ldr	r2, [pc, #156]	@ (8002bcc <HAL_GPIO_Init+0x334>)
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b32:	4b26      	ldr	r3, [pc, #152]	@ (8002bcc <HAL_GPIO_Init+0x334>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	43db      	mvns	r3, r3
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d003      	beq.n	8002b56 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b56:	4a1d      	ldr	r2, [pc, #116]	@ (8002bcc <HAL_GPIO_Init+0x334>)
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b5c:	4b1b      	ldr	r3, [pc, #108]	@ (8002bcc <HAL_GPIO_Init+0x334>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	43db      	mvns	r3, r3
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	4013      	ands	r3, r2
 8002b6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d003      	beq.n	8002b80 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b80:	4a12      	ldr	r2, [pc, #72]	@ (8002bcc <HAL_GPIO_Init+0x334>)
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	3301      	adds	r3, #1
 8002b8a:	61fb      	str	r3, [r7, #28]
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	2b0f      	cmp	r3, #15
 8002b90:	f67f ae90 	bls.w	80028b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b94:	bf00      	nop
 8002b96:	bf00      	nop
 8002b98:	3724      	adds	r7, #36	@ 0x24
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	40023800 	.word	0x40023800
 8002ba8:	40013800 	.word	0x40013800
 8002bac:	40020000 	.word	0x40020000
 8002bb0:	40020400 	.word	0x40020400
 8002bb4:	40020800 	.word	0x40020800
 8002bb8:	40020c00 	.word	0x40020c00
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	40021400 	.word	0x40021400
 8002bc4:	40021800 	.word	0x40021800
 8002bc8:	40021c00 	.word	0x40021c00
 8002bcc:	40013c00 	.word	0x40013c00

08002bd0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e267      	b.n	80030b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d075      	beq.n	8002cda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002bee:	4b88      	ldr	r3, [pc, #544]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f003 030c 	and.w	r3, r3, #12
 8002bf6:	2b04      	cmp	r3, #4
 8002bf8:	d00c      	beq.n	8002c14 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bfa:	4b85      	ldr	r3, [pc, #532]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002c02:	2b08      	cmp	r3, #8
 8002c04:	d112      	bne.n	8002c2c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c06:	4b82      	ldr	r3, [pc, #520]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c0e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c12:	d10b      	bne.n	8002c2c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c14:	4b7e      	ldr	r3, [pc, #504]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d05b      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x108>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d157      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e242      	b.n	80030b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c34:	d106      	bne.n	8002c44 <HAL_RCC_OscConfig+0x74>
 8002c36:	4b76      	ldr	r3, [pc, #472]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a75      	ldr	r2, [pc, #468]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002c3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c40:	6013      	str	r3, [r2, #0]
 8002c42:	e01d      	b.n	8002c80 <HAL_RCC_OscConfig+0xb0>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c4c:	d10c      	bne.n	8002c68 <HAL_RCC_OscConfig+0x98>
 8002c4e:	4b70      	ldr	r3, [pc, #448]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a6f      	ldr	r2, [pc, #444]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002c54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c58:	6013      	str	r3, [r2, #0]
 8002c5a:	4b6d      	ldr	r3, [pc, #436]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a6c      	ldr	r2, [pc, #432]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002c60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c64:	6013      	str	r3, [r2, #0]
 8002c66:	e00b      	b.n	8002c80 <HAL_RCC_OscConfig+0xb0>
 8002c68:	4b69      	ldr	r3, [pc, #420]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a68      	ldr	r2, [pc, #416]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002c6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c72:	6013      	str	r3, [r2, #0]
 8002c74:	4b66      	ldr	r3, [pc, #408]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a65      	ldr	r2, [pc, #404]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002c7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d013      	beq.n	8002cb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c88:	f7fe fbfa 	bl	8001480 <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c90:	f7fe fbf6 	bl	8001480 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b64      	cmp	r3, #100	@ 0x64
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e207      	b.n	80030b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ca2:	4b5b      	ldr	r3, [pc, #364]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d0f0      	beq.n	8002c90 <HAL_RCC_OscConfig+0xc0>
 8002cae:	e014      	b.n	8002cda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb0:	f7fe fbe6 	bl	8001480 <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cb8:	f7fe fbe2 	bl	8001480 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b64      	cmp	r3, #100	@ 0x64
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e1f3      	b.n	80030b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cca:	4b51      	ldr	r3, [pc, #324]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1f0      	bne.n	8002cb8 <HAL_RCC_OscConfig+0xe8>
 8002cd6:	e000      	b.n	8002cda <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d063      	beq.n	8002dae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002ce6:	4b4a      	ldr	r3, [pc, #296]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f003 030c 	and.w	r3, r3, #12
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d00b      	beq.n	8002d0a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cf2:	4b47      	ldr	r3, [pc, #284]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002cfa:	2b08      	cmp	r3, #8
 8002cfc:	d11c      	bne.n	8002d38 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cfe:	4b44      	ldr	r3, [pc, #272]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d116      	bne.n	8002d38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d0a:	4b41      	ldr	r3, [pc, #260]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d005      	beq.n	8002d22 <HAL_RCC_OscConfig+0x152>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d001      	beq.n	8002d22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e1c7      	b.n	80030b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d22:	4b3b      	ldr	r3, [pc, #236]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	4937      	ldr	r1, [pc, #220]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d36:	e03a      	b.n	8002dae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d020      	beq.n	8002d82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d40:	4b34      	ldr	r3, [pc, #208]	@ (8002e14 <HAL_RCC_OscConfig+0x244>)
 8002d42:	2201      	movs	r2, #1
 8002d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d46:	f7fe fb9b 	bl	8001480 <HAL_GetTick>
 8002d4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d4c:	e008      	b.n	8002d60 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d4e:	f7fe fb97 	bl	8001480 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e1a8      	b.n	80030b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d60:	4b2b      	ldr	r3, [pc, #172]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0302 	and.w	r3, r3, #2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d0f0      	beq.n	8002d4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d6c:	4b28      	ldr	r3, [pc, #160]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	691b      	ldr	r3, [r3, #16]
 8002d78:	00db      	lsls	r3, r3, #3
 8002d7a:	4925      	ldr	r1, [pc, #148]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	600b      	str	r3, [r1, #0]
 8002d80:	e015      	b.n	8002dae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d82:	4b24      	ldr	r3, [pc, #144]	@ (8002e14 <HAL_RCC_OscConfig+0x244>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d88:	f7fe fb7a 	bl	8001480 <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d90:	f7fe fb76 	bl	8001480 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e187      	b.n	80030b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002da2:	4b1b      	ldr	r3, [pc, #108]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1f0      	bne.n	8002d90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0308 	and.w	r3, r3, #8
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d036      	beq.n	8002e28 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d016      	beq.n	8002df0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dc2:	4b15      	ldr	r3, [pc, #84]	@ (8002e18 <HAL_RCC_OscConfig+0x248>)
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc8:	f7fe fb5a 	bl	8001480 <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dd0:	f7fe fb56 	bl	8001480 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e167      	b.n	80030b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002de2:	4b0b      	ldr	r3, [pc, #44]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002de4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d0f0      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x200>
 8002dee:	e01b      	b.n	8002e28 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002df0:	4b09      	ldr	r3, [pc, #36]	@ (8002e18 <HAL_RCC_OscConfig+0x248>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002df6:	f7fe fb43 	bl	8001480 <HAL_GetTick>
 8002dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dfc:	e00e      	b.n	8002e1c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dfe:	f7fe fb3f 	bl	8001480 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d907      	bls.n	8002e1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e150      	b.n	80030b2 <HAL_RCC_OscConfig+0x4e2>
 8002e10:	40023800 	.word	0x40023800
 8002e14:	42470000 	.word	0x42470000
 8002e18:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e1c:	4b88      	ldr	r3, [pc, #544]	@ (8003040 <HAL_RCC_OscConfig+0x470>)
 8002e1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d1ea      	bne.n	8002dfe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0304 	and.w	r3, r3, #4
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	f000 8097 	beq.w	8002f64 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e36:	2300      	movs	r3, #0
 8002e38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e3a:	4b81      	ldr	r3, [pc, #516]	@ (8003040 <HAL_RCC_OscConfig+0x470>)
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10f      	bne.n	8002e66 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e46:	2300      	movs	r3, #0
 8002e48:	60bb      	str	r3, [r7, #8]
 8002e4a:	4b7d      	ldr	r3, [pc, #500]	@ (8003040 <HAL_RCC_OscConfig+0x470>)
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e4e:	4a7c      	ldr	r2, [pc, #496]	@ (8003040 <HAL_RCC_OscConfig+0x470>)
 8002e50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e54:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e56:	4b7a      	ldr	r3, [pc, #488]	@ (8003040 <HAL_RCC_OscConfig+0x470>)
 8002e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e5e:	60bb      	str	r3, [r7, #8]
 8002e60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e62:	2301      	movs	r3, #1
 8002e64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e66:	4b77      	ldr	r3, [pc, #476]	@ (8003044 <HAL_RCC_OscConfig+0x474>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d118      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e72:	4b74      	ldr	r3, [pc, #464]	@ (8003044 <HAL_RCC_OscConfig+0x474>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a73      	ldr	r2, [pc, #460]	@ (8003044 <HAL_RCC_OscConfig+0x474>)
 8002e78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e7e:	f7fe faff 	bl	8001480 <HAL_GetTick>
 8002e82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e84:	e008      	b.n	8002e98 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e86:	f7fe fafb 	bl	8001480 <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d901      	bls.n	8002e98 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e10c      	b.n	80030b2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e98:	4b6a      	ldr	r3, [pc, #424]	@ (8003044 <HAL_RCC_OscConfig+0x474>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d0f0      	beq.n	8002e86 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d106      	bne.n	8002eba <HAL_RCC_OscConfig+0x2ea>
 8002eac:	4b64      	ldr	r3, [pc, #400]	@ (8003040 <HAL_RCC_OscConfig+0x470>)
 8002eae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eb0:	4a63      	ldr	r2, [pc, #396]	@ (8003040 <HAL_RCC_OscConfig+0x470>)
 8002eb2:	f043 0301 	orr.w	r3, r3, #1
 8002eb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002eb8:	e01c      	b.n	8002ef4 <HAL_RCC_OscConfig+0x324>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	2b05      	cmp	r3, #5
 8002ec0:	d10c      	bne.n	8002edc <HAL_RCC_OscConfig+0x30c>
 8002ec2:	4b5f      	ldr	r3, [pc, #380]	@ (8003040 <HAL_RCC_OscConfig+0x470>)
 8002ec4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ec6:	4a5e      	ldr	r2, [pc, #376]	@ (8003040 <HAL_RCC_OscConfig+0x470>)
 8002ec8:	f043 0304 	orr.w	r3, r3, #4
 8002ecc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ece:	4b5c      	ldr	r3, [pc, #368]	@ (8003040 <HAL_RCC_OscConfig+0x470>)
 8002ed0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ed2:	4a5b      	ldr	r2, [pc, #364]	@ (8003040 <HAL_RCC_OscConfig+0x470>)
 8002ed4:	f043 0301 	orr.w	r3, r3, #1
 8002ed8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002eda:	e00b      	b.n	8002ef4 <HAL_RCC_OscConfig+0x324>
 8002edc:	4b58      	ldr	r3, [pc, #352]	@ (8003040 <HAL_RCC_OscConfig+0x470>)
 8002ede:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ee0:	4a57      	ldr	r2, [pc, #348]	@ (8003040 <HAL_RCC_OscConfig+0x470>)
 8002ee2:	f023 0301 	bic.w	r3, r3, #1
 8002ee6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ee8:	4b55      	ldr	r3, [pc, #340]	@ (8003040 <HAL_RCC_OscConfig+0x470>)
 8002eea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eec:	4a54      	ldr	r2, [pc, #336]	@ (8003040 <HAL_RCC_OscConfig+0x470>)
 8002eee:	f023 0304 	bic.w	r3, r3, #4
 8002ef2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d015      	beq.n	8002f28 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002efc:	f7fe fac0 	bl	8001480 <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f02:	e00a      	b.n	8002f1a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f04:	f7fe fabc 	bl	8001480 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e0cb      	b.n	80030b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f1a:	4b49      	ldr	r3, [pc, #292]	@ (8003040 <HAL_RCC_OscConfig+0x470>)
 8002f1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d0ee      	beq.n	8002f04 <HAL_RCC_OscConfig+0x334>
 8002f26:	e014      	b.n	8002f52 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f28:	f7fe faaa 	bl	8001480 <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f2e:	e00a      	b.n	8002f46 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f30:	f7fe faa6 	bl	8001480 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e0b5      	b.n	80030b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f46:	4b3e      	ldr	r3, [pc, #248]	@ (8003040 <HAL_RCC_OscConfig+0x470>)
 8002f48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d1ee      	bne.n	8002f30 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f52:	7dfb      	ldrb	r3, [r7, #23]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d105      	bne.n	8002f64 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f58:	4b39      	ldr	r3, [pc, #228]	@ (8003040 <HAL_RCC_OscConfig+0x470>)
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5c:	4a38      	ldr	r2, [pc, #224]	@ (8003040 <HAL_RCC_OscConfig+0x470>)
 8002f5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f62:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f000 80a1 	beq.w	80030b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f6e:	4b34      	ldr	r3, [pc, #208]	@ (8003040 <HAL_RCC_OscConfig+0x470>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f003 030c 	and.w	r3, r3, #12
 8002f76:	2b08      	cmp	r3, #8
 8002f78:	d05c      	beq.n	8003034 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d141      	bne.n	8003006 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f82:	4b31      	ldr	r3, [pc, #196]	@ (8003048 <HAL_RCC_OscConfig+0x478>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f88:	f7fe fa7a 	bl	8001480 <HAL_GetTick>
 8002f8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f8e:	e008      	b.n	8002fa2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f90:	f7fe fa76 	bl	8001480 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e087      	b.n	80030b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fa2:	4b27      	ldr	r3, [pc, #156]	@ (8003040 <HAL_RCC_OscConfig+0x470>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1f0      	bne.n	8002f90 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	69da      	ldr	r2, [r3, #28]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fbc:	019b      	lsls	r3, r3, #6
 8002fbe:	431a      	orrs	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fc4:	085b      	lsrs	r3, r3, #1
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	041b      	lsls	r3, r3, #16
 8002fca:	431a      	orrs	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fd0:	061b      	lsls	r3, r3, #24
 8002fd2:	491b      	ldr	r1, [pc, #108]	@ (8003040 <HAL_RCC_OscConfig+0x470>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fd8:	4b1b      	ldr	r3, [pc, #108]	@ (8003048 <HAL_RCC_OscConfig+0x478>)
 8002fda:	2201      	movs	r2, #1
 8002fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fde:	f7fe fa4f 	bl	8001480 <HAL_GetTick>
 8002fe2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fe4:	e008      	b.n	8002ff8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fe6:	f7fe fa4b 	bl	8001480 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d901      	bls.n	8002ff8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e05c      	b.n	80030b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ff8:	4b11      	ldr	r3, [pc, #68]	@ (8003040 <HAL_RCC_OscConfig+0x470>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d0f0      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x416>
 8003004:	e054      	b.n	80030b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003006:	4b10      	ldr	r3, [pc, #64]	@ (8003048 <HAL_RCC_OscConfig+0x478>)
 8003008:	2200      	movs	r2, #0
 800300a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800300c:	f7fe fa38 	bl	8001480 <HAL_GetTick>
 8003010:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003012:	e008      	b.n	8003026 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003014:	f7fe fa34 	bl	8001480 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	2b02      	cmp	r3, #2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e045      	b.n	80030b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003026:	4b06      	ldr	r3, [pc, #24]	@ (8003040 <HAL_RCC_OscConfig+0x470>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1f0      	bne.n	8003014 <HAL_RCC_OscConfig+0x444>
 8003032:	e03d      	b.n	80030b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	2b01      	cmp	r3, #1
 800303a:	d107      	bne.n	800304c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e038      	b.n	80030b2 <HAL_RCC_OscConfig+0x4e2>
 8003040:	40023800 	.word	0x40023800
 8003044:	40007000 	.word	0x40007000
 8003048:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800304c:	4b1b      	ldr	r3, [pc, #108]	@ (80030bc <HAL_RCC_OscConfig+0x4ec>)
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d028      	beq.n	80030ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003064:	429a      	cmp	r2, r3
 8003066:	d121      	bne.n	80030ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003072:	429a      	cmp	r2, r3
 8003074:	d11a      	bne.n	80030ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800307c:	4013      	ands	r3, r2
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003082:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003084:	4293      	cmp	r3, r2
 8003086:	d111      	bne.n	80030ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003092:	085b      	lsrs	r3, r3, #1
 8003094:	3b01      	subs	r3, #1
 8003096:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003098:	429a      	cmp	r2, r3
 800309a:	d107      	bne.n	80030ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d001      	beq.n	80030b0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e000      	b.n	80030b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3718      	adds	r7, #24
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	40023800 	.word	0x40023800

080030c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d101      	bne.n	80030d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e0cc      	b.n	800326e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030d4:	4b68      	ldr	r3, [pc, #416]	@ (8003278 <HAL_RCC_ClockConfig+0x1b8>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0307 	and.w	r3, r3, #7
 80030dc:	683a      	ldr	r2, [r7, #0]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d90c      	bls.n	80030fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030e2:	4b65      	ldr	r3, [pc, #404]	@ (8003278 <HAL_RCC_ClockConfig+0x1b8>)
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	b2d2      	uxtb	r2, r2
 80030e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ea:	4b63      	ldr	r3, [pc, #396]	@ (8003278 <HAL_RCC_ClockConfig+0x1b8>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0307 	and.w	r3, r3, #7
 80030f2:	683a      	ldr	r2, [r7, #0]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d001      	beq.n	80030fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e0b8      	b.n	800326e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	2b00      	cmp	r3, #0
 8003106:	d020      	beq.n	800314a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0304 	and.w	r3, r3, #4
 8003110:	2b00      	cmp	r3, #0
 8003112:	d005      	beq.n	8003120 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003114:	4b59      	ldr	r3, [pc, #356]	@ (800327c <HAL_RCC_ClockConfig+0x1bc>)
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	4a58      	ldr	r2, [pc, #352]	@ (800327c <HAL_RCC_ClockConfig+0x1bc>)
 800311a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800311e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0308 	and.w	r3, r3, #8
 8003128:	2b00      	cmp	r3, #0
 800312a:	d005      	beq.n	8003138 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800312c:	4b53      	ldr	r3, [pc, #332]	@ (800327c <HAL_RCC_ClockConfig+0x1bc>)
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	4a52      	ldr	r2, [pc, #328]	@ (800327c <HAL_RCC_ClockConfig+0x1bc>)
 8003132:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003136:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003138:	4b50      	ldr	r3, [pc, #320]	@ (800327c <HAL_RCC_ClockConfig+0x1bc>)
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	494d      	ldr	r1, [pc, #308]	@ (800327c <HAL_RCC_ClockConfig+0x1bc>)
 8003146:	4313      	orrs	r3, r2
 8003148:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	2b00      	cmp	r3, #0
 8003154:	d044      	beq.n	80031e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d107      	bne.n	800316e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800315e:	4b47      	ldr	r3, [pc, #284]	@ (800327c <HAL_RCC_ClockConfig+0x1bc>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d119      	bne.n	800319e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e07f      	b.n	800326e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	2b02      	cmp	r3, #2
 8003174:	d003      	beq.n	800317e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800317a:	2b03      	cmp	r3, #3
 800317c:	d107      	bne.n	800318e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800317e:	4b3f      	ldr	r3, [pc, #252]	@ (800327c <HAL_RCC_ClockConfig+0x1bc>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d109      	bne.n	800319e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e06f      	b.n	800326e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800318e:	4b3b      	ldr	r3, [pc, #236]	@ (800327c <HAL_RCC_ClockConfig+0x1bc>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0302 	and.w	r3, r3, #2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e067      	b.n	800326e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800319e:	4b37      	ldr	r3, [pc, #220]	@ (800327c <HAL_RCC_ClockConfig+0x1bc>)
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f023 0203 	bic.w	r2, r3, #3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	4934      	ldr	r1, [pc, #208]	@ (800327c <HAL_RCC_ClockConfig+0x1bc>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031b0:	f7fe f966 	bl	8001480 <HAL_GetTick>
 80031b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031b6:	e00a      	b.n	80031ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031b8:	f7fe f962 	bl	8001480 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e04f      	b.n	800326e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ce:	4b2b      	ldr	r3, [pc, #172]	@ (800327c <HAL_RCC_ClockConfig+0x1bc>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f003 020c 	and.w	r2, r3, #12
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	429a      	cmp	r2, r3
 80031de:	d1eb      	bne.n	80031b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031e0:	4b25      	ldr	r3, [pc, #148]	@ (8003278 <HAL_RCC_ClockConfig+0x1b8>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0307 	and.w	r3, r3, #7
 80031e8:	683a      	ldr	r2, [r7, #0]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d20c      	bcs.n	8003208 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ee:	4b22      	ldr	r3, [pc, #136]	@ (8003278 <HAL_RCC_ClockConfig+0x1b8>)
 80031f0:	683a      	ldr	r2, [r7, #0]
 80031f2:	b2d2      	uxtb	r2, r2
 80031f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031f6:	4b20      	ldr	r3, [pc, #128]	@ (8003278 <HAL_RCC_ClockConfig+0x1b8>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0307 	and.w	r3, r3, #7
 80031fe:	683a      	ldr	r2, [r7, #0]
 8003200:	429a      	cmp	r2, r3
 8003202:	d001      	beq.n	8003208 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e032      	b.n	800326e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0304 	and.w	r3, r3, #4
 8003210:	2b00      	cmp	r3, #0
 8003212:	d008      	beq.n	8003226 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003214:	4b19      	ldr	r3, [pc, #100]	@ (800327c <HAL_RCC_ClockConfig+0x1bc>)
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	4916      	ldr	r1, [pc, #88]	@ (800327c <HAL_RCC_ClockConfig+0x1bc>)
 8003222:	4313      	orrs	r3, r2
 8003224:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0308 	and.w	r3, r3, #8
 800322e:	2b00      	cmp	r3, #0
 8003230:	d009      	beq.n	8003246 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003232:	4b12      	ldr	r3, [pc, #72]	@ (800327c <HAL_RCC_ClockConfig+0x1bc>)
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	490e      	ldr	r1, [pc, #56]	@ (800327c <HAL_RCC_ClockConfig+0x1bc>)
 8003242:	4313      	orrs	r3, r2
 8003244:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003246:	f000 f821 	bl	800328c <HAL_RCC_GetSysClockFreq>
 800324a:	4602      	mov	r2, r0
 800324c:	4b0b      	ldr	r3, [pc, #44]	@ (800327c <HAL_RCC_ClockConfig+0x1bc>)
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	091b      	lsrs	r3, r3, #4
 8003252:	f003 030f 	and.w	r3, r3, #15
 8003256:	490a      	ldr	r1, [pc, #40]	@ (8003280 <HAL_RCC_ClockConfig+0x1c0>)
 8003258:	5ccb      	ldrb	r3, [r1, r3]
 800325a:	fa22 f303 	lsr.w	r3, r2, r3
 800325e:	4a09      	ldr	r2, [pc, #36]	@ (8003284 <HAL_RCC_ClockConfig+0x1c4>)
 8003260:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003262:	4b09      	ldr	r3, [pc, #36]	@ (8003288 <HAL_RCC_ClockConfig+0x1c8>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4618      	mov	r0, r3
 8003268:	f7fe f8c6 	bl	80013f8 <HAL_InitTick>

  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	40023c00 	.word	0x40023c00
 800327c:	40023800 	.word	0x40023800
 8003280:	08005770 	.word	0x08005770
 8003284:	20000004 	.word	0x20000004
 8003288:	20000008 	.word	0x20000008

0800328c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800328c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003290:	b094      	sub	sp, #80	@ 0x50
 8003292:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003294:	2300      	movs	r3, #0
 8003296:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003298:	2300      	movs	r3, #0
 800329a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800329c:	2300      	movs	r3, #0
 800329e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80032a0:	2300      	movs	r3, #0
 80032a2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032a4:	4b79      	ldr	r3, [pc, #484]	@ (800348c <HAL_RCC_GetSysClockFreq+0x200>)
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f003 030c 	and.w	r3, r3, #12
 80032ac:	2b08      	cmp	r3, #8
 80032ae:	d00d      	beq.n	80032cc <HAL_RCC_GetSysClockFreq+0x40>
 80032b0:	2b08      	cmp	r3, #8
 80032b2:	f200 80e1 	bhi.w	8003478 <HAL_RCC_GetSysClockFreq+0x1ec>
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d002      	beq.n	80032c0 <HAL_RCC_GetSysClockFreq+0x34>
 80032ba:	2b04      	cmp	r3, #4
 80032bc:	d003      	beq.n	80032c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80032be:	e0db      	b.n	8003478 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032c0:	4b73      	ldr	r3, [pc, #460]	@ (8003490 <HAL_RCC_GetSysClockFreq+0x204>)
 80032c2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80032c4:	e0db      	b.n	800347e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032c6:	4b73      	ldr	r3, [pc, #460]	@ (8003494 <HAL_RCC_GetSysClockFreq+0x208>)
 80032c8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80032ca:	e0d8      	b.n	800347e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032cc:	4b6f      	ldr	r3, [pc, #444]	@ (800348c <HAL_RCC_GetSysClockFreq+0x200>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032d4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032d6:	4b6d      	ldr	r3, [pc, #436]	@ (800348c <HAL_RCC_GetSysClockFreq+0x200>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d063      	beq.n	80033aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032e2:	4b6a      	ldr	r3, [pc, #424]	@ (800348c <HAL_RCC_GetSysClockFreq+0x200>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	099b      	lsrs	r3, r3, #6
 80032e8:	2200      	movs	r2, #0
 80032ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 80032ec:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80032ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80032f6:	2300      	movs	r3, #0
 80032f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80032fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80032fe:	4622      	mov	r2, r4
 8003300:	462b      	mov	r3, r5
 8003302:	f04f 0000 	mov.w	r0, #0
 8003306:	f04f 0100 	mov.w	r1, #0
 800330a:	0159      	lsls	r1, r3, #5
 800330c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003310:	0150      	lsls	r0, r2, #5
 8003312:	4602      	mov	r2, r0
 8003314:	460b      	mov	r3, r1
 8003316:	4621      	mov	r1, r4
 8003318:	1a51      	subs	r1, r2, r1
 800331a:	6139      	str	r1, [r7, #16]
 800331c:	4629      	mov	r1, r5
 800331e:	eb63 0301 	sbc.w	r3, r3, r1
 8003322:	617b      	str	r3, [r7, #20]
 8003324:	f04f 0200 	mov.w	r2, #0
 8003328:	f04f 0300 	mov.w	r3, #0
 800332c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003330:	4659      	mov	r1, fp
 8003332:	018b      	lsls	r3, r1, #6
 8003334:	4651      	mov	r1, sl
 8003336:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800333a:	4651      	mov	r1, sl
 800333c:	018a      	lsls	r2, r1, #6
 800333e:	4651      	mov	r1, sl
 8003340:	ebb2 0801 	subs.w	r8, r2, r1
 8003344:	4659      	mov	r1, fp
 8003346:	eb63 0901 	sbc.w	r9, r3, r1
 800334a:	f04f 0200 	mov.w	r2, #0
 800334e:	f04f 0300 	mov.w	r3, #0
 8003352:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003356:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800335a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800335e:	4690      	mov	r8, r2
 8003360:	4699      	mov	r9, r3
 8003362:	4623      	mov	r3, r4
 8003364:	eb18 0303 	adds.w	r3, r8, r3
 8003368:	60bb      	str	r3, [r7, #8]
 800336a:	462b      	mov	r3, r5
 800336c:	eb49 0303 	adc.w	r3, r9, r3
 8003370:	60fb      	str	r3, [r7, #12]
 8003372:	f04f 0200 	mov.w	r2, #0
 8003376:	f04f 0300 	mov.w	r3, #0
 800337a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800337e:	4629      	mov	r1, r5
 8003380:	024b      	lsls	r3, r1, #9
 8003382:	4621      	mov	r1, r4
 8003384:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003388:	4621      	mov	r1, r4
 800338a:	024a      	lsls	r2, r1, #9
 800338c:	4610      	mov	r0, r2
 800338e:	4619      	mov	r1, r3
 8003390:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003392:	2200      	movs	r2, #0
 8003394:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003396:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003398:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800339c:	f7fc ff68 	bl	8000270 <__aeabi_uldivmod>
 80033a0:	4602      	mov	r2, r0
 80033a2:	460b      	mov	r3, r1
 80033a4:	4613      	mov	r3, r2
 80033a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033a8:	e058      	b.n	800345c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033aa:	4b38      	ldr	r3, [pc, #224]	@ (800348c <HAL_RCC_GetSysClockFreq+0x200>)
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	099b      	lsrs	r3, r3, #6
 80033b0:	2200      	movs	r2, #0
 80033b2:	4618      	mov	r0, r3
 80033b4:	4611      	mov	r1, r2
 80033b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80033ba:	623b      	str	r3, [r7, #32]
 80033bc:	2300      	movs	r3, #0
 80033be:	627b      	str	r3, [r7, #36]	@ 0x24
 80033c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80033c4:	4642      	mov	r2, r8
 80033c6:	464b      	mov	r3, r9
 80033c8:	f04f 0000 	mov.w	r0, #0
 80033cc:	f04f 0100 	mov.w	r1, #0
 80033d0:	0159      	lsls	r1, r3, #5
 80033d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033d6:	0150      	lsls	r0, r2, #5
 80033d8:	4602      	mov	r2, r0
 80033da:	460b      	mov	r3, r1
 80033dc:	4641      	mov	r1, r8
 80033de:	ebb2 0a01 	subs.w	sl, r2, r1
 80033e2:	4649      	mov	r1, r9
 80033e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80033e8:	f04f 0200 	mov.w	r2, #0
 80033ec:	f04f 0300 	mov.w	r3, #0
 80033f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80033f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80033f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80033fc:	ebb2 040a 	subs.w	r4, r2, sl
 8003400:	eb63 050b 	sbc.w	r5, r3, fp
 8003404:	f04f 0200 	mov.w	r2, #0
 8003408:	f04f 0300 	mov.w	r3, #0
 800340c:	00eb      	lsls	r3, r5, #3
 800340e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003412:	00e2      	lsls	r2, r4, #3
 8003414:	4614      	mov	r4, r2
 8003416:	461d      	mov	r5, r3
 8003418:	4643      	mov	r3, r8
 800341a:	18e3      	adds	r3, r4, r3
 800341c:	603b      	str	r3, [r7, #0]
 800341e:	464b      	mov	r3, r9
 8003420:	eb45 0303 	adc.w	r3, r5, r3
 8003424:	607b      	str	r3, [r7, #4]
 8003426:	f04f 0200 	mov.w	r2, #0
 800342a:	f04f 0300 	mov.w	r3, #0
 800342e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003432:	4629      	mov	r1, r5
 8003434:	028b      	lsls	r3, r1, #10
 8003436:	4621      	mov	r1, r4
 8003438:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800343c:	4621      	mov	r1, r4
 800343e:	028a      	lsls	r2, r1, #10
 8003440:	4610      	mov	r0, r2
 8003442:	4619      	mov	r1, r3
 8003444:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003446:	2200      	movs	r2, #0
 8003448:	61bb      	str	r3, [r7, #24]
 800344a:	61fa      	str	r2, [r7, #28]
 800344c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003450:	f7fc ff0e 	bl	8000270 <__aeabi_uldivmod>
 8003454:	4602      	mov	r2, r0
 8003456:	460b      	mov	r3, r1
 8003458:	4613      	mov	r3, r2
 800345a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800345c:	4b0b      	ldr	r3, [pc, #44]	@ (800348c <HAL_RCC_GetSysClockFreq+0x200>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	0c1b      	lsrs	r3, r3, #16
 8003462:	f003 0303 	and.w	r3, r3, #3
 8003466:	3301      	adds	r3, #1
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800346c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800346e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003470:	fbb2 f3f3 	udiv	r3, r2, r3
 8003474:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003476:	e002      	b.n	800347e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003478:	4b05      	ldr	r3, [pc, #20]	@ (8003490 <HAL_RCC_GetSysClockFreq+0x204>)
 800347a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800347c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800347e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003480:	4618      	mov	r0, r3
 8003482:	3750      	adds	r7, #80	@ 0x50
 8003484:	46bd      	mov	sp, r7
 8003486:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800348a:	bf00      	nop
 800348c:	40023800 	.word	0x40023800
 8003490:	00f42400 	.word	0x00f42400
 8003494:	007a1200 	.word	0x007a1200

08003498 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d101      	bne.n	80034aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e041      	b.n	800352e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d106      	bne.n	80034c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f7fd fda4 	bl	800100c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2202      	movs	r2, #2
 80034c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	3304      	adds	r3, #4
 80034d4:	4619      	mov	r1, r3
 80034d6:	4610      	mov	r0, r2
 80034d8:	f000 fd8e 	bl	8003ff8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003536:	b580      	push	{r7, lr}
 8003538:	b082      	sub	sp, #8
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d101      	bne.n	8003548 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e041      	b.n	80035cc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800354e:	b2db      	uxtb	r3, r3
 8003550:	2b00      	cmp	r3, #0
 8003552:	d106      	bne.n	8003562 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f000 f839 	bl	80035d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2202      	movs	r2, #2
 8003566:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	3304      	adds	r3, #4
 8003572:	4619      	mov	r1, r3
 8003574:	4610      	mov	r0, r2
 8003576:	f000 fd3f 	bl	8003ff8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2201      	movs	r2, #1
 800357e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2201      	movs	r2, #1
 8003586:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2201      	movs	r2, #1
 800358e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2201      	movs	r2, #1
 8003596:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2201      	movs	r2, #1
 800359e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2201      	movs	r2, #1
 80035a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2201      	movs	r2, #1
 80035ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3708      	adds	r7, #8
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b086      	sub	sp, #24
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
 80035f4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80035f6:	2300      	movs	r3, #0
 80035f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d109      	bne.n	8003614 <HAL_TIM_PWM_Start_DMA+0x2c>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003606:	b2db      	uxtb	r3, r3
 8003608:	2b02      	cmp	r3, #2
 800360a:	bf0c      	ite	eq
 800360c:	2301      	moveq	r3, #1
 800360e:	2300      	movne	r3, #0
 8003610:	b2db      	uxtb	r3, r3
 8003612:	e022      	b.n	800365a <HAL_TIM_PWM_Start_DMA+0x72>
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	2b04      	cmp	r3, #4
 8003618:	d109      	bne.n	800362e <HAL_TIM_PWM_Start_DMA+0x46>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b02      	cmp	r3, #2
 8003624:	bf0c      	ite	eq
 8003626:	2301      	moveq	r3, #1
 8003628:	2300      	movne	r3, #0
 800362a:	b2db      	uxtb	r3, r3
 800362c:	e015      	b.n	800365a <HAL_TIM_PWM_Start_DMA+0x72>
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	2b08      	cmp	r3, #8
 8003632:	d109      	bne.n	8003648 <HAL_TIM_PWM_Start_DMA+0x60>
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800363a:	b2db      	uxtb	r3, r3
 800363c:	2b02      	cmp	r3, #2
 800363e:	bf0c      	ite	eq
 8003640:	2301      	moveq	r3, #1
 8003642:	2300      	movne	r3, #0
 8003644:	b2db      	uxtb	r3, r3
 8003646:	e008      	b.n	800365a <HAL_TIM_PWM_Start_DMA+0x72>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800364e:	b2db      	uxtb	r3, r3
 8003650:	2b02      	cmp	r3, #2
 8003652:	bf0c      	ite	eq
 8003654:	2301      	moveq	r3, #1
 8003656:	2300      	movne	r3, #0
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d001      	beq.n	8003662 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800365e:	2302      	movs	r3, #2
 8003660:	e171      	b.n	8003946 <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d109      	bne.n	800367c <HAL_TIM_PWM_Start_DMA+0x94>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800366e:	b2db      	uxtb	r3, r3
 8003670:	2b01      	cmp	r3, #1
 8003672:	bf0c      	ite	eq
 8003674:	2301      	moveq	r3, #1
 8003676:	2300      	movne	r3, #0
 8003678:	b2db      	uxtb	r3, r3
 800367a:	e022      	b.n	80036c2 <HAL_TIM_PWM_Start_DMA+0xda>
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	2b04      	cmp	r3, #4
 8003680:	d109      	bne.n	8003696 <HAL_TIM_PWM_Start_DMA+0xae>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b01      	cmp	r3, #1
 800368c:	bf0c      	ite	eq
 800368e:	2301      	moveq	r3, #1
 8003690:	2300      	movne	r3, #0
 8003692:	b2db      	uxtb	r3, r3
 8003694:	e015      	b.n	80036c2 <HAL_TIM_PWM_Start_DMA+0xda>
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	2b08      	cmp	r3, #8
 800369a:	d109      	bne.n	80036b0 <HAL_TIM_PWM_Start_DMA+0xc8>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	bf0c      	ite	eq
 80036a8:	2301      	moveq	r3, #1
 80036aa:	2300      	movne	r3, #0
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	e008      	b.n	80036c2 <HAL_TIM_PWM_Start_DMA+0xda>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	bf0c      	ite	eq
 80036bc:	2301      	moveq	r3, #1
 80036be:	2300      	movne	r3, #0
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d024      	beq.n	8003710 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d002      	beq.n	80036d2 <HAL_TIM_PWM_Start_DMA+0xea>
 80036cc:	887b      	ldrh	r3, [r7, #2]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e137      	b.n	8003946 <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d104      	bne.n	80036e6 <HAL_TIM_PWM_Start_DMA+0xfe>
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2202      	movs	r2, #2
 80036e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036e4:	e016      	b.n	8003714 <HAL_TIM_PWM_Start_DMA+0x12c>
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	2b04      	cmp	r3, #4
 80036ea:	d104      	bne.n	80036f6 <HAL_TIM_PWM_Start_DMA+0x10e>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2202      	movs	r2, #2
 80036f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036f4:	e00e      	b.n	8003714 <HAL_TIM_PWM_Start_DMA+0x12c>
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	2b08      	cmp	r3, #8
 80036fa:	d104      	bne.n	8003706 <HAL_TIM_PWM_Start_DMA+0x11e>
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2202      	movs	r2, #2
 8003700:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003704:	e006      	b.n	8003714 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2202      	movs	r2, #2
 800370a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800370e:	e001      	b.n	8003714 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e118      	b.n	8003946 <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	2b0c      	cmp	r3, #12
 8003718:	f200 80ae 	bhi.w	8003878 <HAL_TIM_PWM_Start_DMA+0x290>
 800371c:	a201      	add	r2, pc, #4	@ (adr r2, 8003724 <HAL_TIM_PWM_Start_DMA+0x13c>)
 800371e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003722:	bf00      	nop
 8003724:	08003759 	.word	0x08003759
 8003728:	08003879 	.word	0x08003879
 800372c:	08003879 	.word	0x08003879
 8003730:	08003879 	.word	0x08003879
 8003734:	080037a1 	.word	0x080037a1
 8003738:	08003879 	.word	0x08003879
 800373c:	08003879 	.word	0x08003879
 8003740:	08003879 	.word	0x08003879
 8003744:	080037e9 	.word	0x080037e9
 8003748:	08003879 	.word	0x08003879
 800374c:	08003879 	.word	0x08003879
 8003750:	08003879 	.word	0x08003879
 8003754:	08003831 	.word	0x08003831
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800375c:	4a7c      	ldr	r2, [pc, #496]	@ (8003950 <HAL_TIM_PWM_Start_DMA+0x368>)
 800375e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003764:	4a7b      	ldr	r2, [pc, #492]	@ (8003954 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003766:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800376c:	4a7a      	ldr	r2, [pc, #488]	@ (8003958 <HAL_TIM_PWM_Start_DMA+0x370>)
 800376e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8003774:	6879      	ldr	r1, [r7, #4]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	3334      	adds	r3, #52	@ 0x34
 800377c:	461a      	mov	r2, r3
 800377e:	887b      	ldrh	r3, [r7, #2]
 8003780:	f7fe fda6 	bl	80022d0 <HAL_DMA_Start_IT>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e0db      	b.n	8003946 <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68da      	ldr	r2, [r3, #12]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800379c:	60da      	str	r2, [r3, #12]
      break;
 800379e:	e06e      	b.n	800387e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037a4:	4a6a      	ldr	r2, [pc, #424]	@ (8003950 <HAL_TIM_PWM_Start_DMA+0x368>)
 80037a6:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ac:	4a69      	ldr	r2, [pc, #420]	@ (8003954 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80037ae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037b4:	4a68      	ldr	r2, [pc, #416]	@ (8003958 <HAL_TIM_PWM_Start_DMA+0x370>)
 80037b6:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80037bc:	6879      	ldr	r1, [r7, #4]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	3338      	adds	r3, #56	@ 0x38
 80037c4:	461a      	mov	r2, r3
 80037c6:	887b      	ldrh	r3, [r7, #2]
 80037c8:	f7fe fd82 	bl	80022d0 <HAL_DMA_Start_IT>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d001      	beq.n	80037d6 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e0b7      	b.n	8003946 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68da      	ldr	r2, [r3, #12]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80037e4:	60da      	str	r2, [r3, #12]
      break;
 80037e6:	e04a      	b.n	800387e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ec:	4a58      	ldr	r2, [pc, #352]	@ (8003950 <HAL_TIM_PWM_Start_DMA+0x368>)
 80037ee:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037f4:	4a57      	ldr	r2, [pc, #348]	@ (8003954 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80037f6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037fc:	4a56      	ldr	r2, [pc, #344]	@ (8003958 <HAL_TIM_PWM_Start_DMA+0x370>)
 80037fe:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8003804:	6879      	ldr	r1, [r7, #4]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	333c      	adds	r3, #60	@ 0x3c
 800380c:	461a      	mov	r2, r3
 800380e:	887b      	ldrh	r3, [r7, #2]
 8003810:	f7fe fd5e 	bl	80022d0 <HAL_DMA_Start_IT>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e093      	b.n	8003946 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68da      	ldr	r2, [r3, #12]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800382c:	60da      	str	r2, [r3, #12]
      break;
 800382e:	e026      	b.n	800387e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003834:	4a46      	ldr	r2, [pc, #280]	@ (8003950 <HAL_TIM_PWM_Start_DMA+0x368>)
 8003836:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800383c:	4a45      	ldr	r2, [pc, #276]	@ (8003954 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800383e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003844:	4a44      	ldr	r2, [pc, #272]	@ (8003958 <HAL_TIM_PWM_Start_DMA+0x370>)
 8003846:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800384c:	6879      	ldr	r1, [r7, #4]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	3340      	adds	r3, #64	@ 0x40
 8003854:	461a      	mov	r2, r3
 8003856:	887b      	ldrh	r3, [r7, #2]
 8003858:	f7fe fd3a 	bl	80022d0 <HAL_DMA_Start_IT>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d001      	beq.n	8003866 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e06f      	b.n	8003946 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68da      	ldr	r2, [r3, #12]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003874:	60da      	str	r2, [r3, #12]
      break;
 8003876:	e002      	b.n	800387e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	75fb      	strb	r3, [r7, #23]
      break;
 800387c:	bf00      	nop
  }

  if (status == HAL_OK)
 800387e:	7dfb      	ldrb	r3, [r7, #23]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d15f      	bne.n	8003944 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2201      	movs	r2, #1
 800388a:	68b9      	ldr	r1, [r7, #8]
 800388c:	4618      	mov	r0, r3
 800388e:	f000 fea3 	bl	80045d8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a31      	ldr	r2, [pc, #196]	@ (800395c <HAL_TIM_PWM_Start_DMA+0x374>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d004      	beq.n	80038a6 <HAL_TIM_PWM_Start_DMA+0x2be>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a2f      	ldr	r2, [pc, #188]	@ (8003960 <HAL_TIM_PWM_Start_DMA+0x378>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d101      	bne.n	80038aa <HAL_TIM_PWM_Start_DMA+0x2c2>
 80038a6:	2301      	movs	r3, #1
 80038a8:	e000      	b.n	80038ac <HAL_TIM_PWM_Start_DMA+0x2c4>
 80038aa:	2300      	movs	r3, #0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d007      	beq.n	80038c0 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80038be:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a25      	ldr	r2, [pc, #148]	@ (800395c <HAL_TIM_PWM_Start_DMA+0x374>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d022      	beq.n	8003910 <HAL_TIM_PWM_Start_DMA+0x328>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038d2:	d01d      	beq.n	8003910 <HAL_TIM_PWM_Start_DMA+0x328>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a22      	ldr	r2, [pc, #136]	@ (8003964 <HAL_TIM_PWM_Start_DMA+0x37c>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d018      	beq.n	8003910 <HAL_TIM_PWM_Start_DMA+0x328>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a21      	ldr	r2, [pc, #132]	@ (8003968 <HAL_TIM_PWM_Start_DMA+0x380>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d013      	beq.n	8003910 <HAL_TIM_PWM_Start_DMA+0x328>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a1f      	ldr	r2, [pc, #124]	@ (800396c <HAL_TIM_PWM_Start_DMA+0x384>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d00e      	beq.n	8003910 <HAL_TIM_PWM_Start_DMA+0x328>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a1a      	ldr	r2, [pc, #104]	@ (8003960 <HAL_TIM_PWM_Start_DMA+0x378>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d009      	beq.n	8003910 <HAL_TIM_PWM_Start_DMA+0x328>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a1b      	ldr	r2, [pc, #108]	@ (8003970 <HAL_TIM_PWM_Start_DMA+0x388>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d004      	beq.n	8003910 <HAL_TIM_PWM_Start_DMA+0x328>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a1a      	ldr	r2, [pc, #104]	@ (8003974 <HAL_TIM_PWM_Start_DMA+0x38c>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d111      	bne.n	8003934 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f003 0307 	and.w	r3, r3, #7
 800391a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	2b06      	cmp	r3, #6
 8003920:	d010      	beq.n	8003944 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f042 0201 	orr.w	r2, r2, #1
 8003930:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003932:	e007      	b.n	8003944 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f042 0201 	orr.w	r2, r2, #1
 8003942:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003944:	7dfb      	ldrb	r3, [r7, #23]
}
 8003946:	4618      	mov	r0, r3
 8003948:	3718      	adds	r7, #24
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	08003ee9 	.word	0x08003ee9
 8003954:	08003f91 	.word	0x08003f91
 8003958:	08003e57 	.word	0x08003e57
 800395c:	40010000 	.word	0x40010000
 8003960:	40010400 	.word	0x40010400
 8003964:	40000400 	.word	0x40000400
 8003968:	40000800 	.word	0x40000800
 800396c:	40000c00 	.word	0x40000c00
 8003970:	40014000 	.word	0x40014000
 8003974:	40001800 	.word	0x40001800

08003978 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003982:	2300      	movs	r3, #0
 8003984:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	2b0c      	cmp	r3, #12
 800398a:	d855      	bhi.n	8003a38 <HAL_TIM_PWM_Stop_DMA+0xc0>
 800398c:	a201      	add	r2, pc, #4	@ (adr r2, 8003994 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800398e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003992:	bf00      	nop
 8003994:	080039c9 	.word	0x080039c9
 8003998:	08003a39 	.word	0x08003a39
 800399c:	08003a39 	.word	0x08003a39
 80039a0:	08003a39 	.word	0x08003a39
 80039a4:	080039e5 	.word	0x080039e5
 80039a8:	08003a39 	.word	0x08003a39
 80039ac:	08003a39 	.word	0x08003a39
 80039b0:	08003a39 	.word	0x08003a39
 80039b4:	08003a01 	.word	0x08003a01
 80039b8:	08003a39 	.word	0x08003a39
 80039bc:	08003a39 	.word	0x08003a39
 80039c0:	08003a39 	.word	0x08003a39
 80039c4:	08003a1d 	.word	0x08003a1d
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68da      	ldr	r2, [r3, #12]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80039d6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039dc:	4618      	mov	r0, r3
 80039de:	f7fe fccf 	bl	8002380 <HAL_DMA_Abort_IT>
      break;
 80039e2:	e02c      	b.n	8003a3e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68da      	ldr	r2, [r3, #12]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039f2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039f8:	4618      	mov	r0, r3
 80039fa:	f7fe fcc1 	bl	8002380 <HAL_DMA_Abort_IT>
      break;
 80039fe:	e01e      	b.n	8003a3e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	68da      	ldr	r2, [r3, #12]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a0e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7fe fcb3 	bl	8002380 <HAL_DMA_Abort_IT>
      break;
 8003a1a:	e010      	b.n	8003a3e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68da      	ldr	r2, [r3, #12]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003a2a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7fe fca5 	bl	8002380 <HAL_DMA_Abort_IT>
      break;
 8003a36:	e002      	b.n	8003a3e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a3c:	bf00      	nop
  }

  if (status == HAL_OK)
 8003a3e:	7bfb      	ldrb	r3, [r7, #15]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d161      	bne.n	8003b08 <HAL_TIM_PWM_Stop_DMA+0x190>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	6839      	ldr	r1, [r7, #0]
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f000 fdc3 	bl	80045d8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a2f      	ldr	r2, [pc, #188]	@ (8003b14 <HAL_TIM_PWM_Stop_DMA+0x19c>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d004      	beq.n	8003a66 <HAL_TIM_PWM_Stop_DMA+0xee>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a2d      	ldr	r2, [pc, #180]	@ (8003b18 <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d101      	bne.n	8003a6a <HAL_TIM_PWM_Stop_DMA+0xf2>
 8003a66:	2301      	movs	r3, #1
 8003a68:	e000      	b.n	8003a6c <HAL_TIM_PWM_Stop_DMA+0xf4>
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d017      	beq.n	8003aa0 <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	6a1a      	ldr	r2, [r3, #32]
 8003a76:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d10f      	bne.n	8003aa0 <HAL_TIM_PWM_Stop_DMA+0x128>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	6a1a      	ldr	r2, [r3, #32]
 8003a86:	f240 4344 	movw	r3, #1092	@ 0x444
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d107      	bne.n	8003aa0 <HAL_TIM_PWM_Stop_DMA+0x128>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a9e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	6a1a      	ldr	r2, [r3, #32]
 8003aa6:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003aaa:	4013      	ands	r3, r2
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d10f      	bne.n	8003ad0 <HAL_TIM_PWM_Stop_DMA+0x158>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	6a1a      	ldr	r2, [r3, #32]
 8003ab6:	f240 4344 	movw	r3, #1092	@ 0x444
 8003aba:	4013      	ands	r3, r2
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d107      	bne.n	8003ad0 <HAL_TIM_PWM_Stop_DMA+0x158>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f022 0201 	bic.w	r2, r2, #1
 8003ace:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d104      	bne.n	8003ae0 <HAL_TIM_PWM_Stop_DMA+0x168>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ade:	e013      	b.n	8003b08 <HAL_TIM_PWM_Stop_DMA+0x190>
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	2b04      	cmp	r3, #4
 8003ae4:	d104      	bne.n	8003af0 <HAL_TIM_PWM_Stop_DMA+0x178>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003aee:	e00b      	b.n	8003b08 <HAL_TIM_PWM_Stop_DMA+0x190>
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	2b08      	cmp	r3, #8
 8003af4:	d104      	bne.n	8003b00 <HAL_TIM_PWM_Stop_DMA+0x188>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2201      	movs	r2, #1
 8003afa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003afe:	e003      	b.n	8003b08 <HAL_TIM_PWM_Stop_DMA+0x190>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8003b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	40010000 	.word	0x40010000
 8003b18:	40010400 	.word	0x40010400

08003b1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b086      	sub	sp, #24
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d101      	bne.n	8003b3a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003b36:	2302      	movs	r3, #2
 8003b38:	e0ae      	b.n	8003c98 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2b0c      	cmp	r3, #12
 8003b46:	f200 809f 	bhi.w	8003c88 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003b4a:	a201      	add	r2, pc, #4	@ (adr r2, 8003b50 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b50:	08003b85 	.word	0x08003b85
 8003b54:	08003c89 	.word	0x08003c89
 8003b58:	08003c89 	.word	0x08003c89
 8003b5c:	08003c89 	.word	0x08003c89
 8003b60:	08003bc5 	.word	0x08003bc5
 8003b64:	08003c89 	.word	0x08003c89
 8003b68:	08003c89 	.word	0x08003c89
 8003b6c:	08003c89 	.word	0x08003c89
 8003b70:	08003c07 	.word	0x08003c07
 8003b74:	08003c89 	.word	0x08003c89
 8003b78:	08003c89 	.word	0x08003c89
 8003b7c:	08003c89 	.word	0x08003c89
 8003b80:	08003c47 	.word	0x08003c47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68b9      	ldr	r1, [r7, #8]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f000 fada 	bl	8004144 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	699a      	ldr	r2, [r3, #24]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f042 0208 	orr.w	r2, r2, #8
 8003b9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	699a      	ldr	r2, [r3, #24]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f022 0204 	bic.w	r2, r2, #4
 8003bae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	6999      	ldr	r1, [r3, #24]
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	691a      	ldr	r2, [r3, #16]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	619a      	str	r2, [r3, #24]
      break;
 8003bc2:	e064      	b.n	8003c8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68b9      	ldr	r1, [r7, #8]
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f000 fb2a 	bl	8004224 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	699a      	ldr	r2, [r3, #24]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003bde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	699a      	ldr	r2, [r3, #24]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	6999      	ldr	r1, [r3, #24]
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	021a      	lsls	r2, r3, #8
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	430a      	orrs	r2, r1
 8003c02:	619a      	str	r2, [r3, #24]
      break;
 8003c04:	e043      	b.n	8003c8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68b9      	ldr	r1, [r7, #8]
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f000 fb7f 	bl	8004310 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	69da      	ldr	r2, [r3, #28]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f042 0208 	orr.w	r2, r2, #8
 8003c20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	69da      	ldr	r2, [r3, #28]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f022 0204 	bic.w	r2, r2, #4
 8003c30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	69d9      	ldr	r1, [r3, #28]
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	691a      	ldr	r2, [r3, #16]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	430a      	orrs	r2, r1
 8003c42:	61da      	str	r2, [r3, #28]
      break;
 8003c44:	e023      	b.n	8003c8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68b9      	ldr	r1, [r7, #8]
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f000 fbd3 	bl	80043f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	69da      	ldr	r2, [r3, #28]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	69da      	ldr	r2, [r3, #28]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	69d9      	ldr	r1, [r3, #28]
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	691b      	ldr	r3, [r3, #16]
 8003c7c:	021a      	lsls	r2, r3, #8
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	430a      	orrs	r2, r1
 8003c84:	61da      	str	r2, [r3, #28]
      break;
 8003c86:	e002      	b.n	8003c8e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	75fb      	strb	r3, [r7, #23]
      break;
 8003c8c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c96:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3718      	adds	r7, #24
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003caa:	2300      	movs	r3, #0
 8003cac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d101      	bne.n	8003cbc <HAL_TIM_ConfigClockSource+0x1c>
 8003cb8:	2302      	movs	r3, #2
 8003cba:	e0b4      	b.n	8003e26 <HAL_TIM_ConfigClockSource+0x186>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2202      	movs	r2, #2
 8003cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003cda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003ce2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68ba      	ldr	r2, [r7, #8]
 8003cea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cf4:	d03e      	beq.n	8003d74 <HAL_TIM_ConfigClockSource+0xd4>
 8003cf6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cfa:	f200 8087 	bhi.w	8003e0c <HAL_TIM_ConfigClockSource+0x16c>
 8003cfe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d02:	f000 8086 	beq.w	8003e12 <HAL_TIM_ConfigClockSource+0x172>
 8003d06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d0a:	d87f      	bhi.n	8003e0c <HAL_TIM_ConfigClockSource+0x16c>
 8003d0c:	2b70      	cmp	r3, #112	@ 0x70
 8003d0e:	d01a      	beq.n	8003d46 <HAL_TIM_ConfigClockSource+0xa6>
 8003d10:	2b70      	cmp	r3, #112	@ 0x70
 8003d12:	d87b      	bhi.n	8003e0c <HAL_TIM_ConfigClockSource+0x16c>
 8003d14:	2b60      	cmp	r3, #96	@ 0x60
 8003d16:	d050      	beq.n	8003dba <HAL_TIM_ConfigClockSource+0x11a>
 8003d18:	2b60      	cmp	r3, #96	@ 0x60
 8003d1a:	d877      	bhi.n	8003e0c <HAL_TIM_ConfigClockSource+0x16c>
 8003d1c:	2b50      	cmp	r3, #80	@ 0x50
 8003d1e:	d03c      	beq.n	8003d9a <HAL_TIM_ConfigClockSource+0xfa>
 8003d20:	2b50      	cmp	r3, #80	@ 0x50
 8003d22:	d873      	bhi.n	8003e0c <HAL_TIM_ConfigClockSource+0x16c>
 8003d24:	2b40      	cmp	r3, #64	@ 0x40
 8003d26:	d058      	beq.n	8003dda <HAL_TIM_ConfigClockSource+0x13a>
 8003d28:	2b40      	cmp	r3, #64	@ 0x40
 8003d2a:	d86f      	bhi.n	8003e0c <HAL_TIM_ConfigClockSource+0x16c>
 8003d2c:	2b30      	cmp	r3, #48	@ 0x30
 8003d2e:	d064      	beq.n	8003dfa <HAL_TIM_ConfigClockSource+0x15a>
 8003d30:	2b30      	cmp	r3, #48	@ 0x30
 8003d32:	d86b      	bhi.n	8003e0c <HAL_TIM_ConfigClockSource+0x16c>
 8003d34:	2b20      	cmp	r3, #32
 8003d36:	d060      	beq.n	8003dfa <HAL_TIM_ConfigClockSource+0x15a>
 8003d38:	2b20      	cmp	r3, #32
 8003d3a:	d867      	bhi.n	8003e0c <HAL_TIM_ConfigClockSource+0x16c>
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d05c      	beq.n	8003dfa <HAL_TIM_ConfigClockSource+0x15a>
 8003d40:	2b10      	cmp	r3, #16
 8003d42:	d05a      	beq.n	8003dfa <HAL_TIM_ConfigClockSource+0x15a>
 8003d44:	e062      	b.n	8003e0c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d56:	f000 fc1f 	bl	8004598 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003d68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68ba      	ldr	r2, [r7, #8]
 8003d70:	609a      	str	r2, [r3, #8]
      break;
 8003d72:	e04f      	b.n	8003e14 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d84:	f000 fc08 	bl	8004598 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	689a      	ldr	r2, [r3, #8]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d96:	609a      	str	r2, [r3, #8]
      break;
 8003d98:	e03c      	b.n	8003e14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003da6:	461a      	mov	r2, r3
 8003da8:	f000 fb7c 	bl	80044a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2150      	movs	r1, #80	@ 0x50
 8003db2:	4618      	mov	r0, r3
 8003db4:	f000 fbd5 	bl	8004562 <TIM_ITRx_SetConfig>
      break;
 8003db8:	e02c      	b.n	8003e14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	f000 fb9b 	bl	8004502 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2160      	movs	r1, #96	@ 0x60
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f000 fbc5 	bl	8004562 <TIM_ITRx_SetConfig>
      break;
 8003dd8:	e01c      	b.n	8003e14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003de6:	461a      	mov	r2, r3
 8003de8:	f000 fb5c 	bl	80044a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2140      	movs	r1, #64	@ 0x40
 8003df2:	4618      	mov	r0, r3
 8003df4:	f000 fbb5 	bl	8004562 <TIM_ITRx_SetConfig>
      break;
 8003df8:	e00c      	b.n	8003e14 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4619      	mov	r1, r3
 8003e04:	4610      	mov	r0, r2
 8003e06:	f000 fbac 	bl	8004562 <TIM_ITRx_SetConfig>
      break;
 8003e0a:	e003      	b.n	8003e14 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	73fb      	strb	r3, [r7, #15]
      break;
 8003e10:	e000      	b.n	8003e14 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003e12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3710      	adds	r7, #16
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}

08003e2e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003e2e:	b480      	push	{r7}
 8003e30:	b083      	sub	sp, #12
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003e36:	bf00      	nop
 8003e38:	370c      	adds	r7, #12
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr

08003e42 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003e42:	b480      	push	{r7}
 8003e44:	b083      	sub	sp, #12
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003e4a:	bf00      	nop
 8003e4c:	370c      	adds	r7, #12
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr

08003e56 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b084      	sub	sp, #16
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e62:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d107      	bne.n	8003e7e <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2201      	movs	r2, #1
 8003e72:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e7c:	e02a      	b.n	8003ed4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d107      	bne.n	8003e98 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2201      	movs	r2, #1
 8003e92:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e96:	e01d      	b.n	8003ed4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d107      	bne.n	8003eb2 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2204      	movs	r2, #4
 8003ea6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003eb0:	e010      	b.n	8003ed4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d107      	bne.n	8003ecc <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2208      	movs	r2, #8
 8003ec0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003eca:	e003      	b.n	8003ed4 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003ed4:	68f8      	ldr	r0, [r7, #12]
 8003ed6:	f7ff ffb4 	bl	8003e42 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2200      	movs	r2, #0
 8003ede:	771a      	strb	r2, [r3, #28]
}
 8003ee0:	bf00      	nop
 8003ee2:	3710      	adds	r7, #16
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ef4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d10b      	bne.n	8003f18 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2201      	movs	r2, #1
 8003f04:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	69db      	ldr	r3, [r3, #28]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d136      	bne.n	8003f7c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2201      	movs	r2, #1
 8003f12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f16:	e031      	b.n	8003f7c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d10b      	bne.n	8003f3a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2202      	movs	r2, #2
 8003f26:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	69db      	ldr	r3, [r3, #28]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d125      	bne.n	8003f7c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f38:	e020      	b.n	8003f7c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d10b      	bne.n	8003f5c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2204      	movs	r2, #4
 8003f48:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	69db      	ldr	r3, [r3, #28]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d114      	bne.n	8003f7c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2201      	movs	r2, #1
 8003f56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f5a:	e00f      	b.n	8003f7c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d10a      	bne.n	8003f7c <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2208      	movs	r2, #8
 8003f6a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	69db      	ldr	r3, [r3, #28]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d103      	bne.n	8003f7c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f7c:	68f8      	ldr	r0, [r7, #12]
 8003f7e:	f7fc fb57 	bl	8000630 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2200      	movs	r2, #0
 8003f86:	771a      	strb	r2, [r3, #28]
}
 8003f88:	bf00      	nop
 8003f8a:	3710      	adds	r7, #16
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f9c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d103      	bne.n	8003fb0 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2201      	movs	r2, #1
 8003fac:	771a      	strb	r2, [r3, #28]
 8003fae:	e019      	b.n	8003fe4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d103      	bne.n	8003fc2 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2202      	movs	r2, #2
 8003fbe:	771a      	strb	r2, [r3, #28]
 8003fc0:	e010      	b.n	8003fe4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d103      	bne.n	8003fd4 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2204      	movs	r2, #4
 8003fd0:	771a      	strb	r2, [r3, #28]
 8003fd2:	e007      	b.n	8003fe4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d102      	bne.n	8003fe4 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2208      	movs	r2, #8
 8003fe2:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	f7ff ff22 	bl	8003e2e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	771a      	strb	r2, [r3, #28]
}
 8003ff0:	bf00      	nop
 8003ff2:	3710      	adds	r7, #16
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b085      	sub	sp, #20
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a43      	ldr	r2, [pc, #268]	@ (8004118 <TIM_Base_SetConfig+0x120>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d013      	beq.n	8004038 <TIM_Base_SetConfig+0x40>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004016:	d00f      	beq.n	8004038 <TIM_Base_SetConfig+0x40>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a40      	ldr	r2, [pc, #256]	@ (800411c <TIM_Base_SetConfig+0x124>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d00b      	beq.n	8004038 <TIM_Base_SetConfig+0x40>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a3f      	ldr	r2, [pc, #252]	@ (8004120 <TIM_Base_SetConfig+0x128>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d007      	beq.n	8004038 <TIM_Base_SetConfig+0x40>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a3e      	ldr	r2, [pc, #248]	@ (8004124 <TIM_Base_SetConfig+0x12c>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d003      	beq.n	8004038 <TIM_Base_SetConfig+0x40>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a3d      	ldr	r2, [pc, #244]	@ (8004128 <TIM_Base_SetConfig+0x130>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d108      	bne.n	800404a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800403e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	4313      	orrs	r3, r2
 8004048:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a32      	ldr	r2, [pc, #200]	@ (8004118 <TIM_Base_SetConfig+0x120>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d02b      	beq.n	80040aa <TIM_Base_SetConfig+0xb2>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004058:	d027      	beq.n	80040aa <TIM_Base_SetConfig+0xb2>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a2f      	ldr	r2, [pc, #188]	@ (800411c <TIM_Base_SetConfig+0x124>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d023      	beq.n	80040aa <TIM_Base_SetConfig+0xb2>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a2e      	ldr	r2, [pc, #184]	@ (8004120 <TIM_Base_SetConfig+0x128>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d01f      	beq.n	80040aa <TIM_Base_SetConfig+0xb2>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a2d      	ldr	r2, [pc, #180]	@ (8004124 <TIM_Base_SetConfig+0x12c>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d01b      	beq.n	80040aa <TIM_Base_SetConfig+0xb2>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a2c      	ldr	r2, [pc, #176]	@ (8004128 <TIM_Base_SetConfig+0x130>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d017      	beq.n	80040aa <TIM_Base_SetConfig+0xb2>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a2b      	ldr	r2, [pc, #172]	@ (800412c <TIM_Base_SetConfig+0x134>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d013      	beq.n	80040aa <TIM_Base_SetConfig+0xb2>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a2a      	ldr	r2, [pc, #168]	@ (8004130 <TIM_Base_SetConfig+0x138>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d00f      	beq.n	80040aa <TIM_Base_SetConfig+0xb2>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a29      	ldr	r2, [pc, #164]	@ (8004134 <TIM_Base_SetConfig+0x13c>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d00b      	beq.n	80040aa <TIM_Base_SetConfig+0xb2>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a28      	ldr	r2, [pc, #160]	@ (8004138 <TIM_Base_SetConfig+0x140>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d007      	beq.n	80040aa <TIM_Base_SetConfig+0xb2>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a27      	ldr	r2, [pc, #156]	@ (800413c <TIM_Base_SetConfig+0x144>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d003      	beq.n	80040aa <TIM_Base_SetConfig+0xb2>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a26      	ldr	r2, [pc, #152]	@ (8004140 <TIM_Base_SetConfig+0x148>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d108      	bne.n	80040bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	695b      	ldr	r3, [r3, #20]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	689a      	ldr	r2, [r3, #8]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a0e      	ldr	r2, [pc, #56]	@ (8004118 <TIM_Base_SetConfig+0x120>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d003      	beq.n	80040ea <TIM_Base_SetConfig+0xf2>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a10      	ldr	r2, [pc, #64]	@ (8004128 <TIM_Base_SetConfig+0x130>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d103      	bne.n	80040f2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	691a      	ldr	r2, [r3, #16]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f043 0204 	orr.w	r2, r3, #4
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2201      	movs	r2, #1
 8004102:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	601a      	str	r2, [r3, #0]
}
 800410a:	bf00      	nop
 800410c:	3714      	adds	r7, #20
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	40010000 	.word	0x40010000
 800411c:	40000400 	.word	0x40000400
 8004120:	40000800 	.word	0x40000800
 8004124:	40000c00 	.word	0x40000c00
 8004128:	40010400 	.word	0x40010400
 800412c:	40014000 	.word	0x40014000
 8004130:	40014400 	.word	0x40014400
 8004134:	40014800 	.word	0x40014800
 8004138:	40001800 	.word	0x40001800
 800413c:	40001c00 	.word	0x40001c00
 8004140:	40002000 	.word	0x40002000

08004144 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004144:	b480      	push	{r7}
 8004146:	b087      	sub	sp, #28
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a1b      	ldr	r3, [r3, #32]
 8004158:	f023 0201 	bic.w	r2, r3, #1
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004172:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f023 0303 	bic.w	r3, r3, #3
 800417a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	4313      	orrs	r3, r2
 8004184:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	f023 0302 	bic.w	r3, r3, #2
 800418c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	697a      	ldr	r2, [r7, #20]
 8004194:	4313      	orrs	r3, r2
 8004196:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a20      	ldr	r2, [pc, #128]	@ (800421c <TIM_OC1_SetConfig+0xd8>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d003      	beq.n	80041a8 <TIM_OC1_SetConfig+0x64>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a1f      	ldr	r2, [pc, #124]	@ (8004220 <TIM_OC1_SetConfig+0xdc>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d10c      	bne.n	80041c2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	f023 0308 	bic.w	r3, r3, #8
 80041ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	f023 0304 	bic.w	r3, r3, #4
 80041c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a15      	ldr	r2, [pc, #84]	@ (800421c <TIM_OC1_SetConfig+0xd8>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d003      	beq.n	80041d2 <TIM_OC1_SetConfig+0x8e>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a14      	ldr	r2, [pc, #80]	@ (8004220 <TIM_OC1_SetConfig+0xdc>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d111      	bne.n	80041f6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80041d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80041e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	693a      	ldr	r2, [r7, #16]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	685a      	ldr	r2, [r3, #4]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	697a      	ldr	r2, [r7, #20]
 800420e:	621a      	str	r2, [r3, #32]
}
 8004210:	bf00      	nop
 8004212:	371c      	adds	r7, #28
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr
 800421c:	40010000 	.word	0x40010000
 8004220:	40010400 	.word	0x40010400

08004224 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004224:	b480      	push	{r7}
 8004226:	b087      	sub	sp, #28
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a1b      	ldr	r3, [r3, #32]
 8004238:	f023 0210 	bic.w	r2, r3, #16
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	699b      	ldr	r3, [r3, #24]
 800424a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800425a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	021b      	lsls	r3, r3, #8
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	4313      	orrs	r3, r2
 8004266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	f023 0320 	bic.w	r3, r3, #32
 800426e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	011b      	lsls	r3, r3, #4
 8004276:	697a      	ldr	r2, [r7, #20]
 8004278:	4313      	orrs	r3, r2
 800427a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a22      	ldr	r2, [pc, #136]	@ (8004308 <TIM_OC2_SetConfig+0xe4>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d003      	beq.n	800428c <TIM_OC2_SetConfig+0x68>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	4a21      	ldr	r2, [pc, #132]	@ (800430c <TIM_OC2_SetConfig+0xe8>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d10d      	bne.n	80042a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004292:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	011b      	lsls	r3, r3, #4
 800429a:	697a      	ldr	r2, [r7, #20]
 800429c:	4313      	orrs	r3, r2
 800429e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a17      	ldr	r2, [pc, #92]	@ (8004308 <TIM_OC2_SetConfig+0xe4>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d003      	beq.n	80042b8 <TIM_OC2_SetConfig+0x94>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4a16      	ldr	r2, [pc, #88]	@ (800430c <TIM_OC2_SetConfig+0xe8>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d113      	bne.n	80042e0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80042be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80042c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	695b      	ldr	r3, [r3, #20]
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	699b      	ldr	r3, [r3, #24]
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	693a      	ldr	r2, [r7, #16]
 80042dc:	4313      	orrs	r3, r2
 80042de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	685a      	ldr	r2, [r3, #4]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	697a      	ldr	r2, [r7, #20]
 80042f8:	621a      	str	r2, [r3, #32]
}
 80042fa:	bf00      	nop
 80042fc:	371c      	adds	r7, #28
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	40010000 	.word	0x40010000
 800430c:	40010400 	.word	0x40010400

08004310 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004310:	b480      	push	{r7}
 8004312:	b087      	sub	sp, #28
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a1b      	ldr	r3, [r3, #32]
 800431e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a1b      	ldr	r3, [r3, #32]
 8004324:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	69db      	ldr	r3, [r3, #28]
 8004336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800433e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f023 0303 	bic.w	r3, r3, #3
 8004346:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	4313      	orrs	r3, r2
 8004350:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004358:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	021b      	lsls	r3, r3, #8
 8004360:	697a      	ldr	r2, [r7, #20]
 8004362:	4313      	orrs	r3, r2
 8004364:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a21      	ldr	r2, [pc, #132]	@ (80043f0 <TIM_OC3_SetConfig+0xe0>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d003      	beq.n	8004376 <TIM_OC3_SetConfig+0x66>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a20      	ldr	r2, [pc, #128]	@ (80043f4 <TIM_OC3_SetConfig+0xe4>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d10d      	bne.n	8004392 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800437c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	021b      	lsls	r3, r3, #8
 8004384:	697a      	ldr	r2, [r7, #20]
 8004386:	4313      	orrs	r3, r2
 8004388:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004390:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a16      	ldr	r2, [pc, #88]	@ (80043f0 <TIM_OC3_SetConfig+0xe0>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d003      	beq.n	80043a2 <TIM_OC3_SetConfig+0x92>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a15      	ldr	r2, [pc, #84]	@ (80043f4 <TIM_OC3_SetConfig+0xe4>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d113      	bne.n	80043ca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80043a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80043b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	011b      	lsls	r3, r3, #4
 80043b8:	693a      	ldr	r2, [r7, #16]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	011b      	lsls	r3, r3, #4
 80043c4:	693a      	ldr	r2, [r7, #16]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	693a      	ldr	r2, [r7, #16]
 80043ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	685a      	ldr	r2, [r3, #4]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	697a      	ldr	r2, [r7, #20]
 80043e2:	621a      	str	r2, [r3, #32]
}
 80043e4:	bf00      	nop
 80043e6:	371c      	adds	r7, #28
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr
 80043f0:	40010000 	.word	0x40010000
 80043f4:	40010400 	.word	0x40010400

080043f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b087      	sub	sp, #28
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a1b      	ldr	r3, [r3, #32]
 8004406:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6a1b      	ldr	r3, [r3, #32]
 800440c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	69db      	ldr	r3, [r3, #28]
 800441e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004426:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800442e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	021b      	lsls	r3, r3, #8
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	4313      	orrs	r3, r2
 800443a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004442:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	031b      	lsls	r3, r3, #12
 800444a:	693a      	ldr	r2, [r7, #16]
 800444c:	4313      	orrs	r3, r2
 800444e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4a12      	ldr	r2, [pc, #72]	@ (800449c <TIM_OC4_SetConfig+0xa4>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d003      	beq.n	8004460 <TIM_OC4_SetConfig+0x68>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a11      	ldr	r2, [pc, #68]	@ (80044a0 <TIM_OC4_SetConfig+0xa8>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d109      	bne.n	8004474 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004466:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	695b      	ldr	r3, [r3, #20]
 800446c:	019b      	lsls	r3, r3, #6
 800446e:	697a      	ldr	r2, [r7, #20]
 8004470:	4313      	orrs	r3, r2
 8004472:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	697a      	ldr	r2, [r7, #20]
 8004478:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	68fa      	ldr	r2, [r7, #12]
 800447e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	685a      	ldr	r2, [r3, #4]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	693a      	ldr	r2, [r7, #16]
 800448c:	621a      	str	r2, [r3, #32]
}
 800448e:	bf00      	nop
 8004490:	371c      	adds	r7, #28
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	40010000 	.word	0x40010000
 80044a0:	40010400 	.word	0x40010400

080044a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b087      	sub	sp, #28
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6a1b      	ldr	r3, [r3, #32]
 80044b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6a1b      	ldr	r3, [r3, #32]
 80044ba:	f023 0201 	bic.w	r2, r3, #1
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80044ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	011b      	lsls	r3, r3, #4
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	f023 030a 	bic.w	r3, r3, #10
 80044e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044e2:	697a      	ldr	r2, [r7, #20]
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	693a      	ldr	r2, [r7, #16]
 80044ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	621a      	str	r2, [r3, #32]
}
 80044f6:	bf00      	nop
 80044f8:	371c      	adds	r7, #28
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr

08004502 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004502:	b480      	push	{r7}
 8004504:	b087      	sub	sp, #28
 8004506:	af00      	add	r7, sp, #0
 8004508:	60f8      	str	r0, [r7, #12]
 800450a:	60b9      	str	r1, [r7, #8]
 800450c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6a1b      	ldr	r3, [r3, #32]
 8004512:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6a1b      	ldr	r3, [r3, #32]
 8004518:	f023 0210 	bic.w	r2, r3, #16
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	699b      	ldr	r3, [r3, #24]
 8004524:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800452c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	031b      	lsls	r3, r3, #12
 8004532:	693a      	ldr	r2, [r7, #16]
 8004534:	4313      	orrs	r3, r2
 8004536:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800453e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	011b      	lsls	r3, r3, #4
 8004544:	697a      	ldr	r2, [r7, #20]
 8004546:	4313      	orrs	r3, r2
 8004548:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	693a      	ldr	r2, [r7, #16]
 800454e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	697a      	ldr	r2, [r7, #20]
 8004554:	621a      	str	r2, [r3, #32]
}
 8004556:	bf00      	nop
 8004558:	371c      	adds	r7, #28
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr

08004562 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004562:	b480      	push	{r7}
 8004564:	b085      	sub	sp, #20
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
 800456a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004578:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800457a:	683a      	ldr	r2, [r7, #0]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	4313      	orrs	r3, r2
 8004580:	f043 0307 	orr.w	r3, r3, #7
 8004584:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	68fa      	ldr	r2, [r7, #12]
 800458a:	609a      	str	r2, [r3, #8]
}
 800458c:	bf00      	nop
 800458e:	3714      	adds	r7, #20
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004598:	b480      	push	{r7}
 800459a:	b087      	sub	sp, #28
 800459c:	af00      	add	r7, sp, #0
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	607a      	str	r2, [r7, #4]
 80045a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80045b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	021a      	lsls	r2, r3, #8
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	431a      	orrs	r2, r3
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	4313      	orrs	r3, r2
 80045c0:	697a      	ldr	r2, [r7, #20]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	697a      	ldr	r2, [r7, #20]
 80045ca:	609a      	str	r2, [r3, #8]
}
 80045cc:	bf00      	nop
 80045ce:	371c      	adds	r7, #28
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80045d8:	b480      	push	{r7}
 80045da:	b087      	sub	sp, #28
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	f003 031f 	and.w	r3, r3, #31
 80045ea:	2201      	movs	r2, #1
 80045ec:	fa02 f303 	lsl.w	r3, r2, r3
 80045f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6a1a      	ldr	r2, [r3, #32]
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	43db      	mvns	r3, r3
 80045fa:	401a      	ands	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6a1a      	ldr	r2, [r3, #32]
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	f003 031f 	and.w	r3, r3, #31
 800460a:	6879      	ldr	r1, [r7, #4]
 800460c:	fa01 f303 	lsl.w	r3, r1, r3
 8004610:	431a      	orrs	r2, r3
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	621a      	str	r2, [r3, #32]
}
 8004616:	bf00      	nop
 8004618:	371c      	adds	r7, #28
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
	...

08004624 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004634:	2b01      	cmp	r3, #1
 8004636:	d101      	bne.n	800463c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004638:	2302      	movs	r3, #2
 800463a:	e05a      	b.n	80046f2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2202      	movs	r2, #2
 8004648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004662:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	4313      	orrs	r3, r2
 800466c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a21      	ldr	r2, [pc, #132]	@ (8004700 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d022      	beq.n	80046c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004688:	d01d      	beq.n	80046c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a1d      	ldr	r2, [pc, #116]	@ (8004704 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d018      	beq.n	80046c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a1b      	ldr	r2, [pc, #108]	@ (8004708 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d013      	beq.n	80046c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a1a      	ldr	r2, [pc, #104]	@ (800470c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d00e      	beq.n	80046c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a18      	ldr	r2, [pc, #96]	@ (8004710 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d009      	beq.n	80046c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a17      	ldr	r2, [pc, #92]	@ (8004714 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d004      	beq.n	80046c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a15      	ldr	r2, [pc, #84]	@ (8004718 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d10c      	bne.n	80046e0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80046cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	68ba      	ldr	r2, [r7, #8]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68ba      	ldr	r2, [r7, #8]
 80046de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3714      	adds	r7, #20
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	40010000 	.word	0x40010000
 8004704:	40000400 	.word	0x40000400
 8004708:	40000800 	.word	0x40000800
 800470c:	40000c00 	.word	0x40000c00
 8004710:	40010400 	.word	0x40010400
 8004714:	40014000 	.word	0x40014000
 8004718:	40001800 	.word	0x40001800

0800471c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800471c:	b480      	push	{r7}
 800471e:	b085      	sub	sp, #20
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004726:	2300      	movs	r3, #0
 8004728:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004730:	2b01      	cmp	r3, #1
 8004732:	d101      	bne.n	8004738 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004734:	2302      	movs	r3, #2
 8004736:	e03d      	b.n	80047b4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	4313      	orrs	r3, r2
 800474c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	4313      	orrs	r3, r2
 800475a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	4313      	orrs	r3, r2
 8004768:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4313      	orrs	r3, r2
 8004776:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	4313      	orrs	r3, r2
 8004784:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	695b      	ldr	r3, [r3, #20]
 8004790:	4313      	orrs	r3, r2
 8004792:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	69db      	ldr	r3, [r3, #28]
 800479e:	4313      	orrs	r3, r2
 80047a0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3714      	adds	r7, #20
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <srand>:
 80047c0:	b538      	push	{r3, r4, r5, lr}
 80047c2:	4b10      	ldr	r3, [pc, #64]	@ (8004804 <srand+0x44>)
 80047c4:	681d      	ldr	r5, [r3, #0]
 80047c6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80047c8:	4604      	mov	r4, r0
 80047ca:	b9b3      	cbnz	r3, 80047fa <srand+0x3a>
 80047cc:	2018      	movs	r0, #24
 80047ce:	f000 fa0f 	bl	8004bf0 <malloc>
 80047d2:	4602      	mov	r2, r0
 80047d4:	6328      	str	r0, [r5, #48]	@ 0x30
 80047d6:	b920      	cbnz	r0, 80047e2 <srand+0x22>
 80047d8:	4b0b      	ldr	r3, [pc, #44]	@ (8004808 <srand+0x48>)
 80047da:	480c      	ldr	r0, [pc, #48]	@ (800480c <srand+0x4c>)
 80047dc:	2146      	movs	r1, #70	@ 0x46
 80047de:	f000 f99f 	bl	8004b20 <__assert_func>
 80047e2:	490b      	ldr	r1, [pc, #44]	@ (8004810 <srand+0x50>)
 80047e4:	4b0b      	ldr	r3, [pc, #44]	@ (8004814 <srand+0x54>)
 80047e6:	e9c0 1300 	strd	r1, r3, [r0]
 80047ea:	4b0b      	ldr	r3, [pc, #44]	@ (8004818 <srand+0x58>)
 80047ec:	6083      	str	r3, [r0, #8]
 80047ee:	230b      	movs	r3, #11
 80047f0:	8183      	strh	r3, [r0, #12]
 80047f2:	2100      	movs	r1, #0
 80047f4:	2001      	movs	r0, #1
 80047f6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80047fa:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80047fc:	2200      	movs	r2, #0
 80047fe:	611c      	str	r4, [r3, #16]
 8004800:	615a      	str	r2, [r3, #20]
 8004802:	bd38      	pop	{r3, r4, r5, pc}
 8004804:	2000001c 	.word	0x2000001c
 8004808:	08005788 	.word	0x08005788
 800480c:	0800579f 	.word	0x0800579f
 8004810:	abcd330e 	.word	0xabcd330e
 8004814:	e66d1234 	.word	0xe66d1234
 8004818:	0005deec 	.word	0x0005deec

0800481c <std>:
 800481c:	2300      	movs	r3, #0
 800481e:	b510      	push	{r4, lr}
 8004820:	4604      	mov	r4, r0
 8004822:	e9c0 3300 	strd	r3, r3, [r0]
 8004826:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800482a:	6083      	str	r3, [r0, #8]
 800482c:	8181      	strh	r1, [r0, #12]
 800482e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004830:	81c2      	strh	r2, [r0, #14]
 8004832:	6183      	str	r3, [r0, #24]
 8004834:	4619      	mov	r1, r3
 8004836:	2208      	movs	r2, #8
 8004838:	305c      	adds	r0, #92	@ 0x5c
 800483a:	f000 f8f4 	bl	8004a26 <memset>
 800483e:	4b0d      	ldr	r3, [pc, #52]	@ (8004874 <std+0x58>)
 8004840:	6263      	str	r3, [r4, #36]	@ 0x24
 8004842:	4b0d      	ldr	r3, [pc, #52]	@ (8004878 <std+0x5c>)
 8004844:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004846:	4b0d      	ldr	r3, [pc, #52]	@ (800487c <std+0x60>)
 8004848:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800484a:	4b0d      	ldr	r3, [pc, #52]	@ (8004880 <std+0x64>)
 800484c:	6323      	str	r3, [r4, #48]	@ 0x30
 800484e:	4b0d      	ldr	r3, [pc, #52]	@ (8004884 <std+0x68>)
 8004850:	6224      	str	r4, [r4, #32]
 8004852:	429c      	cmp	r4, r3
 8004854:	d006      	beq.n	8004864 <std+0x48>
 8004856:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800485a:	4294      	cmp	r4, r2
 800485c:	d002      	beq.n	8004864 <std+0x48>
 800485e:	33d0      	adds	r3, #208	@ 0xd0
 8004860:	429c      	cmp	r4, r3
 8004862:	d105      	bne.n	8004870 <std+0x54>
 8004864:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800486c:	f000 b954 	b.w	8004b18 <__retarget_lock_init_recursive>
 8004870:	bd10      	pop	{r4, pc}
 8004872:	bf00      	nop
 8004874:	080049a1 	.word	0x080049a1
 8004878:	080049c3 	.word	0x080049c3
 800487c:	080049fb 	.word	0x080049fb
 8004880:	08004a1f 	.word	0x08004a1f
 8004884:	20000dc4 	.word	0x20000dc4

08004888 <stdio_exit_handler>:
 8004888:	4a02      	ldr	r2, [pc, #8]	@ (8004894 <stdio_exit_handler+0xc>)
 800488a:	4903      	ldr	r1, [pc, #12]	@ (8004898 <stdio_exit_handler+0x10>)
 800488c:	4803      	ldr	r0, [pc, #12]	@ (800489c <stdio_exit_handler+0x14>)
 800488e:	f000 b869 	b.w	8004964 <_fwalk_sglue>
 8004892:	bf00      	nop
 8004894:	20000010 	.word	0x20000010
 8004898:	08004e65 	.word	0x08004e65
 800489c:	20000020 	.word	0x20000020

080048a0 <cleanup_stdio>:
 80048a0:	6841      	ldr	r1, [r0, #4]
 80048a2:	4b0c      	ldr	r3, [pc, #48]	@ (80048d4 <cleanup_stdio+0x34>)
 80048a4:	4299      	cmp	r1, r3
 80048a6:	b510      	push	{r4, lr}
 80048a8:	4604      	mov	r4, r0
 80048aa:	d001      	beq.n	80048b0 <cleanup_stdio+0x10>
 80048ac:	f000 fada 	bl	8004e64 <_fflush_r>
 80048b0:	68a1      	ldr	r1, [r4, #8]
 80048b2:	4b09      	ldr	r3, [pc, #36]	@ (80048d8 <cleanup_stdio+0x38>)
 80048b4:	4299      	cmp	r1, r3
 80048b6:	d002      	beq.n	80048be <cleanup_stdio+0x1e>
 80048b8:	4620      	mov	r0, r4
 80048ba:	f000 fad3 	bl	8004e64 <_fflush_r>
 80048be:	68e1      	ldr	r1, [r4, #12]
 80048c0:	4b06      	ldr	r3, [pc, #24]	@ (80048dc <cleanup_stdio+0x3c>)
 80048c2:	4299      	cmp	r1, r3
 80048c4:	d004      	beq.n	80048d0 <cleanup_stdio+0x30>
 80048c6:	4620      	mov	r0, r4
 80048c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048cc:	f000 baca 	b.w	8004e64 <_fflush_r>
 80048d0:	bd10      	pop	{r4, pc}
 80048d2:	bf00      	nop
 80048d4:	20000dc4 	.word	0x20000dc4
 80048d8:	20000e2c 	.word	0x20000e2c
 80048dc:	20000e94 	.word	0x20000e94

080048e0 <global_stdio_init.part.0>:
 80048e0:	b510      	push	{r4, lr}
 80048e2:	4b0b      	ldr	r3, [pc, #44]	@ (8004910 <global_stdio_init.part.0+0x30>)
 80048e4:	4c0b      	ldr	r4, [pc, #44]	@ (8004914 <global_stdio_init.part.0+0x34>)
 80048e6:	4a0c      	ldr	r2, [pc, #48]	@ (8004918 <global_stdio_init.part.0+0x38>)
 80048e8:	601a      	str	r2, [r3, #0]
 80048ea:	4620      	mov	r0, r4
 80048ec:	2200      	movs	r2, #0
 80048ee:	2104      	movs	r1, #4
 80048f0:	f7ff ff94 	bl	800481c <std>
 80048f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80048f8:	2201      	movs	r2, #1
 80048fa:	2109      	movs	r1, #9
 80048fc:	f7ff ff8e 	bl	800481c <std>
 8004900:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004904:	2202      	movs	r2, #2
 8004906:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800490a:	2112      	movs	r1, #18
 800490c:	f7ff bf86 	b.w	800481c <std>
 8004910:	20000efc 	.word	0x20000efc
 8004914:	20000dc4 	.word	0x20000dc4
 8004918:	08004889 	.word	0x08004889

0800491c <__sfp_lock_acquire>:
 800491c:	4801      	ldr	r0, [pc, #4]	@ (8004924 <__sfp_lock_acquire+0x8>)
 800491e:	f000 b8fc 	b.w	8004b1a <__retarget_lock_acquire_recursive>
 8004922:	bf00      	nop
 8004924:	20000f05 	.word	0x20000f05

08004928 <__sfp_lock_release>:
 8004928:	4801      	ldr	r0, [pc, #4]	@ (8004930 <__sfp_lock_release+0x8>)
 800492a:	f000 b8f7 	b.w	8004b1c <__retarget_lock_release_recursive>
 800492e:	bf00      	nop
 8004930:	20000f05 	.word	0x20000f05

08004934 <__sinit>:
 8004934:	b510      	push	{r4, lr}
 8004936:	4604      	mov	r4, r0
 8004938:	f7ff fff0 	bl	800491c <__sfp_lock_acquire>
 800493c:	6a23      	ldr	r3, [r4, #32]
 800493e:	b11b      	cbz	r3, 8004948 <__sinit+0x14>
 8004940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004944:	f7ff bff0 	b.w	8004928 <__sfp_lock_release>
 8004948:	4b04      	ldr	r3, [pc, #16]	@ (800495c <__sinit+0x28>)
 800494a:	6223      	str	r3, [r4, #32]
 800494c:	4b04      	ldr	r3, [pc, #16]	@ (8004960 <__sinit+0x2c>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d1f5      	bne.n	8004940 <__sinit+0xc>
 8004954:	f7ff ffc4 	bl	80048e0 <global_stdio_init.part.0>
 8004958:	e7f2      	b.n	8004940 <__sinit+0xc>
 800495a:	bf00      	nop
 800495c:	080048a1 	.word	0x080048a1
 8004960:	20000efc 	.word	0x20000efc

08004964 <_fwalk_sglue>:
 8004964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004968:	4607      	mov	r7, r0
 800496a:	4688      	mov	r8, r1
 800496c:	4614      	mov	r4, r2
 800496e:	2600      	movs	r6, #0
 8004970:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004974:	f1b9 0901 	subs.w	r9, r9, #1
 8004978:	d505      	bpl.n	8004986 <_fwalk_sglue+0x22>
 800497a:	6824      	ldr	r4, [r4, #0]
 800497c:	2c00      	cmp	r4, #0
 800497e:	d1f7      	bne.n	8004970 <_fwalk_sglue+0xc>
 8004980:	4630      	mov	r0, r6
 8004982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004986:	89ab      	ldrh	r3, [r5, #12]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d907      	bls.n	800499c <_fwalk_sglue+0x38>
 800498c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004990:	3301      	adds	r3, #1
 8004992:	d003      	beq.n	800499c <_fwalk_sglue+0x38>
 8004994:	4629      	mov	r1, r5
 8004996:	4638      	mov	r0, r7
 8004998:	47c0      	blx	r8
 800499a:	4306      	orrs	r6, r0
 800499c:	3568      	adds	r5, #104	@ 0x68
 800499e:	e7e9      	b.n	8004974 <_fwalk_sglue+0x10>

080049a0 <__sread>:
 80049a0:	b510      	push	{r4, lr}
 80049a2:	460c      	mov	r4, r1
 80049a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049a8:	f000 f868 	bl	8004a7c <_read_r>
 80049ac:	2800      	cmp	r0, #0
 80049ae:	bfab      	itete	ge
 80049b0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80049b2:	89a3      	ldrhlt	r3, [r4, #12]
 80049b4:	181b      	addge	r3, r3, r0
 80049b6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80049ba:	bfac      	ite	ge
 80049bc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80049be:	81a3      	strhlt	r3, [r4, #12]
 80049c0:	bd10      	pop	{r4, pc}

080049c2 <__swrite>:
 80049c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049c6:	461f      	mov	r7, r3
 80049c8:	898b      	ldrh	r3, [r1, #12]
 80049ca:	05db      	lsls	r3, r3, #23
 80049cc:	4605      	mov	r5, r0
 80049ce:	460c      	mov	r4, r1
 80049d0:	4616      	mov	r6, r2
 80049d2:	d505      	bpl.n	80049e0 <__swrite+0x1e>
 80049d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049d8:	2302      	movs	r3, #2
 80049da:	2200      	movs	r2, #0
 80049dc:	f000 f83c 	bl	8004a58 <_lseek_r>
 80049e0:	89a3      	ldrh	r3, [r4, #12]
 80049e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80049ea:	81a3      	strh	r3, [r4, #12]
 80049ec:	4632      	mov	r2, r6
 80049ee:	463b      	mov	r3, r7
 80049f0:	4628      	mov	r0, r5
 80049f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80049f6:	f000 b853 	b.w	8004aa0 <_write_r>

080049fa <__sseek>:
 80049fa:	b510      	push	{r4, lr}
 80049fc:	460c      	mov	r4, r1
 80049fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a02:	f000 f829 	bl	8004a58 <_lseek_r>
 8004a06:	1c43      	adds	r3, r0, #1
 8004a08:	89a3      	ldrh	r3, [r4, #12]
 8004a0a:	bf15      	itete	ne
 8004a0c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004a0e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004a12:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004a16:	81a3      	strheq	r3, [r4, #12]
 8004a18:	bf18      	it	ne
 8004a1a:	81a3      	strhne	r3, [r4, #12]
 8004a1c:	bd10      	pop	{r4, pc}

08004a1e <__sclose>:
 8004a1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a22:	f000 b809 	b.w	8004a38 <_close_r>

08004a26 <memset>:
 8004a26:	4402      	add	r2, r0
 8004a28:	4603      	mov	r3, r0
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d100      	bne.n	8004a30 <memset+0xa>
 8004a2e:	4770      	bx	lr
 8004a30:	f803 1b01 	strb.w	r1, [r3], #1
 8004a34:	e7f9      	b.n	8004a2a <memset+0x4>
	...

08004a38 <_close_r>:
 8004a38:	b538      	push	{r3, r4, r5, lr}
 8004a3a:	4d06      	ldr	r5, [pc, #24]	@ (8004a54 <_close_r+0x1c>)
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	4604      	mov	r4, r0
 8004a40:	4608      	mov	r0, r1
 8004a42:	602b      	str	r3, [r5, #0]
 8004a44:	f7fc fc10 	bl	8001268 <_close>
 8004a48:	1c43      	adds	r3, r0, #1
 8004a4a:	d102      	bne.n	8004a52 <_close_r+0x1a>
 8004a4c:	682b      	ldr	r3, [r5, #0]
 8004a4e:	b103      	cbz	r3, 8004a52 <_close_r+0x1a>
 8004a50:	6023      	str	r3, [r4, #0]
 8004a52:	bd38      	pop	{r3, r4, r5, pc}
 8004a54:	20000f00 	.word	0x20000f00

08004a58 <_lseek_r>:
 8004a58:	b538      	push	{r3, r4, r5, lr}
 8004a5a:	4d07      	ldr	r5, [pc, #28]	@ (8004a78 <_lseek_r+0x20>)
 8004a5c:	4604      	mov	r4, r0
 8004a5e:	4608      	mov	r0, r1
 8004a60:	4611      	mov	r1, r2
 8004a62:	2200      	movs	r2, #0
 8004a64:	602a      	str	r2, [r5, #0]
 8004a66:	461a      	mov	r2, r3
 8004a68:	f7fc fc25 	bl	80012b6 <_lseek>
 8004a6c:	1c43      	adds	r3, r0, #1
 8004a6e:	d102      	bne.n	8004a76 <_lseek_r+0x1e>
 8004a70:	682b      	ldr	r3, [r5, #0]
 8004a72:	b103      	cbz	r3, 8004a76 <_lseek_r+0x1e>
 8004a74:	6023      	str	r3, [r4, #0]
 8004a76:	bd38      	pop	{r3, r4, r5, pc}
 8004a78:	20000f00 	.word	0x20000f00

08004a7c <_read_r>:
 8004a7c:	b538      	push	{r3, r4, r5, lr}
 8004a7e:	4d07      	ldr	r5, [pc, #28]	@ (8004a9c <_read_r+0x20>)
 8004a80:	4604      	mov	r4, r0
 8004a82:	4608      	mov	r0, r1
 8004a84:	4611      	mov	r1, r2
 8004a86:	2200      	movs	r2, #0
 8004a88:	602a      	str	r2, [r5, #0]
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	f7fc fbb3 	bl	80011f6 <_read>
 8004a90:	1c43      	adds	r3, r0, #1
 8004a92:	d102      	bne.n	8004a9a <_read_r+0x1e>
 8004a94:	682b      	ldr	r3, [r5, #0]
 8004a96:	b103      	cbz	r3, 8004a9a <_read_r+0x1e>
 8004a98:	6023      	str	r3, [r4, #0]
 8004a9a:	bd38      	pop	{r3, r4, r5, pc}
 8004a9c:	20000f00 	.word	0x20000f00

08004aa0 <_write_r>:
 8004aa0:	b538      	push	{r3, r4, r5, lr}
 8004aa2:	4d07      	ldr	r5, [pc, #28]	@ (8004ac0 <_write_r+0x20>)
 8004aa4:	4604      	mov	r4, r0
 8004aa6:	4608      	mov	r0, r1
 8004aa8:	4611      	mov	r1, r2
 8004aaa:	2200      	movs	r2, #0
 8004aac:	602a      	str	r2, [r5, #0]
 8004aae:	461a      	mov	r2, r3
 8004ab0:	f7fc fbbe 	bl	8001230 <_write>
 8004ab4:	1c43      	adds	r3, r0, #1
 8004ab6:	d102      	bne.n	8004abe <_write_r+0x1e>
 8004ab8:	682b      	ldr	r3, [r5, #0]
 8004aba:	b103      	cbz	r3, 8004abe <_write_r+0x1e>
 8004abc:	6023      	str	r3, [r4, #0]
 8004abe:	bd38      	pop	{r3, r4, r5, pc}
 8004ac0:	20000f00 	.word	0x20000f00

08004ac4 <__errno>:
 8004ac4:	4b01      	ldr	r3, [pc, #4]	@ (8004acc <__errno+0x8>)
 8004ac6:	6818      	ldr	r0, [r3, #0]
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop
 8004acc:	2000001c 	.word	0x2000001c

08004ad0 <__libc_init_array>:
 8004ad0:	b570      	push	{r4, r5, r6, lr}
 8004ad2:	4d0d      	ldr	r5, [pc, #52]	@ (8004b08 <__libc_init_array+0x38>)
 8004ad4:	4c0d      	ldr	r4, [pc, #52]	@ (8004b0c <__libc_init_array+0x3c>)
 8004ad6:	1b64      	subs	r4, r4, r5
 8004ad8:	10a4      	asrs	r4, r4, #2
 8004ada:	2600      	movs	r6, #0
 8004adc:	42a6      	cmp	r6, r4
 8004ade:	d109      	bne.n	8004af4 <__libc_init_array+0x24>
 8004ae0:	4d0b      	ldr	r5, [pc, #44]	@ (8004b10 <__libc_init_array+0x40>)
 8004ae2:	4c0c      	ldr	r4, [pc, #48]	@ (8004b14 <__libc_init_array+0x44>)
 8004ae4:	f000 fe38 	bl	8005758 <_init>
 8004ae8:	1b64      	subs	r4, r4, r5
 8004aea:	10a4      	asrs	r4, r4, #2
 8004aec:	2600      	movs	r6, #0
 8004aee:	42a6      	cmp	r6, r4
 8004af0:	d105      	bne.n	8004afe <__libc_init_array+0x2e>
 8004af2:	bd70      	pop	{r4, r5, r6, pc}
 8004af4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004af8:	4798      	blx	r3
 8004afa:	3601      	adds	r6, #1
 8004afc:	e7ee      	b.n	8004adc <__libc_init_array+0xc>
 8004afe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b02:	4798      	blx	r3
 8004b04:	3601      	adds	r6, #1
 8004b06:	e7f2      	b.n	8004aee <__libc_init_array+0x1e>
 8004b08:	08005870 	.word	0x08005870
 8004b0c:	08005870 	.word	0x08005870
 8004b10:	08005870 	.word	0x08005870
 8004b14:	08005874 	.word	0x08005874

08004b18 <__retarget_lock_init_recursive>:
 8004b18:	4770      	bx	lr

08004b1a <__retarget_lock_acquire_recursive>:
 8004b1a:	4770      	bx	lr

08004b1c <__retarget_lock_release_recursive>:
 8004b1c:	4770      	bx	lr
	...

08004b20 <__assert_func>:
 8004b20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004b22:	4614      	mov	r4, r2
 8004b24:	461a      	mov	r2, r3
 8004b26:	4b09      	ldr	r3, [pc, #36]	@ (8004b4c <__assert_func+0x2c>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4605      	mov	r5, r0
 8004b2c:	68d8      	ldr	r0, [r3, #12]
 8004b2e:	b14c      	cbz	r4, 8004b44 <__assert_func+0x24>
 8004b30:	4b07      	ldr	r3, [pc, #28]	@ (8004b50 <__assert_func+0x30>)
 8004b32:	9100      	str	r1, [sp, #0]
 8004b34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004b38:	4906      	ldr	r1, [pc, #24]	@ (8004b54 <__assert_func+0x34>)
 8004b3a:	462b      	mov	r3, r5
 8004b3c:	f000 f9ba 	bl	8004eb4 <fiprintf>
 8004b40:	f000 f9da 	bl	8004ef8 <abort>
 8004b44:	4b04      	ldr	r3, [pc, #16]	@ (8004b58 <__assert_func+0x38>)
 8004b46:	461c      	mov	r4, r3
 8004b48:	e7f3      	b.n	8004b32 <__assert_func+0x12>
 8004b4a:	bf00      	nop
 8004b4c:	2000001c 	.word	0x2000001c
 8004b50:	080057f7 	.word	0x080057f7
 8004b54:	08005804 	.word	0x08005804
 8004b58:	08005832 	.word	0x08005832

08004b5c <_free_r>:
 8004b5c:	b538      	push	{r3, r4, r5, lr}
 8004b5e:	4605      	mov	r5, r0
 8004b60:	2900      	cmp	r1, #0
 8004b62:	d041      	beq.n	8004be8 <_free_r+0x8c>
 8004b64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b68:	1f0c      	subs	r4, r1, #4
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	bfb8      	it	lt
 8004b6e:	18e4      	addlt	r4, r4, r3
 8004b70:	f000 f8e8 	bl	8004d44 <__malloc_lock>
 8004b74:	4a1d      	ldr	r2, [pc, #116]	@ (8004bec <_free_r+0x90>)
 8004b76:	6813      	ldr	r3, [r2, #0]
 8004b78:	b933      	cbnz	r3, 8004b88 <_free_r+0x2c>
 8004b7a:	6063      	str	r3, [r4, #4]
 8004b7c:	6014      	str	r4, [r2, #0]
 8004b7e:	4628      	mov	r0, r5
 8004b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b84:	f000 b8e4 	b.w	8004d50 <__malloc_unlock>
 8004b88:	42a3      	cmp	r3, r4
 8004b8a:	d908      	bls.n	8004b9e <_free_r+0x42>
 8004b8c:	6820      	ldr	r0, [r4, #0]
 8004b8e:	1821      	adds	r1, r4, r0
 8004b90:	428b      	cmp	r3, r1
 8004b92:	bf01      	itttt	eq
 8004b94:	6819      	ldreq	r1, [r3, #0]
 8004b96:	685b      	ldreq	r3, [r3, #4]
 8004b98:	1809      	addeq	r1, r1, r0
 8004b9a:	6021      	streq	r1, [r4, #0]
 8004b9c:	e7ed      	b.n	8004b7a <_free_r+0x1e>
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	b10b      	cbz	r3, 8004ba8 <_free_r+0x4c>
 8004ba4:	42a3      	cmp	r3, r4
 8004ba6:	d9fa      	bls.n	8004b9e <_free_r+0x42>
 8004ba8:	6811      	ldr	r1, [r2, #0]
 8004baa:	1850      	adds	r0, r2, r1
 8004bac:	42a0      	cmp	r0, r4
 8004bae:	d10b      	bne.n	8004bc8 <_free_r+0x6c>
 8004bb0:	6820      	ldr	r0, [r4, #0]
 8004bb2:	4401      	add	r1, r0
 8004bb4:	1850      	adds	r0, r2, r1
 8004bb6:	4283      	cmp	r3, r0
 8004bb8:	6011      	str	r1, [r2, #0]
 8004bba:	d1e0      	bne.n	8004b7e <_free_r+0x22>
 8004bbc:	6818      	ldr	r0, [r3, #0]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	6053      	str	r3, [r2, #4]
 8004bc2:	4408      	add	r0, r1
 8004bc4:	6010      	str	r0, [r2, #0]
 8004bc6:	e7da      	b.n	8004b7e <_free_r+0x22>
 8004bc8:	d902      	bls.n	8004bd0 <_free_r+0x74>
 8004bca:	230c      	movs	r3, #12
 8004bcc:	602b      	str	r3, [r5, #0]
 8004bce:	e7d6      	b.n	8004b7e <_free_r+0x22>
 8004bd0:	6820      	ldr	r0, [r4, #0]
 8004bd2:	1821      	adds	r1, r4, r0
 8004bd4:	428b      	cmp	r3, r1
 8004bd6:	bf04      	itt	eq
 8004bd8:	6819      	ldreq	r1, [r3, #0]
 8004bda:	685b      	ldreq	r3, [r3, #4]
 8004bdc:	6063      	str	r3, [r4, #4]
 8004bde:	bf04      	itt	eq
 8004be0:	1809      	addeq	r1, r1, r0
 8004be2:	6021      	streq	r1, [r4, #0]
 8004be4:	6054      	str	r4, [r2, #4]
 8004be6:	e7ca      	b.n	8004b7e <_free_r+0x22>
 8004be8:	bd38      	pop	{r3, r4, r5, pc}
 8004bea:	bf00      	nop
 8004bec:	20000f0c 	.word	0x20000f0c

08004bf0 <malloc>:
 8004bf0:	4b02      	ldr	r3, [pc, #8]	@ (8004bfc <malloc+0xc>)
 8004bf2:	4601      	mov	r1, r0
 8004bf4:	6818      	ldr	r0, [r3, #0]
 8004bf6:	f000 b825 	b.w	8004c44 <_malloc_r>
 8004bfa:	bf00      	nop
 8004bfc:	2000001c 	.word	0x2000001c

08004c00 <sbrk_aligned>:
 8004c00:	b570      	push	{r4, r5, r6, lr}
 8004c02:	4e0f      	ldr	r6, [pc, #60]	@ (8004c40 <sbrk_aligned+0x40>)
 8004c04:	460c      	mov	r4, r1
 8004c06:	6831      	ldr	r1, [r6, #0]
 8004c08:	4605      	mov	r5, r0
 8004c0a:	b911      	cbnz	r1, 8004c12 <sbrk_aligned+0x12>
 8004c0c:	f000 f964 	bl	8004ed8 <_sbrk_r>
 8004c10:	6030      	str	r0, [r6, #0]
 8004c12:	4621      	mov	r1, r4
 8004c14:	4628      	mov	r0, r5
 8004c16:	f000 f95f 	bl	8004ed8 <_sbrk_r>
 8004c1a:	1c43      	adds	r3, r0, #1
 8004c1c:	d103      	bne.n	8004c26 <sbrk_aligned+0x26>
 8004c1e:	f04f 34ff 	mov.w	r4, #4294967295
 8004c22:	4620      	mov	r0, r4
 8004c24:	bd70      	pop	{r4, r5, r6, pc}
 8004c26:	1cc4      	adds	r4, r0, #3
 8004c28:	f024 0403 	bic.w	r4, r4, #3
 8004c2c:	42a0      	cmp	r0, r4
 8004c2e:	d0f8      	beq.n	8004c22 <sbrk_aligned+0x22>
 8004c30:	1a21      	subs	r1, r4, r0
 8004c32:	4628      	mov	r0, r5
 8004c34:	f000 f950 	bl	8004ed8 <_sbrk_r>
 8004c38:	3001      	adds	r0, #1
 8004c3a:	d1f2      	bne.n	8004c22 <sbrk_aligned+0x22>
 8004c3c:	e7ef      	b.n	8004c1e <sbrk_aligned+0x1e>
 8004c3e:	bf00      	nop
 8004c40:	20000f08 	.word	0x20000f08

08004c44 <_malloc_r>:
 8004c44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c48:	1ccd      	adds	r5, r1, #3
 8004c4a:	f025 0503 	bic.w	r5, r5, #3
 8004c4e:	3508      	adds	r5, #8
 8004c50:	2d0c      	cmp	r5, #12
 8004c52:	bf38      	it	cc
 8004c54:	250c      	movcc	r5, #12
 8004c56:	2d00      	cmp	r5, #0
 8004c58:	4606      	mov	r6, r0
 8004c5a:	db01      	blt.n	8004c60 <_malloc_r+0x1c>
 8004c5c:	42a9      	cmp	r1, r5
 8004c5e:	d904      	bls.n	8004c6a <_malloc_r+0x26>
 8004c60:	230c      	movs	r3, #12
 8004c62:	6033      	str	r3, [r6, #0]
 8004c64:	2000      	movs	r0, #0
 8004c66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004d40 <_malloc_r+0xfc>
 8004c6e:	f000 f869 	bl	8004d44 <__malloc_lock>
 8004c72:	f8d8 3000 	ldr.w	r3, [r8]
 8004c76:	461c      	mov	r4, r3
 8004c78:	bb44      	cbnz	r4, 8004ccc <_malloc_r+0x88>
 8004c7a:	4629      	mov	r1, r5
 8004c7c:	4630      	mov	r0, r6
 8004c7e:	f7ff ffbf 	bl	8004c00 <sbrk_aligned>
 8004c82:	1c43      	adds	r3, r0, #1
 8004c84:	4604      	mov	r4, r0
 8004c86:	d158      	bne.n	8004d3a <_malloc_r+0xf6>
 8004c88:	f8d8 4000 	ldr.w	r4, [r8]
 8004c8c:	4627      	mov	r7, r4
 8004c8e:	2f00      	cmp	r7, #0
 8004c90:	d143      	bne.n	8004d1a <_malloc_r+0xd6>
 8004c92:	2c00      	cmp	r4, #0
 8004c94:	d04b      	beq.n	8004d2e <_malloc_r+0xea>
 8004c96:	6823      	ldr	r3, [r4, #0]
 8004c98:	4639      	mov	r1, r7
 8004c9a:	4630      	mov	r0, r6
 8004c9c:	eb04 0903 	add.w	r9, r4, r3
 8004ca0:	f000 f91a 	bl	8004ed8 <_sbrk_r>
 8004ca4:	4581      	cmp	r9, r0
 8004ca6:	d142      	bne.n	8004d2e <_malloc_r+0xea>
 8004ca8:	6821      	ldr	r1, [r4, #0]
 8004caa:	1a6d      	subs	r5, r5, r1
 8004cac:	4629      	mov	r1, r5
 8004cae:	4630      	mov	r0, r6
 8004cb0:	f7ff ffa6 	bl	8004c00 <sbrk_aligned>
 8004cb4:	3001      	adds	r0, #1
 8004cb6:	d03a      	beq.n	8004d2e <_malloc_r+0xea>
 8004cb8:	6823      	ldr	r3, [r4, #0]
 8004cba:	442b      	add	r3, r5
 8004cbc:	6023      	str	r3, [r4, #0]
 8004cbe:	f8d8 3000 	ldr.w	r3, [r8]
 8004cc2:	685a      	ldr	r2, [r3, #4]
 8004cc4:	bb62      	cbnz	r2, 8004d20 <_malloc_r+0xdc>
 8004cc6:	f8c8 7000 	str.w	r7, [r8]
 8004cca:	e00f      	b.n	8004cec <_malloc_r+0xa8>
 8004ccc:	6822      	ldr	r2, [r4, #0]
 8004cce:	1b52      	subs	r2, r2, r5
 8004cd0:	d420      	bmi.n	8004d14 <_malloc_r+0xd0>
 8004cd2:	2a0b      	cmp	r2, #11
 8004cd4:	d917      	bls.n	8004d06 <_malloc_r+0xc2>
 8004cd6:	1961      	adds	r1, r4, r5
 8004cd8:	42a3      	cmp	r3, r4
 8004cda:	6025      	str	r5, [r4, #0]
 8004cdc:	bf18      	it	ne
 8004cde:	6059      	strne	r1, [r3, #4]
 8004ce0:	6863      	ldr	r3, [r4, #4]
 8004ce2:	bf08      	it	eq
 8004ce4:	f8c8 1000 	streq.w	r1, [r8]
 8004ce8:	5162      	str	r2, [r4, r5]
 8004cea:	604b      	str	r3, [r1, #4]
 8004cec:	4630      	mov	r0, r6
 8004cee:	f000 f82f 	bl	8004d50 <__malloc_unlock>
 8004cf2:	f104 000b 	add.w	r0, r4, #11
 8004cf6:	1d23      	adds	r3, r4, #4
 8004cf8:	f020 0007 	bic.w	r0, r0, #7
 8004cfc:	1ac2      	subs	r2, r0, r3
 8004cfe:	bf1c      	itt	ne
 8004d00:	1a1b      	subne	r3, r3, r0
 8004d02:	50a3      	strne	r3, [r4, r2]
 8004d04:	e7af      	b.n	8004c66 <_malloc_r+0x22>
 8004d06:	6862      	ldr	r2, [r4, #4]
 8004d08:	42a3      	cmp	r3, r4
 8004d0a:	bf0c      	ite	eq
 8004d0c:	f8c8 2000 	streq.w	r2, [r8]
 8004d10:	605a      	strne	r2, [r3, #4]
 8004d12:	e7eb      	b.n	8004cec <_malloc_r+0xa8>
 8004d14:	4623      	mov	r3, r4
 8004d16:	6864      	ldr	r4, [r4, #4]
 8004d18:	e7ae      	b.n	8004c78 <_malloc_r+0x34>
 8004d1a:	463c      	mov	r4, r7
 8004d1c:	687f      	ldr	r7, [r7, #4]
 8004d1e:	e7b6      	b.n	8004c8e <_malloc_r+0x4a>
 8004d20:	461a      	mov	r2, r3
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	42a3      	cmp	r3, r4
 8004d26:	d1fb      	bne.n	8004d20 <_malloc_r+0xdc>
 8004d28:	2300      	movs	r3, #0
 8004d2a:	6053      	str	r3, [r2, #4]
 8004d2c:	e7de      	b.n	8004cec <_malloc_r+0xa8>
 8004d2e:	230c      	movs	r3, #12
 8004d30:	6033      	str	r3, [r6, #0]
 8004d32:	4630      	mov	r0, r6
 8004d34:	f000 f80c 	bl	8004d50 <__malloc_unlock>
 8004d38:	e794      	b.n	8004c64 <_malloc_r+0x20>
 8004d3a:	6005      	str	r5, [r0, #0]
 8004d3c:	e7d6      	b.n	8004cec <_malloc_r+0xa8>
 8004d3e:	bf00      	nop
 8004d40:	20000f0c 	.word	0x20000f0c

08004d44 <__malloc_lock>:
 8004d44:	4801      	ldr	r0, [pc, #4]	@ (8004d4c <__malloc_lock+0x8>)
 8004d46:	f7ff bee8 	b.w	8004b1a <__retarget_lock_acquire_recursive>
 8004d4a:	bf00      	nop
 8004d4c:	20000f04 	.word	0x20000f04

08004d50 <__malloc_unlock>:
 8004d50:	4801      	ldr	r0, [pc, #4]	@ (8004d58 <__malloc_unlock+0x8>)
 8004d52:	f7ff bee3 	b.w	8004b1c <__retarget_lock_release_recursive>
 8004d56:	bf00      	nop
 8004d58:	20000f04 	.word	0x20000f04

08004d5c <__sflush_r>:
 8004d5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d64:	0716      	lsls	r6, r2, #28
 8004d66:	4605      	mov	r5, r0
 8004d68:	460c      	mov	r4, r1
 8004d6a:	d454      	bmi.n	8004e16 <__sflush_r+0xba>
 8004d6c:	684b      	ldr	r3, [r1, #4]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	dc02      	bgt.n	8004d78 <__sflush_r+0x1c>
 8004d72:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	dd48      	ble.n	8004e0a <__sflush_r+0xae>
 8004d78:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004d7a:	2e00      	cmp	r6, #0
 8004d7c:	d045      	beq.n	8004e0a <__sflush_r+0xae>
 8004d7e:	2300      	movs	r3, #0
 8004d80:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004d84:	682f      	ldr	r7, [r5, #0]
 8004d86:	6a21      	ldr	r1, [r4, #32]
 8004d88:	602b      	str	r3, [r5, #0]
 8004d8a:	d030      	beq.n	8004dee <__sflush_r+0x92>
 8004d8c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004d8e:	89a3      	ldrh	r3, [r4, #12]
 8004d90:	0759      	lsls	r1, r3, #29
 8004d92:	d505      	bpl.n	8004da0 <__sflush_r+0x44>
 8004d94:	6863      	ldr	r3, [r4, #4]
 8004d96:	1ad2      	subs	r2, r2, r3
 8004d98:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004d9a:	b10b      	cbz	r3, 8004da0 <__sflush_r+0x44>
 8004d9c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004d9e:	1ad2      	subs	r2, r2, r3
 8004da0:	2300      	movs	r3, #0
 8004da2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004da4:	6a21      	ldr	r1, [r4, #32]
 8004da6:	4628      	mov	r0, r5
 8004da8:	47b0      	blx	r6
 8004daa:	1c43      	adds	r3, r0, #1
 8004dac:	89a3      	ldrh	r3, [r4, #12]
 8004dae:	d106      	bne.n	8004dbe <__sflush_r+0x62>
 8004db0:	6829      	ldr	r1, [r5, #0]
 8004db2:	291d      	cmp	r1, #29
 8004db4:	d82b      	bhi.n	8004e0e <__sflush_r+0xb2>
 8004db6:	4a2a      	ldr	r2, [pc, #168]	@ (8004e60 <__sflush_r+0x104>)
 8004db8:	40ca      	lsrs	r2, r1
 8004dba:	07d6      	lsls	r6, r2, #31
 8004dbc:	d527      	bpl.n	8004e0e <__sflush_r+0xb2>
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	6062      	str	r2, [r4, #4]
 8004dc2:	04d9      	lsls	r1, r3, #19
 8004dc4:	6922      	ldr	r2, [r4, #16]
 8004dc6:	6022      	str	r2, [r4, #0]
 8004dc8:	d504      	bpl.n	8004dd4 <__sflush_r+0x78>
 8004dca:	1c42      	adds	r2, r0, #1
 8004dcc:	d101      	bne.n	8004dd2 <__sflush_r+0x76>
 8004dce:	682b      	ldr	r3, [r5, #0]
 8004dd0:	b903      	cbnz	r3, 8004dd4 <__sflush_r+0x78>
 8004dd2:	6560      	str	r0, [r4, #84]	@ 0x54
 8004dd4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004dd6:	602f      	str	r7, [r5, #0]
 8004dd8:	b1b9      	cbz	r1, 8004e0a <__sflush_r+0xae>
 8004dda:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004dde:	4299      	cmp	r1, r3
 8004de0:	d002      	beq.n	8004de8 <__sflush_r+0x8c>
 8004de2:	4628      	mov	r0, r5
 8004de4:	f7ff feba 	bl	8004b5c <_free_r>
 8004de8:	2300      	movs	r3, #0
 8004dea:	6363      	str	r3, [r4, #52]	@ 0x34
 8004dec:	e00d      	b.n	8004e0a <__sflush_r+0xae>
 8004dee:	2301      	movs	r3, #1
 8004df0:	4628      	mov	r0, r5
 8004df2:	47b0      	blx	r6
 8004df4:	4602      	mov	r2, r0
 8004df6:	1c50      	adds	r0, r2, #1
 8004df8:	d1c9      	bne.n	8004d8e <__sflush_r+0x32>
 8004dfa:	682b      	ldr	r3, [r5, #0]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d0c6      	beq.n	8004d8e <__sflush_r+0x32>
 8004e00:	2b1d      	cmp	r3, #29
 8004e02:	d001      	beq.n	8004e08 <__sflush_r+0xac>
 8004e04:	2b16      	cmp	r3, #22
 8004e06:	d11e      	bne.n	8004e46 <__sflush_r+0xea>
 8004e08:	602f      	str	r7, [r5, #0]
 8004e0a:	2000      	movs	r0, #0
 8004e0c:	e022      	b.n	8004e54 <__sflush_r+0xf8>
 8004e0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e12:	b21b      	sxth	r3, r3
 8004e14:	e01b      	b.n	8004e4e <__sflush_r+0xf2>
 8004e16:	690f      	ldr	r7, [r1, #16]
 8004e18:	2f00      	cmp	r7, #0
 8004e1a:	d0f6      	beq.n	8004e0a <__sflush_r+0xae>
 8004e1c:	0793      	lsls	r3, r2, #30
 8004e1e:	680e      	ldr	r6, [r1, #0]
 8004e20:	bf08      	it	eq
 8004e22:	694b      	ldreq	r3, [r1, #20]
 8004e24:	600f      	str	r7, [r1, #0]
 8004e26:	bf18      	it	ne
 8004e28:	2300      	movne	r3, #0
 8004e2a:	eba6 0807 	sub.w	r8, r6, r7
 8004e2e:	608b      	str	r3, [r1, #8]
 8004e30:	f1b8 0f00 	cmp.w	r8, #0
 8004e34:	dde9      	ble.n	8004e0a <__sflush_r+0xae>
 8004e36:	6a21      	ldr	r1, [r4, #32]
 8004e38:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004e3a:	4643      	mov	r3, r8
 8004e3c:	463a      	mov	r2, r7
 8004e3e:	4628      	mov	r0, r5
 8004e40:	47b0      	blx	r6
 8004e42:	2800      	cmp	r0, #0
 8004e44:	dc08      	bgt.n	8004e58 <__sflush_r+0xfc>
 8004e46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e4e:	81a3      	strh	r3, [r4, #12]
 8004e50:	f04f 30ff 	mov.w	r0, #4294967295
 8004e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e58:	4407      	add	r7, r0
 8004e5a:	eba8 0800 	sub.w	r8, r8, r0
 8004e5e:	e7e7      	b.n	8004e30 <__sflush_r+0xd4>
 8004e60:	20400001 	.word	0x20400001

08004e64 <_fflush_r>:
 8004e64:	b538      	push	{r3, r4, r5, lr}
 8004e66:	690b      	ldr	r3, [r1, #16]
 8004e68:	4605      	mov	r5, r0
 8004e6a:	460c      	mov	r4, r1
 8004e6c:	b913      	cbnz	r3, 8004e74 <_fflush_r+0x10>
 8004e6e:	2500      	movs	r5, #0
 8004e70:	4628      	mov	r0, r5
 8004e72:	bd38      	pop	{r3, r4, r5, pc}
 8004e74:	b118      	cbz	r0, 8004e7e <_fflush_r+0x1a>
 8004e76:	6a03      	ldr	r3, [r0, #32]
 8004e78:	b90b      	cbnz	r3, 8004e7e <_fflush_r+0x1a>
 8004e7a:	f7ff fd5b 	bl	8004934 <__sinit>
 8004e7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d0f3      	beq.n	8004e6e <_fflush_r+0xa>
 8004e86:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004e88:	07d0      	lsls	r0, r2, #31
 8004e8a:	d404      	bmi.n	8004e96 <_fflush_r+0x32>
 8004e8c:	0599      	lsls	r1, r3, #22
 8004e8e:	d402      	bmi.n	8004e96 <_fflush_r+0x32>
 8004e90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004e92:	f7ff fe42 	bl	8004b1a <__retarget_lock_acquire_recursive>
 8004e96:	4628      	mov	r0, r5
 8004e98:	4621      	mov	r1, r4
 8004e9a:	f7ff ff5f 	bl	8004d5c <__sflush_r>
 8004e9e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004ea0:	07da      	lsls	r2, r3, #31
 8004ea2:	4605      	mov	r5, r0
 8004ea4:	d4e4      	bmi.n	8004e70 <_fflush_r+0xc>
 8004ea6:	89a3      	ldrh	r3, [r4, #12]
 8004ea8:	059b      	lsls	r3, r3, #22
 8004eaa:	d4e1      	bmi.n	8004e70 <_fflush_r+0xc>
 8004eac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004eae:	f7ff fe35 	bl	8004b1c <__retarget_lock_release_recursive>
 8004eb2:	e7dd      	b.n	8004e70 <_fflush_r+0xc>

08004eb4 <fiprintf>:
 8004eb4:	b40e      	push	{r1, r2, r3}
 8004eb6:	b503      	push	{r0, r1, lr}
 8004eb8:	4601      	mov	r1, r0
 8004eba:	ab03      	add	r3, sp, #12
 8004ebc:	4805      	ldr	r0, [pc, #20]	@ (8004ed4 <fiprintf+0x20>)
 8004ebe:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ec2:	6800      	ldr	r0, [r0, #0]
 8004ec4:	9301      	str	r3, [sp, #4]
 8004ec6:	f000 f847 	bl	8004f58 <_vfiprintf_r>
 8004eca:	b002      	add	sp, #8
 8004ecc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ed0:	b003      	add	sp, #12
 8004ed2:	4770      	bx	lr
 8004ed4:	2000001c 	.word	0x2000001c

08004ed8 <_sbrk_r>:
 8004ed8:	b538      	push	{r3, r4, r5, lr}
 8004eda:	4d06      	ldr	r5, [pc, #24]	@ (8004ef4 <_sbrk_r+0x1c>)
 8004edc:	2300      	movs	r3, #0
 8004ede:	4604      	mov	r4, r0
 8004ee0:	4608      	mov	r0, r1
 8004ee2:	602b      	str	r3, [r5, #0]
 8004ee4:	f7fc f9f4 	bl	80012d0 <_sbrk>
 8004ee8:	1c43      	adds	r3, r0, #1
 8004eea:	d102      	bne.n	8004ef2 <_sbrk_r+0x1a>
 8004eec:	682b      	ldr	r3, [r5, #0]
 8004eee:	b103      	cbz	r3, 8004ef2 <_sbrk_r+0x1a>
 8004ef0:	6023      	str	r3, [r4, #0]
 8004ef2:	bd38      	pop	{r3, r4, r5, pc}
 8004ef4:	20000f00 	.word	0x20000f00

08004ef8 <abort>:
 8004ef8:	b508      	push	{r3, lr}
 8004efa:	2006      	movs	r0, #6
 8004efc:	f000 fb8c 	bl	8005618 <raise>
 8004f00:	2001      	movs	r0, #1
 8004f02:	f7fc f96d 	bl	80011e0 <_exit>

08004f06 <__sfputc_r>:
 8004f06:	6893      	ldr	r3, [r2, #8]
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	b410      	push	{r4}
 8004f0e:	6093      	str	r3, [r2, #8]
 8004f10:	da08      	bge.n	8004f24 <__sfputc_r+0x1e>
 8004f12:	6994      	ldr	r4, [r2, #24]
 8004f14:	42a3      	cmp	r3, r4
 8004f16:	db01      	blt.n	8004f1c <__sfputc_r+0x16>
 8004f18:	290a      	cmp	r1, #10
 8004f1a:	d103      	bne.n	8004f24 <__sfputc_r+0x1e>
 8004f1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f20:	f000 babe 	b.w	80054a0 <__swbuf_r>
 8004f24:	6813      	ldr	r3, [r2, #0]
 8004f26:	1c58      	adds	r0, r3, #1
 8004f28:	6010      	str	r0, [r2, #0]
 8004f2a:	7019      	strb	r1, [r3, #0]
 8004f2c:	4608      	mov	r0, r1
 8004f2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f32:	4770      	bx	lr

08004f34 <__sfputs_r>:
 8004f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f36:	4606      	mov	r6, r0
 8004f38:	460f      	mov	r7, r1
 8004f3a:	4614      	mov	r4, r2
 8004f3c:	18d5      	adds	r5, r2, r3
 8004f3e:	42ac      	cmp	r4, r5
 8004f40:	d101      	bne.n	8004f46 <__sfputs_r+0x12>
 8004f42:	2000      	movs	r0, #0
 8004f44:	e007      	b.n	8004f56 <__sfputs_r+0x22>
 8004f46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f4a:	463a      	mov	r2, r7
 8004f4c:	4630      	mov	r0, r6
 8004f4e:	f7ff ffda 	bl	8004f06 <__sfputc_r>
 8004f52:	1c43      	adds	r3, r0, #1
 8004f54:	d1f3      	bne.n	8004f3e <__sfputs_r+0xa>
 8004f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004f58 <_vfiprintf_r>:
 8004f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f5c:	460d      	mov	r5, r1
 8004f5e:	b09d      	sub	sp, #116	@ 0x74
 8004f60:	4614      	mov	r4, r2
 8004f62:	4698      	mov	r8, r3
 8004f64:	4606      	mov	r6, r0
 8004f66:	b118      	cbz	r0, 8004f70 <_vfiprintf_r+0x18>
 8004f68:	6a03      	ldr	r3, [r0, #32]
 8004f6a:	b90b      	cbnz	r3, 8004f70 <_vfiprintf_r+0x18>
 8004f6c:	f7ff fce2 	bl	8004934 <__sinit>
 8004f70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004f72:	07d9      	lsls	r1, r3, #31
 8004f74:	d405      	bmi.n	8004f82 <_vfiprintf_r+0x2a>
 8004f76:	89ab      	ldrh	r3, [r5, #12]
 8004f78:	059a      	lsls	r2, r3, #22
 8004f7a:	d402      	bmi.n	8004f82 <_vfiprintf_r+0x2a>
 8004f7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004f7e:	f7ff fdcc 	bl	8004b1a <__retarget_lock_acquire_recursive>
 8004f82:	89ab      	ldrh	r3, [r5, #12]
 8004f84:	071b      	lsls	r3, r3, #28
 8004f86:	d501      	bpl.n	8004f8c <_vfiprintf_r+0x34>
 8004f88:	692b      	ldr	r3, [r5, #16]
 8004f8a:	b99b      	cbnz	r3, 8004fb4 <_vfiprintf_r+0x5c>
 8004f8c:	4629      	mov	r1, r5
 8004f8e:	4630      	mov	r0, r6
 8004f90:	f000 fac4 	bl	800551c <__swsetup_r>
 8004f94:	b170      	cbz	r0, 8004fb4 <_vfiprintf_r+0x5c>
 8004f96:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004f98:	07dc      	lsls	r4, r3, #31
 8004f9a:	d504      	bpl.n	8004fa6 <_vfiprintf_r+0x4e>
 8004f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8004fa0:	b01d      	add	sp, #116	@ 0x74
 8004fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fa6:	89ab      	ldrh	r3, [r5, #12]
 8004fa8:	0598      	lsls	r0, r3, #22
 8004faa:	d4f7      	bmi.n	8004f9c <_vfiprintf_r+0x44>
 8004fac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004fae:	f7ff fdb5 	bl	8004b1c <__retarget_lock_release_recursive>
 8004fb2:	e7f3      	b.n	8004f9c <_vfiprintf_r+0x44>
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	9309      	str	r3, [sp, #36]	@ 0x24
 8004fb8:	2320      	movs	r3, #32
 8004fba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004fbe:	f8cd 800c 	str.w	r8, [sp, #12]
 8004fc2:	2330      	movs	r3, #48	@ 0x30
 8004fc4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005174 <_vfiprintf_r+0x21c>
 8004fc8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004fcc:	f04f 0901 	mov.w	r9, #1
 8004fd0:	4623      	mov	r3, r4
 8004fd2:	469a      	mov	sl, r3
 8004fd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004fd8:	b10a      	cbz	r2, 8004fde <_vfiprintf_r+0x86>
 8004fda:	2a25      	cmp	r2, #37	@ 0x25
 8004fdc:	d1f9      	bne.n	8004fd2 <_vfiprintf_r+0x7a>
 8004fde:	ebba 0b04 	subs.w	fp, sl, r4
 8004fe2:	d00b      	beq.n	8004ffc <_vfiprintf_r+0xa4>
 8004fe4:	465b      	mov	r3, fp
 8004fe6:	4622      	mov	r2, r4
 8004fe8:	4629      	mov	r1, r5
 8004fea:	4630      	mov	r0, r6
 8004fec:	f7ff ffa2 	bl	8004f34 <__sfputs_r>
 8004ff0:	3001      	adds	r0, #1
 8004ff2:	f000 80a7 	beq.w	8005144 <_vfiprintf_r+0x1ec>
 8004ff6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004ff8:	445a      	add	r2, fp
 8004ffa:	9209      	str	r2, [sp, #36]	@ 0x24
 8004ffc:	f89a 3000 	ldrb.w	r3, [sl]
 8005000:	2b00      	cmp	r3, #0
 8005002:	f000 809f 	beq.w	8005144 <_vfiprintf_r+0x1ec>
 8005006:	2300      	movs	r3, #0
 8005008:	f04f 32ff 	mov.w	r2, #4294967295
 800500c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005010:	f10a 0a01 	add.w	sl, sl, #1
 8005014:	9304      	str	r3, [sp, #16]
 8005016:	9307      	str	r3, [sp, #28]
 8005018:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800501c:	931a      	str	r3, [sp, #104]	@ 0x68
 800501e:	4654      	mov	r4, sl
 8005020:	2205      	movs	r2, #5
 8005022:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005026:	4853      	ldr	r0, [pc, #332]	@ (8005174 <_vfiprintf_r+0x21c>)
 8005028:	f7fb f8d2 	bl	80001d0 <memchr>
 800502c:	9a04      	ldr	r2, [sp, #16]
 800502e:	b9d8      	cbnz	r0, 8005068 <_vfiprintf_r+0x110>
 8005030:	06d1      	lsls	r1, r2, #27
 8005032:	bf44      	itt	mi
 8005034:	2320      	movmi	r3, #32
 8005036:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800503a:	0713      	lsls	r3, r2, #28
 800503c:	bf44      	itt	mi
 800503e:	232b      	movmi	r3, #43	@ 0x2b
 8005040:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005044:	f89a 3000 	ldrb.w	r3, [sl]
 8005048:	2b2a      	cmp	r3, #42	@ 0x2a
 800504a:	d015      	beq.n	8005078 <_vfiprintf_r+0x120>
 800504c:	9a07      	ldr	r2, [sp, #28]
 800504e:	4654      	mov	r4, sl
 8005050:	2000      	movs	r0, #0
 8005052:	f04f 0c0a 	mov.w	ip, #10
 8005056:	4621      	mov	r1, r4
 8005058:	f811 3b01 	ldrb.w	r3, [r1], #1
 800505c:	3b30      	subs	r3, #48	@ 0x30
 800505e:	2b09      	cmp	r3, #9
 8005060:	d94b      	bls.n	80050fa <_vfiprintf_r+0x1a2>
 8005062:	b1b0      	cbz	r0, 8005092 <_vfiprintf_r+0x13a>
 8005064:	9207      	str	r2, [sp, #28]
 8005066:	e014      	b.n	8005092 <_vfiprintf_r+0x13a>
 8005068:	eba0 0308 	sub.w	r3, r0, r8
 800506c:	fa09 f303 	lsl.w	r3, r9, r3
 8005070:	4313      	orrs	r3, r2
 8005072:	9304      	str	r3, [sp, #16]
 8005074:	46a2      	mov	sl, r4
 8005076:	e7d2      	b.n	800501e <_vfiprintf_r+0xc6>
 8005078:	9b03      	ldr	r3, [sp, #12]
 800507a:	1d19      	adds	r1, r3, #4
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	9103      	str	r1, [sp, #12]
 8005080:	2b00      	cmp	r3, #0
 8005082:	bfbb      	ittet	lt
 8005084:	425b      	neglt	r3, r3
 8005086:	f042 0202 	orrlt.w	r2, r2, #2
 800508a:	9307      	strge	r3, [sp, #28]
 800508c:	9307      	strlt	r3, [sp, #28]
 800508e:	bfb8      	it	lt
 8005090:	9204      	strlt	r2, [sp, #16]
 8005092:	7823      	ldrb	r3, [r4, #0]
 8005094:	2b2e      	cmp	r3, #46	@ 0x2e
 8005096:	d10a      	bne.n	80050ae <_vfiprintf_r+0x156>
 8005098:	7863      	ldrb	r3, [r4, #1]
 800509a:	2b2a      	cmp	r3, #42	@ 0x2a
 800509c:	d132      	bne.n	8005104 <_vfiprintf_r+0x1ac>
 800509e:	9b03      	ldr	r3, [sp, #12]
 80050a0:	1d1a      	adds	r2, r3, #4
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	9203      	str	r2, [sp, #12]
 80050a6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80050aa:	3402      	adds	r4, #2
 80050ac:	9305      	str	r3, [sp, #20]
 80050ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005184 <_vfiprintf_r+0x22c>
 80050b2:	7821      	ldrb	r1, [r4, #0]
 80050b4:	2203      	movs	r2, #3
 80050b6:	4650      	mov	r0, sl
 80050b8:	f7fb f88a 	bl	80001d0 <memchr>
 80050bc:	b138      	cbz	r0, 80050ce <_vfiprintf_r+0x176>
 80050be:	9b04      	ldr	r3, [sp, #16]
 80050c0:	eba0 000a 	sub.w	r0, r0, sl
 80050c4:	2240      	movs	r2, #64	@ 0x40
 80050c6:	4082      	lsls	r2, r0
 80050c8:	4313      	orrs	r3, r2
 80050ca:	3401      	adds	r4, #1
 80050cc:	9304      	str	r3, [sp, #16]
 80050ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050d2:	4829      	ldr	r0, [pc, #164]	@ (8005178 <_vfiprintf_r+0x220>)
 80050d4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80050d8:	2206      	movs	r2, #6
 80050da:	f7fb f879 	bl	80001d0 <memchr>
 80050de:	2800      	cmp	r0, #0
 80050e0:	d03f      	beq.n	8005162 <_vfiprintf_r+0x20a>
 80050e2:	4b26      	ldr	r3, [pc, #152]	@ (800517c <_vfiprintf_r+0x224>)
 80050e4:	bb1b      	cbnz	r3, 800512e <_vfiprintf_r+0x1d6>
 80050e6:	9b03      	ldr	r3, [sp, #12]
 80050e8:	3307      	adds	r3, #7
 80050ea:	f023 0307 	bic.w	r3, r3, #7
 80050ee:	3308      	adds	r3, #8
 80050f0:	9303      	str	r3, [sp, #12]
 80050f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80050f4:	443b      	add	r3, r7
 80050f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80050f8:	e76a      	b.n	8004fd0 <_vfiprintf_r+0x78>
 80050fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80050fe:	460c      	mov	r4, r1
 8005100:	2001      	movs	r0, #1
 8005102:	e7a8      	b.n	8005056 <_vfiprintf_r+0xfe>
 8005104:	2300      	movs	r3, #0
 8005106:	3401      	adds	r4, #1
 8005108:	9305      	str	r3, [sp, #20]
 800510a:	4619      	mov	r1, r3
 800510c:	f04f 0c0a 	mov.w	ip, #10
 8005110:	4620      	mov	r0, r4
 8005112:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005116:	3a30      	subs	r2, #48	@ 0x30
 8005118:	2a09      	cmp	r2, #9
 800511a:	d903      	bls.n	8005124 <_vfiprintf_r+0x1cc>
 800511c:	2b00      	cmp	r3, #0
 800511e:	d0c6      	beq.n	80050ae <_vfiprintf_r+0x156>
 8005120:	9105      	str	r1, [sp, #20]
 8005122:	e7c4      	b.n	80050ae <_vfiprintf_r+0x156>
 8005124:	fb0c 2101 	mla	r1, ip, r1, r2
 8005128:	4604      	mov	r4, r0
 800512a:	2301      	movs	r3, #1
 800512c:	e7f0      	b.n	8005110 <_vfiprintf_r+0x1b8>
 800512e:	ab03      	add	r3, sp, #12
 8005130:	9300      	str	r3, [sp, #0]
 8005132:	462a      	mov	r2, r5
 8005134:	4b12      	ldr	r3, [pc, #72]	@ (8005180 <_vfiprintf_r+0x228>)
 8005136:	a904      	add	r1, sp, #16
 8005138:	4630      	mov	r0, r6
 800513a:	f3af 8000 	nop.w
 800513e:	4607      	mov	r7, r0
 8005140:	1c78      	adds	r0, r7, #1
 8005142:	d1d6      	bne.n	80050f2 <_vfiprintf_r+0x19a>
 8005144:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005146:	07d9      	lsls	r1, r3, #31
 8005148:	d405      	bmi.n	8005156 <_vfiprintf_r+0x1fe>
 800514a:	89ab      	ldrh	r3, [r5, #12]
 800514c:	059a      	lsls	r2, r3, #22
 800514e:	d402      	bmi.n	8005156 <_vfiprintf_r+0x1fe>
 8005150:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005152:	f7ff fce3 	bl	8004b1c <__retarget_lock_release_recursive>
 8005156:	89ab      	ldrh	r3, [r5, #12]
 8005158:	065b      	lsls	r3, r3, #25
 800515a:	f53f af1f 	bmi.w	8004f9c <_vfiprintf_r+0x44>
 800515e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005160:	e71e      	b.n	8004fa0 <_vfiprintf_r+0x48>
 8005162:	ab03      	add	r3, sp, #12
 8005164:	9300      	str	r3, [sp, #0]
 8005166:	462a      	mov	r2, r5
 8005168:	4b05      	ldr	r3, [pc, #20]	@ (8005180 <_vfiprintf_r+0x228>)
 800516a:	a904      	add	r1, sp, #16
 800516c:	4630      	mov	r0, r6
 800516e:	f000 f879 	bl	8005264 <_printf_i>
 8005172:	e7e4      	b.n	800513e <_vfiprintf_r+0x1e6>
 8005174:	08005833 	.word	0x08005833
 8005178:	0800583d 	.word	0x0800583d
 800517c:	00000000 	.word	0x00000000
 8005180:	08004f35 	.word	0x08004f35
 8005184:	08005839 	.word	0x08005839

08005188 <_printf_common>:
 8005188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800518c:	4616      	mov	r6, r2
 800518e:	4698      	mov	r8, r3
 8005190:	688a      	ldr	r2, [r1, #8]
 8005192:	690b      	ldr	r3, [r1, #16]
 8005194:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005198:	4293      	cmp	r3, r2
 800519a:	bfb8      	it	lt
 800519c:	4613      	movlt	r3, r2
 800519e:	6033      	str	r3, [r6, #0]
 80051a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80051a4:	4607      	mov	r7, r0
 80051a6:	460c      	mov	r4, r1
 80051a8:	b10a      	cbz	r2, 80051ae <_printf_common+0x26>
 80051aa:	3301      	adds	r3, #1
 80051ac:	6033      	str	r3, [r6, #0]
 80051ae:	6823      	ldr	r3, [r4, #0]
 80051b0:	0699      	lsls	r1, r3, #26
 80051b2:	bf42      	ittt	mi
 80051b4:	6833      	ldrmi	r3, [r6, #0]
 80051b6:	3302      	addmi	r3, #2
 80051b8:	6033      	strmi	r3, [r6, #0]
 80051ba:	6825      	ldr	r5, [r4, #0]
 80051bc:	f015 0506 	ands.w	r5, r5, #6
 80051c0:	d106      	bne.n	80051d0 <_printf_common+0x48>
 80051c2:	f104 0a19 	add.w	sl, r4, #25
 80051c6:	68e3      	ldr	r3, [r4, #12]
 80051c8:	6832      	ldr	r2, [r6, #0]
 80051ca:	1a9b      	subs	r3, r3, r2
 80051cc:	42ab      	cmp	r3, r5
 80051ce:	dc26      	bgt.n	800521e <_printf_common+0x96>
 80051d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80051d4:	6822      	ldr	r2, [r4, #0]
 80051d6:	3b00      	subs	r3, #0
 80051d8:	bf18      	it	ne
 80051da:	2301      	movne	r3, #1
 80051dc:	0692      	lsls	r2, r2, #26
 80051de:	d42b      	bmi.n	8005238 <_printf_common+0xb0>
 80051e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80051e4:	4641      	mov	r1, r8
 80051e6:	4638      	mov	r0, r7
 80051e8:	47c8      	blx	r9
 80051ea:	3001      	adds	r0, #1
 80051ec:	d01e      	beq.n	800522c <_printf_common+0xa4>
 80051ee:	6823      	ldr	r3, [r4, #0]
 80051f0:	6922      	ldr	r2, [r4, #16]
 80051f2:	f003 0306 	and.w	r3, r3, #6
 80051f6:	2b04      	cmp	r3, #4
 80051f8:	bf02      	ittt	eq
 80051fa:	68e5      	ldreq	r5, [r4, #12]
 80051fc:	6833      	ldreq	r3, [r6, #0]
 80051fe:	1aed      	subeq	r5, r5, r3
 8005200:	68a3      	ldr	r3, [r4, #8]
 8005202:	bf0c      	ite	eq
 8005204:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005208:	2500      	movne	r5, #0
 800520a:	4293      	cmp	r3, r2
 800520c:	bfc4      	itt	gt
 800520e:	1a9b      	subgt	r3, r3, r2
 8005210:	18ed      	addgt	r5, r5, r3
 8005212:	2600      	movs	r6, #0
 8005214:	341a      	adds	r4, #26
 8005216:	42b5      	cmp	r5, r6
 8005218:	d11a      	bne.n	8005250 <_printf_common+0xc8>
 800521a:	2000      	movs	r0, #0
 800521c:	e008      	b.n	8005230 <_printf_common+0xa8>
 800521e:	2301      	movs	r3, #1
 8005220:	4652      	mov	r2, sl
 8005222:	4641      	mov	r1, r8
 8005224:	4638      	mov	r0, r7
 8005226:	47c8      	blx	r9
 8005228:	3001      	adds	r0, #1
 800522a:	d103      	bne.n	8005234 <_printf_common+0xac>
 800522c:	f04f 30ff 	mov.w	r0, #4294967295
 8005230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005234:	3501      	adds	r5, #1
 8005236:	e7c6      	b.n	80051c6 <_printf_common+0x3e>
 8005238:	18e1      	adds	r1, r4, r3
 800523a:	1c5a      	adds	r2, r3, #1
 800523c:	2030      	movs	r0, #48	@ 0x30
 800523e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005242:	4422      	add	r2, r4
 8005244:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005248:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800524c:	3302      	adds	r3, #2
 800524e:	e7c7      	b.n	80051e0 <_printf_common+0x58>
 8005250:	2301      	movs	r3, #1
 8005252:	4622      	mov	r2, r4
 8005254:	4641      	mov	r1, r8
 8005256:	4638      	mov	r0, r7
 8005258:	47c8      	blx	r9
 800525a:	3001      	adds	r0, #1
 800525c:	d0e6      	beq.n	800522c <_printf_common+0xa4>
 800525e:	3601      	adds	r6, #1
 8005260:	e7d9      	b.n	8005216 <_printf_common+0x8e>
	...

08005264 <_printf_i>:
 8005264:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005268:	7e0f      	ldrb	r7, [r1, #24]
 800526a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800526c:	2f78      	cmp	r7, #120	@ 0x78
 800526e:	4691      	mov	r9, r2
 8005270:	4680      	mov	r8, r0
 8005272:	460c      	mov	r4, r1
 8005274:	469a      	mov	sl, r3
 8005276:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800527a:	d807      	bhi.n	800528c <_printf_i+0x28>
 800527c:	2f62      	cmp	r7, #98	@ 0x62
 800527e:	d80a      	bhi.n	8005296 <_printf_i+0x32>
 8005280:	2f00      	cmp	r7, #0
 8005282:	f000 80d1 	beq.w	8005428 <_printf_i+0x1c4>
 8005286:	2f58      	cmp	r7, #88	@ 0x58
 8005288:	f000 80b8 	beq.w	80053fc <_printf_i+0x198>
 800528c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005290:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005294:	e03a      	b.n	800530c <_printf_i+0xa8>
 8005296:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800529a:	2b15      	cmp	r3, #21
 800529c:	d8f6      	bhi.n	800528c <_printf_i+0x28>
 800529e:	a101      	add	r1, pc, #4	@ (adr r1, 80052a4 <_printf_i+0x40>)
 80052a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80052a4:	080052fd 	.word	0x080052fd
 80052a8:	08005311 	.word	0x08005311
 80052ac:	0800528d 	.word	0x0800528d
 80052b0:	0800528d 	.word	0x0800528d
 80052b4:	0800528d 	.word	0x0800528d
 80052b8:	0800528d 	.word	0x0800528d
 80052bc:	08005311 	.word	0x08005311
 80052c0:	0800528d 	.word	0x0800528d
 80052c4:	0800528d 	.word	0x0800528d
 80052c8:	0800528d 	.word	0x0800528d
 80052cc:	0800528d 	.word	0x0800528d
 80052d0:	0800540f 	.word	0x0800540f
 80052d4:	0800533b 	.word	0x0800533b
 80052d8:	080053c9 	.word	0x080053c9
 80052dc:	0800528d 	.word	0x0800528d
 80052e0:	0800528d 	.word	0x0800528d
 80052e4:	08005431 	.word	0x08005431
 80052e8:	0800528d 	.word	0x0800528d
 80052ec:	0800533b 	.word	0x0800533b
 80052f0:	0800528d 	.word	0x0800528d
 80052f4:	0800528d 	.word	0x0800528d
 80052f8:	080053d1 	.word	0x080053d1
 80052fc:	6833      	ldr	r3, [r6, #0]
 80052fe:	1d1a      	adds	r2, r3, #4
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	6032      	str	r2, [r6, #0]
 8005304:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005308:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800530c:	2301      	movs	r3, #1
 800530e:	e09c      	b.n	800544a <_printf_i+0x1e6>
 8005310:	6833      	ldr	r3, [r6, #0]
 8005312:	6820      	ldr	r0, [r4, #0]
 8005314:	1d19      	adds	r1, r3, #4
 8005316:	6031      	str	r1, [r6, #0]
 8005318:	0606      	lsls	r6, r0, #24
 800531a:	d501      	bpl.n	8005320 <_printf_i+0xbc>
 800531c:	681d      	ldr	r5, [r3, #0]
 800531e:	e003      	b.n	8005328 <_printf_i+0xc4>
 8005320:	0645      	lsls	r5, r0, #25
 8005322:	d5fb      	bpl.n	800531c <_printf_i+0xb8>
 8005324:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005328:	2d00      	cmp	r5, #0
 800532a:	da03      	bge.n	8005334 <_printf_i+0xd0>
 800532c:	232d      	movs	r3, #45	@ 0x2d
 800532e:	426d      	negs	r5, r5
 8005330:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005334:	4858      	ldr	r0, [pc, #352]	@ (8005498 <_printf_i+0x234>)
 8005336:	230a      	movs	r3, #10
 8005338:	e011      	b.n	800535e <_printf_i+0xfa>
 800533a:	6821      	ldr	r1, [r4, #0]
 800533c:	6833      	ldr	r3, [r6, #0]
 800533e:	0608      	lsls	r0, r1, #24
 8005340:	f853 5b04 	ldr.w	r5, [r3], #4
 8005344:	d402      	bmi.n	800534c <_printf_i+0xe8>
 8005346:	0649      	lsls	r1, r1, #25
 8005348:	bf48      	it	mi
 800534a:	b2ad      	uxthmi	r5, r5
 800534c:	2f6f      	cmp	r7, #111	@ 0x6f
 800534e:	4852      	ldr	r0, [pc, #328]	@ (8005498 <_printf_i+0x234>)
 8005350:	6033      	str	r3, [r6, #0]
 8005352:	bf14      	ite	ne
 8005354:	230a      	movne	r3, #10
 8005356:	2308      	moveq	r3, #8
 8005358:	2100      	movs	r1, #0
 800535a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800535e:	6866      	ldr	r6, [r4, #4]
 8005360:	60a6      	str	r6, [r4, #8]
 8005362:	2e00      	cmp	r6, #0
 8005364:	db05      	blt.n	8005372 <_printf_i+0x10e>
 8005366:	6821      	ldr	r1, [r4, #0]
 8005368:	432e      	orrs	r6, r5
 800536a:	f021 0104 	bic.w	r1, r1, #4
 800536e:	6021      	str	r1, [r4, #0]
 8005370:	d04b      	beq.n	800540a <_printf_i+0x1a6>
 8005372:	4616      	mov	r6, r2
 8005374:	fbb5 f1f3 	udiv	r1, r5, r3
 8005378:	fb03 5711 	mls	r7, r3, r1, r5
 800537c:	5dc7      	ldrb	r7, [r0, r7]
 800537e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005382:	462f      	mov	r7, r5
 8005384:	42bb      	cmp	r3, r7
 8005386:	460d      	mov	r5, r1
 8005388:	d9f4      	bls.n	8005374 <_printf_i+0x110>
 800538a:	2b08      	cmp	r3, #8
 800538c:	d10b      	bne.n	80053a6 <_printf_i+0x142>
 800538e:	6823      	ldr	r3, [r4, #0]
 8005390:	07df      	lsls	r7, r3, #31
 8005392:	d508      	bpl.n	80053a6 <_printf_i+0x142>
 8005394:	6923      	ldr	r3, [r4, #16]
 8005396:	6861      	ldr	r1, [r4, #4]
 8005398:	4299      	cmp	r1, r3
 800539a:	bfde      	ittt	le
 800539c:	2330      	movle	r3, #48	@ 0x30
 800539e:	f806 3c01 	strble.w	r3, [r6, #-1]
 80053a2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80053a6:	1b92      	subs	r2, r2, r6
 80053a8:	6122      	str	r2, [r4, #16]
 80053aa:	f8cd a000 	str.w	sl, [sp]
 80053ae:	464b      	mov	r3, r9
 80053b0:	aa03      	add	r2, sp, #12
 80053b2:	4621      	mov	r1, r4
 80053b4:	4640      	mov	r0, r8
 80053b6:	f7ff fee7 	bl	8005188 <_printf_common>
 80053ba:	3001      	adds	r0, #1
 80053bc:	d14a      	bne.n	8005454 <_printf_i+0x1f0>
 80053be:	f04f 30ff 	mov.w	r0, #4294967295
 80053c2:	b004      	add	sp, #16
 80053c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053c8:	6823      	ldr	r3, [r4, #0]
 80053ca:	f043 0320 	orr.w	r3, r3, #32
 80053ce:	6023      	str	r3, [r4, #0]
 80053d0:	4832      	ldr	r0, [pc, #200]	@ (800549c <_printf_i+0x238>)
 80053d2:	2778      	movs	r7, #120	@ 0x78
 80053d4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80053d8:	6823      	ldr	r3, [r4, #0]
 80053da:	6831      	ldr	r1, [r6, #0]
 80053dc:	061f      	lsls	r7, r3, #24
 80053de:	f851 5b04 	ldr.w	r5, [r1], #4
 80053e2:	d402      	bmi.n	80053ea <_printf_i+0x186>
 80053e4:	065f      	lsls	r7, r3, #25
 80053e6:	bf48      	it	mi
 80053e8:	b2ad      	uxthmi	r5, r5
 80053ea:	6031      	str	r1, [r6, #0]
 80053ec:	07d9      	lsls	r1, r3, #31
 80053ee:	bf44      	itt	mi
 80053f0:	f043 0320 	orrmi.w	r3, r3, #32
 80053f4:	6023      	strmi	r3, [r4, #0]
 80053f6:	b11d      	cbz	r5, 8005400 <_printf_i+0x19c>
 80053f8:	2310      	movs	r3, #16
 80053fa:	e7ad      	b.n	8005358 <_printf_i+0xf4>
 80053fc:	4826      	ldr	r0, [pc, #152]	@ (8005498 <_printf_i+0x234>)
 80053fe:	e7e9      	b.n	80053d4 <_printf_i+0x170>
 8005400:	6823      	ldr	r3, [r4, #0]
 8005402:	f023 0320 	bic.w	r3, r3, #32
 8005406:	6023      	str	r3, [r4, #0]
 8005408:	e7f6      	b.n	80053f8 <_printf_i+0x194>
 800540a:	4616      	mov	r6, r2
 800540c:	e7bd      	b.n	800538a <_printf_i+0x126>
 800540e:	6833      	ldr	r3, [r6, #0]
 8005410:	6825      	ldr	r5, [r4, #0]
 8005412:	6961      	ldr	r1, [r4, #20]
 8005414:	1d18      	adds	r0, r3, #4
 8005416:	6030      	str	r0, [r6, #0]
 8005418:	062e      	lsls	r6, r5, #24
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	d501      	bpl.n	8005422 <_printf_i+0x1be>
 800541e:	6019      	str	r1, [r3, #0]
 8005420:	e002      	b.n	8005428 <_printf_i+0x1c4>
 8005422:	0668      	lsls	r0, r5, #25
 8005424:	d5fb      	bpl.n	800541e <_printf_i+0x1ba>
 8005426:	8019      	strh	r1, [r3, #0]
 8005428:	2300      	movs	r3, #0
 800542a:	6123      	str	r3, [r4, #16]
 800542c:	4616      	mov	r6, r2
 800542e:	e7bc      	b.n	80053aa <_printf_i+0x146>
 8005430:	6833      	ldr	r3, [r6, #0]
 8005432:	1d1a      	adds	r2, r3, #4
 8005434:	6032      	str	r2, [r6, #0]
 8005436:	681e      	ldr	r6, [r3, #0]
 8005438:	6862      	ldr	r2, [r4, #4]
 800543a:	2100      	movs	r1, #0
 800543c:	4630      	mov	r0, r6
 800543e:	f7fa fec7 	bl	80001d0 <memchr>
 8005442:	b108      	cbz	r0, 8005448 <_printf_i+0x1e4>
 8005444:	1b80      	subs	r0, r0, r6
 8005446:	6060      	str	r0, [r4, #4]
 8005448:	6863      	ldr	r3, [r4, #4]
 800544a:	6123      	str	r3, [r4, #16]
 800544c:	2300      	movs	r3, #0
 800544e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005452:	e7aa      	b.n	80053aa <_printf_i+0x146>
 8005454:	6923      	ldr	r3, [r4, #16]
 8005456:	4632      	mov	r2, r6
 8005458:	4649      	mov	r1, r9
 800545a:	4640      	mov	r0, r8
 800545c:	47d0      	blx	sl
 800545e:	3001      	adds	r0, #1
 8005460:	d0ad      	beq.n	80053be <_printf_i+0x15a>
 8005462:	6823      	ldr	r3, [r4, #0]
 8005464:	079b      	lsls	r3, r3, #30
 8005466:	d413      	bmi.n	8005490 <_printf_i+0x22c>
 8005468:	68e0      	ldr	r0, [r4, #12]
 800546a:	9b03      	ldr	r3, [sp, #12]
 800546c:	4298      	cmp	r0, r3
 800546e:	bfb8      	it	lt
 8005470:	4618      	movlt	r0, r3
 8005472:	e7a6      	b.n	80053c2 <_printf_i+0x15e>
 8005474:	2301      	movs	r3, #1
 8005476:	4632      	mov	r2, r6
 8005478:	4649      	mov	r1, r9
 800547a:	4640      	mov	r0, r8
 800547c:	47d0      	blx	sl
 800547e:	3001      	adds	r0, #1
 8005480:	d09d      	beq.n	80053be <_printf_i+0x15a>
 8005482:	3501      	adds	r5, #1
 8005484:	68e3      	ldr	r3, [r4, #12]
 8005486:	9903      	ldr	r1, [sp, #12]
 8005488:	1a5b      	subs	r3, r3, r1
 800548a:	42ab      	cmp	r3, r5
 800548c:	dcf2      	bgt.n	8005474 <_printf_i+0x210>
 800548e:	e7eb      	b.n	8005468 <_printf_i+0x204>
 8005490:	2500      	movs	r5, #0
 8005492:	f104 0619 	add.w	r6, r4, #25
 8005496:	e7f5      	b.n	8005484 <_printf_i+0x220>
 8005498:	08005844 	.word	0x08005844
 800549c:	08005855 	.word	0x08005855

080054a0 <__swbuf_r>:
 80054a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054a2:	460e      	mov	r6, r1
 80054a4:	4614      	mov	r4, r2
 80054a6:	4605      	mov	r5, r0
 80054a8:	b118      	cbz	r0, 80054b2 <__swbuf_r+0x12>
 80054aa:	6a03      	ldr	r3, [r0, #32]
 80054ac:	b90b      	cbnz	r3, 80054b2 <__swbuf_r+0x12>
 80054ae:	f7ff fa41 	bl	8004934 <__sinit>
 80054b2:	69a3      	ldr	r3, [r4, #24]
 80054b4:	60a3      	str	r3, [r4, #8]
 80054b6:	89a3      	ldrh	r3, [r4, #12]
 80054b8:	071a      	lsls	r2, r3, #28
 80054ba:	d501      	bpl.n	80054c0 <__swbuf_r+0x20>
 80054bc:	6923      	ldr	r3, [r4, #16]
 80054be:	b943      	cbnz	r3, 80054d2 <__swbuf_r+0x32>
 80054c0:	4621      	mov	r1, r4
 80054c2:	4628      	mov	r0, r5
 80054c4:	f000 f82a 	bl	800551c <__swsetup_r>
 80054c8:	b118      	cbz	r0, 80054d2 <__swbuf_r+0x32>
 80054ca:	f04f 37ff 	mov.w	r7, #4294967295
 80054ce:	4638      	mov	r0, r7
 80054d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054d2:	6823      	ldr	r3, [r4, #0]
 80054d4:	6922      	ldr	r2, [r4, #16]
 80054d6:	1a98      	subs	r0, r3, r2
 80054d8:	6963      	ldr	r3, [r4, #20]
 80054da:	b2f6      	uxtb	r6, r6
 80054dc:	4283      	cmp	r3, r0
 80054de:	4637      	mov	r7, r6
 80054e0:	dc05      	bgt.n	80054ee <__swbuf_r+0x4e>
 80054e2:	4621      	mov	r1, r4
 80054e4:	4628      	mov	r0, r5
 80054e6:	f7ff fcbd 	bl	8004e64 <_fflush_r>
 80054ea:	2800      	cmp	r0, #0
 80054ec:	d1ed      	bne.n	80054ca <__swbuf_r+0x2a>
 80054ee:	68a3      	ldr	r3, [r4, #8]
 80054f0:	3b01      	subs	r3, #1
 80054f2:	60a3      	str	r3, [r4, #8]
 80054f4:	6823      	ldr	r3, [r4, #0]
 80054f6:	1c5a      	adds	r2, r3, #1
 80054f8:	6022      	str	r2, [r4, #0]
 80054fa:	701e      	strb	r6, [r3, #0]
 80054fc:	6962      	ldr	r2, [r4, #20]
 80054fe:	1c43      	adds	r3, r0, #1
 8005500:	429a      	cmp	r2, r3
 8005502:	d004      	beq.n	800550e <__swbuf_r+0x6e>
 8005504:	89a3      	ldrh	r3, [r4, #12]
 8005506:	07db      	lsls	r3, r3, #31
 8005508:	d5e1      	bpl.n	80054ce <__swbuf_r+0x2e>
 800550a:	2e0a      	cmp	r6, #10
 800550c:	d1df      	bne.n	80054ce <__swbuf_r+0x2e>
 800550e:	4621      	mov	r1, r4
 8005510:	4628      	mov	r0, r5
 8005512:	f7ff fca7 	bl	8004e64 <_fflush_r>
 8005516:	2800      	cmp	r0, #0
 8005518:	d0d9      	beq.n	80054ce <__swbuf_r+0x2e>
 800551a:	e7d6      	b.n	80054ca <__swbuf_r+0x2a>

0800551c <__swsetup_r>:
 800551c:	b538      	push	{r3, r4, r5, lr}
 800551e:	4b29      	ldr	r3, [pc, #164]	@ (80055c4 <__swsetup_r+0xa8>)
 8005520:	4605      	mov	r5, r0
 8005522:	6818      	ldr	r0, [r3, #0]
 8005524:	460c      	mov	r4, r1
 8005526:	b118      	cbz	r0, 8005530 <__swsetup_r+0x14>
 8005528:	6a03      	ldr	r3, [r0, #32]
 800552a:	b90b      	cbnz	r3, 8005530 <__swsetup_r+0x14>
 800552c:	f7ff fa02 	bl	8004934 <__sinit>
 8005530:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005534:	0719      	lsls	r1, r3, #28
 8005536:	d422      	bmi.n	800557e <__swsetup_r+0x62>
 8005538:	06da      	lsls	r2, r3, #27
 800553a:	d407      	bmi.n	800554c <__swsetup_r+0x30>
 800553c:	2209      	movs	r2, #9
 800553e:	602a      	str	r2, [r5, #0]
 8005540:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005544:	81a3      	strh	r3, [r4, #12]
 8005546:	f04f 30ff 	mov.w	r0, #4294967295
 800554a:	e033      	b.n	80055b4 <__swsetup_r+0x98>
 800554c:	0758      	lsls	r0, r3, #29
 800554e:	d512      	bpl.n	8005576 <__swsetup_r+0x5a>
 8005550:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005552:	b141      	cbz	r1, 8005566 <__swsetup_r+0x4a>
 8005554:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005558:	4299      	cmp	r1, r3
 800555a:	d002      	beq.n	8005562 <__swsetup_r+0x46>
 800555c:	4628      	mov	r0, r5
 800555e:	f7ff fafd 	bl	8004b5c <_free_r>
 8005562:	2300      	movs	r3, #0
 8005564:	6363      	str	r3, [r4, #52]	@ 0x34
 8005566:	89a3      	ldrh	r3, [r4, #12]
 8005568:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800556c:	81a3      	strh	r3, [r4, #12]
 800556e:	2300      	movs	r3, #0
 8005570:	6063      	str	r3, [r4, #4]
 8005572:	6923      	ldr	r3, [r4, #16]
 8005574:	6023      	str	r3, [r4, #0]
 8005576:	89a3      	ldrh	r3, [r4, #12]
 8005578:	f043 0308 	orr.w	r3, r3, #8
 800557c:	81a3      	strh	r3, [r4, #12]
 800557e:	6923      	ldr	r3, [r4, #16]
 8005580:	b94b      	cbnz	r3, 8005596 <__swsetup_r+0x7a>
 8005582:	89a3      	ldrh	r3, [r4, #12]
 8005584:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005588:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800558c:	d003      	beq.n	8005596 <__swsetup_r+0x7a>
 800558e:	4621      	mov	r1, r4
 8005590:	4628      	mov	r0, r5
 8005592:	f000 f883 	bl	800569c <__smakebuf_r>
 8005596:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800559a:	f013 0201 	ands.w	r2, r3, #1
 800559e:	d00a      	beq.n	80055b6 <__swsetup_r+0x9a>
 80055a0:	2200      	movs	r2, #0
 80055a2:	60a2      	str	r2, [r4, #8]
 80055a4:	6962      	ldr	r2, [r4, #20]
 80055a6:	4252      	negs	r2, r2
 80055a8:	61a2      	str	r2, [r4, #24]
 80055aa:	6922      	ldr	r2, [r4, #16]
 80055ac:	b942      	cbnz	r2, 80055c0 <__swsetup_r+0xa4>
 80055ae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80055b2:	d1c5      	bne.n	8005540 <__swsetup_r+0x24>
 80055b4:	bd38      	pop	{r3, r4, r5, pc}
 80055b6:	0799      	lsls	r1, r3, #30
 80055b8:	bf58      	it	pl
 80055ba:	6962      	ldrpl	r2, [r4, #20]
 80055bc:	60a2      	str	r2, [r4, #8]
 80055be:	e7f4      	b.n	80055aa <__swsetup_r+0x8e>
 80055c0:	2000      	movs	r0, #0
 80055c2:	e7f7      	b.n	80055b4 <__swsetup_r+0x98>
 80055c4:	2000001c 	.word	0x2000001c

080055c8 <_raise_r>:
 80055c8:	291f      	cmp	r1, #31
 80055ca:	b538      	push	{r3, r4, r5, lr}
 80055cc:	4605      	mov	r5, r0
 80055ce:	460c      	mov	r4, r1
 80055d0:	d904      	bls.n	80055dc <_raise_r+0x14>
 80055d2:	2316      	movs	r3, #22
 80055d4:	6003      	str	r3, [r0, #0]
 80055d6:	f04f 30ff 	mov.w	r0, #4294967295
 80055da:	bd38      	pop	{r3, r4, r5, pc}
 80055dc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80055de:	b112      	cbz	r2, 80055e6 <_raise_r+0x1e>
 80055e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80055e4:	b94b      	cbnz	r3, 80055fa <_raise_r+0x32>
 80055e6:	4628      	mov	r0, r5
 80055e8:	f000 f830 	bl	800564c <_getpid_r>
 80055ec:	4622      	mov	r2, r4
 80055ee:	4601      	mov	r1, r0
 80055f0:	4628      	mov	r0, r5
 80055f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80055f6:	f000 b817 	b.w	8005628 <_kill_r>
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d00a      	beq.n	8005614 <_raise_r+0x4c>
 80055fe:	1c59      	adds	r1, r3, #1
 8005600:	d103      	bne.n	800560a <_raise_r+0x42>
 8005602:	2316      	movs	r3, #22
 8005604:	6003      	str	r3, [r0, #0]
 8005606:	2001      	movs	r0, #1
 8005608:	e7e7      	b.n	80055da <_raise_r+0x12>
 800560a:	2100      	movs	r1, #0
 800560c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005610:	4620      	mov	r0, r4
 8005612:	4798      	blx	r3
 8005614:	2000      	movs	r0, #0
 8005616:	e7e0      	b.n	80055da <_raise_r+0x12>

08005618 <raise>:
 8005618:	4b02      	ldr	r3, [pc, #8]	@ (8005624 <raise+0xc>)
 800561a:	4601      	mov	r1, r0
 800561c:	6818      	ldr	r0, [r3, #0]
 800561e:	f7ff bfd3 	b.w	80055c8 <_raise_r>
 8005622:	bf00      	nop
 8005624:	2000001c 	.word	0x2000001c

08005628 <_kill_r>:
 8005628:	b538      	push	{r3, r4, r5, lr}
 800562a:	4d07      	ldr	r5, [pc, #28]	@ (8005648 <_kill_r+0x20>)
 800562c:	2300      	movs	r3, #0
 800562e:	4604      	mov	r4, r0
 8005630:	4608      	mov	r0, r1
 8005632:	4611      	mov	r1, r2
 8005634:	602b      	str	r3, [r5, #0]
 8005636:	f7fb fdc3 	bl	80011c0 <_kill>
 800563a:	1c43      	adds	r3, r0, #1
 800563c:	d102      	bne.n	8005644 <_kill_r+0x1c>
 800563e:	682b      	ldr	r3, [r5, #0]
 8005640:	b103      	cbz	r3, 8005644 <_kill_r+0x1c>
 8005642:	6023      	str	r3, [r4, #0]
 8005644:	bd38      	pop	{r3, r4, r5, pc}
 8005646:	bf00      	nop
 8005648:	20000f00 	.word	0x20000f00

0800564c <_getpid_r>:
 800564c:	f7fb bdb0 	b.w	80011b0 <_getpid>

08005650 <__swhatbuf_r>:
 8005650:	b570      	push	{r4, r5, r6, lr}
 8005652:	460c      	mov	r4, r1
 8005654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005658:	2900      	cmp	r1, #0
 800565a:	b096      	sub	sp, #88	@ 0x58
 800565c:	4615      	mov	r5, r2
 800565e:	461e      	mov	r6, r3
 8005660:	da0d      	bge.n	800567e <__swhatbuf_r+0x2e>
 8005662:	89a3      	ldrh	r3, [r4, #12]
 8005664:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005668:	f04f 0100 	mov.w	r1, #0
 800566c:	bf14      	ite	ne
 800566e:	2340      	movne	r3, #64	@ 0x40
 8005670:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005674:	2000      	movs	r0, #0
 8005676:	6031      	str	r1, [r6, #0]
 8005678:	602b      	str	r3, [r5, #0]
 800567a:	b016      	add	sp, #88	@ 0x58
 800567c:	bd70      	pop	{r4, r5, r6, pc}
 800567e:	466a      	mov	r2, sp
 8005680:	f000 f848 	bl	8005714 <_fstat_r>
 8005684:	2800      	cmp	r0, #0
 8005686:	dbec      	blt.n	8005662 <__swhatbuf_r+0x12>
 8005688:	9901      	ldr	r1, [sp, #4]
 800568a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800568e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005692:	4259      	negs	r1, r3
 8005694:	4159      	adcs	r1, r3
 8005696:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800569a:	e7eb      	b.n	8005674 <__swhatbuf_r+0x24>

0800569c <__smakebuf_r>:
 800569c:	898b      	ldrh	r3, [r1, #12]
 800569e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80056a0:	079d      	lsls	r5, r3, #30
 80056a2:	4606      	mov	r6, r0
 80056a4:	460c      	mov	r4, r1
 80056a6:	d507      	bpl.n	80056b8 <__smakebuf_r+0x1c>
 80056a8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80056ac:	6023      	str	r3, [r4, #0]
 80056ae:	6123      	str	r3, [r4, #16]
 80056b0:	2301      	movs	r3, #1
 80056b2:	6163      	str	r3, [r4, #20]
 80056b4:	b003      	add	sp, #12
 80056b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056b8:	ab01      	add	r3, sp, #4
 80056ba:	466a      	mov	r2, sp
 80056bc:	f7ff ffc8 	bl	8005650 <__swhatbuf_r>
 80056c0:	9f00      	ldr	r7, [sp, #0]
 80056c2:	4605      	mov	r5, r0
 80056c4:	4639      	mov	r1, r7
 80056c6:	4630      	mov	r0, r6
 80056c8:	f7ff fabc 	bl	8004c44 <_malloc_r>
 80056cc:	b948      	cbnz	r0, 80056e2 <__smakebuf_r+0x46>
 80056ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056d2:	059a      	lsls	r2, r3, #22
 80056d4:	d4ee      	bmi.n	80056b4 <__smakebuf_r+0x18>
 80056d6:	f023 0303 	bic.w	r3, r3, #3
 80056da:	f043 0302 	orr.w	r3, r3, #2
 80056de:	81a3      	strh	r3, [r4, #12]
 80056e0:	e7e2      	b.n	80056a8 <__smakebuf_r+0xc>
 80056e2:	89a3      	ldrh	r3, [r4, #12]
 80056e4:	6020      	str	r0, [r4, #0]
 80056e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056ea:	81a3      	strh	r3, [r4, #12]
 80056ec:	9b01      	ldr	r3, [sp, #4]
 80056ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80056f2:	b15b      	cbz	r3, 800570c <__smakebuf_r+0x70>
 80056f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056f8:	4630      	mov	r0, r6
 80056fa:	f000 f81d 	bl	8005738 <_isatty_r>
 80056fe:	b128      	cbz	r0, 800570c <__smakebuf_r+0x70>
 8005700:	89a3      	ldrh	r3, [r4, #12]
 8005702:	f023 0303 	bic.w	r3, r3, #3
 8005706:	f043 0301 	orr.w	r3, r3, #1
 800570a:	81a3      	strh	r3, [r4, #12]
 800570c:	89a3      	ldrh	r3, [r4, #12]
 800570e:	431d      	orrs	r5, r3
 8005710:	81a5      	strh	r5, [r4, #12]
 8005712:	e7cf      	b.n	80056b4 <__smakebuf_r+0x18>

08005714 <_fstat_r>:
 8005714:	b538      	push	{r3, r4, r5, lr}
 8005716:	4d07      	ldr	r5, [pc, #28]	@ (8005734 <_fstat_r+0x20>)
 8005718:	2300      	movs	r3, #0
 800571a:	4604      	mov	r4, r0
 800571c:	4608      	mov	r0, r1
 800571e:	4611      	mov	r1, r2
 8005720:	602b      	str	r3, [r5, #0]
 8005722:	f7fb fdad 	bl	8001280 <_fstat>
 8005726:	1c43      	adds	r3, r0, #1
 8005728:	d102      	bne.n	8005730 <_fstat_r+0x1c>
 800572a:	682b      	ldr	r3, [r5, #0]
 800572c:	b103      	cbz	r3, 8005730 <_fstat_r+0x1c>
 800572e:	6023      	str	r3, [r4, #0]
 8005730:	bd38      	pop	{r3, r4, r5, pc}
 8005732:	bf00      	nop
 8005734:	20000f00 	.word	0x20000f00

08005738 <_isatty_r>:
 8005738:	b538      	push	{r3, r4, r5, lr}
 800573a:	4d06      	ldr	r5, [pc, #24]	@ (8005754 <_isatty_r+0x1c>)
 800573c:	2300      	movs	r3, #0
 800573e:	4604      	mov	r4, r0
 8005740:	4608      	mov	r0, r1
 8005742:	602b      	str	r3, [r5, #0]
 8005744:	f7fb fdac 	bl	80012a0 <_isatty>
 8005748:	1c43      	adds	r3, r0, #1
 800574a:	d102      	bne.n	8005752 <_isatty_r+0x1a>
 800574c:	682b      	ldr	r3, [r5, #0]
 800574e:	b103      	cbz	r3, 8005752 <_isatty_r+0x1a>
 8005750:	6023      	str	r3, [r4, #0]
 8005752:	bd38      	pop	{r3, r4, r5, pc}
 8005754:	20000f00 	.word	0x20000f00

08005758 <_init>:
 8005758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800575a:	bf00      	nop
 800575c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800575e:	bc08      	pop	{r3}
 8005760:	469e      	mov	lr, r3
 8005762:	4770      	bx	lr

08005764 <_fini>:
 8005764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005766:	bf00      	nop
 8005768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800576a:	bc08      	pop	{r3}
 800576c:	469e      	mov	lr, r3
 800576e:	4770      	bx	lr
