
STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e00  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013550  08006f90  08006f90  00007f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a4e0  0801a4e0  0001c070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801a4e0  0801a4e0  0001b4e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a4e8  0801a4e8  0001c070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a4e8  0801a4e8  0001b4e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801a4ec  0801a4ec  0001b4ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  0801a4f0  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001c070  2**0
                  CONTENTS
 10 .bss          00004f70  20000070  20000070  0001c070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004fe0  20004fe0  0001c070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001c070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f417  00000000  00000000  0001c0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002606  00000000  00000000  0002b4b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000df0  00000000  00000000  0002dac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a3c  00000000  00000000  0002e8b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000232d0  00000000  00000000  0002f2ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000103e9  00000000  00000000  000525bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d933c  00000000  00000000  000629a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000b3  00000000  00000000  0013bce1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000429c  00000000  00000000  0013bd94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  00140030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00002a79  00000000  00000000  00140093  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00000060  00000000  00000000  00142b0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006f78 	.word	0x08006f78

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08006f78 	.word	0x08006f78

080001d0 <arm_bitreversal_32>:
 80001d0:	1c4b      	adds	r3, r1, #1
 80001d2:	2b01      	cmp	r3, #1
 80001d4:	bf98      	it	ls
 80001d6:	4770      	bxls	lr
 80001d8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001dc:	1c91      	adds	r1, r2, #2
 80001de:	089b      	lsrs	r3, r3, #2

080001e0 <arm_bitreversal_32_0>:
 80001e0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001e4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001e8:	880a      	ldrh	r2, [r1, #0]
 80001ea:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001ee:	4480      	add	r8, r0
 80001f0:	4481      	add	r9, r0
 80001f2:	4402      	add	r2, r0
 80001f4:	4484      	add	ip, r0
 80001f6:	f8d9 7000 	ldr.w	r7, [r9]
 80001fa:	f8d8 6000 	ldr.w	r6, [r8]
 80001fe:	6815      	ldr	r5, [r2, #0]
 8000200:	f8dc 4000 	ldr.w	r4, [ip]
 8000204:	f8c9 6000 	str.w	r6, [r9]
 8000208:	f8c8 7000 	str.w	r7, [r8]
 800020c:	f8cc 5000 	str.w	r5, [ip]
 8000210:	6014      	str	r4, [r2, #0]
 8000212:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000216:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800021a:	6855      	ldr	r5, [r2, #4]
 800021c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000220:	f8c9 6004 	str.w	r6, [r9, #4]
 8000224:	f8c8 7004 	str.w	r7, [r8, #4]
 8000228:	f8cc 5004 	str.w	r5, [ip, #4]
 800022c:	6054      	str	r4, [r2, #4]
 800022e:	3108      	adds	r1, #8
 8000230:	3b01      	subs	r3, #1
 8000232:	d1d5      	bne.n	80001e0 <arm_bitreversal_32_0>
 8000234:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000238:	4770      	bx	lr

0800023a <arm_bitreversal_16>:
 800023a:	1c4b      	adds	r3, r1, #1
 800023c:	2b01      	cmp	r3, #1
 800023e:	bf98      	it	ls
 8000240:	4770      	bxls	lr
 8000242:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000246:	1c91      	adds	r1, r2, #2
 8000248:	089b      	lsrs	r3, r3, #2

0800024a <arm_bitreversal_16_0>:
 800024a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800024e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000252:	880a      	ldrh	r2, [r1, #0]
 8000254:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000258:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800025c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000260:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000264:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000268:	f8d9 7000 	ldr.w	r7, [r9]
 800026c:	f8d8 6000 	ldr.w	r6, [r8]
 8000270:	6815      	ldr	r5, [r2, #0]
 8000272:	f8dc 4000 	ldr.w	r4, [ip]
 8000276:	f8c9 6000 	str.w	r6, [r9]
 800027a:	f8c8 7000 	str.w	r7, [r8]
 800027e:	f8cc 5000 	str.w	r5, [ip]
 8000282:	6014      	str	r4, [r2, #0]
 8000284:	3108      	adds	r1, #8
 8000286:	3b01      	subs	r3, #1
 8000288:	d1df      	bne.n	800024a <arm_bitreversal_16_0>
 800028a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800028e:	4770      	bx	lr

08000290 <memchr>:
 8000290:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000294:	2a10      	cmp	r2, #16
 8000296:	db2b      	blt.n	80002f0 <memchr+0x60>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	d008      	beq.n	80002b0 <memchr+0x20>
 800029e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a2:	3a01      	subs	r2, #1
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d02d      	beq.n	8000304 <memchr+0x74>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	b342      	cbz	r2, 8000300 <memchr+0x70>
 80002ae:	d1f6      	bne.n	800029e <memchr+0xe>
 80002b0:	b4f0      	push	{r4, r5, r6, r7}
 80002b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ba:	f022 0407 	bic.w	r4, r2, #7
 80002be:	f07f 0700 	mvns.w	r7, #0
 80002c2:	2300      	movs	r3, #0
 80002c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002c8:	3c08      	subs	r4, #8
 80002ca:	ea85 0501 	eor.w	r5, r5, r1
 80002ce:	ea86 0601 	eor.w	r6, r6, r1
 80002d2:	fa85 f547 	uadd8	r5, r5, r7
 80002d6:	faa3 f587 	sel	r5, r3, r7
 80002da:	fa86 f647 	uadd8	r6, r6, r7
 80002de:	faa5 f687 	sel	r6, r5, r7
 80002e2:	b98e      	cbnz	r6, 8000308 <memchr+0x78>
 80002e4:	d1ee      	bne.n	80002c4 <memchr+0x34>
 80002e6:	bcf0      	pop	{r4, r5, r6, r7}
 80002e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ec:	f002 0207 	and.w	r2, r2, #7
 80002f0:	b132      	cbz	r2, 8000300 <memchr+0x70>
 80002f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f6:	3a01      	subs	r2, #1
 80002f8:	ea83 0301 	eor.w	r3, r3, r1
 80002fc:	b113      	cbz	r3, 8000304 <memchr+0x74>
 80002fe:	d1f8      	bne.n	80002f2 <memchr+0x62>
 8000300:	2000      	movs	r0, #0
 8000302:	4770      	bx	lr
 8000304:	3801      	subs	r0, #1
 8000306:	4770      	bx	lr
 8000308:	2d00      	cmp	r5, #0
 800030a:	bf06      	itte	eq
 800030c:	4635      	moveq	r5, r6
 800030e:	3803      	subeq	r0, #3
 8000310:	3807      	subne	r0, #7
 8000312:	f015 0f01 	tst.w	r5, #1
 8000316:	d107      	bne.n	8000328 <memchr+0x98>
 8000318:	3001      	adds	r0, #1
 800031a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800031e:	bf02      	ittt	eq
 8000320:	3001      	addeq	r0, #1
 8000322:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000326:	3001      	addeq	r0, #1
 8000328:	bcf0      	pop	{r4, r5, r6, r7}
 800032a:	3801      	subs	r0, #1
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop

08000330 <__aeabi_uldivmod>:
 8000330:	b953      	cbnz	r3, 8000348 <__aeabi_uldivmod+0x18>
 8000332:	b94a      	cbnz	r2, 8000348 <__aeabi_uldivmod+0x18>
 8000334:	2900      	cmp	r1, #0
 8000336:	bf08      	it	eq
 8000338:	2800      	cmpeq	r0, #0
 800033a:	bf1c      	itt	ne
 800033c:	f04f 31ff 	movne.w	r1, #4294967295
 8000340:	f04f 30ff 	movne.w	r0, #4294967295
 8000344:	f000 b988 	b.w	8000658 <__aeabi_idiv0>
 8000348:	f1ad 0c08 	sub.w	ip, sp, #8
 800034c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000350:	f000 f806 	bl	8000360 <__udivmoddi4>
 8000354:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000358:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800035c:	b004      	add	sp, #16
 800035e:	4770      	bx	lr

08000360 <__udivmoddi4>:
 8000360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000364:	9d08      	ldr	r5, [sp, #32]
 8000366:	468e      	mov	lr, r1
 8000368:	4604      	mov	r4, r0
 800036a:	4688      	mov	r8, r1
 800036c:	2b00      	cmp	r3, #0
 800036e:	d14a      	bne.n	8000406 <__udivmoddi4+0xa6>
 8000370:	428a      	cmp	r2, r1
 8000372:	4617      	mov	r7, r2
 8000374:	d962      	bls.n	800043c <__udivmoddi4+0xdc>
 8000376:	fab2 f682 	clz	r6, r2
 800037a:	b14e      	cbz	r6, 8000390 <__udivmoddi4+0x30>
 800037c:	f1c6 0320 	rsb	r3, r6, #32
 8000380:	fa01 f806 	lsl.w	r8, r1, r6
 8000384:	fa20 f303 	lsr.w	r3, r0, r3
 8000388:	40b7      	lsls	r7, r6
 800038a:	ea43 0808 	orr.w	r8, r3, r8
 800038e:	40b4      	lsls	r4, r6
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fbb8 f1fe 	udiv	r1, r8, lr
 800039c:	0c23      	lsrs	r3, r4, #16
 800039e:	fb0e 8811 	mls	r8, lr, r1, r8
 80003a2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003a6:	fb01 f20c 	mul.w	r2, r1, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0x62>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f101 30ff 	add.w	r0, r1, #4294967295
 80003b4:	f080 80ea 	bcs.w	800058c <__udivmoddi4+0x22c>
 80003b8:	429a      	cmp	r2, r3
 80003ba:	f240 80e7 	bls.w	800058c <__udivmoddi4+0x22c>
 80003be:	3902      	subs	r1, #2
 80003c0:	443b      	add	r3, r7
 80003c2:	1a9a      	subs	r2, r3, r2
 80003c4:	b2a3      	uxth	r3, r4
 80003c6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003ca:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003d2:	fb00 fc0c 	mul.w	ip, r0, ip
 80003d6:	459c      	cmp	ip, r3
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x8e>
 80003da:	18fb      	adds	r3, r7, r3
 80003dc:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e0:	f080 80d6 	bcs.w	8000590 <__udivmoddi4+0x230>
 80003e4:	459c      	cmp	ip, r3
 80003e6:	f240 80d3 	bls.w	8000590 <__udivmoddi4+0x230>
 80003ea:	443b      	add	r3, r7
 80003ec:	3802      	subs	r0, #2
 80003ee:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003f2:	eba3 030c 	sub.w	r3, r3, ip
 80003f6:	2100      	movs	r1, #0
 80003f8:	b11d      	cbz	r5, 8000402 <__udivmoddi4+0xa2>
 80003fa:	40f3      	lsrs	r3, r6
 80003fc:	2200      	movs	r2, #0
 80003fe:	e9c5 3200 	strd	r3, r2, [r5]
 8000402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000406:	428b      	cmp	r3, r1
 8000408:	d905      	bls.n	8000416 <__udivmoddi4+0xb6>
 800040a:	b10d      	cbz	r5, 8000410 <__udivmoddi4+0xb0>
 800040c:	e9c5 0100 	strd	r0, r1, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	4608      	mov	r0, r1
 8000414:	e7f5      	b.n	8000402 <__udivmoddi4+0xa2>
 8000416:	fab3 f183 	clz	r1, r3
 800041a:	2900      	cmp	r1, #0
 800041c:	d146      	bne.n	80004ac <__udivmoddi4+0x14c>
 800041e:	4573      	cmp	r3, lr
 8000420:	d302      	bcc.n	8000428 <__udivmoddi4+0xc8>
 8000422:	4282      	cmp	r2, r0
 8000424:	f200 8105 	bhi.w	8000632 <__udivmoddi4+0x2d2>
 8000428:	1a84      	subs	r4, r0, r2
 800042a:	eb6e 0203 	sbc.w	r2, lr, r3
 800042e:	2001      	movs	r0, #1
 8000430:	4690      	mov	r8, r2
 8000432:	2d00      	cmp	r5, #0
 8000434:	d0e5      	beq.n	8000402 <__udivmoddi4+0xa2>
 8000436:	e9c5 4800 	strd	r4, r8, [r5]
 800043a:	e7e2      	b.n	8000402 <__udivmoddi4+0xa2>
 800043c:	2a00      	cmp	r2, #0
 800043e:	f000 8090 	beq.w	8000562 <__udivmoddi4+0x202>
 8000442:	fab2 f682 	clz	r6, r2
 8000446:	2e00      	cmp	r6, #0
 8000448:	f040 80a4 	bne.w	8000594 <__udivmoddi4+0x234>
 800044c:	1a8a      	subs	r2, r1, r2
 800044e:	0c03      	lsrs	r3, r0, #16
 8000450:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000454:	b280      	uxth	r0, r0
 8000456:	b2bc      	uxth	r4, r7
 8000458:	2101      	movs	r1, #1
 800045a:	fbb2 fcfe 	udiv	ip, r2, lr
 800045e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000462:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000466:	fb04 f20c 	mul.w	r2, r4, ip
 800046a:	429a      	cmp	r2, r3
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x11e>
 800046e:	18fb      	adds	r3, r7, r3
 8000470:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000474:	d202      	bcs.n	800047c <__udivmoddi4+0x11c>
 8000476:	429a      	cmp	r2, r3
 8000478:	f200 80e0 	bhi.w	800063c <__udivmoddi4+0x2dc>
 800047c:	46c4      	mov	ip, r8
 800047e:	1a9b      	subs	r3, r3, r2
 8000480:	fbb3 f2fe 	udiv	r2, r3, lr
 8000484:	fb0e 3312 	mls	r3, lr, r2, r3
 8000488:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800048c:	fb02 f404 	mul.w	r4, r2, r4
 8000490:	429c      	cmp	r4, r3
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x144>
 8000494:	18fb      	adds	r3, r7, r3
 8000496:	f102 30ff 	add.w	r0, r2, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0x142>
 800049c:	429c      	cmp	r4, r3
 800049e:	f200 80ca 	bhi.w	8000636 <__udivmoddi4+0x2d6>
 80004a2:	4602      	mov	r2, r0
 80004a4:	1b1b      	subs	r3, r3, r4
 80004a6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004aa:	e7a5      	b.n	80003f8 <__udivmoddi4+0x98>
 80004ac:	f1c1 0620 	rsb	r6, r1, #32
 80004b0:	408b      	lsls	r3, r1
 80004b2:	fa22 f706 	lsr.w	r7, r2, r6
 80004b6:	431f      	orrs	r7, r3
 80004b8:	fa0e f401 	lsl.w	r4, lr, r1
 80004bc:	fa20 f306 	lsr.w	r3, r0, r6
 80004c0:	fa2e fe06 	lsr.w	lr, lr, r6
 80004c4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80004c8:	4323      	orrs	r3, r4
 80004ca:	fa00 f801 	lsl.w	r8, r0, r1
 80004ce:	fa1f fc87 	uxth.w	ip, r7
 80004d2:	fbbe f0f9 	udiv	r0, lr, r9
 80004d6:	0c1c      	lsrs	r4, r3, #16
 80004d8:	fb09 ee10 	mls	lr, r9, r0, lr
 80004dc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004e0:	fb00 fe0c 	mul.w	lr, r0, ip
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ea:	d909      	bls.n	8000500 <__udivmoddi4+0x1a0>
 80004ec:	193c      	adds	r4, r7, r4
 80004ee:	f100 3aff 	add.w	sl, r0, #4294967295
 80004f2:	f080 809c 	bcs.w	800062e <__udivmoddi4+0x2ce>
 80004f6:	45a6      	cmp	lr, r4
 80004f8:	f240 8099 	bls.w	800062e <__udivmoddi4+0x2ce>
 80004fc:	3802      	subs	r0, #2
 80004fe:	443c      	add	r4, r7
 8000500:	eba4 040e 	sub.w	r4, r4, lr
 8000504:	fa1f fe83 	uxth.w	lr, r3
 8000508:	fbb4 f3f9 	udiv	r3, r4, r9
 800050c:	fb09 4413 	mls	r4, r9, r3, r4
 8000510:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000514:	fb03 fc0c 	mul.w	ip, r3, ip
 8000518:	45a4      	cmp	ip, r4
 800051a:	d908      	bls.n	800052e <__udivmoddi4+0x1ce>
 800051c:	193c      	adds	r4, r7, r4
 800051e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000522:	f080 8082 	bcs.w	800062a <__udivmoddi4+0x2ca>
 8000526:	45a4      	cmp	ip, r4
 8000528:	d97f      	bls.n	800062a <__udivmoddi4+0x2ca>
 800052a:	3b02      	subs	r3, #2
 800052c:	443c      	add	r4, r7
 800052e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000532:	eba4 040c 	sub.w	r4, r4, ip
 8000536:	fba0 ec02 	umull	lr, ip, r0, r2
 800053a:	4564      	cmp	r4, ip
 800053c:	4673      	mov	r3, lr
 800053e:	46e1      	mov	r9, ip
 8000540:	d362      	bcc.n	8000608 <__udivmoddi4+0x2a8>
 8000542:	d05f      	beq.n	8000604 <__udivmoddi4+0x2a4>
 8000544:	b15d      	cbz	r5, 800055e <__udivmoddi4+0x1fe>
 8000546:	ebb8 0203 	subs.w	r2, r8, r3
 800054a:	eb64 0409 	sbc.w	r4, r4, r9
 800054e:	fa04 f606 	lsl.w	r6, r4, r6
 8000552:	fa22 f301 	lsr.w	r3, r2, r1
 8000556:	431e      	orrs	r6, r3
 8000558:	40cc      	lsrs	r4, r1
 800055a:	e9c5 6400 	strd	r6, r4, [r5]
 800055e:	2100      	movs	r1, #0
 8000560:	e74f      	b.n	8000402 <__udivmoddi4+0xa2>
 8000562:	fbb1 fcf2 	udiv	ip, r1, r2
 8000566:	0c01      	lsrs	r1, r0, #16
 8000568:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800056c:	b280      	uxth	r0, r0
 800056e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000572:	463b      	mov	r3, r7
 8000574:	4638      	mov	r0, r7
 8000576:	463c      	mov	r4, r7
 8000578:	46b8      	mov	r8, r7
 800057a:	46be      	mov	lr, r7
 800057c:	2620      	movs	r6, #32
 800057e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000582:	eba2 0208 	sub.w	r2, r2, r8
 8000586:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800058a:	e766      	b.n	800045a <__udivmoddi4+0xfa>
 800058c:	4601      	mov	r1, r0
 800058e:	e718      	b.n	80003c2 <__udivmoddi4+0x62>
 8000590:	4610      	mov	r0, r2
 8000592:	e72c      	b.n	80003ee <__udivmoddi4+0x8e>
 8000594:	f1c6 0220 	rsb	r2, r6, #32
 8000598:	fa2e f302 	lsr.w	r3, lr, r2
 800059c:	40b7      	lsls	r7, r6
 800059e:	40b1      	lsls	r1, r6
 80005a0:	fa20 f202 	lsr.w	r2, r0, r2
 80005a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005a8:	430a      	orrs	r2, r1
 80005aa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005ae:	b2bc      	uxth	r4, r7
 80005b0:	fb0e 3318 	mls	r3, lr, r8, r3
 80005b4:	0c11      	lsrs	r1, r2, #16
 80005b6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ba:	fb08 f904 	mul.w	r9, r8, r4
 80005be:	40b0      	lsls	r0, r6
 80005c0:	4589      	cmp	r9, r1
 80005c2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80005c6:	b280      	uxth	r0, r0
 80005c8:	d93e      	bls.n	8000648 <__udivmoddi4+0x2e8>
 80005ca:	1879      	adds	r1, r7, r1
 80005cc:	f108 3cff 	add.w	ip, r8, #4294967295
 80005d0:	d201      	bcs.n	80005d6 <__udivmoddi4+0x276>
 80005d2:	4589      	cmp	r9, r1
 80005d4:	d81f      	bhi.n	8000616 <__udivmoddi4+0x2b6>
 80005d6:	eba1 0109 	sub.w	r1, r1, r9
 80005da:	fbb1 f9fe 	udiv	r9, r1, lr
 80005de:	fb09 f804 	mul.w	r8, r9, r4
 80005e2:	fb0e 1119 	mls	r1, lr, r9, r1
 80005e6:	b292      	uxth	r2, r2
 80005e8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005ec:	4542      	cmp	r2, r8
 80005ee:	d229      	bcs.n	8000644 <__udivmoddi4+0x2e4>
 80005f0:	18ba      	adds	r2, r7, r2
 80005f2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005f6:	d2c4      	bcs.n	8000582 <__udivmoddi4+0x222>
 80005f8:	4542      	cmp	r2, r8
 80005fa:	d2c2      	bcs.n	8000582 <__udivmoddi4+0x222>
 80005fc:	f1a9 0102 	sub.w	r1, r9, #2
 8000600:	443a      	add	r2, r7
 8000602:	e7be      	b.n	8000582 <__udivmoddi4+0x222>
 8000604:	45f0      	cmp	r8, lr
 8000606:	d29d      	bcs.n	8000544 <__udivmoddi4+0x1e4>
 8000608:	ebbe 0302 	subs.w	r3, lr, r2
 800060c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000610:	3801      	subs	r0, #1
 8000612:	46e1      	mov	r9, ip
 8000614:	e796      	b.n	8000544 <__udivmoddi4+0x1e4>
 8000616:	eba7 0909 	sub.w	r9, r7, r9
 800061a:	4449      	add	r1, r9
 800061c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000620:	fbb1 f9fe 	udiv	r9, r1, lr
 8000624:	fb09 f804 	mul.w	r8, r9, r4
 8000628:	e7db      	b.n	80005e2 <__udivmoddi4+0x282>
 800062a:	4673      	mov	r3, lr
 800062c:	e77f      	b.n	800052e <__udivmoddi4+0x1ce>
 800062e:	4650      	mov	r0, sl
 8000630:	e766      	b.n	8000500 <__udivmoddi4+0x1a0>
 8000632:	4608      	mov	r0, r1
 8000634:	e6fd      	b.n	8000432 <__udivmoddi4+0xd2>
 8000636:	443b      	add	r3, r7
 8000638:	3a02      	subs	r2, #2
 800063a:	e733      	b.n	80004a4 <__udivmoddi4+0x144>
 800063c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000640:	443b      	add	r3, r7
 8000642:	e71c      	b.n	800047e <__udivmoddi4+0x11e>
 8000644:	4649      	mov	r1, r9
 8000646:	e79c      	b.n	8000582 <__udivmoddi4+0x222>
 8000648:	eba1 0109 	sub.w	r1, r1, r9
 800064c:	46c4      	mov	ip, r8
 800064e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000652:	fb09 f804 	mul.w	r8, r9, r4
 8000656:	e7c4      	b.n	80005e2 <__udivmoddi4+0x282>

08000658 <__aeabi_idiv0>:
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop

0800065c <record_sample_and_maybe_runFFT>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void record_sample_and_maybe_runFFT(void) {
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
    // Convert raw 12‐bit ADC (0..4095) to float in [-1,+1], after centering around middle_point
	uint16_t raw_adc = HAL_ADC_GetValue(&hadc1);
 8000662:	481b      	ldr	r0, [pc, #108]	@ (80006d0 <record_sample_and_maybe_runFFT+0x74>)
 8000664:	f001 fcae 	bl	8001fc4 <HAL_ADC_GetValue>
 8000668:	4603      	mov	r3, r0
 800066a:	80fb      	strh	r3, [r7, #6]

    float centered = ((float)(raw_adc - (uint16_t)(middle_point))) * UINT16_TO_FLOAT;
 800066c:	88fb      	ldrh	r3, [r7, #6]
 800066e:	4a19      	ldr	r2, [pc, #100]	@ (80006d4 <record_sample_and_maybe_runFFT+0x78>)
 8000670:	6812      	ldr	r2, [r2, #0]
 8000672:	b292      	uxth	r2, r2
 8000674:	1a9b      	subs	r3, r3, r2
 8000676:	ee07 3a90 	vmov	s15, r3
 800067a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800067e:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80006d8 <record_sample_and_maybe_runFFT+0x7c>
 8000682:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000686:	edc7 7a00 	vstr	s15, [r7]
    fftBufIn[fftIndex] = centered;
 800068a:	4b14      	ldr	r3, [pc, #80]	@ (80006dc <record_sample_and_maybe_runFFT+0x80>)
 800068c:	881b      	ldrh	r3, [r3, #0]
 800068e:	4a14      	ldr	r2, [pc, #80]	@ (80006e0 <record_sample_and_maybe_runFFT+0x84>)
 8000690:	009b      	lsls	r3, r3, #2
 8000692:	4413      	add	r3, r2
 8000694:	683a      	ldr	r2, [r7, #0]
 8000696:	601a      	str	r2, [r3, #0]
    fftIndex++;
 8000698:	4b10      	ldr	r3, [pc, #64]	@ (80006dc <record_sample_and_maybe_runFFT+0x80>)
 800069a:	881b      	ldrh	r3, [r3, #0]
 800069c:	3301      	adds	r3, #1
 800069e:	b29a      	uxth	r2, r3
 80006a0:	4b0e      	ldr	r3, [pc, #56]	@ (80006dc <record_sample_and_maybe_runFFT+0x80>)
 80006a2:	801a      	strh	r2, [r3, #0]

    if (fftIndex >= FFT_BUFFER_SIZE) {
 80006a4:	4b0d      	ldr	r3, [pc, #52]	@ (80006dc <record_sample_and_maybe_runFFT+0x80>)
 80006a6:	881b      	ldrh	r3, [r3, #0]
 80006a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80006ac:	d30b      	bcc.n	80006c6 <record_sample_and_maybe_runFFT+0x6a>
        // Run the RFFT in place: fftBufIn → fftBufOut
        arm_rfft_fast_f32(&fftHandler, fftBufIn, fftBufOut, 0);
 80006ae:	2300      	movs	r3, #0
 80006b0:	4a0c      	ldr	r2, [pc, #48]	@ (80006e4 <record_sample_and_maybe_runFFT+0x88>)
 80006b2:	490b      	ldr	r1, [pc, #44]	@ (80006e0 <record_sample_and_maybe_runFFT+0x84>)
 80006b4:	480c      	ldr	r0, [pc, #48]	@ (80006e8 <record_sample_and_maybe_runFFT+0x8c>)
 80006b6:	f004 fd21 	bl	80050fc <arm_rfft_fast_f32>

        fftReady = 1;
 80006ba:	4b0c      	ldr	r3, [pc, #48]	@ (80006ec <record_sample_and_maybe_runFFT+0x90>)
 80006bc:	2201      	movs	r2, #1
 80006be:	701a      	strb	r2, [r3, #0]
        fftIndex = 0; // reset buffer index to record next block
 80006c0:	4b06      	ldr	r3, [pc, #24]	@ (80006dc <record_sample_and_maybe_runFFT+0x80>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	801a      	strh	r2, [r3, #0]
    }
}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	2000008c 	.word	0x2000008c
 80006d4:	20000e00 	.word	0x20000e00
 80006d8:	37800001 	.word	0x37800001
 80006dc:	20004e20 	.word	0x20004e20
 80006e0:	20000e20 	.word	0x20000e20
 80006e4:	20002e20 	.word	0x20002e20
 80006e8:	20000e08 	.word	0x20000e08
 80006ec:	20004e22 	.word	0x20004e22

080006f0 <HAL_TIM_PWM_PulseFinishedCallback>:





void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
    if (htim == &htim1) {
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	4a07      	ldr	r2, [pc, #28]	@ (8000718 <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 80006fc:	4293      	cmp	r3, r2
 80006fe:	d106      	bne.n	800070e <HAL_TIM_PWM_PulseFinishedCallback+0x1e>
        HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8000700:	2100      	movs	r1, #0
 8000702:	4805      	ldr	r0, [pc, #20]	@ (8000718 <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 8000704:	f003 fc26 	bl	8003f54 <HAL_TIM_PWM_Stop_DMA>
        datasentflag = 1;
 8000708:	4b04      	ldr	r3, [pc, #16]	@ (800071c <HAL_TIM_PWM_PulseFinishedCallback+0x2c>)
 800070a:	2201      	movs	r2, #1
 800070c:	601a      	str	r2, [r3, #0]
    }
}
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	200000d4 	.word	0x200000d4
 800071c:	20000378 	.word	0x20000378

08000720 <Set_LED>:


void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 8000720:	b480      	push	{r7}
 8000722:	b085      	sub	sp, #20
 8000724:	af00      	add	r7, sp, #0
 8000726:	60f8      	str	r0, [r7, #12]
 8000728:	60b9      	str	r1, [r7, #8]
 800072a:	607a      	str	r2, [r7, #4]
 800072c:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	b2d9      	uxtb	r1, r3
 8000732:	4a11      	ldr	r2, [pc, #68]	@ (8000778 <Set_LED+0x58>)
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	b2d9      	uxtb	r1, r3
 800073e:	4a0e      	ldr	r2, [pc, #56]	@ (8000778 <Set_LED+0x58>)
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	009b      	lsls	r3, r3, #2
 8000744:	4413      	add	r3, r2
 8000746:	460a      	mov	r2, r1
 8000748:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	b2d9      	uxtb	r1, r3
 800074e:	4a0a      	ldr	r2, [pc, #40]	@ (8000778 <Set_LED+0x58>)
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	009b      	lsls	r3, r3, #2
 8000754:	4413      	add	r3, r2
 8000756:	460a      	mov	r2, r1
 8000758:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	b2d9      	uxtb	r1, r3
 800075e:	4a06      	ldr	r2, [pc, #24]	@ (8000778 <Set_LED+0x58>)
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	009b      	lsls	r3, r3, #2
 8000764:	4413      	add	r3, r2
 8000766:	460a      	mov	r2, r1
 8000768:	70da      	strb	r2, [r3, #3]
}
 800076a:	bf00      	nop
 800076c:	3714      	adds	r7, #20
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	200001c8 	.word	0x200001c8

0800077c <Set_Brightness>:

void Set_Brightness (int brightness)  // 0–NORMAL_BRIGHTNESS
{
 800077c:	b480      	push	{r7}
 800077e:	b085      	sub	sp, #20
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS
    if (brightness > NORMAL_BRIGHTNESS) brightness = NORMAL_BRIGHTNESS;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2b14      	cmp	r3, #20
 8000788:	dd01      	ble.n	800078e <Set_Brightness+0x12>
 800078a:	2314      	movs	r3, #20
 800078c:	607b      	str	r3, [r7, #4]
    float scale = brightness / (float)NORMAL_BRIGHTNESS;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	ee07 3a90 	vmov	s15, r3
 8000794:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000798:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 800079c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80007a0:	edc7 7a02 	vstr	s15, [r7, #8]

    for (int i = 0; i < MAX_LED; i++)
 80007a4:	2300      	movs	r3, #0
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	e055      	b.n	8000856 <Set_Brightness+0xda>
    {
        // preserve the “LED number” byte
        LED_Mod[i][0] = LED_Data[i][0];
 80007aa:	4a30      	ldr	r2, [pc, #192]	@ (800086c <Set_Brightness+0xf0>)
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 80007b2:	4a2f      	ldr	r2, [pc, #188]	@ (8000870 <Set_Brightness+0xf4>)
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
        // scale each color channel linearly
        LED_Mod[i][1] = (uint8_t)(LED_Data[i][1] * scale);
 80007ba:	4a2c      	ldr	r2, [pc, #176]	@ (800086c <Set_Brightness+0xf0>)
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	009b      	lsls	r3, r3, #2
 80007c0:	4413      	add	r3, r2
 80007c2:	785b      	ldrb	r3, [r3, #1]
 80007c4:	ee07 3a90 	vmov	s15, r3
 80007c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80007d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007d8:	edc7 7a00 	vstr	s15, [r7]
 80007dc:	783b      	ldrb	r3, [r7, #0]
 80007de:	b2d9      	uxtb	r1, r3
 80007e0:	4a23      	ldr	r2, [pc, #140]	@ (8000870 <Set_Brightness+0xf4>)
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	009b      	lsls	r3, r3, #2
 80007e6:	4413      	add	r3, r2
 80007e8:	460a      	mov	r2, r1
 80007ea:	705a      	strb	r2, [r3, #1]
        LED_Mod[i][2] = (uint8_t)(LED_Data[i][2] * scale);
 80007ec:	4a1f      	ldr	r2, [pc, #124]	@ (800086c <Set_Brightness+0xf0>)
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	009b      	lsls	r3, r3, #2
 80007f2:	4413      	add	r3, r2
 80007f4:	789b      	ldrb	r3, [r3, #2]
 80007f6:	ee07 3a90 	vmov	s15, r3
 80007fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8000802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000806:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800080a:	edc7 7a00 	vstr	s15, [r7]
 800080e:	783b      	ldrb	r3, [r7, #0]
 8000810:	b2d9      	uxtb	r1, r3
 8000812:	4a17      	ldr	r2, [pc, #92]	@ (8000870 <Set_Brightness+0xf4>)
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	009b      	lsls	r3, r3, #2
 8000818:	4413      	add	r3, r2
 800081a:	460a      	mov	r2, r1
 800081c:	709a      	strb	r2, [r3, #2]
        LED_Mod[i][3] = (uint8_t)(LED_Data[i][3] * scale);
 800081e:	4a13      	ldr	r2, [pc, #76]	@ (800086c <Set_Brightness+0xf0>)
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	4413      	add	r3, r2
 8000826:	78db      	ldrb	r3, [r3, #3]
 8000828:	ee07 3a90 	vmov	s15, r3
 800082c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000830:	edd7 7a02 	vldr	s15, [r7, #8]
 8000834:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000838:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800083c:	edc7 7a00 	vstr	s15, [r7]
 8000840:	783b      	ldrb	r3, [r7, #0]
 8000842:	b2d9      	uxtb	r1, r3
 8000844:	4a0a      	ldr	r2, [pc, #40]	@ (8000870 <Set_Brightness+0xf4>)
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	009b      	lsls	r3, r3, #2
 800084a:	4413      	add	r3, r2
 800084c:	460a      	mov	r2, r1
 800084e:	70da      	strb	r2, [r3, #3]
    for (int i = 0; i < MAX_LED; i++)
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	3301      	adds	r3, #1
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	2b35      	cmp	r3, #53	@ 0x35
 800085a:	dda6      	ble.n	80007aa <Set_Brightness+0x2e>
    }
#endif
}
 800085c:	bf00      	nop
 800085e:	bf00      	nop
 8000860:	3714      	adds	r7, #20
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	200001c8 	.word	0x200001c8
 8000870:	200002a0 	.word	0x200002a0

08000874 <WS2812_Send>:

void WS2812_Send (void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b086      	sub	sp, #24
 8000878:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 800087a:	2300      	movs	r3, #0
 800087c:	617b      	str	r3, [r7, #20]
	uint32_t color;


	for (int i= 0; i<MAX_LED; i++)
 800087e:	2300      	movs	r3, #0
 8000880:	613b      	str	r3, [r7, #16]
 8000882:	e036      	b.n	80008f2 <WS2812_Send+0x7e>
	{
#if USE_BRIGHTNESS
		color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
 8000884:	4a2e      	ldr	r2, [pc, #184]	@ (8000940 <WS2812_Send+0xcc>)
 8000886:	693b      	ldr	r3, [r7, #16]
 8000888:	009b      	lsls	r3, r3, #2
 800088a:	4413      	add	r3, r2
 800088c:	785b      	ldrb	r3, [r3, #1]
 800088e:	041a      	lsls	r2, r3, #16
 8000890:	492b      	ldr	r1, [pc, #172]	@ (8000940 <WS2812_Send+0xcc>)
 8000892:	693b      	ldr	r3, [r7, #16]
 8000894:	009b      	lsls	r3, r3, #2
 8000896:	440b      	add	r3, r1
 8000898:	789b      	ldrb	r3, [r3, #2]
 800089a:	021b      	lsls	r3, r3, #8
 800089c:	431a      	orrs	r2, r3
 800089e:	4928      	ldr	r1, [pc, #160]	@ (8000940 <WS2812_Send+0xcc>)
 80008a0:	693b      	ldr	r3, [r7, #16]
 80008a2:	009b      	lsls	r3, r3, #2
 80008a4:	440b      	add	r3, r1
 80008a6:	78db      	ldrb	r3, [r3, #3]
 80008a8:	4313      	orrs	r3, r2
 80008aa:	607b      	str	r3, [r7, #4]
#else
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
#endif

		for (int i=23; i>=0; i--)
 80008ac:	2317      	movs	r3, #23
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	e019      	b.n	80008e6 <WS2812_Send+0x72>
		{
			if (color&(1<<i))
 80008b2:	2201      	movs	r2, #1
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ba:	461a      	mov	r2, r3
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	4013      	ands	r3, r2
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d005      	beq.n	80008d0 <WS2812_Send+0x5c>
			{
				pwmData[indx] = 60;  // 2/3 of 90
 80008c4:	4a1f      	ldr	r2, [pc, #124]	@ (8000944 <WS2812_Send+0xd0>)
 80008c6:	697b      	ldr	r3, [r7, #20]
 80008c8:	213c      	movs	r1, #60	@ 0x3c
 80008ca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80008ce:	e004      	b.n	80008da <WS2812_Send+0x66>
			}

			else pwmData[indx] = 30;  // 1/3 of 90
 80008d0:	4a1c      	ldr	r2, [pc, #112]	@ (8000944 <WS2812_Send+0xd0>)
 80008d2:	697b      	ldr	r3, [r7, #20]
 80008d4:	211e      	movs	r1, #30
 80008d6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			indx++;
 80008da:	697b      	ldr	r3, [r7, #20]
 80008dc:	3301      	adds	r3, #1
 80008de:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	3b01      	subs	r3, #1
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	dae2      	bge.n	80008b2 <WS2812_Send+0x3e>
	for (int i= 0; i<MAX_LED; i++)
 80008ec:	693b      	ldr	r3, [r7, #16]
 80008ee:	3301      	adds	r3, #1
 80008f0:	613b      	str	r3, [r7, #16]
 80008f2:	693b      	ldr	r3, [r7, #16]
 80008f4:	2b35      	cmp	r3, #53	@ 0x35
 80008f6:	ddc5      	ble.n	8000884 <WS2812_Send+0x10>
		}

	}

	for (int i=0; i<50; i++)
 80008f8:	2300      	movs	r3, #0
 80008fa:	60bb      	str	r3, [r7, #8]
 80008fc:	e00a      	b.n	8000914 <WS2812_Send+0xa0>
	{
		pwmData[indx] = 0;
 80008fe:	4a11      	ldr	r2, [pc, #68]	@ (8000944 <WS2812_Send+0xd0>)
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	2100      	movs	r1, #0
 8000904:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	3301      	adds	r3, #1
 800090c:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	3301      	adds	r3, #1
 8000912:	60bb      	str	r3, [r7, #8]
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	2b31      	cmp	r3, #49	@ 0x31
 8000918:	ddf1      	ble.n	80008fe <WS2812_Send+0x8a>
	}

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	b29b      	uxth	r3, r3
 800091e:	4a09      	ldr	r2, [pc, #36]	@ (8000944 <WS2812_Send+0xd0>)
 8000920:	2100      	movs	r1, #0
 8000922:	4809      	ldr	r0, [pc, #36]	@ (8000948 <WS2812_Send+0xd4>)
 8000924:	f003 f94e 	bl	8003bc4 <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag){};
 8000928:	bf00      	nop
 800092a:	4b08      	ldr	r3, [pc, #32]	@ (800094c <WS2812_Send+0xd8>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d0fb      	beq.n	800092a <WS2812_Send+0xb6>
	datasentflag = 0;
 8000932:	4b06      	ldr	r3, [pc, #24]	@ (800094c <WS2812_Send+0xd8>)
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
}
 8000938:	bf00      	nop
 800093a:	3718      	adds	r7, #24
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	200002a0 	.word	0x200002a0
 8000944:	2000037c 	.word	0x2000037c
 8000948:	200000d4 	.word	0x200000d4
 800094c:	20000378 	.word	0x20000378

08000950 <HSV_to_RGB>:

void HSV_to_RGB(float h, float s, float v, uint8_t* r, uint8_t* g, uint8_t* b) {
 8000950:	b480      	push	{r7}
 8000952:	b091      	sub	sp, #68	@ 0x44
 8000954:	af00      	add	r7, sp, #0
 8000956:	ed87 0a07 	vstr	s0, [r7, #28]
 800095a:	edc7 0a06 	vstr	s1, [r7, #24]
 800095e:	ed87 1a05 	vstr	s2, [r7, #20]
 8000962:	6138      	str	r0, [r7, #16]
 8000964:	60f9      	str	r1, [r7, #12]
 8000966:	60ba      	str	r2, [r7, #8]
    int i = (int)(h / 60.0f) % 6;
 8000968:	ed97 7a07 	vldr	s14, [r7, #28]
 800096c:	eddf 6a5d 	vldr	s13, [pc, #372]	@ 8000ae4 <HSV_to_RGB+0x194>
 8000970:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000974:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000978:	ee17 2a90 	vmov	r2, s15
 800097c:	4b5a      	ldr	r3, [pc, #360]	@ (8000ae8 <HSV_to_RGB+0x198>)
 800097e:	fb83 3102 	smull	r3, r1, r3, r2
 8000982:	17d3      	asrs	r3, r2, #31
 8000984:	1ac9      	subs	r1, r1, r3
 8000986:	460b      	mov	r3, r1
 8000988:	005b      	lsls	r3, r3, #1
 800098a:	440b      	add	r3, r1
 800098c:	005b      	lsls	r3, r3, #1
 800098e:	1ad3      	subs	r3, r2, r3
 8000990:	633b      	str	r3, [r7, #48]	@ 0x30
    float f = (h / 60.0f) - i;
 8000992:	edd7 7a07 	vldr	s15, [r7, #28]
 8000996:	eddf 6a53 	vldr	s13, [pc, #332]	@ 8000ae4 <HSV_to_RGB+0x194>
 800099a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800099e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009a0:	ee07 3a90 	vmov	s15, r3
 80009a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009ac:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float p = v * (1.0f - s);
 80009b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80009b4:	edd7 7a06 	vldr	s15, [r7, #24]
 80009b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009bc:	ed97 7a05 	vldr	s14, [r7, #20]
 80009c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009c4:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    float q = v * (1.0f - f * s);
 80009c8:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80009cc:	edd7 7a06 	vldr	s15, [r7, #24]
 80009d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009d4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80009d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009dc:	ed97 7a05 	vldr	s14, [r7, #20]
 80009e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009e4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float t = v * (1.0f - (1.0f - f) * s);
 80009e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80009ec:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80009f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80009f4:	edd7 7a06 	vldr	s15, [r7, #24]
 80009f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000a00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a04:	ed97 7a05 	vldr	s14, [r7, #20]
 8000a08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a0c:	edc7 7a08 	vstr	s15, [r7, #32]

    float r_, g_, b_;

    switch (i) {
 8000a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a12:	2b04      	cmp	r3, #4
 8000a14:	d82f      	bhi.n	8000a76 <HSV_to_RGB+0x126>
 8000a16:	a201      	add	r2, pc, #4	@ (adr r2, 8000a1c <HSV_to_RGB+0xcc>)
 8000a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a1c:	08000a31 	.word	0x08000a31
 8000a20:	08000a3f 	.word	0x08000a3f
 8000a24:	08000a4d 	.word	0x08000a4d
 8000a28:	08000a5b 	.word	0x08000a5b
 8000a2c:	08000a69 	.word	0x08000a69
        case 0: r_ = v; g_ = t; b_ = p; break;
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000a34:	6a3b      	ldr	r3, [r7, #32]
 8000a36:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8000a3c:	e022      	b.n	8000a84 <HSV_to_RGB+0x134>
        case 1: r_ = q; g_ = v; b_ = p; break;
 8000a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a48:	637b      	str	r3, [r7, #52]	@ 0x34
 8000a4a:	e01b      	b.n	8000a84 <HSV_to_RGB+0x134>
        case 2: r_ = p; g_ = v; b_ = t; break;
 8000a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000a54:	6a3b      	ldr	r3, [r7, #32]
 8000a56:	637b      	str	r3, [r7, #52]	@ 0x34
 8000a58:	e014      	b.n	8000a84 <HSV_to_RGB+0x134>
        case 3: r_ = p; g_ = q; b_ = v; break;
 8000a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a60:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	637b      	str	r3, [r7, #52]	@ 0x34
 8000a66:	e00d      	b.n	8000a84 <HSV_to_RGB+0x134>
        case 4: r_ = t; g_ = p; b_ = v; break;
 8000a68:	6a3b      	ldr	r3, [r7, #32]
 8000a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a6e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	637b      	str	r3, [r7, #52]	@ 0x34
 8000a74:	e006      	b.n	8000a84 <HSV_to_RGB+0x134>
        default: r_ = v; g_ = p; b_ = q; break;
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a7c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a80:	637b      	str	r3, [r7, #52]	@ 0x34
 8000a82:	bf00      	nop
    }

    *r = (uint8_t)(r_ * 255);
 8000a84:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8000a88:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8000aec <HSV_to_RGB+0x19c>
 8000a8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a94:	edc7 7a01 	vstr	s15, [r7, #4]
 8000a98:	793b      	ldrb	r3, [r7, #4]
 8000a9a:	b2da      	uxtb	r2, r3
 8000a9c:	693b      	ldr	r3, [r7, #16]
 8000a9e:	701a      	strb	r2, [r3, #0]
    *g = (uint8_t)(g_ * 255);
 8000aa0:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8000aa4:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8000aec <HSV_to_RGB+0x19c>
 8000aa8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000aac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ab0:	edc7 7a01 	vstr	s15, [r7, #4]
 8000ab4:	793b      	ldrb	r3, [r7, #4]
 8000ab6:	b2da      	uxtb	r2, r3
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	701a      	strb	r2, [r3, #0]
    *b = (uint8_t)(b_ * 255);
 8000abc:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000ac0:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8000aec <HSV_to_RGB+0x19c>
 8000ac4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ac8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000acc:	edc7 7a01 	vstr	s15, [r7, #4]
 8000ad0:	793b      	ldrb	r3, [r7, #4]
 8000ad2:	b2da      	uxtb	r2, r3
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	701a      	strb	r2, [r3, #0]
}
 8000ad8:	bf00      	nop
 8000ada:	3744      	adds	r7, #68	@ 0x44
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr
 8000ae4:	42700000 	.word	0x42700000
 8000ae8:	2aaaaaab 	.word	0x2aaaaaab
 8000aec:	437f0000 	.word	0x437f0000

08000af0 <Set_LEDs_color_at_once>:

//effect
void Set_LEDs_color_at_once(int start, int end, int step, int r, int g, int b){
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	60f8      	str	r0, [r7, #12]
 8000af8:	60b9      	str	r1, [r7, #8]
 8000afa:	607a      	str	r2, [r7, #4]
 8000afc:	603b      	str	r3, [r7, #0]
	for (int pos = start; pos < end; pos += step){
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	617b      	str	r3, [r7, #20]
 8000b02:	e009      	b.n	8000b18 <Set_LEDs_color_at_once+0x28>
		Set_LED(pos, r, g, b);		// purple
 8000b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b06:	6a3a      	ldr	r2, [r7, #32]
 8000b08:	6839      	ldr	r1, [r7, #0]
 8000b0a:	6978      	ldr	r0, [r7, #20]
 8000b0c:	f7ff fe08 	bl	8000720 <Set_LED>
	for (int pos = start; pos < end; pos += step){
 8000b10:	697a      	ldr	r2, [r7, #20]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4413      	add	r3, r2
 8000b16:	617b      	str	r3, [r7, #20]
 8000b18:	697a      	ldr	r2, [r7, #20]
 8000b1a:	68bb      	ldr	r3, [r7, #8]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	dbf1      	blt.n	8000b04 <Set_LEDs_color_at_once+0x14>
	}
}
 8000b20:	bf00      	nop
 8000b22:	bf00      	nop
 8000b24:	3718      	adds	r7, #24
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <Turn_off_all_at_once>:
	Set_LEDs_color_at_once(0, to_led, 1, r, g, b);
	Set_Brightness(NORMAL_BRIGHTNESS);
	WS2812_Send();
}

void Turn_off_all_at_once(void){
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	b082      	sub	sp, #8
 8000b2e:	af02      	add	r7, sp, #8
	Set_LEDs_color_at_once(0, MAX_LED, 1, 0, 0, 0);
 8000b30:	2300      	movs	r3, #0
 8000b32:	9301      	str	r3, [sp, #4]
 8000b34:	2300      	movs	r3, #0
 8000b36:	9300      	str	r3, [sp, #0]
 8000b38:	2300      	movs	r3, #0
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	2136      	movs	r1, #54	@ 0x36
 8000b3e:	2000      	movs	r0, #0
 8000b40:	f7ff ffd6 	bl	8000af0 <Set_LEDs_color_at_once>
	Set_Brightness(NORMAL_BRIGHTNESS);
 8000b44:	2014      	movs	r0, #20
 8000b46:	f7ff fe19 	bl	800077c <Set_Brightness>
	WS2812_Send();
 8000b4a:	f7ff fe93 	bl	8000874 <WS2812_Send>
}
 8000b4e:	bf00      	nop
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <frequency_to_full_spectrum>:
        }
    }
}

// Helper function to map frequency to full spectrum (Red to Violet)
void frequency_to_full_spectrum(uint16_t freq, uint8_t* r, uint8_t* g, uint8_t* b) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b086      	sub	sp, #24
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	60b9      	str	r1, [r7, #8]
 8000b5c:	607a      	str	r2, [r7, #4]
 8000b5e:	603b      	str	r3, [r7, #0]
 8000b60:	4603      	mov	r3, r0
 8000b62:	81fb      	strh	r3, [r7, #14]
    // Map frequency to hue (0-300 degrees)
    float hue = (float)freq / 7000.0f * 300.0f; // 0-7kHz mapped to 0-300°
 8000b64:	89fb      	ldrh	r3, [r7, #14]
 8000b66:	ee07 3a90 	vmov	s15, r3
 8000b6a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000b6e:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8000bb8 <frequency_to_full_spectrum+0x64>
 8000b72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b76:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8000bbc <frequency_to_full_spectrum+0x68>
 8000b7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b7e:	edc7 7a05 	vstr	s15, [r7, #20]
    if (hue > 300.0f) hue = 300.0f;
 8000b82:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b86:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8000bbc <frequency_to_full_spectrum+0x68>
 8000b8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b92:	dd01      	ble.n	8000b98 <frequency_to_full_spectrum+0x44>
 8000b94:	4b0a      	ldr	r3, [pc, #40]	@ (8000bc0 <frequency_to_full_spectrum+0x6c>)
 8000b96:	617b      	str	r3, [r7, #20]

    HSV_to_RGB(hue, 1.0f, 1.0f, r, g, b);
 8000b98:	683a      	ldr	r2, [r7, #0]
 8000b9a:	6879      	ldr	r1, [r7, #4]
 8000b9c:	68b8      	ldr	r0, [r7, #8]
 8000b9e:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8000ba2:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8000ba6:	ed97 0a05 	vldr	s0, [r7, #20]
 8000baa:	f7ff fed1 	bl	8000950 <HSV_to_RGB>

}
 8000bae:	bf00      	nop
 8000bb0:	3718      	adds	r7, #24
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	45dac000 	.word	0x45dac000
 8000bbc:	43960000 	.word	0x43960000
 8000bc0:	43960000 	.word	0x43960000

08000bc4 <effect_frequency_chase_gradient>:
#define MAX_PULSES 8
static Pulse pulses[MAX_PULSES];
static uint16_t last_amp = 0;
static uint32_t last_pulse_time = 0;

void effect_frequency_chase_gradient(uint16_t amplitude, uint16_t peak_freq) {
 8000bc4:	b590      	push	{r4, r7, lr}
 8000bc6:	b08f      	sub	sp, #60	@ 0x3c
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	460a      	mov	r2, r1
 8000bce:	80fb      	strh	r3, [r7, #6]
 8000bd0:	4613      	mov	r3, r2
 8000bd2:	80bb      	strh	r3, [r7, #4]
    const uint16_t BEAT_THRESHOLD = 800;  // Adjust based on your amp_maxn
 8000bd4:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8000bd8:	84fb      	strh	r3, [r7, #38]	@ 0x26
    const uint32_t MIN_PULSE_INTERVAL = 100; // Minimum time between pulses (ms)
 8000bda:	2364      	movs	r3, #100	@ 0x64
 8000bdc:	623b      	str	r3, [r7, #32]

    uint32_t current_time = HAL_GetTick();
 8000bde:	f000 ff8f 	bl	8001b00 <HAL_GetTick>
 8000be2:	61f8      	str	r0, [r7, #28]

    // Beat detection: amplitude spike above threshold
    if (amplitude > BEAT_THRESHOLD &&
 8000be4:	88fa      	ldrh	r2, [r7, #6]
 8000be6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000be8:	429a      	cmp	r2, r3
 8000bea:	f240 80a0 	bls.w	8000d2e <effect_frequency_chase_gradient+0x16a>
        amplitude > (last_amp + 200) &&
 8000bee:	88fa      	ldrh	r2, [r7, #6]
 8000bf0:	4b59      	ldr	r3, [pc, #356]	@ (8000d58 <effect_frequency_chase_gradient+0x194>)
 8000bf2:	881b      	ldrh	r3, [r3, #0]
 8000bf4:	33c8      	adds	r3, #200	@ 0xc8
    if (amplitude > BEAT_THRESHOLD &&
 8000bf6:	429a      	cmp	r2, r3
 8000bf8:	f340 8099 	ble.w	8000d2e <effect_frequency_chase_gradient+0x16a>
        (current_time - last_pulse_time) > MIN_PULSE_INTERVAL) {
 8000bfc:	4b57      	ldr	r3, [pc, #348]	@ (8000d5c <effect_frequency_chase_gradient+0x198>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	69fa      	ldr	r2, [r7, #28]
 8000c02:	1ad3      	subs	r3, r2, r3
        amplitude > (last_amp + 200) &&
 8000c04:	6a3a      	ldr	r2, [r7, #32]
 8000c06:	429a      	cmp	r2, r3
 8000c08:	f080 8091 	bcs.w	8000d2e <effect_frequency_chase_gradient+0x16a>

        // Find an inactive pulse slot
        for (int i = 0; i < MAX_PULSES; i++) {
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8000c10:	e089      	b.n	8000d26 <effect_frequency_chase_gradient+0x162>
            if (!pulses[i].active) {
 8000c12:	4953      	ldr	r1, [pc, #332]	@ (8000d60 <effect_frequency_chase_gradient+0x19c>)
 8000c14:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000c16:	4613      	mov	r3, r2
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	4413      	add	r3, r2
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	440b      	add	r3, r1
 8000c20:	3309      	adds	r3, #9
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d17b      	bne.n	8000d20 <effect_frequency_chase_gradient+0x15c>
                // Initialize new pulse
                pulses[i].position = 0;
 8000c28:	494d      	ldr	r1, [pc, #308]	@ (8000d60 <effect_frequency_chase_gradient+0x19c>)
 8000c2a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000c2c:	4613      	mov	r3, r2
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	4413      	add	r3, r2
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	440b      	add	r3, r1
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
                frequency_to_full_spectrum(peak_freq, &pulses[i].r, &pulses[i].g, &pulses[i].b);
 8000c3a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000c3c:	4613      	mov	r3, r2
 8000c3e:	005b      	lsls	r3, r3, #1
 8000c40:	4413      	add	r3, r2
 8000c42:	009b      	lsls	r3, r3, #2
 8000c44:	4a46      	ldr	r2, [pc, #280]	@ (8000d60 <effect_frequency_chase_gradient+0x19c>)
 8000c46:	4413      	add	r3, r2
 8000c48:	1d19      	adds	r1, r3, #4
 8000c4a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000c4c:	4613      	mov	r3, r2
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	4413      	add	r3, r2
 8000c52:	009b      	lsls	r3, r3, #2
 8000c54:	4a42      	ldr	r2, [pc, #264]	@ (8000d60 <effect_frequency_chase_gradient+0x19c>)
 8000c56:	4413      	add	r3, r2
 8000c58:	1d5c      	adds	r4, r3, #5
 8000c5a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	005b      	lsls	r3, r3, #1
 8000c60:	4413      	add	r3, r2
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	4a3e      	ldr	r2, [pc, #248]	@ (8000d60 <effect_frequency_chase_gradient+0x19c>)
 8000c66:	4413      	add	r3, r2
 8000c68:	3306      	adds	r3, #6
 8000c6a:	88b8      	ldrh	r0, [r7, #4]
 8000c6c:	4622      	mov	r2, r4
 8000c6e:	f7ff ff71 	bl	8000b54 <frequency_to_full_spectrum>

                float ratio = (float)amplitude / amp_maxn;
 8000c72:	88fb      	ldrh	r3, [r7, #6]
 8000c74:	ee07 3a90 	vmov	s15, r3
 8000c78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000c7c:	4b39      	ldr	r3, [pc, #228]	@ (8000d64 <effect_frequency_chase_gradient+0x1a0>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	ee07 3a90 	vmov	s15, r3
 8000c84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c8c:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
                if (ratio > 1.0f) ratio = 1.0f;
 8000c90:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8000c94:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000c98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ca0:	dd02      	ble.n	8000ca8 <effect_frequency_chase_gradient+0xe4>
 8000ca2:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000ca6:	633b      	str	r3, [r7, #48]	@ 0x30

                pulses[i].brightness = (uint8_t)(ratio * 255);
 8000ca8:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8000cac:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8000d68 <effect_frequency_chase_gradient+0x1a4>
 8000cb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000cb8:	edc7 7a00 	vstr	s15, [r7]
 8000cbc:	783b      	ldrb	r3, [r7, #0]
 8000cbe:	b2d8      	uxtb	r0, r3
 8000cc0:	4927      	ldr	r1, [pc, #156]	@ (8000d60 <effect_frequency_chase_gradient+0x19c>)
 8000cc2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000cc4:	4613      	mov	r3, r2
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	4413      	add	r3, r2
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	440b      	add	r3, r1
 8000cce:	3307      	adds	r3, #7
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	701a      	strb	r2, [r3, #0]
                pulses[i].length = 3 + (uint8_t)(ratio * 8); // 3-11 LEDs long
 8000cd4:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8000cd8:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8000cdc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ce0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ce4:	edc7 7a00 	vstr	s15, [r7]
 8000ce8:	783b      	ldrb	r3, [r7, #0]
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	3303      	adds	r3, #3
 8000cee:	b2d8      	uxtb	r0, r3
 8000cf0:	491b      	ldr	r1, [pc, #108]	@ (8000d60 <effect_frequency_chase_gradient+0x19c>)
 8000cf2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	4413      	add	r3, r2
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	440b      	add	r3, r1
 8000cfe:	3308      	adds	r3, #8
 8000d00:	4602      	mov	r2, r0
 8000d02:	701a      	strb	r2, [r3, #0]
                pulses[i].active = 1;
 8000d04:	4916      	ldr	r1, [pc, #88]	@ (8000d60 <effect_frequency_chase_gradient+0x19c>)
 8000d06:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000d08:	4613      	mov	r3, r2
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	4413      	add	r3, r2
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	440b      	add	r3, r1
 8000d12:	3309      	adds	r3, #9
 8000d14:	2201      	movs	r2, #1
 8000d16:	701a      	strb	r2, [r3, #0]

                last_pulse_time = current_time;
 8000d18:	4a10      	ldr	r2, [pc, #64]	@ (8000d5c <effect_frequency_chase_gradient+0x198>)
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	6013      	str	r3, [r2, #0]
                break;
 8000d1e:	e006      	b.n	8000d2e <effect_frequency_chase_gradient+0x16a>
        for (int i = 0; i < MAX_PULSES; i++) {
 8000d20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d22:	3301      	adds	r3, #1
 8000d24:	637b      	str	r3, [r7, #52]	@ 0x34
 8000d26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d28:	2b07      	cmp	r3, #7
 8000d2a:	f77f af72 	ble.w	8000c12 <effect_frequency_chase_gradient+0x4e>
            }
        }
    }

    // Clear all LEDs
    Turn_off_all_at_once();
 8000d2e:	f7ff fefc 	bl	8000b2a <Turn_off_all_at_once>

    // Update and draw all active pulses
    for (int i = 0; i < MAX_PULSES; i++) {
 8000d32:	2300      	movs	r3, #0
 8000d34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000d36:	e0fc      	b.n	8000f32 <effect_frequency_chase_gradient+0x36e>
        if (pulses[i].active) {
 8000d38:	4909      	ldr	r1, [pc, #36]	@ (8000d60 <effect_frequency_chase_gradient+0x19c>)
 8000d3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	4413      	add	r3, r2
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	440b      	add	r3, r1
 8000d46:	3309      	adds	r3, #9
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	f000 80ee 	beq.w	8000f2c <effect_frequency_chase_gradient+0x368>
            // Draw pulse with fade-out trail
            for (int j = 0; j < pulses[i].length; j++) {
 8000d50:	2300      	movs	r3, #0
 8000d52:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000d54:	e0ac      	b.n	8000eb0 <effect_frequency_chase_gradient+0x2ec>
 8000d56:	bf00      	nop
 8000d58:	20004e84 	.word	0x20004e84
 8000d5c:	20004e88 	.word	0x20004e88
 8000d60:	20004e24 	.word	0x20004e24
 8000d64:	20000004 	.word	0x20000004
 8000d68:	437f0000 	.word	0x437f0000
                int led_pos = pulses[i].position - j;
 8000d6c:	4979      	ldr	r1, [pc, #484]	@ (8000f54 <effect_frequency_chase_gradient+0x390>)
 8000d6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000d70:	4613      	mov	r3, r2
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	4413      	add	r3, r2
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	440b      	add	r3, r1
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d7e:	1ad3      	subs	r3, r2, r3
 8000d80:	61bb      	str	r3, [r7, #24]
                if (led_pos >= 0 && led_pos < MAX_LED) {
 8000d82:	69bb      	ldr	r3, [r7, #24]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	f2c0 8090 	blt.w	8000eaa <effect_frequency_chase_gradient+0x2e6>
 8000d8a:	69bb      	ldr	r3, [r7, #24]
 8000d8c:	2b35      	cmp	r3, #53	@ 0x35
 8000d8e:	f300 808c 	bgt.w	8000eaa <effect_frequency_chase_gradient+0x2e6>
                    // Calculate fade factor for trail
                    float fade = 1.0f - ((float)j / pulses[i].length);
 8000d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d94:	ee07 3a90 	vmov	s15, r3
 8000d98:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000d9c:	496d      	ldr	r1, [pc, #436]	@ (8000f54 <effect_frequency_chase_gradient+0x390>)
 8000d9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000da0:	4613      	mov	r3, r2
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	4413      	add	r3, r2
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	440b      	add	r3, r1
 8000daa:	3308      	adds	r3, #8
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	ee07 3a90 	vmov	s15, r3
 8000db2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000db6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000dba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000dbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dc2:	edc7 7a05 	vstr	s15, [r7, #20]
                    uint8_t r = (uint8_t)(pulses[i].r * fade);
 8000dc6:	4963      	ldr	r1, [pc, #396]	@ (8000f54 <effect_frequency_chase_gradient+0x390>)
 8000dc8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000dca:	4613      	mov	r3, r2
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	4413      	add	r3, r2
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	440b      	add	r3, r1
 8000dd4:	3304      	adds	r3, #4
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	ee07 3a90 	vmov	s15, r3
 8000ddc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000de0:	edd7 7a05 	vldr	s15, [r7, #20]
 8000de4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000de8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000dec:	edc7 7a00 	vstr	s15, [r7]
 8000df0:	783b      	ldrb	r3, [r7, #0]
 8000df2:	74fb      	strb	r3, [r7, #19]
                    uint8_t g = (uint8_t)(pulses[i].g * fade);
 8000df4:	4957      	ldr	r1, [pc, #348]	@ (8000f54 <effect_frequency_chase_gradient+0x390>)
 8000df6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000df8:	4613      	mov	r3, r2
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	4413      	add	r3, r2
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	440b      	add	r3, r1
 8000e02:	3305      	adds	r3, #5
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	ee07 3a90 	vmov	s15, r3
 8000e0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e0e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e1a:	edc7 7a00 	vstr	s15, [r7]
 8000e1e:	783b      	ldrb	r3, [r7, #0]
 8000e20:	74bb      	strb	r3, [r7, #18]
                    uint8_t b = (uint8_t)(pulses[i].b * fade);
 8000e22:	494c      	ldr	r1, [pc, #304]	@ (8000f54 <effect_frequency_chase_gradient+0x390>)
 8000e24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000e26:	4613      	mov	r3, r2
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	4413      	add	r3, r2
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	440b      	add	r3, r1
 8000e30:	3306      	adds	r3, #6
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	ee07 3a90 	vmov	s15, r3
 8000e38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e3c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e48:	edc7 7a00 	vstr	s15, [r7]
 8000e4c:	783b      	ldrb	r3, [r7, #0]
 8000e4e:	747b      	strb	r3, [r7, #17]

                    // Blend with existing LED color (simple additive)
                    uint8_t existing_r = LED_Data[led_pos][2];
 8000e50:	4a41      	ldr	r2, [pc, #260]	@ (8000f58 <effect_frequency_chase_gradient+0x394>)
 8000e52:	69bb      	ldr	r3, [r7, #24]
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	4413      	add	r3, r2
 8000e58:	789b      	ldrb	r3, [r3, #2]
 8000e5a:	743b      	strb	r3, [r7, #16]
                    uint8_t existing_g = LED_Data[led_pos][1];
 8000e5c:	4a3e      	ldr	r2, [pc, #248]	@ (8000f58 <effect_frequency_chase_gradient+0x394>)
 8000e5e:	69bb      	ldr	r3, [r7, #24]
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	4413      	add	r3, r2
 8000e64:	785b      	ldrb	r3, [r3, #1]
 8000e66:	73fb      	strb	r3, [r7, #15]
                    uint8_t existing_b = LED_Data[led_pos][3];
 8000e68:	4a3b      	ldr	r2, [pc, #236]	@ (8000f58 <effect_frequency_chase_gradient+0x394>)
 8000e6a:	69bb      	ldr	r3, [r7, #24]
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	4413      	add	r3, r2
 8000e70:	78db      	ldrb	r3, [r3, #3]
 8000e72:	73bb      	strb	r3, [r7, #14]

                    r = (r + existing_r > 255) ? 255 : r + existing_r;
 8000e74:	7cfa      	ldrb	r2, [r7, #19]
 8000e76:	7c3b      	ldrb	r3, [r7, #16]
 8000e78:	4413      	add	r3, r2
 8000e7a:	2bff      	cmp	r3, #255	@ 0xff
 8000e7c:	bfa8      	it	ge
 8000e7e:	23ff      	movge	r3, #255	@ 0xff
 8000e80:	74fb      	strb	r3, [r7, #19]
                    g = (g + existing_g > 255) ? 255 : g + existing_g;
 8000e82:	7cba      	ldrb	r2, [r7, #18]
 8000e84:	7bfb      	ldrb	r3, [r7, #15]
 8000e86:	4413      	add	r3, r2
 8000e88:	2bff      	cmp	r3, #255	@ 0xff
 8000e8a:	bfa8      	it	ge
 8000e8c:	23ff      	movge	r3, #255	@ 0xff
 8000e8e:	74bb      	strb	r3, [r7, #18]
                    b = (b + existing_b > 255) ? 255 : b + existing_b;
 8000e90:	7c7a      	ldrb	r2, [r7, #17]
 8000e92:	7bbb      	ldrb	r3, [r7, #14]
 8000e94:	4413      	add	r3, r2
 8000e96:	2bff      	cmp	r3, #255	@ 0xff
 8000e98:	bfa8      	it	ge
 8000e9a:	23ff      	movge	r3, #255	@ 0xff
 8000e9c:	747b      	strb	r3, [r7, #17]

                    Set_LED(led_pos, r, g, b);
 8000e9e:	7cf9      	ldrb	r1, [r7, #19]
 8000ea0:	7cba      	ldrb	r2, [r7, #18]
 8000ea2:	7c7b      	ldrb	r3, [r7, #17]
 8000ea4:	69b8      	ldr	r0, [r7, #24]
 8000ea6:	f7ff fc3b 	bl	8000720 <Set_LED>
            for (int j = 0; j < pulses[i].length; j++) {
 8000eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000eac:	3301      	adds	r3, #1
 8000eae:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000eb0:	4928      	ldr	r1, [pc, #160]	@ (8000f54 <effect_frequency_chase_gradient+0x390>)
 8000eb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	4413      	add	r3, r2
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	440b      	add	r3, r1
 8000ebe:	3308      	adds	r3, #8
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	f6ff af50 	blt.w	8000d6c <effect_frequency_chase_gradient+0x1a8>
                }
            }

            // Move pulse forward
            pulses[i].position++;
 8000ecc:	4921      	ldr	r1, [pc, #132]	@ (8000f54 <effect_frequency_chase_gradient+0x390>)
 8000ece:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000ed0:	4613      	mov	r3, r2
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	4413      	add	r3, r2
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	440b      	add	r3, r1
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	1c59      	adds	r1, r3, #1
 8000ede:	481d      	ldr	r0, [pc, #116]	@ (8000f54 <effect_frequency_chase_gradient+0x390>)
 8000ee0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	4413      	add	r3, r2
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	4403      	add	r3, r0
 8000eec:	6019      	str	r1, [r3, #0]

            // Deactivate pulse if it's moved off the strip
            if (pulses[i].position >= MAX_LED + pulses[i].length) {
 8000eee:	4919      	ldr	r1, [pc, #100]	@ (8000f54 <effect_frequency_chase_gradient+0x390>)
 8000ef0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000ef2:	4613      	mov	r3, r2
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	4413      	add	r3, r2
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	440b      	add	r3, r1
 8000efc:	3308      	adds	r3, #8
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	f103 0135 	add.w	r1, r3, #53	@ 0x35
 8000f04:	4813      	ldr	r0, [pc, #76]	@ (8000f54 <effect_frequency_chase_gradient+0x390>)
 8000f06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000f08:	4613      	mov	r3, r2
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	4413      	add	r3, r2
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	4403      	add	r3, r0
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4299      	cmp	r1, r3
 8000f16:	da09      	bge.n	8000f2c <effect_frequency_chase_gradient+0x368>
                pulses[i].active = 0;
 8000f18:	490e      	ldr	r1, [pc, #56]	@ (8000f54 <effect_frequency_chase_gradient+0x390>)
 8000f1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	4413      	add	r3, r2
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	440b      	add	r3, r1
 8000f26:	3309      	adds	r3, #9
 8000f28:	2200      	movs	r2, #0
 8000f2a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < MAX_PULSES; i++) {
 8000f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f2e:	3301      	adds	r3, #1
 8000f30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000f32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f34:	2b07      	cmp	r3, #7
 8000f36:	f77f aeff 	ble.w	8000d38 <effect_frequency_chase_gradient+0x174>
            }
        }
    }

    Set_Brightness(NORMAL_BRIGHTNESS);
 8000f3a:	2014      	movs	r0, #20
 8000f3c:	f7ff fc1e 	bl	800077c <Set_Brightness>
    WS2812_Send();
 8000f40:	f7ff fc98 	bl	8000874 <WS2812_Send>

    last_amp = amplitude;
 8000f44:	4a05      	ldr	r2, [pc, #20]	@ (8000f5c <effect_frequency_chase_gradient+0x398>)
 8000f46:	88fb      	ldrh	r3, [r7, #6]
 8000f48:	8013      	strh	r3, [r2, #0]
}
 8000f4a:	bf00      	nop
 8000f4c:	373c      	adds	r7, #60	@ 0x3c
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd90      	pop	{r4, r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20004e24 	.word	0x20004e24
 8000f58:	200001c8 	.word	0x200001c8
 8000f5c:	20004e84 	.word	0x20004e84

08000f60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  srand(HAL_GetTick());
 8000f66:	f000 fdcb 	bl	8001b00 <HAL_GetTick>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f005 f815 	bl	8005f9c <srand>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f72:	f000 fd5f 	bl	8001a34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f76:	f000 f891 	bl	800109c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f7a:	f000 fa57 	bl	800142c <MX_GPIO_Init>
  MX_DMA_Init();
 8000f7e:	f000 fa35 	bl	80013ec <MX_DMA_Init>
  MX_TIM1_Init();
 8000f82:	f000 f947 	bl	8001214 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000f86:	f000 f8f3 	bl	8001170 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000f8a:	f000 f9e3 	bl	8001354 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */



  HAL_TIM_Base_Start(&htim2);
 8000f8e:	483a      	ldr	r0, [pc, #232]	@ (8001078 <main+0x118>)
 8000f90:	f002 fd56 	bl	8003a40 <HAL_TIM_Base_Start>
  HAL_ADC_Start_IT(&hadc1);
 8000f94:	4839      	ldr	r0, [pc, #228]	@ (800107c <main+0x11c>)
 8000f96:	f000 fe27 	bl	8001be8 <HAL_ADC_Start_IT>
  arm_rfft_fast_init_f32(&fftHandler, FFT_BUFFER_SIZE);
 8000f9a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f9e:	4838      	ldr	r0, [pc, #224]	@ (8001080 <main+0x120>)
 8000fa0:	f004 f828 	bl	8004ff4 <arm_rfft_fast_init_f32>

  float	peakVal	= 0.0f;
 8000fa4:	f04f 0300 	mov.w	r3, #0
 8000fa8:	617b      	str	r3, [r7, #20]
  HAL_Delay(50);
 8000faa:	2032      	movs	r0, #50	@ 0x32
 8000fac:	f000 fdb4 	bl	8001b18 <HAL_Delay>
  while (1)
  {

/////////////////////////////////////////////////////////////////////////////////////////
// DEO DUOC DONG VAO
		  if (fftReady){
 8000fb0:	4b34      	ldr	r3, [pc, #208]	@ (8001084 <main+0x124>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d053      	beq.n	8001060 <main+0x100>
			  peakVal = 0.0f;
 8000fb8:	f04f 0300 	mov.w	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
			  peakHz = 0.0f;
 8000fbe:	4b32      	ldr	r3, [pc, #200]	@ (8001088 <main+0x128>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	801a      	strh	r2, [r3, #0]

			  uint16_t halfBins = FFT_BUFFER_SIZE / 2;
 8000fc4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fc8:	823b      	strh	r3, [r7, #16]
				  for (uint16_t k = 1; k < halfBins; k++) {
 8000fca:	2301      	movs	r3, #1
 8000fcc:	827b      	strh	r3, [r7, #18]
 8000fce:	e040      	b.n	8001052 <main+0xf2>
					  float re = fftBufOut[2 * k];
 8000fd0:	8a7b      	ldrh	r3, [r7, #18]
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	4a2d      	ldr	r2, [pc, #180]	@ (800108c <main+0x12c>)
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	4413      	add	r3, r2
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	60fb      	str	r3, [r7, #12]
					  float im = fftBufOut[2 * k + 1];
 8000fde:	8a7b      	ldrh	r3, [r7, #18]
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	4a29      	ldr	r2, [pc, #164]	@ (800108c <main+0x12c>)
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	4413      	add	r3, r2
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	60bb      	str	r3, [r7, #8]
					  float mag = sqrtf(re * re + im * im);
 8000fee:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ff2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000ff6:	edd7 7a02 	vldr	s15, [r7, #8]
 8000ffa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000ffe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001002:	eeb0 0a67 	vmov.f32	s0, s15
 8001006:	f005 ff95 	bl	8006f34 <sqrtf>
 800100a:	ed87 0a01 	vstr	s0, [r7, #4]
					  if (mag > peakVal) {
 800100e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001012:	edd7 7a05 	vldr	s15, [r7, #20]
 8001016:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800101a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800101e:	dd15      	ble.n	800104c <main+0xec>
						  peakVal = mag;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	617b      	str	r3, [r7, #20]
						  peakHz  = (uint16_t)(k  * SAMPLE_RATE_HZ / (float)(FFT_BUFFER_SIZE));
 8001024:	8a7b      	ldrh	r3, [r7, #18]
 8001026:	ee07 3a90 	vmov	s15, r3
 800102a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800102e:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8001090 <main+0x130>
 8001032:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001036:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8001094 <main+0x134>
 800103a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800103e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001042:	ee17 3a90 	vmov	r3, s15
 8001046:	b29a      	uxth	r2, r3
 8001048:	4b0f      	ldr	r3, [pc, #60]	@ (8001088 <main+0x128>)
 800104a:	801a      	strh	r2, [r3, #0]
				  for (uint16_t k = 1; k < halfBins; k++) {
 800104c:	8a7b      	ldrh	r3, [r7, #18]
 800104e:	3301      	adds	r3, #1
 8001050:	827b      	strh	r3, [r7, #18]
 8001052:	8a7a      	ldrh	r2, [r7, #18]
 8001054:	8a3b      	ldrh	r3, [r7, #16]
 8001056:	429a      	cmp	r2, r3
 8001058:	d3ba      	bcc.n	8000fd0 <main+0x70>
					  }
				  }

				  fftReady = 0;
 800105a:	4b0a      	ldr	r3, [pc, #40]	@ (8001084 <main+0x124>)
 800105c:	2200      	movs	r2, #0
 800105e:	701a      	strb	r2, [r3, #0]
//		        }

		  //effect_flash_fade_random_color(amp, peakHz);
		  //effect_dynamic_vu_meter(amp, peakHz);
		  //effect_spectrum_color_bands(amp, peakHz);
		  effect_frequency_chase_gradient(amp, peakHz);
 8001060:	4b0d      	ldr	r3, [pc, #52]	@ (8001098 <main+0x138>)
 8001062:	881b      	ldrh	r3, [r3, #0]
 8001064:	4a08      	ldr	r2, [pc, #32]	@ (8001088 <main+0x128>)
 8001066:	8812      	ldrh	r2, [r2, #0]
 8001068:	4611      	mov	r1, r2
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff fdaa 	bl	8000bc4 <effect_frequency_chase_gradient>
	  HAL_Delay(2);
 8001070:	2002      	movs	r0, #2
 8001072:	f000 fd51 	bl	8001b18 <HAL_Delay>
		  if (fftReady){
 8001076:	e79b      	b.n	8000fb0 <main+0x50>
 8001078:	2000011c 	.word	0x2000011c
 800107c:	2000008c 	.word	0x2000008c
 8001080:	20000e08 	.word	0x20000e08
 8001084:	20004e22 	.word	0x20004e22
 8001088:	20000e04 	.word	0x20000e04
 800108c:	20002e20 	.word	0x20002e20
 8001090:	46610000 	.word	0x46610000
 8001094:	45000000 	.word	0x45000000
 8001098:	200001c4 	.word	0x200001c4

0800109c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b094      	sub	sp, #80	@ 0x50
 80010a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010a2:	f107 0320 	add.w	r3, r7, #32
 80010a6:	2230      	movs	r2, #48	@ 0x30
 80010a8:	2100      	movs	r1, #0
 80010aa:	4618      	mov	r0, r3
 80010ac:	f005 f8a9 	bl	8006202 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010b0:	f107 030c 	add.w	r3, r7, #12
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c0:	2300      	movs	r3, #0
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	4b28      	ldr	r3, [pc, #160]	@ (8001168 <SystemClock_Config+0xcc>)
 80010c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c8:	4a27      	ldr	r2, [pc, #156]	@ (8001168 <SystemClock_Config+0xcc>)
 80010ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80010d0:	4b25      	ldr	r3, [pc, #148]	@ (8001168 <SystemClock_Config+0xcc>)
 80010d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010d8:	60bb      	str	r3, [r7, #8]
 80010da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010dc:	2300      	movs	r3, #0
 80010de:	607b      	str	r3, [r7, #4]
 80010e0:	4b22      	ldr	r3, [pc, #136]	@ (800116c <SystemClock_Config+0xd0>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a21      	ldr	r2, [pc, #132]	@ (800116c <SystemClock_Config+0xd0>)
 80010e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010ea:	6013      	str	r3, [r2, #0]
 80010ec:	4b1f      	ldr	r3, [pc, #124]	@ (800116c <SystemClock_Config+0xd0>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010f4:	607b      	str	r3, [r7, #4]
 80010f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010f8:	2302      	movs	r3, #2
 80010fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010fc:	2301      	movs	r3, #1
 80010fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001100:	2310      	movs	r3, #16
 8001102:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001104:	2302      	movs	r3, #2
 8001106:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001108:	2300      	movs	r3, #0
 800110a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800110c:	2308      	movs	r3, #8
 800110e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001110:	2348      	movs	r3, #72	@ 0x48
 8001112:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001114:	2302      	movs	r3, #2
 8001116:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001118:	2304      	movs	r3, #4
 800111a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800111c:	f107 0320 	add.w	r3, r7, #32
 8001120:	4618      	mov	r0, r3
 8001122:	f001 ffd9 	bl	80030d8 <HAL_RCC_OscConfig>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800112c:	f000 fa0e 	bl	800154c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001130:	230f      	movs	r3, #15
 8001132:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001134:	2302      	movs	r3, #2
 8001136:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800113c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001140:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001142:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001146:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001148:	f107 030c 	add.w	r3, r7, #12
 800114c:	2102      	movs	r1, #2
 800114e:	4618      	mov	r0, r3
 8001150:	f002 fa3a 	bl	80035c8 <HAL_RCC_ClockConfig>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800115a:	f000 f9f7 	bl	800154c <Error_Handler>
  }
}
 800115e:	bf00      	nop
 8001160:	3750      	adds	r7, #80	@ 0x50
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40023800 	.word	0x40023800
 800116c:	40007000 	.word	0x40007000

08001170 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001176:	463b      	mov	r3, r7
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001182:	4b22      	ldr	r3, [pc, #136]	@ (800120c <MX_ADC1_Init+0x9c>)
 8001184:	4a22      	ldr	r2, [pc, #136]	@ (8001210 <MX_ADC1_Init+0xa0>)
 8001186:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001188:	4b20      	ldr	r3, [pc, #128]	@ (800120c <MX_ADC1_Init+0x9c>)
 800118a:	2200      	movs	r2, #0
 800118c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800118e:	4b1f      	ldr	r3, [pc, #124]	@ (800120c <MX_ADC1_Init+0x9c>)
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001194:	4b1d      	ldr	r3, [pc, #116]	@ (800120c <MX_ADC1_Init+0x9c>)
 8001196:	2200      	movs	r2, #0
 8001198:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800119a:	4b1c      	ldr	r3, [pc, #112]	@ (800120c <MX_ADC1_Init+0x9c>)
 800119c:	2200      	movs	r2, #0
 800119e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011a0:	4b1a      	ldr	r3, [pc, #104]	@ (800120c <MX_ADC1_Init+0x9c>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80011a8:	4b18      	ldr	r3, [pc, #96]	@ (800120c <MX_ADC1_Init+0x9c>)
 80011aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80011ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80011b0:	4b16      	ldr	r3, [pc, #88]	@ (800120c <MX_ADC1_Init+0x9c>)
 80011b2:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80011b6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011b8:	4b14      	ldr	r3, [pc, #80]	@ (800120c <MX_ADC1_Init+0x9c>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80011be:	4b13      	ldr	r3, [pc, #76]	@ (800120c <MX_ADC1_Init+0x9c>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011c4:	4b11      	ldr	r3, [pc, #68]	@ (800120c <MX_ADC1_Init+0x9c>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011cc:	4b0f      	ldr	r3, [pc, #60]	@ (800120c <MX_ADC1_Init+0x9c>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011d2:	480e      	ldr	r0, [pc, #56]	@ (800120c <MX_ADC1_Init+0x9c>)
 80011d4:	f000 fcc4 	bl	8001b60 <HAL_ADC_Init>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 80011de:	f000 f9b5 	bl	800154c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80011e2:	2300      	movs	r3, #0
 80011e4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011e6:	2301      	movs	r3, #1
 80011e8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80011ea:	2301      	movs	r3, #1
 80011ec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011ee:	463b      	mov	r3, r7
 80011f0:	4619      	mov	r1, r3
 80011f2:	4806      	ldr	r0, [pc, #24]	@ (800120c <MX_ADC1_Init+0x9c>)
 80011f4:	f000 ff08 	bl	8002008 <HAL_ADC_ConfigChannel>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80011fe:	f000 f9a5 	bl	800154c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001202:	bf00      	nop
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	2000008c 	.word	0x2000008c
 8001210:	40012000 	.word	0x40012000

08001214 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b096      	sub	sp, #88	@ 0x58
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800121a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	609a      	str	r2, [r3, #8]
 8001226:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001228:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001232:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
 800123e:	60da      	str	r2, [r3, #12]
 8001240:	611a      	str	r2, [r3, #16]
 8001242:	615a      	str	r2, [r3, #20]
 8001244:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001246:	1d3b      	adds	r3, r7, #4
 8001248:	2220      	movs	r2, #32
 800124a:	2100      	movs	r1, #0
 800124c:	4618      	mov	r0, r3
 800124e:	f004 ffd8 	bl	8006202 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001252:	4b3e      	ldr	r3, [pc, #248]	@ (800134c <MX_TIM1_Init+0x138>)
 8001254:	4a3e      	ldr	r2, [pc, #248]	@ (8001350 <MX_TIM1_Init+0x13c>)
 8001256:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001258:	4b3c      	ldr	r3, [pc, #240]	@ (800134c <MX_TIM1_Init+0x138>)
 800125a:	2200      	movs	r2, #0
 800125c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800125e:	4b3b      	ldr	r3, [pc, #236]	@ (800134c <MX_TIM1_Init+0x138>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90 - 1;
 8001264:	4b39      	ldr	r3, [pc, #228]	@ (800134c <MX_TIM1_Init+0x138>)
 8001266:	2259      	movs	r2, #89	@ 0x59
 8001268:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800126a:	4b38      	ldr	r3, [pc, #224]	@ (800134c <MX_TIM1_Init+0x138>)
 800126c:	2200      	movs	r2, #0
 800126e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001270:	4b36      	ldr	r3, [pc, #216]	@ (800134c <MX_TIM1_Init+0x138>)
 8001272:	2200      	movs	r2, #0
 8001274:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001276:	4b35      	ldr	r3, [pc, #212]	@ (800134c <MX_TIM1_Init+0x138>)
 8001278:	2200      	movs	r2, #0
 800127a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800127c:	4833      	ldr	r0, [pc, #204]	@ (800134c <MX_TIM1_Init+0x138>)
 800127e:	f002 fb8f 	bl	80039a0 <HAL_TIM_Base_Init>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001288:	f000 f960 	bl	800154c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800128c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001290:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001292:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001296:	4619      	mov	r1, r3
 8001298:	482c      	ldr	r0, [pc, #176]	@ (800134c <MX_TIM1_Init+0x138>)
 800129a:	f003 f8df 	bl	800445c <HAL_TIM_ConfigClockSource>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80012a4:	f000 f952 	bl	800154c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012a8:	4828      	ldr	r0, [pc, #160]	@ (800134c <MX_TIM1_Init+0x138>)
 80012aa:	f002 fc31 	bl	8003b10 <HAL_TIM_PWM_Init>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80012b4:	f000 f94a 	bl	800154c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b8:	2300      	movs	r3, #0
 80012ba:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012bc:	2300      	movs	r3, #0
 80012be:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012c0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80012c4:	4619      	mov	r1, r3
 80012c6:	4821      	ldr	r0, [pc, #132]	@ (800134c <MX_TIM1_Init+0x138>)
 80012c8:	f003 fdb2 	bl	8004e30 <HAL_TIMEx_MasterConfigSynchronization>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80012d2:	f000 f93b 	bl	800154c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012d6:	2360      	movs	r3, #96	@ 0x60
 80012d8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80012da:	2300      	movs	r3, #0
 80012dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012de:	2300      	movs	r3, #0
 80012e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012e2:	2300      	movs	r3, #0
 80012e4:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012e6:	2300      	movs	r3, #0
 80012e8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012ea:	2300      	movs	r3, #0
 80012ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012ee:	2300      	movs	r3, #0
 80012f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012f6:	2200      	movs	r2, #0
 80012f8:	4619      	mov	r1, r3
 80012fa:	4814      	ldr	r0, [pc, #80]	@ (800134c <MX_TIM1_Init+0x138>)
 80012fc:	f002 ffec 	bl	80042d8 <HAL_TIM_PWM_ConfigChannel>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001306:	f000 f921 	bl	800154c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800130a:	2300      	movs	r3, #0
 800130c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800130e:	2300      	movs	r3, #0
 8001310:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001312:	2300      	movs	r3, #0
 8001314:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001316:	2300      	movs	r3, #0
 8001318:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800131a:	2300      	movs	r3, #0
 800131c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800131e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001322:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001324:	2300      	movs	r3, #0
 8001326:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001328:	1d3b      	adds	r3, r7, #4
 800132a:	4619      	mov	r1, r3
 800132c:	4807      	ldr	r0, [pc, #28]	@ (800134c <MX_TIM1_Init+0x138>)
 800132e:	f003 fdfb 	bl	8004f28 <HAL_TIMEx_ConfigBreakDeadTime>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001338:	f000 f908 	bl	800154c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800133c:	4803      	ldr	r0, [pc, #12]	@ (800134c <MX_TIM1_Init+0x138>)
 800133e:	f000 f9ef 	bl	8001720 <HAL_TIM_MspPostInit>

}
 8001342:	bf00      	nop
 8001344:	3758      	adds	r7, #88	@ 0x58
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	200000d4 	.word	0x200000d4
 8001350:	40010000 	.word	0x40010000

08001354 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800135a:	f107 0308 	add.w	r3, r7, #8
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	605a      	str	r2, [r3, #4]
 8001364:	609a      	str	r2, [r3, #8]
 8001366:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001368:	463b      	mov	r3, r7
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001370:	4b1d      	ldr	r3, [pc, #116]	@ (80013e8 <MX_TIM2_Init+0x94>)
 8001372:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001376:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 8001378:	4b1b      	ldr	r3, [pc, #108]	@ (80013e8 <MX_TIM2_Init+0x94>)
 800137a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800137e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001380:	4b19      	ldr	r3, [pc, #100]	@ (80013e8 <MX_TIM2_Init+0x94>)
 8001382:	2200      	movs	r2, #0
 8001384:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4;
 8001386:	4b18      	ldr	r3, [pc, #96]	@ (80013e8 <MX_TIM2_Init+0x94>)
 8001388:	2204      	movs	r2, #4
 800138a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800138c:	4b16      	ldr	r3, [pc, #88]	@ (80013e8 <MX_TIM2_Init+0x94>)
 800138e:	2200      	movs	r2, #0
 8001390:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001392:	4b15      	ldr	r3, [pc, #84]	@ (80013e8 <MX_TIM2_Init+0x94>)
 8001394:	2200      	movs	r2, #0
 8001396:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001398:	4813      	ldr	r0, [pc, #76]	@ (80013e8 <MX_TIM2_Init+0x94>)
 800139a:	f002 fb01 	bl	80039a0 <HAL_TIM_Base_Init>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80013a4:	f000 f8d2 	bl	800154c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013ae:	f107 0308 	add.w	r3, r7, #8
 80013b2:	4619      	mov	r1, r3
 80013b4:	480c      	ldr	r0, [pc, #48]	@ (80013e8 <MX_TIM2_Init+0x94>)
 80013b6:	f003 f851 	bl	800445c <HAL_TIM_ConfigClockSource>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80013c0:	f000 f8c4 	bl	800154c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80013c4:	2320      	movs	r3, #32
 80013c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c8:	2300      	movs	r3, #0
 80013ca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013cc:	463b      	mov	r3, r7
 80013ce:	4619      	mov	r1, r3
 80013d0:	4805      	ldr	r0, [pc, #20]	@ (80013e8 <MX_TIM2_Init+0x94>)
 80013d2:	f003 fd2d 	bl	8004e30 <HAL_TIMEx_MasterConfigSynchronization>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80013dc:	f000 f8b6 	bl	800154c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013e0:	bf00      	nop
 80013e2:	3718      	adds	r7, #24
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	2000011c 	.word	0x2000011c

080013ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	607b      	str	r3, [r7, #4]
 80013f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001428 <MX_DMA_Init+0x3c>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fa:	4a0b      	ldr	r2, [pc, #44]	@ (8001428 <MX_DMA_Init+0x3c>)
 80013fc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001400:	6313      	str	r3, [r2, #48]	@ 0x30
 8001402:	4b09      	ldr	r3, [pc, #36]	@ (8001428 <MX_DMA_Init+0x3c>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001406:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800140a:	607b      	str	r3, [r7, #4]
 800140c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800140e:	2200      	movs	r2, #0
 8001410:	2105      	movs	r1, #5
 8001412:	2039      	movs	r0, #57	@ 0x39
 8001414:	f001 f8fb 	bl	800260e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001418:	2039      	movs	r0, #57	@ 0x39
 800141a:	f001 f914 	bl	8002646 <HAL_NVIC_EnableIRQ>

}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40023800 	.word	0x40023800

0800142c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b088      	sub	sp, #32
 8001430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	60bb      	str	r3, [r7, #8]
 8001436:	4b19      	ldr	r3, [pc, #100]	@ (800149c <MX_GPIO_Init+0x70>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143a:	4a18      	ldr	r2, [pc, #96]	@ (800149c <MX_GPIO_Init+0x70>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	6313      	str	r3, [r2, #48]	@ 0x30
 8001442:	4b16      	ldr	r3, [pc, #88]	@ (800149c <MX_GPIO_Init+0x70>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	60bb      	str	r3, [r7, #8]
 800144c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	607b      	str	r3, [r7, #4]
 8001452:	4b12      	ldr	r3, [pc, #72]	@ (800149c <MX_GPIO_Init+0x70>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001456:	4a11      	ldr	r2, [pc, #68]	@ (800149c <MX_GPIO_Init+0x70>)
 8001458:	f043 0310 	orr.w	r3, r3, #16
 800145c:	6313      	str	r3, [r2, #48]	@ 0x30
 800145e:	4b0f      	ldr	r3, [pc, #60]	@ (800149c <MX_GPIO_Init+0x70>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001462:	f003 0310 	and.w	r3, r3, #16
 8001466:	607b      	str	r3, [r7, #4]
 8001468:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146a:	f107 030c 	add.w	r3, r7, #12
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]
 8001474:	609a      	str	r2, [r3, #8]
 8001476:	60da      	str	r2, [r3, #12]
 8001478:	611a      	str	r2, [r3, #16]
     GPIO_InitStruct.Pin  = GPIO_PIN_0;
 800147a:	2301      	movs	r3, #1
 800147c:	60fb      	str	r3, [r7, #12]
     GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800147e:	2303      	movs	r3, #3
 8001480:	613b      	str	r3, [r7, #16]
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001482:	2300      	movs	r3, #0
 8001484:	617b      	str	r3, [r7, #20]
     HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001486:	f107 030c 	add.w	r3, r7, #12
 800148a:	4619      	mov	r1, r3
 800148c:	4804      	ldr	r0, [pc, #16]	@ (80014a0 <MX_GPIO_Init+0x74>)
 800148e:	f001 fc87 	bl	8002da0 <HAL_GPIO_Init>
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001492:	bf00      	nop
 8001494:	3720      	adds	r7, #32
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40023800 	.word	0x40023800
 80014a0:	40020000 	.word	0x40020000

080014a4 <HAL_ADC_ConvCpltCallback>:
//        WS2812_Send();
//    }
//}
//
//// Called when second half of adc_buf is filled by DMA (another 32 samples)
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]

	if (hadc->Instance == ADC1)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a21      	ldr	r2, [pc, #132]	@ (8001538 <HAL_ADC_ConvCpltCallback+0x94>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d13b      	bne.n	800152e <HAL_ADC_ConvCpltCallback+0x8a>
	    {
			if ( middle_point_index > 0){
 80014b6:	4b21      	ldr	r3, [pc, #132]	@ (800153c <HAL_ADC_ConvCpltCallback+0x98>)
 80014b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	dd12      	ble.n	80014e6 <HAL_ADC_ConvCpltCallback+0x42>
				middle_point += HAL_ADC_GetValue(&hadc1);
 80014c0:	481f      	ldr	r0, [pc, #124]	@ (8001540 <HAL_ADC_ConvCpltCallback+0x9c>)
 80014c2:	f000 fd7f 	bl	8001fc4 <HAL_ADC_GetValue>
 80014c6:	4602      	mov	r2, r0
 80014c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001544 <HAL_ADC_ConvCpltCallback+0xa0>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4413      	add	r3, r2
 80014ce:	4a1d      	ldr	r2, [pc, #116]	@ (8001544 <HAL_ADC_ConvCpltCallback+0xa0>)
 80014d0:	6013      	str	r3, [r2, #0]
				middle_point_index = middle_point_index - 1;
 80014d2:	4b1a      	ldr	r3, [pc, #104]	@ (800153c <HAL_ADC_ConvCpltCallback+0x98>)
 80014d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014d8:	b29b      	uxth	r3, r3
 80014da:	3b01      	subs	r3, #1
 80014dc:	b29b      	uxth	r3, r3
 80014de:	b21a      	sxth	r2, r3
 80014e0:	4b16      	ldr	r3, [pc, #88]	@ (800153c <HAL_ADC_ConvCpltCallback+0x98>)
 80014e2:	801a      	strh	r2, [r3, #0]
 80014e4:	e015      	b.n	8001512 <HAL_ADC_ConvCpltCallback+0x6e>
			}

			else if (middle_point_index == 0){
 80014e6:	4b15      	ldr	r3, [pc, #84]	@ (800153c <HAL_ADC_ConvCpltCallback+0x98>)
 80014e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d10e      	bne.n	800150e <HAL_ADC_ConvCpltCallback+0x6a>
				middle_point/= 32;
 80014f0:	4b14      	ldr	r3, [pc, #80]	@ (8001544 <HAL_ADC_ConvCpltCallback+0xa0>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	095b      	lsrs	r3, r3, #5
 80014f6:	4a13      	ldr	r2, [pc, #76]	@ (8001544 <HAL_ADC_ConvCpltCallback+0xa0>)
 80014f8:	6013      	str	r3, [r2, #0]
				middle_point_index = middle_point_index - 1;
 80014fa:	4b10      	ldr	r3, [pc, #64]	@ (800153c <HAL_ADC_ConvCpltCallback+0x98>)
 80014fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001500:	b29b      	uxth	r3, r3
 8001502:	3b01      	subs	r3, #1
 8001504:	b29b      	uxth	r3, r3
 8001506:	b21a      	sxth	r2, r3
 8001508:	4b0c      	ldr	r3, [pc, #48]	@ (800153c <HAL_ADC_ConvCpltCallback+0x98>)
 800150a:	801a      	strh	r2, [r3, #0]
 800150c:	e001      	b.n	8001512 <HAL_ADC_ConvCpltCallback+0x6e>
			}
			else{
				record_sample_and_maybe_runFFT();
 800150e:	f7ff f8a5 	bl	800065c <record_sample_and_maybe_runFFT>
			}

	        amp = abs(HAL_ADC_GetValue(&hadc1) - (uint16_t)middle_point);
 8001512:	480b      	ldr	r0, [pc, #44]	@ (8001540 <HAL_ADC_ConvCpltCallback+0x9c>)
 8001514:	f000 fd56 	bl	8001fc4 <HAL_ADC_GetValue>
 8001518:	4603      	mov	r3, r0
 800151a:	4a0a      	ldr	r2, [pc, #40]	@ (8001544 <HAL_ADC_ConvCpltCallback+0xa0>)
 800151c:	6812      	ldr	r2, [r2, #0]
 800151e:	b292      	uxth	r2, r2
 8001520:	1a9b      	subs	r3, r3, r2
 8001522:	2b00      	cmp	r3, #0
 8001524:	bfb8      	it	lt
 8001526:	425b      	neglt	r3, r3
 8001528:	b29a      	uxth	r2, r3
 800152a:	4b07      	ldr	r3, [pc, #28]	@ (8001548 <HAL_ADC_ConvCpltCallback+0xa4>)
 800152c:	801a      	strh	r2, [r3, #0]

	        // process “raw” or store into buffer or set a flag, etc.
	    }

}
 800152e:	bf00      	nop
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40012000 	.word	0x40012000
 800153c:	20000000 	.word	0x20000000
 8001540:	2000008c 	.word	0x2000008c
 8001544:	20000e00 	.word	0x20000e00
 8001548:	200001c4 	.word	0x200001c4

0800154c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001550:	b672      	cpsid	i
}
 8001552:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001554:	bf00      	nop
 8001556:	e7fd      	b.n	8001554 <Error_Handler+0x8>

08001558 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	607b      	str	r3, [r7, #4]
 8001562:	4b10      	ldr	r3, [pc, #64]	@ (80015a4 <HAL_MspInit+0x4c>)
 8001564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001566:	4a0f      	ldr	r2, [pc, #60]	@ (80015a4 <HAL_MspInit+0x4c>)
 8001568:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800156c:	6453      	str	r3, [r2, #68]	@ 0x44
 800156e:	4b0d      	ldr	r3, [pc, #52]	@ (80015a4 <HAL_MspInit+0x4c>)
 8001570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001572:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001576:	607b      	str	r3, [r7, #4]
 8001578:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	603b      	str	r3, [r7, #0]
 800157e:	4b09      	ldr	r3, [pc, #36]	@ (80015a4 <HAL_MspInit+0x4c>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001582:	4a08      	ldr	r2, [pc, #32]	@ (80015a4 <HAL_MspInit+0x4c>)
 8001584:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001588:	6413      	str	r3, [r2, #64]	@ 0x40
 800158a:	4b06      	ldr	r3, [pc, #24]	@ (80015a4 <HAL_MspInit+0x4c>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001592:	603b      	str	r3, [r7, #0]
 8001594:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	40023800 	.word	0x40023800

080015a8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08a      	sub	sp, #40	@ 0x28
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b0:	f107 0314 	add.w	r3, r7, #20
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a1b      	ldr	r2, [pc, #108]	@ (8001634 <HAL_ADC_MspInit+0x8c>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d12f      	bne.n	800162a <HAL_ADC_MspInit+0x82>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	613b      	str	r3, [r7, #16]
 80015ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001638 <HAL_ADC_MspInit+0x90>)
 80015d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015d2:	4a19      	ldr	r2, [pc, #100]	@ (8001638 <HAL_ADC_MspInit+0x90>)
 80015d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80015da:	4b17      	ldr	r3, [pc, #92]	@ (8001638 <HAL_ADC_MspInit+0x90>)
 80015dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015e2:	613b      	str	r3, [r7, #16]
 80015e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	4b13      	ldr	r3, [pc, #76]	@ (8001638 <HAL_ADC_MspInit+0x90>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ee:	4a12      	ldr	r2, [pc, #72]	@ (8001638 <HAL_ADC_MspInit+0x90>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015f6:	4b10      	ldr	r3, [pc, #64]	@ (8001638 <HAL_ADC_MspInit+0x90>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001602:	2301      	movs	r3, #1
 8001604:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001606:	2303      	movs	r3, #3
 8001608:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160e:	f107 0314 	add.w	r3, r7, #20
 8001612:	4619      	mov	r1, r3
 8001614:	4809      	ldr	r0, [pc, #36]	@ (800163c <HAL_ADC_MspInit+0x94>)
 8001616:	f001 fbc3 	bl	8002da0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800161a:	2200      	movs	r2, #0
 800161c:	2100      	movs	r1, #0
 800161e:	2012      	movs	r0, #18
 8001620:	f000 fff5 	bl	800260e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001624:	2012      	movs	r0, #18
 8001626:	f001 f80e 	bl	8002646 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800162a:	bf00      	nop
 800162c:	3728      	adds	r7, #40	@ 0x28
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40012000 	.word	0x40012000
 8001638:	40023800 	.word	0x40023800
 800163c:	40020000 	.word	0x40020000

08001640 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a30      	ldr	r2, [pc, #192]	@ (8001710 <HAL_TIM_Base_MspInit+0xd0>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d13f      	bne.n	80016d2 <HAL_TIM_Base_MspInit+0x92>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	4b2f      	ldr	r3, [pc, #188]	@ (8001714 <HAL_TIM_Base_MspInit+0xd4>)
 8001658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800165a:	4a2e      	ldr	r2, [pc, #184]	@ (8001714 <HAL_TIM_Base_MspInit+0xd4>)
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	6453      	str	r3, [r2, #68]	@ 0x44
 8001662:	4b2c      	ldr	r3, [pc, #176]	@ (8001714 <HAL_TIM_Base_MspInit+0xd4>)
 8001664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 800166e:	4b2a      	ldr	r3, [pc, #168]	@ (8001718 <HAL_TIM_Base_MspInit+0xd8>)
 8001670:	4a2a      	ldr	r2, [pc, #168]	@ (800171c <HAL_TIM_Base_MspInit+0xdc>)
 8001672:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8001674:	4b28      	ldr	r3, [pc, #160]	@ (8001718 <HAL_TIM_Base_MspInit+0xd8>)
 8001676:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 800167a:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800167c:	4b26      	ldr	r3, [pc, #152]	@ (8001718 <HAL_TIM_Base_MspInit+0xd8>)
 800167e:	2240      	movs	r2, #64	@ 0x40
 8001680:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001682:	4b25      	ldr	r3, [pc, #148]	@ (8001718 <HAL_TIM_Base_MspInit+0xd8>)
 8001684:	2200      	movs	r2, #0
 8001686:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001688:	4b23      	ldr	r3, [pc, #140]	@ (8001718 <HAL_TIM_Base_MspInit+0xd8>)
 800168a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800168e:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001690:	4b21      	ldr	r3, [pc, #132]	@ (8001718 <HAL_TIM_Base_MspInit+0xd8>)
 8001692:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001696:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001698:	4b1f      	ldr	r3, [pc, #124]	@ (8001718 <HAL_TIM_Base_MspInit+0xd8>)
 800169a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800169e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80016a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001718 <HAL_TIM_Base_MspInit+0xd8>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 80016a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001718 <HAL_TIM_Base_MspInit+0xd8>)
 80016a8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80016ac:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001718 <HAL_TIM_Base_MspInit+0xd8>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80016b4:	4818      	ldr	r0, [pc, #96]	@ (8001718 <HAL_TIM_Base_MspInit+0xd8>)
 80016b6:	f000 ffe1 	bl	800267c <HAL_DMA_Init>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 80016c0:	f7ff ff44 	bl	800154c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	4a14      	ldr	r2, [pc, #80]	@ (8001718 <HAL_TIM_Base_MspInit+0xd8>)
 80016c8:	625a      	str	r2, [r3, #36]	@ 0x24
 80016ca:	4a13      	ldr	r2, [pc, #76]	@ (8001718 <HAL_TIM_Base_MspInit+0xd8>)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6393      	str	r3, [r2, #56]	@ 0x38
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 80016d0:	e01a      	b.n	8001708 <HAL_TIM_Base_MspInit+0xc8>
  else if(htim_base->Instance==TIM2)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016da:	d115      	bne.n	8001708 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016dc:	2300      	movs	r3, #0
 80016de:	60bb      	str	r3, [r7, #8]
 80016e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001714 <HAL_TIM_Base_MspInit+0xd4>)
 80016e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e4:	4a0b      	ldr	r2, [pc, #44]	@ (8001714 <HAL_TIM_Base_MspInit+0xd4>)
 80016e6:	f043 0301 	orr.w	r3, r3, #1
 80016ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80016ec:	4b09      	ldr	r3, [pc, #36]	@ (8001714 <HAL_TIM_Base_MspInit+0xd4>)
 80016ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f0:	f003 0301 	and.w	r3, r3, #1
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80016f8:	2200      	movs	r2, #0
 80016fa:	2100      	movs	r1, #0
 80016fc:	201c      	movs	r0, #28
 80016fe:	f000 ff86 	bl	800260e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001702:	201c      	movs	r0, #28
 8001704:	f000 ff9f 	bl	8002646 <HAL_NVIC_EnableIRQ>
}
 8001708:	bf00      	nop
 800170a:	3710      	adds	r7, #16
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40010000 	.word	0x40010000
 8001714:	40023800 	.word	0x40023800
 8001718:	20000164 	.word	0x20000164
 800171c:	40026428 	.word	0x40026428

08001720 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b088      	sub	sp, #32
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001728:	f107 030c 	add.w	r3, r7, #12
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	609a      	str	r2, [r3, #8]
 8001734:	60da      	str	r2, [r3, #12]
 8001736:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a12      	ldr	r2, [pc, #72]	@ (8001788 <HAL_TIM_MspPostInit+0x68>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d11e      	bne.n	8001780 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	60bb      	str	r3, [r7, #8]
 8001746:	4b11      	ldr	r3, [pc, #68]	@ (800178c <HAL_TIM_MspPostInit+0x6c>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174a:	4a10      	ldr	r2, [pc, #64]	@ (800178c <HAL_TIM_MspPostInit+0x6c>)
 800174c:	f043 0310 	orr.w	r3, r3, #16
 8001750:	6313      	str	r3, [r2, #48]	@ 0x30
 8001752:	4b0e      	ldr	r3, [pc, #56]	@ (800178c <HAL_TIM_MspPostInit+0x6c>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001756:	f003 0310 	and.w	r3, r3, #16
 800175a:	60bb      	str	r3, [r7, #8]
 800175c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = RGB_LED_Pin;
 800175e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001762:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001764:	2302      	movs	r3, #2
 8001766:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	2300      	movs	r3, #0
 800176a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176c:	2300      	movs	r3, #0
 800176e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001770:	2301      	movs	r3, #1
 8001772:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(RGB_LED_GPIO_Port, &GPIO_InitStruct);
 8001774:	f107 030c 	add.w	r3, r7, #12
 8001778:	4619      	mov	r1, r3
 800177a:	4805      	ldr	r0, [pc, #20]	@ (8001790 <HAL_TIM_MspPostInit+0x70>)
 800177c:	f001 fb10 	bl	8002da0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001780:	bf00      	nop
 8001782:	3720      	adds	r7, #32
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40010000 	.word	0x40010000
 800178c:	40023800 	.word	0x40023800
 8001790:	40021000 	.word	0x40021000

08001794 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001798:	bf00      	nop
 800179a:	e7fd      	b.n	8001798 <NMI_Handler+0x4>

0800179c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017a0:	bf00      	nop
 80017a2:	e7fd      	b.n	80017a0 <HardFault_Handler+0x4>

080017a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a8:	bf00      	nop
 80017aa:	e7fd      	b.n	80017a8 <MemManage_Handler+0x4>

080017ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017b0:	bf00      	nop
 80017b2:	e7fd      	b.n	80017b0 <BusFault_Handler+0x4>

080017b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b8:	bf00      	nop
 80017ba:	e7fd      	b.n	80017b8 <UsageFault_Handler+0x4>

080017bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ca:	b480      	push	{r7}
 80017cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ea:	f000 f975 	bl	8001ad8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
	...

080017f4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80017f8:	4802      	ldr	r0, [pc, #8]	@ (8001804 <ADC_IRQHandler+0x10>)
 80017fa:	f000 fad3 	bl	8001da4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	2000008c 	.word	0x2000008c

08001808 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800180c:	4802      	ldr	r0, [pc, #8]	@ (8001818 <TIM2_IRQHandler+0x10>)
 800180e:	f002 fc73 	bl	80040f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	2000011c 	.word	0x2000011c

0800181c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001820:	4802      	ldr	r0, [pc, #8]	@ (800182c <DMA2_Stream1_IRQHandler+0x10>)
 8001822:	f001 f853 	bl	80028cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	20000164 	.word	0x20000164

08001830 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  return 1;
 8001834:	2301      	movs	r3, #1
}
 8001836:	4618      	mov	r0, r3
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <_kill>:

int _kill(int pid, int sig)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800184a:	f004 fd29 	bl	80062a0 <__errno>
 800184e:	4603      	mov	r3, r0
 8001850:	2216      	movs	r2, #22
 8001852:	601a      	str	r2, [r3, #0]
  return -1;
 8001854:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001858:	4618      	mov	r0, r3
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <_exit>:

void _exit (int status)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001868:	f04f 31ff 	mov.w	r1, #4294967295
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f7ff ffe7 	bl	8001840 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001872:	bf00      	nop
 8001874:	e7fd      	b.n	8001872 <_exit+0x12>

08001876 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b086      	sub	sp, #24
 800187a:	af00      	add	r7, sp, #0
 800187c:	60f8      	str	r0, [r7, #12]
 800187e:	60b9      	str	r1, [r7, #8]
 8001880:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001882:	2300      	movs	r3, #0
 8001884:	617b      	str	r3, [r7, #20]
 8001886:	e00a      	b.n	800189e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001888:	f3af 8000 	nop.w
 800188c:	4601      	mov	r1, r0
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	1c5a      	adds	r2, r3, #1
 8001892:	60ba      	str	r2, [r7, #8]
 8001894:	b2ca      	uxtb	r2, r1
 8001896:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	3301      	adds	r3, #1
 800189c:	617b      	str	r3, [r7, #20]
 800189e:	697a      	ldr	r2, [r7, #20]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	dbf0      	blt.n	8001888 <_read+0x12>
  }

  return len;
 80018a6:	687b      	ldr	r3, [r7, #4]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3718      	adds	r7, #24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018bc:	2300      	movs	r3, #0
 80018be:	617b      	str	r3, [r7, #20]
 80018c0:	e009      	b.n	80018d6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	1c5a      	adds	r2, r3, #1
 80018c6:	60ba      	str	r2, [r7, #8]
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	3301      	adds	r3, #1
 80018d4:	617b      	str	r3, [r7, #20]
 80018d6:	697a      	ldr	r2, [r7, #20]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	429a      	cmp	r2, r3
 80018dc:	dbf1      	blt.n	80018c2 <_write+0x12>
  }
  return len;
 80018de:	687b      	ldr	r3, [r7, #4]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3718      	adds	r7, #24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <_close>:

int _close(int file)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001910:	605a      	str	r2, [r3, #4]
  return 0;
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <_isatty>:

int _isatty(int file)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001928:	2301      	movs	r3, #1
}
 800192a:	4618      	mov	r0, r3
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr

08001936 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001936:	b480      	push	{r7}
 8001938:	b085      	sub	sp, #20
 800193a:	af00      	add	r7, sp, #0
 800193c:	60f8      	str	r0, [r7, #12]
 800193e:	60b9      	str	r1, [r7, #8]
 8001940:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001942:	2300      	movs	r3, #0
}
 8001944:	4618      	mov	r0, r3
 8001946:	3714      	adds	r7, #20
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001958:	4a14      	ldr	r2, [pc, #80]	@ (80019ac <_sbrk+0x5c>)
 800195a:	4b15      	ldr	r3, [pc, #84]	@ (80019b0 <_sbrk+0x60>)
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001964:	4b13      	ldr	r3, [pc, #76]	@ (80019b4 <_sbrk+0x64>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d102      	bne.n	8001972 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800196c:	4b11      	ldr	r3, [pc, #68]	@ (80019b4 <_sbrk+0x64>)
 800196e:	4a12      	ldr	r2, [pc, #72]	@ (80019b8 <_sbrk+0x68>)
 8001970:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001972:	4b10      	ldr	r3, [pc, #64]	@ (80019b4 <_sbrk+0x64>)
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4413      	add	r3, r2
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	429a      	cmp	r2, r3
 800197e:	d207      	bcs.n	8001990 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001980:	f004 fc8e 	bl	80062a0 <__errno>
 8001984:	4603      	mov	r3, r0
 8001986:	220c      	movs	r2, #12
 8001988:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800198a:	f04f 33ff 	mov.w	r3, #4294967295
 800198e:	e009      	b.n	80019a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001990:	4b08      	ldr	r3, [pc, #32]	@ (80019b4 <_sbrk+0x64>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001996:	4b07      	ldr	r3, [pc, #28]	@ (80019b4 <_sbrk+0x64>)
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4413      	add	r3, r2
 800199e:	4a05      	ldr	r2, [pc, #20]	@ (80019b4 <_sbrk+0x64>)
 80019a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019a2:	68fb      	ldr	r3, [r7, #12]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3718      	adds	r7, #24
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	20020000 	.word	0x20020000
 80019b0:	00000400 	.word	0x00000400
 80019b4:	20004e8c 	.word	0x20004e8c
 80019b8:	20004fe0 	.word	0x20004fe0

080019bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019c0:	4b06      	ldr	r3, [pc, #24]	@ (80019dc <SystemInit+0x20>)
 80019c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019c6:	4a05      	ldr	r2, [pc, #20]	@ (80019dc <SystemInit+0x20>)
 80019c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019d0:	bf00      	nop
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	e000ed00 	.word	0xe000ed00

080019e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80019e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a18 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80019e4:	f7ff ffea 	bl	80019bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019e8:	480c      	ldr	r0, [pc, #48]	@ (8001a1c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019ea:	490d      	ldr	r1, [pc, #52]	@ (8001a20 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001a24 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019f0:	e002      	b.n	80019f8 <LoopCopyDataInit>

080019f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019f6:	3304      	adds	r3, #4

080019f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019fc:	d3f9      	bcc.n	80019f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001a28 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a00:	4c0a      	ldr	r4, [pc, #40]	@ (8001a2c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a04:	e001      	b.n	8001a0a <LoopFillZerobss>

08001a06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a08:	3204      	adds	r2, #4

08001a0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a0c:	d3fb      	bcc.n	8001a06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a0e:	f004 fc4d 	bl	80062ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a12:	f7ff faa5 	bl	8000f60 <main>
  bx  lr    
 8001a16:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001a18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a20:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001a24:	0801a4f0 	.word	0x0801a4f0
  ldr r2, =_sbss
 8001a28:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001a2c:	20004fe0 	.word	0x20004fe0

08001a30 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a30:	e7fe      	b.n	8001a30 <CAN1_RX0_IRQHandler>
	...

08001a34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a38:	4b0e      	ldr	r3, [pc, #56]	@ (8001a74 <HAL_Init+0x40>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a0d      	ldr	r2, [pc, #52]	@ (8001a74 <HAL_Init+0x40>)
 8001a3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a44:	4b0b      	ldr	r3, [pc, #44]	@ (8001a74 <HAL_Init+0x40>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a0a      	ldr	r2, [pc, #40]	@ (8001a74 <HAL_Init+0x40>)
 8001a4a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a50:	4b08      	ldr	r3, [pc, #32]	@ (8001a74 <HAL_Init+0x40>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a07      	ldr	r2, [pc, #28]	@ (8001a74 <HAL_Init+0x40>)
 8001a56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a5c:	2003      	movs	r0, #3
 8001a5e:	f000 fdcb 	bl	80025f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a62:	200f      	movs	r0, #15
 8001a64:	f000 f808 	bl	8001a78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a68:	f7ff fd76 	bl	8001558 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40023c00 	.word	0x40023c00

08001a78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a80:	4b12      	ldr	r3, [pc, #72]	@ (8001acc <HAL_InitTick+0x54>)
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	4b12      	ldr	r3, [pc, #72]	@ (8001ad0 <HAL_InitTick+0x58>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	4619      	mov	r1, r3
 8001a8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a96:	4618      	mov	r0, r3
 8001a98:	f000 fde3 	bl	8002662 <HAL_SYSTICK_Config>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e00e      	b.n	8001ac4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2b0f      	cmp	r3, #15
 8001aaa:	d80a      	bhi.n	8001ac2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aac:	2200      	movs	r2, #0
 8001aae:	6879      	ldr	r1, [r7, #4]
 8001ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab4:	f000 fdab 	bl	800260e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ab8:	4a06      	ldr	r2, [pc, #24]	@ (8001ad4 <HAL_InitTick+0x5c>)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	e000      	b.n	8001ac4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3708      	adds	r7, #8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	20000008 	.word	0x20000008
 8001ad0:	20000010 	.word	0x20000010
 8001ad4:	2000000c 	.word	0x2000000c

08001ad8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001adc:	4b06      	ldr	r3, [pc, #24]	@ (8001af8 <HAL_IncTick+0x20>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	4b06      	ldr	r3, [pc, #24]	@ (8001afc <HAL_IncTick+0x24>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	4a04      	ldr	r2, [pc, #16]	@ (8001afc <HAL_IncTick+0x24>)
 8001aea:	6013      	str	r3, [r2, #0]
}
 8001aec:	bf00      	nop
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	20000010 	.word	0x20000010
 8001afc:	20004e90 	.word	0x20004e90

08001b00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  return uwTick;
 8001b04:	4b03      	ldr	r3, [pc, #12]	@ (8001b14 <HAL_GetTick+0x14>)
 8001b06:	681b      	ldr	r3, [r3, #0]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	20004e90 	.word	0x20004e90

08001b18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b20:	f7ff ffee 	bl	8001b00 <HAL_GetTick>
 8001b24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b30:	d005      	beq.n	8001b3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b32:	4b0a      	ldr	r3, [pc, #40]	@ (8001b5c <HAL_Delay+0x44>)
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	461a      	mov	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b3e:	bf00      	nop
 8001b40:	f7ff ffde 	bl	8001b00 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	68fa      	ldr	r2, [r7, #12]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d8f7      	bhi.n	8001b40 <HAL_Delay+0x28>
  {
  }
}
 8001b50:	bf00      	nop
 8001b52:	bf00      	nop
 8001b54:	3710      	adds	r7, #16
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	20000010 	.word	0x20000010

08001b60 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d101      	bne.n	8001b76 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e033      	b.n	8001bde <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d109      	bne.n	8001b92 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f7ff fd12 	bl	80015a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b96:	f003 0310 	and.w	r3, r3, #16
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d118      	bne.n	8001bd0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001ba6:	f023 0302 	bic.w	r3, r3, #2
 8001baa:	f043 0202 	orr.w	r2, r3, #2
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f000 fb4a 	bl	800224c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc2:	f023 0303 	bic.w	r3, r3, #3
 8001bc6:	f043 0201 	orr.w	r2, r3, #1
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	641a      	str	r2, [r3, #64]	@ 0x40
 8001bce:	e001      	b.n	8001bd4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
	...

08001be8 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d101      	bne.n	8001c02 <HAL_ADC_Start_IT+0x1a>
 8001bfe:	2302      	movs	r3, #2
 8001c00:	e0bd      	b.n	8001d7e <HAL_ADC_Start_IT+0x196>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2201      	movs	r2, #1
 8001c06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d018      	beq.n	8001c4a <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	689a      	ldr	r2, [r3, #8]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f042 0201 	orr.w	r2, r2, #1
 8001c26:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c28:	4b58      	ldr	r3, [pc, #352]	@ (8001d8c <HAL_ADC_Start_IT+0x1a4>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a58      	ldr	r2, [pc, #352]	@ (8001d90 <HAL_ADC_Start_IT+0x1a8>)
 8001c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c32:	0c9a      	lsrs	r2, r3, #18
 8001c34:	4613      	mov	r3, r2
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	4413      	add	r3, r2
 8001c3a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001c3c:	e002      	b.n	8001c44 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	3b01      	subs	r3, #1
 8001c42:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1f9      	bne.n	8001c3e <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	f040 8085 	bne.w	8001d64 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001c62:	f023 0301 	bic.w	r3, r3, #1
 8001c66:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d007      	beq.n	8001c8c <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c80:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001c84:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c90:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c98:	d106      	bne.n	8001ca8 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c9e:	f023 0206 	bic.w	r2, r3, #6
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	645a      	str	r2, [r3, #68]	@ 0x44
 8001ca6:	e002      	b.n	8001cae <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cb6:	4b37      	ldr	r3, [pc, #220]	@ (8001d94 <HAL_ADC_Start_IT+0x1ac>)
 8001cb8:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001cc2:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	6812      	ldr	r2, [r2, #0]
 8001cce:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001cd2:	f043 0320 	orr.w	r3, r3, #32
 8001cd6:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f003 031f 	and.w	r3, r3, #31
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d12a      	bne.n	8001d3a <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a2b      	ldr	r2, [pc, #172]	@ (8001d98 <HAL_ADC_Start_IT+0x1b0>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d015      	beq.n	8001d1a <HAL_ADC_Start_IT+0x132>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a2a      	ldr	r2, [pc, #168]	@ (8001d9c <HAL_ADC_Start_IT+0x1b4>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d105      	bne.n	8001d04 <HAL_ADC_Start_IT+0x11c>
 8001cf8:	4b26      	ldr	r3, [pc, #152]	@ (8001d94 <HAL_ADC_Start_IT+0x1ac>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f003 031f 	and.w	r3, r3, #31
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d00a      	beq.n	8001d1a <HAL_ADC_Start_IT+0x132>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a25      	ldr	r2, [pc, #148]	@ (8001da0 <HAL_ADC_Start_IT+0x1b8>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d136      	bne.n	8001d7c <HAL_ADC_Start_IT+0x194>
 8001d0e:	4b21      	ldr	r3, [pc, #132]	@ (8001d94 <HAL_ADC_Start_IT+0x1ac>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f003 0310 	and.w	r3, r3, #16
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d130      	bne.n	8001d7c <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d129      	bne.n	8001d7c <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	689a      	ldr	r2, [r3, #8]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001d36:	609a      	str	r2, [r3, #8]
 8001d38:	e020      	b.n	8001d7c <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a16      	ldr	r2, [pc, #88]	@ (8001d98 <HAL_ADC_Start_IT+0x1b0>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d11b      	bne.n	8001d7c <HAL_ADC_Start_IT+0x194>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d114      	bne.n	8001d7c <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	689a      	ldr	r2, [r3, #8]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001d60:	609a      	str	r2, [r3, #8]
 8001d62:	e00b      	b.n	8001d7c <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d68:	f043 0210 	orr.w	r2, r3, #16
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d74:	f043 0201 	orr.w	r2, r3, #1
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3714      	adds	r7, #20
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	20000008 	.word	0x20000008
 8001d90:	431bde83 	.word	0x431bde83
 8001d94:	40012300 	.word	0x40012300
 8001d98:	40012000 	.word	0x40012000
 8001d9c:	40012100 	.word	0x40012100
 8001da0:	40012200 	.word	0x40012200

08001da4 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001dac:	2300      	movs	r3, #0
 8001dae:	617b      	str	r3, [r7, #20]
 8001db0:	2300      	movs	r3, #0
 8001db2:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	f003 0320 	and.w	r3, r3, #32
 8001dd2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d049      	beq.n	8001e6e <HAL_ADC_IRQHandler+0xca>
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d046      	beq.n	8001e6e <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de4:	f003 0310 	and.w	r3, r3, #16
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d105      	bne.n	8001df8 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d12b      	bne.n	8001e5e <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d127      	bne.n	8001e5e <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e14:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d006      	beq.n	8001e2a <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d119      	bne.n	8001e5e <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	685a      	ldr	r2, [r3, #4]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f022 0220 	bic.w	r2, r2, #32
 8001e38:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e3e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d105      	bne.n	8001e5e <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e56:	f043 0201 	orr.w	r2, r3, #1
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f7ff fb20 	bl	80014a4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f06f 0212 	mvn.w	r2, #18
 8001e6c:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f003 0304 	and.w	r3, r3, #4
 8001e74:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e7c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d057      	beq.n	8001f34 <HAL_ADC_IRQHandler+0x190>
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d054      	beq.n	8001f34 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8e:	f003 0310 	and.w	r3, r3, #16
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d105      	bne.n	8001ea2 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e9a:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d139      	bne.n	8001f24 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001eb6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d006      	beq.n	8001ecc <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d12b      	bne.n	8001f24 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d124      	bne.n	8001f24 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d11d      	bne.n	8001f24 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d119      	bne.n	8001f24 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	685a      	ldr	r2, [r3, #4]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001efe:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f04:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d105      	bne.n	8001f24 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1c:	f043 0201 	orr.w	r2, r3, #1
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f000 fa8d 	bl	8002444 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f06f 020c 	mvn.w	r2, #12
 8001f32:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f42:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d017      	beq.n	8001f7a <HAL_ADC_IRQHandler+0x1d6>
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d014      	beq.n	8001f7a <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d10d      	bne.n	8001f7a <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f62:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 f837 	bl	8001fde <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f06f 0201 	mvn.w	r2, #1
 8001f78:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f003 0320 	and.w	r3, r3, #32
 8001f80:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001f88:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d015      	beq.n	8001fbc <HAL_ADC_IRQHandler+0x218>
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d012      	beq.n	8001fbc <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f9a:	f043 0202 	orr.w	r2, r3, #2
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f06f 0220 	mvn.w	r2, #32
 8001faa:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f000 f820 	bl	8001ff2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f06f 0220 	mvn.w	r2, #32
 8001fba:	601a      	str	r2, [r3, #0]
  }
}
 8001fbc:	bf00      	nop
 8001fbe:	3718      	adds	r7, #24
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	b083      	sub	sp, #12
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001fe6:	bf00      	nop
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr

08001ff2 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	b083      	sub	sp, #12
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001ffa:	bf00      	nop
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
	...

08002008 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002012:	2300      	movs	r3, #0
 8002014:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800201c:	2b01      	cmp	r3, #1
 800201e:	d101      	bne.n	8002024 <HAL_ADC_ConfigChannel+0x1c>
 8002020:	2302      	movs	r3, #2
 8002022:	e105      	b.n	8002230 <HAL_ADC_ConfigChannel+0x228>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2b09      	cmp	r3, #9
 8002032:	d925      	bls.n	8002080 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	68d9      	ldr	r1, [r3, #12]
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	b29b      	uxth	r3, r3
 8002040:	461a      	mov	r2, r3
 8002042:	4613      	mov	r3, r2
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	4413      	add	r3, r2
 8002048:	3b1e      	subs	r3, #30
 800204a:	2207      	movs	r2, #7
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	43da      	mvns	r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	400a      	ands	r2, r1
 8002058:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68d9      	ldr	r1, [r3, #12]
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	689a      	ldr	r2, [r3, #8]
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	b29b      	uxth	r3, r3
 800206a:	4618      	mov	r0, r3
 800206c:	4603      	mov	r3, r0
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	4403      	add	r3, r0
 8002072:	3b1e      	subs	r3, #30
 8002074:	409a      	lsls	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	430a      	orrs	r2, r1
 800207c:	60da      	str	r2, [r3, #12]
 800207e:	e022      	b.n	80020c6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	6919      	ldr	r1, [r3, #16]
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	b29b      	uxth	r3, r3
 800208c:	461a      	mov	r2, r3
 800208e:	4613      	mov	r3, r2
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	4413      	add	r3, r2
 8002094:	2207      	movs	r2, #7
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	43da      	mvns	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	400a      	ands	r2, r1
 80020a2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	6919      	ldr	r1, [r3, #16]
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	689a      	ldr	r2, [r3, #8]
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	4618      	mov	r0, r3
 80020b6:	4603      	mov	r3, r0
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	4403      	add	r3, r0
 80020bc:	409a      	lsls	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	430a      	orrs	r2, r1
 80020c4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	2b06      	cmp	r3, #6
 80020cc:	d824      	bhi.n	8002118 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685a      	ldr	r2, [r3, #4]
 80020d8:	4613      	mov	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	4413      	add	r3, r2
 80020de:	3b05      	subs	r3, #5
 80020e0:	221f      	movs	r2, #31
 80020e2:	fa02 f303 	lsl.w	r3, r2, r3
 80020e6:	43da      	mvns	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	400a      	ands	r2, r1
 80020ee:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	4618      	mov	r0, r3
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685a      	ldr	r2, [r3, #4]
 8002102:	4613      	mov	r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	3b05      	subs	r3, #5
 800210a:	fa00 f203 	lsl.w	r2, r0, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	430a      	orrs	r2, r1
 8002114:	635a      	str	r2, [r3, #52]	@ 0x34
 8002116:	e04c      	b.n	80021b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	2b0c      	cmp	r3, #12
 800211e:	d824      	bhi.n	800216a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685a      	ldr	r2, [r3, #4]
 800212a:	4613      	mov	r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	4413      	add	r3, r2
 8002130:	3b23      	subs	r3, #35	@ 0x23
 8002132:	221f      	movs	r2, #31
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	43da      	mvns	r2, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	400a      	ands	r2, r1
 8002140:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	b29b      	uxth	r3, r3
 800214e:	4618      	mov	r0, r3
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685a      	ldr	r2, [r3, #4]
 8002154:	4613      	mov	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4413      	add	r3, r2
 800215a:	3b23      	subs	r3, #35	@ 0x23
 800215c:	fa00 f203 	lsl.w	r2, r0, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	430a      	orrs	r2, r1
 8002166:	631a      	str	r2, [r3, #48]	@ 0x30
 8002168:	e023      	b.n	80021b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685a      	ldr	r2, [r3, #4]
 8002174:	4613      	mov	r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	4413      	add	r3, r2
 800217a:	3b41      	subs	r3, #65	@ 0x41
 800217c:	221f      	movs	r2, #31
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	43da      	mvns	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	400a      	ands	r2, r1
 800218a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	b29b      	uxth	r3, r3
 8002198:	4618      	mov	r0, r3
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685a      	ldr	r2, [r3, #4]
 800219e:	4613      	mov	r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4413      	add	r3, r2
 80021a4:	3b41      	subs	r3, #65	@ 0x41
 80021a6:	fa00 f203 	lsl.w	r2, r0, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	430a      	orrs	r2, r1
 80021b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021b2:	4b22      	ldr	r3, [pc, #136]	@ (800223c <HAL_ADC_ConfigChannel+0x234>)
 80021b4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a21      	ldr	r2, [pc, #132]	@ (8002240 <HAL_ADC_ConfigChannel+0x238>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d109      	bne.n	80021d4 <HAL_ADC_ConfigChannel+0x1cc>
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2b12      	cmp	r3, #18
 80021c6:	d105      	bne.n	80021d4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a19      	ldr	r2, [pc, #100]	@ (8002240 <HAL_ADC_ConfigChannel+0x238>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d123      	bne.n	8002226 <HAL_ADC_ConfigChannel+0x21e>
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2b10      	cmp	r3, #16
 80021e4:	d003      	beq.n	80021ee <HAL_ADC_ConfigChannel+0x1e6>
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2b11      	cmp	r3, #17
 80021ec:	d11b      	bne.n	8002226 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2b10      	cmp	r3, #16
 8002200:	d111      	bne.n	8002226 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002202:	4b10      	ldr	r3, [pc, #64]	@ (8002244 <HAL_ADC_ConfigChannel+0x23c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a10      	ldr	r2, [pc, #64]	@ (8002248 <HAL_ADC_ConfigChannel+0x240>)
 8002208:	fba2 2303 	umull	r2, r3, r2, r3
 800220c:	0c9a      	lsrs	r2, r3, #18
 800220e:	4613      	mov	r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	4413      	add	r3, r2
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002218:	e002      	b.n	8002220 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	3b01      	subs	r3, #1
 800221e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d1f9      	bne.n	800221a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	3714      	adds	r7, #20
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	40012300 	.word	0x40012300
 8002240:	40012000 	.word	0x40012000
 8002244:	20000008 	.word	0x20000008
 8002248:	431bde83 	.word	0x431bde83

0800224c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800224c:	b480      	push	{r7}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002254:	4b79      	ldr	r3, [pc, #484]	@ (800243c <ADC_Init+0x1f0>)
 8002256:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	685a      	ldr	r2, [r3, #4]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	431a      	orrs	r2, r3
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	685a      	ldr	r2, [r3, #4]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002280:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	6859      	ldr	r1, [r3, #4]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	691b      	ldr	r3, [r3, #16]
 800228c:	021a      	lsls	r2, r3, #8
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	430a      	orrs	r2, r1
 8002294:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	685a      	ldr	r2, [r3, #4]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80022a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	6859      	ldr	r1, [r3, #4]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	430a      	orrs	r2, r1
 80022b6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	689a      	ldr	r2, [r3, #8]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6899      	ldr	r1, [r3, #8]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	68da      	ldr	r2, [r3, #12]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	430a      	orrs	r2, r1
 80022d8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022de:	4a58      	ldr	r2, [pc, #352]	@ (8002440 <ADC_Init+0x1f4>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d022      	beq.n	800232a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	689a      	ldr	r2, [r3, #8]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80022f2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	6899      	ldr	r1, [r3, #8]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	430a      	orrs	r2, r1
 8002304:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	689a      	ldr	r2, [r3, #8]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002314:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	6899      	ldr	r1, [r3, #8]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	430a      	orrs	r2, r1
 8002326:	609a      	str	r2, [r3, #8]
 8002328:	e00f      	b.n	800234a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	689a      	ldr	r2, [r3, #8]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002338:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	689a      	ldr	r2, [r3, #8]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002348:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	689a      	ldr	r2, [r3, #8]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f022 0202 	bic.w	r2, r2, #2
 8002358:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6899      	ldr	r1, [r3, #8]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	7e1b      	ldrb	r3, [r3, #24]
 8002364:	005a      	lsls	r2, r3, #1
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	430a      	orrs	r2, r1
 800236c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d01b      	beq.n	80023b0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	685a      	ldr	r2, [r3, #4]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002386:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	685a      	ldr	r2, [r3, #4]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002396:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6859      	ldr	r1, [r3, #4]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a2:	3b01      	subs	r3, #1
 80023a4:	035a      	lsls	r2, r3, #13
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	430a      	orrs	r2, r1
 80023ac:	605a      	str	r2, [r3, #4]
 80023ae:	e007      	b.n	80023c0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	685a      	ldr	r2, [r3, #4]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023be:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80023ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	69db      	ldr	r3, [r3, #28]
 80023da:	3b01      	subs	r3, #1
 80023dc:	051a      	lsls	r2, r3, #20
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	430a      	orrs	r2, r1
 80023e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	689a      	ldr	r2, [r3, #8]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80023f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	6899      	ldr	r1, [r3, #8]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002402:	025a      	lsls	r2, r3, #9
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	430a      	orrs	r2, r1
 800240a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	689a      	ldr	r2, [r3, #8]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800241a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6899      	ldr	r1, [r3, #8]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	695b      	ldr	r3, [r3, #20]
 8002426:	029a      	lsls	r2, r3, #10
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	430a      	orrs	r2, r1
 800242e:	609a      	str	r2, [r3, #8]
}
 8002430:	bf00      	nop
 8002432:	3714      	adds	r7, #20
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr
 800243c:	40012300 	.word	0x40012300
 8002440:	0f000001 	.word	0x0f000001

08002444 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f003 0307 	and.w	r3, r3, #7
 8002466:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002468:	4b0c      	ldr	r3, [pc, #48]	@ (800249c <__NVIC_SetPriorityGrouping+0x44>)
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800246e:	68ba      	ldr	r2, [r7, #8]
 8002470:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002474:	4013      	ands	r3, r2
 8002476:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002480:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002484:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002488:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800248a:	4a04      	ldr	r2, [pc, #16]	@ (800249c <__NVIC_SetPriorityGrouping+0x44>)
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	60d3      	str	r3, [r2, #12]
}
 8002490:	bf00      	nop
 8002492:	3714      	adds	r7, #20
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr
 800249c:	e000ed00 	.word	0xe000ed00

080024a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024a4:	4b04      	ldr	r3, [pc, #16]	@ (80024b8 <__NVIC_GetPriorityGrouping+0x18>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	0a1b      	lsrs	r3, r3, #8
 80024aa:	f003 0307 	and.w	r3, r3, #7
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr
 80024b8:	e000ed00 	.word	0xe000ed00

080024bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	4603      	mov	r3, r0
 80024c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	db0b      	blt.n	80024e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024ce:	79fb      	ldrb	r3, [r7, #7]
 80024d0:	f003 021f 	and.w	r2, r3, #31
 80024d4:	4907      	ldr	r1, [pc, #28]	@ (80024f4 <__NVIC_EnableIRQ+0x38>)
 80024d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024da:	095b      	lsrs	r3, r3, #5
 80024dc:	2001      	movs	r0, #1
 80024de:	fa00 f202 	lsl.w	r2, r0, r2
 80024e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80024e6:	bf00      	nop
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	e000e100 	.word	0xe000e100

080024f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	4603      	mov	r3, r0
 8002500:	6039      	str	r1, [r7, #0]
 8002502:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002508:	2b00      	cmp	r3, #0
 800250a:	db0a      	blt.n	8002522 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	b2da      	uxtb	r2, r3
 8002510:	490c      	ldr	r1, [pc, #48]	@ (8002544 <__NVIC_SetPriority+0x4c>)
 8002512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002516:	0112      	lsls	r2, r2, #4
 8002518:	b2d2      	uxtb	r2, r2
 800251a:	440b      	add	r3, r1
 800251c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002520:	e00a      	b.n	8002538 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	b2da      	uxtb	r2, r3
 8002526:	4908      	ldr	r1, [pc, #32]	@ (8002548 <__NVIC_SetPriority+0x50>)
 8002528:	79fb      	ldrb	r3, [r7, #7]
 800252a:	f003 030f 	and.w	r3, r3, #15
 800252e:	3b04      	subs	r3, #4
 8002530:	0112      	lsls	r2, r2, #4
 8002532:	b2d2      	uxtb	r2, r2
 8002534:	440b      	add	r3, r1
 8002536:	761a      	strb	r2, [r3, #24]
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr
 8002544:	e000e100 	.word	0xe000e100
 8002548:	e000ed00 	.word	0xe000ed00

0800254c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800254c:	b480      	push	{r7}
 800254e:	b089      	sub	sp, #36	@ 0x24
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f003 0307 	and.w	r3, r3, #7
 800255e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	f1c3 0307 	rsb	r3, r3, #7
 8002566:	2b04      	cmp	r3, #4
 8002568:	bf28      	it	cs
 800256a:	2304      	movcs	r3, #4
 800256c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	3304      	adds	r3, #4
 8002572:	2b06      	cmp	r3, #6
 8002574:	d902      	bls.n	800257c <NVIC_EncodePriority+0x30>
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	3b03      	subs	r3, #3
 800257a:	e000      	b.n	800257e <NVIC_EncodePriority+0x32>
 800257c:	2300      	movs	r3, #0
 800257e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002580:	f04f 32ff 	mov.w	r2, #4294967295
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	43da      	mvns	r2, r3
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	401a      	ands	r2, r3
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002594:	f04f 31ff 	mov.w	r1, #4294967295
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	fa01 f303 	lsl.w	r3, r1, r3
 800259e:	43d9      	mvns	r1, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025a4:	4313      	orrs	r3, r2
         );
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3724      	adds	r7, #36	@ 0x24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
	...

080025b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	3b01      	subs	r3, #1
 80025c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025c4:	d301      	bcc.n	80025ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025c6:	2301      	movs	r3, #1
 80025c8:	e00f      	b.n	80025ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025ca:	4a0a      	ldr	r2, [pc, #40]	@ (80025f4 <SysTick_Config+0x40>)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	3b01      	subs	r3, #1
 80025d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025d2:	210f      	movs	r1, #15
 80025d4:	f04f 30ff 	mov.w	r0, #4294967295
 80025d8:	f7ff ff8e 	bl	80024f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025dc:	4b05      	ldr	r3, [pc, #20]	@ (80025f4 <SysTick_Config+0x40>)
 80025de:	2200      	movs	r2, #0
 80025e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025e2:	4b04      	ldr	r3, [pc, #16]	@ (80025f4 <SysTick_Config+0x40>)
 80025e4:	2207      	movs	r2, #7
 80025e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	e000e010 	.word	0xe000e010

080025f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f7ff ff29 	bl	8002458 <__NVIC_SetPriorityGrouping>
}
 8002606:	bf00      	nop
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800260e:	b580      	push	{r7, lr}
 8002610:	b086      	sub	sp, #24
 8002612:	af00      	add	r7, sp, #0
 8002614:	4603      	mov	r3, r0
 8002616:	60b9      	str	r1, [r7, #8]
 8002618:	607a      	str	r2, [r7, #4]
 800261a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800261c:	2300      	movs	r3, #0
 800261e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002620:	f7ff ff3e 	bl	80024a0 <__NVIC_GetPriorityGrouping>
 8002624:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	68b9      	ldr	r1, [r7, #8]
 800262a:	6978      	ldr	r0, [r7, #20]
 800262c:	f7ff ff8e 	bl	800254c <NVIC_EncodePriority>
 8002630:	4602      	mov	r2, r0
 8002632:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002636:	4611      	mov	r1, r2
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff ff5d 	bl	80024f8 <__NVIC_SetPriority>
}
 800263e:	bf00      	nop
 8002640:	3718      	adds	r7, #24
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002646:	b580      	push	{r7, lr}
 8002648:	b082      	sub	sp, #8
 800264a:	af00      	add	r7, sp, #0
 800264c:	4603      	mov	r3, r0
 800264e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff ff31 	bl	80024bc <__NVIC_EnableIRQ>
}
 800265a:	bf00      	nop
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002662:	b580      	push	{r7, lr}
 8002664:	b082      	sub	sp, #8
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f7ff ffa2 	bl	80025b4 <SysTick_Config>
 8002670:	4603      	mov	r3, r0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
	...

0800267c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b086      	sub	sp, #24
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002684:	2300      	movs	r3, #0
 8002686:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002688:	f7ff fa3a 	bl	8001b00 <HAL_GetTick>
 800268c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d101      	bne.n	8002698 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e099      	b.n	80027cc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2202      	movs	r2, #2
 800269c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f022 0201 	bic.w	r2, r2, #1
 80026b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026b8:	e00f      	b.n	80026da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026ba:	f7ff fa21 	bl	8001b00 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	2b05      	cmp	r3, #5
 80026c6:	d908      	bls.n	80026da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2220      	movs	r2, #32
 80026cc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2203      	movs	r2, #3
 80026d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e078      	b.n	80027cc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d1e8      	bne.n	80026ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80026f0:	697a      	ldr	r2, [r7, #20]
 80026f2:	4b38      	ldr	r3, [pc, #224]	@ (80027d4 <HAL_DMA_Init+0x158>)
 80026f4:	4013      	ands	r3, r2
 80026f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685a      	ldr	r2, [r3, #4]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002706:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002712:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800271e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002726:	697a      	ldr	r2, [r7, #20]
 8002728:	4313      	orrs	r3, r2
 800272a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002730:	2b04      	cmp	r3, #4
 8002732:	d107      	bne.n	8002744 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800273c:	4313      	orrs	r3, r2
 800273e:	697a      	ldr	r2, [r7, #20]
 8002740:	4313      	orrs	r3, r2
 8002742:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	697a      	ldr	r2, [r7, #20]
 800274a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	f023 0307 	bic.w	r3, r3, #7
 800275a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002760:	697a      	ldr	r2, [r7, #20]
 8002762:	4313      	orrs	r3, r2
 8002764:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800276a:	2b04      	cmp	r3, #4
 800276c:	d117      	bne.n	800279e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	4313      	orrs	r3, r2
 8002776:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800277c:	2b00      	cmp	r3, #0
 800277e:	d00e      	beq.n	800279e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f000 fa91 	bl	8002ca8 <DMA_CheckFifoParam>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d008      	beq.n	800279e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2240      	movs	r2, #64	@ 0x40
 8002790:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2201      	movs	r2, #1
 8002796:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800279a:	2301      	movs	r3, #1
 800279c:	e016      	b.n	80027cc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 fa48 	bl	8002c3c <DMA_CalcBaseAndBitshift>
 80027ac:	4603      	mov	r3, r0
 80027ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027b4:	223f      	movs	r2, #63	@ 0x3f
 80027b6:	409a      	lsls	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2201      	movs	r2, #1
 80027c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3718      	adds	r7, #24
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	f010803f 	.word	0xf010803f

080027d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
 80027e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027e6:	2300      	movs	r3, #0
 80027e8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d101      	bne.n	80027fe <HAL_DMA_Start_IT+0x26>
 80027fa:	2302      	movs	r3, #2
 80027fc:	e040      	b.n	8002880 <HAL_DMA_Start_IT+0xa8>
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2201      	movs	r2, #1
 8002802:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b01      	cmp	r3, #1
 8002810:	d12f      	bne.n	8002872 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2202      	movs	r2, #2
 8002816:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2200      	movs	r2, #0
 800281e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	68b9      	ldr	r1, [r7, #8]
 8002826:	68f8      	ldr	r0, [r7, #12]
 8002828:	f000 f9da 	bl	8002be0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002830:	223f      	movs	r2, #63	@ 0x3f
 8002832:	409a      	lsls	r2, r3
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f042 0216 	orr.w	r2, r2, #22
 8002846:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800284c:	2b00      	cmp	r3, #0
 800284e:	d007      	beq.n	8002860 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f042 0208 	orr.w	r2, r2, #8
 800285e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f042 0201 	orr.w	r2, r2, #1
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	e005      	b.n	800287e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800287a:	2302      	movs	r3, #2
 800287c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800287e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002880:	4618      	mov	r0, r3
 8002882:	3718      	adds	r7, #24
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002896:	b2db      	uxtb	r3, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d004      	beq.n	80028a6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2280      	movs	r2, #128	@ 0x80
 80028a0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e00c      	b.n	80028c0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2205      	movs	r2, #5
 80028aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f022 0201 	bic.w	r2, r2, #1
 80028bc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80028d4:	2300      	movs	r3, #0
 80028d6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80028d8:	4b8e      	ldr	r3, [pc, #568]	@ (8002b14 <HAL_DMA_IRQHandler+0x248>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a8e      	ldr	r2, [pc, #568]	@ (8002b18 <HAL_DMA_IRQHandler+0x24c>)
 80028de:	fba2 2303 	umull	r2, r3, r2, r3
 80028e2:	0a9b      	lsrs	r3, r3, #10
 80028e4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028f6:	2208      	movs	r2, #8
 80028f8:	409a      	lsls	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	4013      	ands	r3, r2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d01a      	beq.n	8002938 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0304 	and.w	r3, r3, #4
 800290c:	2b00      	cmp	r3, #0
 800290e:	d013      	beq.n	8002938 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f022 0204 	bic.w	r2, r2, #4
 800291e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002924:	2208      	movs	r2, #8
 8002926:	409a      	lsls	r2, r3
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002930:	f043 0201 	orr.w	r2, r3, #1
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800293c:	2201      	movs	r2, #1
 800293e:	409a      	lsls	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	4013      	ands	r3, r2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d012      	beq.n	800296e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002952:	2b00      	cmp	r3, #0
 8002954:	d00b      	beq.n	800296e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800295a:	2201      	movs	r2, #1
 800295c:	409a      	lsls	r2, r3
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002966:	f043 0202 	orr.w	r2, r3, #2
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002972:	2204      	movs	r2, #4
 8002974:	409a      	lsls	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	4013      	ands	r3, r2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d012      	beq.n	80029a4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d00b      	beq.n	80029a4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002990:	2204      	movs	r2, #4
 8002992:	409a      	lsls	r2, r3
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800299c:	f043 0204 	orr.w	r2, r3, #4
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029a8:	2210      	movs	r2, #16
 80029aa:	409a      	lsls	r2, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	4013      	ands	r3, r2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d043      	beq.n	8002a3c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0308 	and.w	r3, r3, #8
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d03c      	beq.n	8002a3c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029c6:	2210      	movs	r2, #16
 80029c8:	409a      	lsls	r2, r3
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d018      	beq.n	8002a0e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d108      	bne.n	80029fc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d024      	beq.n	8002a3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	4798      	blx	r3
 80029fa:	e01f      	b.n	8002a3c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d01b      	beq.n	8002a3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	4798      	blx	r3
 8002a0c:	e016      	b.n	8002a3c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d107      	bne.n	8002a2c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f022 0208 	bic.w	r2, r2, #8
 8002a2a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d003      	beq.n	8002a3c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a40:	2220      	movs	r2, #32
 8002a42:	409a      	lsls	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	4013      	ands	r3, r2
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f000 808f 	beq.w	8002b6c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0310 	and.w	r3, r3, #16
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f000 8087 	beq.w	8002b6c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a62:	2220      	movs	r2, #32
 8002a64:	409a      	lsls	r2, r3
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b05      	cmp	r3, #5
 8002a74:	d136      	bne.n	8002ae4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f022 0216 	bic.w	r2, r2, #22
 8002a84:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	695a      	ldr	r2, [r3, #20]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a94:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d103      	bne.n	8002aa6 <HAL_DMA_IRQHandler+0x1da>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d007      	beq.n	8002ab6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f022 0208 	bic.w	r2, r2, #8
 8002ab4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aba:	223f      	movs	r2, #63	@ 0x3f
 8002abc:	409a      	lsls	r2, r3
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d07e      	beq.n	8002bd8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	4798      	blx	r3
        }
        return;
 8002ae2:	e079      	b.n	8002bd8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d01d      	beq.n	8002b2e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d10d      	bne.n	8002b1c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d031      	beq.n	8002b6c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	4798      	blx	r3
 8002b10:	e02c      	b.n	8002b6c <HAL_DMA_IRQHandler+0x2a0>
 8002b12:	bf00      	nop
 8002b14:	20000008 	.word	0x20000008
 8002b18:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d023      	beq.n	8002b6c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	4798      	blx	r3
 8002b2c:	e01e      	b.n	8002b6c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d10f      	bne.n	8002b5c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f022 0210 	bic.w	r2, r2, #16
 8002b4a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d003      	beq.n	8002b6c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d032      	beq.n	8002bda <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b78:	f003 0301 	and.w	r3, r3, #1
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d022      	beq.n	8002bc6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2205      	movs	r2, #5
 8002b84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f022 0201 	bic.w	r2, r2, #1
 8002b96:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	60bb      	str	r3, [r7, #8]
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d307      	bcc.n	8002bb4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1f2      	bne.n	8002b98 <HAL_DMA_IRQHandler+0x2cc>
 8002bb2:	e000      	b.n	8002bb6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002bb4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d005      	beq.n	8002bda <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	4798      	blx	r3
 8002bd6:	e000      	b.n	8002bda <HAL_DMA_IRQHandler+0x30e>
        return;
 8002bd8:	bf00      	nop
    }
  }
}
 8002bda:	3718      	adds	r7, #24
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b085      	sub	sp, #20
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
 8002bec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002bfc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	683a      	ldr	r2, [r7, #0]
 8002c04:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	2b40      	cmp	r3, #64	@ 0x40
 8002c0c:	d108      	bne.n	8002c20 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68ba      	ldr	r2, [r7, #8]
 8002c1c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002c1e:	e007      	b.n	8002c30 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68ba      	ldr	r2, [r7, #8]
 8002c26:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	60da      	str	r2, [r3, #12]
}
 8002c30:	bf00      	nop
 8002c32:	3714      	adds	r7, #20
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	3b10      	subs	r3, #16
 8002c4c:	4a14      	ldr	r2, [pc, #80]	@ (8002ca0 <DMA_CalcBaseAndBitshift+0x64>)
 8002c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c52:	091b      	lsrs	r3, r3, #4
 8002c54:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c56:	4a13      	ldr	r2, [pc, #76]	@ (8002ca4 <DMA_CalcBaseAndBitshift+0x68>)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	461a      	mov	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2b03      	cmp	r3, #3
 8002c68:	d909      	bls.n	8002c7e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002c72:	f023 0303 	bic.w	r3, r3, #3
 8002c76:	1d1a      	adds	r2, r3, #4
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	659a      	str	r2, [r3, #88]	@ 0x58
 8002c7c:	e007      	b.n	8002c8e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002c86:	f023 0303 	bic.w	r3, r3, #3
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3714      	adds	r7, #20
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	aaaaaaab 	.word	0xaaaaaaab
 8002ca4:	08006fa0 	.word	0x08006fa0

08002ca8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cb8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d11f      	bne.n	8002d02 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	2b03      	cmp	r3, #3
 8002cc6:	d856      	bhi.n	8002d76 <DMA_CheckFifoParam+0xce>
 8002cc8:	a201      	add	r2, pc, #4	@ (adr r2, 8002cd0 <DMA_CheckFifoParam+0x28>)
 8002cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cce:	bf00      	nop
 8002cd0:	08002ce1 	.word	0x08002ce1
 8002cd4:	08002cf3 	.word	0x08002cf3
 8002cd8:	08002ce1 	.word	0x08002ce1
 8002cdc:	08002d77 	.word	0x08002d77
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ce4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d046      	beq.n	8002d7a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cf0:	e043      	b.n	8002d7a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cf6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002cfa:	d140      	bne.n	8002d7e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d00:	e03d      	b.n	8002d7e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d0a:	d121      	bne.n	8002d50 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	2b03      	cmp	r3, #3
 8002d10:	d837      	bhi.n	8002d82 <DMA_CheckFifoParam+0xda>
 8002d12:	a201      	add	r2, pc, #4	@ (adr r2, 8002d18 <DMA_CheckFifoParam+0x70>)
 8002d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d18:	08002d29 	.word	0x08002d29
 8002d1c:	08002d2f 	.word	0x08002d2f
 8002d20:	08002d29 	.word	0x08002d29
 8002d24:	08002d41 	.word	0x08002d41
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d2c:	e030      	b.n	8002d90 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d32:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d025      	beq.n	8002d86 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d3e:	e022      	b.n	8002d86 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d44:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002d48:	d11f      	bne.n	8002d8a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d4e:	e01c      	b.n	8002d8a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d903      	bls.n	8002d5e <DMA_CheckFifoParam+0xb6>
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	2b03      	cmp	r3, #3
 8002d5a:	d003      	beq.n	8002d64 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d5c:	e018      	b.n	8002d90 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	73fb      	strb	r3, [r7, #15]
      break;
 8002d62:	e015      	b.n	8002d90 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d68:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00e      	beq.n	8002d8e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	73fb      	strb	r3, [r7, #15]
      break;
 8002d74:	e00b      	b.n	8002d8e <DMA_CheckFifoParam+0xe6>
      break;
 8002d76:	bf00      	nop
 8002d78:	e00a      	b.n	8002d90 <DMA_CheckFifoParam+0xe8>
      break;
 8002d7a:	bf00      	nop
 8002d7c:	e008      	b.n	8002d90 <DMA_CheckFifoParam+0xe8>
      break;
 8002d7e:	bf00      	nop
 8002d80:	e006      	b.n	8002d90 <DMA_CheckFifoParam+0xe8>
      break;
 8002d82:	bf00      	nop
 8002d84:	e004      	b.n	8002d90 <DMA_CheckFifoParam+0xe8>
      break;
 8002d86:	bf00      	nop
 8002d88:	e002      	b.n	8002d90 <DMA_CheckFifoParam+0xe8>
      break;   
 8002d8a:	bf00      	nop
 8002d8c:	e000      	b.n	8002d90 <DMA_CheckFifoParam+0xe8>
      break;
 8002d8e:	bf00      	nop
    }
  } 
  
  return status; 
 8002d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3714      	adds	r7, #20
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop

08002da0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b089      	sub	sp, #36	@ 0x24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002daa:	2300      	movs	r3, #0
 8002dac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002dae:	2300      	movs	r3, #0
 8002db0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002db2:	2300      	movs	r3, #0
 8002db4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002db6:	2300      	movs	r3, #0
 8002db8:	61fb      	str	r3, [r7, #28]
 8002dba:	e16b      	b.n	8003094 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	697a      	ldr	r2, [r7, #20]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002dd0:	693a      	ldr	r2, [r7, #16]
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	f040 815a 	bne.w	800308e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f003 0303 	and.w	r3, r3, #3
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d005      	beq.n	8002df2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d130      	bne.n	8002e54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	2203      	movs	r2, #3
 8002dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002e02:	43db      	mvns	r3, r3
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	4013      	ands	r3, r2
 8002e08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	68da      	ldr	r2, [r3, #12]
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	fa02 f303 	lsl.w	r3, r2, r3
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e28:	2201      	movs	r2, #1
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e30:	43db      	mvns	r3, r3
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	4013      	ands	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	091b      	lsrs	r3, r3, #4
 8002e3e:	f003 0201 	and.w	r2, r3, #1
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f003 0303 	and.w	r3, r3, #3
 8002e5c:	2b03      	cmp	r3, #3
 8002e5e:	d017      	beq.n	8002e90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	2203      	movs	r2, #3
 8002e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e70:	43db      	mvns	r3, r3
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	4013      	ands	r3, r2
 8002e76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	689a      	ldr	r2, [r3, #8]
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f003 0303 	and.w	r3, r3, #3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d123      	bne.n	8002ee4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	08da      	lsrs	r2, r3, #3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	3208      	adds	r2, #8
 8002ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	f003 0307 	and.w	r3, r3, #7
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	220f      	movs	r2, #15
 8002eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	691a      	ldr	r2, [r3, #16]
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	f003 0307 	and.w	r3, r3, #7
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	08da      	lsrs	r2, r3, #3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	3208      	adds	r2, #8
 8002ede:	69b9      	ldr	r1, [r7, #24]
 8002ee0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	2203      	movs	r2, #3
 8002ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef4:	43db      	mvns	r3, r3
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f003 0203 	and.w	r2, r3, #3
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f000 80b4 	beq.w	800308e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f26:	2300      	movs	r3, #0
 8002f28:	60fb      	str	r3, [r7, #12]
 8002f2a:	4b60      	ldr	r3, [pc, #384]	@ (80030ac <HAL_GPIO_Init+0x30c>)
 8002f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f2e:	4a5f      	ldr	r2, [pc, #380]	@ (80030ac <HAL_GPIO_Init+0x30c>)
 8002f30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f34:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f36:	4b5d      	ldr	r3, [pc, #372]	@ (80030ac <HAL_GPIO_Init+0x30c>)
 8002f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f3e:	60fb      	str	r3, [r7, #12]
 8002f40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f42:	4a5b      	ldr	r2, [pc, #364]	@ (80030b0 <HAL_GPIO_Init+0x310>)
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	089b      	lsrs	r3, r3, #2
 8002f48:	3302      	adds	r3, #2
 8002f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	f003 0303 	and.w	r3, r3, #3
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	220f      	movs	r2, #15
 8002f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5e:	43db      	mvns	r3, r3
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	4013      	ands	r3, r2
 8002f64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a52      	ldr	r2, [pc, #328]	@ (80030b4 <HAL_GPIO_Init+0x314>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d02b      	beq.n	8002fc6 <HAL_GPIO_Init+0x226>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a51      	ldr	r2, [pc, #324]	@ (80030b8 <HAL_GPIO_Init+0x318>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d025      	beq.n	8002fc2 <HAL_GPIO_Init+0x222>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a50      	ldr	r2, [pc, #320]	@ (80030bc <HAL_GPIO_Init+0x31c>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d01f      	beq.n	8002fbe <HAL_GPIO_Init+0x21e>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a4f      	ldr	r2, [pc, #316]	@ (80030c0 <HAL_GPIO_Init+0x320>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d019      	beq.n	8002fba <HAL_GPIO_Init+0x21a>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a4e      	ldr	r2, [pc, #312]	@ (80030c4 <HAL_GPIO_Init+0x324>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d013      	beq.n	8002fb6 <HAL_GPIO_Init+0x216>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a4d      	ldr	r2, [pc, #308]	@ (80030c8 <HAL_GPIO_Init+0x328>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d00d      	beq.n	8002fb2 <HAL_GPIO_Init+0x212>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a4c      	ldr	r2, [pc, #304]	@ (80030cc <HAL_GPIO_Init+0x32c>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d007      	beq.n	8002fae <HAL_GPIO_Init+0x20e>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a4b      	ldr	r2, [pc, #300]	@ (80030d0 <HAL_GPIO_Init+0x330>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d101      	bne.n	8002faa <HAL_GPIO_Init+0x20a>
 8002fa6:	2307      	movs	r3, #7
 8002fa8:	e00e      	b.n	8002fc8 <HAL_GPIO_Init+0x228>
 8002faa:	2308      	movs	r3, #8
 8002fac:	e00c      	b.n	8002fc8 <HAL_GPIO_Init+0x228>
 8002fae:	2306      	movs	r3, #6
 8002fb0:	e00a      	b.n	8002fc8 <HAL_GPIO_Init+0x228>
 8002fb2:	2305      	movs	r3, #5
 8002fb4:	e008      	b.n	8002fc8 <HAL_GPIO_Init+0x228>
 8002fb6:	2304      	movs	r3, #4
 8002fb8:	e006      	b.n	8002fc8 <HAL_GPIO_Init+0x228>
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e004      	b.n	8002fc8 <HAL_GPIO_Init+0x228>
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	e002      	b.n	8002fc8 <HAL_GPIO_Init+0x228>
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e000      	b.n	8002fc8 <HAL_GPIO_Init+0x228>
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	69fa      	ldr	r2, [r7, #28]
 8002fca:	f002 0203 	and.w	r2, r2, #3
 8002fce:	0092      	lsls	r2, r2, #2
 8002fd0:	4093      	lsls	r3, r2
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fd8:	4935      	ldr	r1, [pc, #212]	@ (80030b0 <HAL_GPIO_Init+0x310>)
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	089b      	lsrs	r3, r3, #2
 8002fde:	3302      	adds	r3, #2
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fe6:	4b3b      	ldr	r3, [pc, #236]	@ (80030d4 <HAL_GPIO_Init+0x334>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	43db      	mvns	r3, r3
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d003      	beq.n	800300a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	4313      	orrs	r3, r2
 8003008:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800300a:	4a32      	ldr	r2, [pc, #200]	@ (80030d4 <HAL_GPIO_Init+0x334>)
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003010:	4b30      	ldr	r3, [pc, #192]	@ (80030d4 <HAL_GPIO_Init+0x334>)
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	43db      	mvns	r3, r3
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	4013      	ands	r3, r2
 800301e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d003      	beq.n	8003034 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	4313      	orrs	r3, r2
 8003032:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003034:	4a27      	ldr	r2, [pc, #156]	@ (80030d4 <HAL_GPIO_Init+0x334>)
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800303a:	4b26      	ldr	r3, [pc, #152]	@ (80030d4 <HAL_GPIO_Init+0x334>)
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	43db      	mvns	r3, r3
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	4013      	ands	r3, r2
 8003048:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d003      	beq.n	800305e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	4313      	orrs	r3, r2
 800305c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800305e:	4a1d      	ldr	r2, [pc, #116]	@ (80030d4 <HAL_GPIO_Init+0x334>)
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003064:	4b1b      	ldr	r3, [pc, #108]	@ (80030d4 <HAL_GPIO_Init+0x334>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	43db      	mvns	r3, r3
 800306e:	69ba      	ldr	r2, [r7, #24]
 8003070:	4013      	ands	r3, r2
 8003072:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d003      	beq.n	8003088 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	4313      	orrs	r3, r2
 8003086:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003088:	4a12      	ldr	r2, [pc, #72]	@ (80030d4 <HAL_GPIO_Init+0x334>)
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	3301      	adds	r3, #1
 8003092:	61fb      	str	r3, [r7, #28]
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	2b0f      	cmp	r3, #15
 8003098:	f67f ae90 	bls.w	8002dbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800309c:	bf00      	nop
 800309e:	bf00      	nop
 80030a0:	3724      	adds	r7, #36	@ 0x24
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	40023800 	.word	0x40023800
 80030b0:	40013800 	.word	0x40013800
 80030b4:	40020000 	.word	0x40020000
 80030b8:	40020400 	.word	0x40020400
 80030bc:	40020800 	.word	0x40020800
 80030c0:	40020c00 	.word	0x40020c00
 80030c4:	40021000 	.word	0x40021000
 80030c8:	40021400 	.word	0x40021400
 80030cc:	40021800 	.word	0x40021800
 80030d0:	40021c00 	.word	0x40021c00
 80030d4:	40013c00 	.word	0x40013c00

080030d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b086      	sub	sp, #24
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e267      	b.n	80035ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d075      	beq.n	80031e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80030f6:	4b88      	ldr	r3, [pc, #544]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f003 030c 	and.w	r3, r3, #12
 80030fe:	2b04      	cmp	r3, #4
 8003100:	d00c      	beq.n	800311c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003102:	4b85      	ldr	r3, [pc, #532]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800310a:	2b08      	cmp	r3, #8
 800310c:	d112      	bne.n	8003134 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800310e:	4b82      	ldr	r3, [pc, #520]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003116:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800311a:	d10b      	bne.n	8003134 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800311c:	4b7e      	ldr	r3, [pc, #504]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d05b      	beq.n	80031e0 <HAL_RCC_OscConfig+0x108>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d157      	bne.n	80031e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e242      	b.n	80035ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800313c:	d106      	bne.n	800314c <HAL_RCC_OscConfig+0x74>
 800313e:	4b76      	ldr	r3, [pc, #472]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a75      	ldr	r2, [pc, #468]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 8003144:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003148:	6013      	str	r3, [r2, #0]
 800314a:	e01d      	b.n	8003188 <HAL_RCC_OscConfig+0xb0>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003154:	d10c      	bne.n	8003170 <HAL_RCC_OscConfig+0x98>
 8003156:	4b70      	ldr	r3, [pc, #448]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a6f      	ldr	r2, [pc, #444]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 800315c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003160:	6013      	str	r3, [r2, #0]
 8003162:	4b6d      	ldr	r3, [pc, #436]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a6c      	ldr	r2, [pc, #432]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 8003168:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800316c:	6013      	str	r3, [r2, #0]
 800316e:	e00b      	b.n	8003188 <HAL_RCC_OscConfig+0xb0>
 8003170:	4b69      	ldr	r3, [pc, #420]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a68      	ldr	r2, [pc, #416]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 8003176:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800317a:	6013      	str	r3, [r2, #0]
 800317c:	4b66      	ldr	r3, [pc, #408]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a65      	ldr	r2, [pc, #404]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 8003182:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003186:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d013      	beq.n	80031b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003190:	f7fe fcb6 	bl	8001b00 <HAL_GetTick>
 8003194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003196:	e008      	b.n	80031aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003198:	f7fe fcb2 	bl	8001b00 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b64      	cmp	r3, #100	@ 0x64
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e207      	b.n	80035ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031aa:	4b5b      	ldr	r3, [pc, #364]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d0f0      	beq.n	8003198 <HAL_RCC_OscConfig+0xc0>
 80031b6:	e014      	b.n	80031e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b8:	f7fe fca2 	bl	8001b00 <HAL_GetTick>
 80031bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031be:	e008      	b.n	80031d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031c0:	f7fe fc9e 	bl	8001b00 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b64      	cmp	r3, #100	@ 0x64
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e1f3      	b.n	80035ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031d2:	4b51      	ldr	r3, [pc, #324]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1f0      	bne.n	80031c0 <HAL_RCC_OscConfig+0xe8>
 80031de:	e000      	b.n	80031e2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d063      	beq.n	80032b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80031ee:	4b4a      	ldr	r3, [pc, #296]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f003 030c 	and.w	r3, r3, #12
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00b      	beq.n	8003212 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031fa:	4b47      	ldr	r3, [pc, #284]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003202:	2b08      	cmp	r3, #8
 8003204:	d11c      	bne.n	8003240 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003206:	4b44      	ldr	r3, [pc, #272]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d116      	bne.n	8003240 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003212:	4b41      	ldr	r3, [pc, #260]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d005      	beq.n	800322a <HAL_RCC_OscConfig+0x152>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d001      	beq.n	800322a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e1c7      	b.n	80035ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800322a:	4b3b      	ldr	r3, [pc, #236]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	00db      	lsls	r3, r3, #3
 8003238:	4937      	ldr	r1, [pc, #220]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 800323a:	4313      	orrs	r3, r2
 800323c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800323e:	e03a      	b.n	80032b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d020      	beq.n	800328a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003248:	4b34      	ldr	r3, [pc, #208]	@ (800331c <HAL_RCC_OscConfig+0x244>)
 800324a:	2201      	movs	r2, #1
 800324c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800324e:	f7fe fc57 	bl	8001b00 <HAL_GetTick>
 8003252:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003254:	e008      	b.n	8003268 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003256:	f7fe fc53 	bl	8001b00 <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	2b02      	cmp	r3, #2
 8003262:	d901      	bls.n	8003268 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e1a8      	b.n	80035ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003268:	4b2b      	ldr	r3, [pc, #172]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d0f0      	beq.n	8003256 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003274:	4b28      	ldr	r3, [pc, #160]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	691b      	ldr	r3, [r3, #16]
 8003280:	00db      	lsls	r3, r3, #3
 8003282:	4925      	ldr	r1, [pc, #148]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 8003284:	4313      	orrs	r3, r2
 8003286:	600b      	str	r3, [r1, #0]
 8003288:	e015      	b.n	80032b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800328a:	4b24      	ldr	r3, [pc, #144]	@ (800331c <HAL_RCC_OscConfig+0x244>)
 800328c:	2200      	movs	r2, #0
 800328e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003290:	f7fe fc36 	bl	8001b00 <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003296:	e008      	b.n	80032aa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003298:	f7fe fc32 	bl	8001b00 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e187      	b.n	80035ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032aa:	4b1b      	ldr	r3, [pc, #108]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1f0      	bne.n	8003298 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0308 	and.w	r3, r3, #8
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d036      	beq.n	8003330 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d016      	beq.n	80032f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032ca:	4b15      	ldr	r3, [pc, #84]	@ (8003320 <HAL_RCC_OscConfig+0x248>)
 80032cc:	2201      	movs	r2, #1
 80032ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d0:	f7fe fc16 	bl	8001b00 <HAL_GetTick>
 80032d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032d6:	e008      	b.n	80032ea <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032d8:	f7fe fc12 	bl	8001b00 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e167      	b.n	80035ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ea:	4b0b      	ldr	r3, [pc, #44]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 80032ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d0f0      	beq.n	80032d8 <HAL_RCC_OscConfig+0x200>
 80032f6:	e01b      	b.n	8003330 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032f8:	4b09      	ldr	r3, [pc, #36]	@ (8003320 <HAL_RCC_OscConfig+0x248>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032fe:	f7fe fbff 	bl	8001b00 <HAL_GetTick>
 8003302:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003304:	e00e      	b.n	8003324 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003306:	f7fe fbfb 	bl	8001b00 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d907      	bls.n	8003324 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e150      	b.n	80035ba <HAL_RCC_OscConfig+0x4e2>
 8003318:	40023800 	.word	0x40023800
 800331c:	42470000 	.word	0x42470000
 8003320:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003324:	4b88      	ldr	r3, [pc, #544]	@ (8003548 <HAL_RCC_OscConfig+0x470>)
 8003326:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003328:	f003 0302 	and.w	r3, r3, #2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d1ea      	bne.n	8003306 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0304 	and.w	r3, r3, #4
 8003338:	2b00      	cmp	r3, #0
 800333a:	f000 8097 	beq.w	800346c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800333e:	2300      	movs	r3, #0
 8003340:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003342:	4b81      	ldr	r3, [pc, #516]	@ (8003548 <HAL_RCC_OscConfig+0x470>)
 8003344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003346:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d10f      	bne.n	800336e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800334e:	2300      	movs	r3, #0
 8003350:	60bb      	str	r3, [r7, #8]
 8003352:	4b7d      	ldr	r3, [pc, #500]	@ (8003548 <HAL_RCC_OscConfig+0x470>)
 8003354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003356:	4a7c      	ldr	r2, [pc, #496]	@ (8003548 <HAL_RCC_OscConfig+0x470>)
 8003358:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800335c:	6413      	str	r3, [r2, #64]	@ 0x40
 800335e:	4b7a      	ldr	r3, [pc, #488]	@ (8003548 <HAL_RCC_OscConfig+0x470>)
 8003360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003362:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003366:	60bb      	str	r3, [r7, #8]
 8003368:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800336a:	2301      	movs	r3, #1
 800336c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800336e:	4b77      	ldr	r3, [pc, #476]	@ (800354c <HAL_RCC_OscConfig+0x474>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003376:	2b00      	cmp	r3, #0
 8003378:	d118      	bne.n	80033ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800337a:	4b74      	ldr	r3, [pc, #464]	@ (800354c <HAL_RCC_OscConfig+0x474>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a73      	ldr	r2, [pc, #460]	@ (800354c <HAL_RCC_OscConfig+0x474>)
 8003380:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003384:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003386:	f7fe fbbb 	bl	8001b00 <HAL_GetTick>
 800338a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800338c:	e008      	b.n	80033a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800338e:	f7fe fbb7 	bl	8001b00 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	2b02      	cmp	r3, #2
 800339a:	d901      	bls.n	80033a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e10c      	b.n	80035ba <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a0:	4b6a      	ldr	r3, [pc, #424]	@ (800354c <HAL_RCC_OscConfig+0x474>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d0f0      	beq.n	800338e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d106      	bne.n	80033c2 <HAL_RCC_OscConfig+0x2ea>
 80033b4:	4b64      	ldr	r3, [pc, #400]	@ (8003548 <HAL_RCC_OscConfig+0x470>)
 80033b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033b8:	4a63      	ldr	r2, [pc, #396]	@ (8003548 <HAL_RCC_OscConfig+0x470>)
 80033ba:	f043 0301 	orr.w	r3, r3, #1
 80033be:	6713      	str	r3, [r2, #112]	@ 0x70
 80033c0:	e01c      	b.n	80033fc <HAL_RCC_OscConfig+0x324>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	2b05      	cmp	r3, #5
 80033c8:	d10c      	bne.n	80033e4 <HAL_RCC_OscConfig+0x30c>
 80033ca:	4b5f      	ldr	r3, [pc, #380]	@ (8003548 <HAL_RCC_OscConfig+0x470>)
 80033cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ce:	4a5e      	ldr	r2, [pc, #376]	@ (8003548 <HAL_RCC_OscConfig+0x470>)
 80033d0:	f043 0304 	orr.w	r3, r3, #4
 80033d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80033d6:	4b5c      	ldr	r3, [pc, #368]	@ (8003548 <HAL_RCC_OscConfig+0x470>)
 80033d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033da:	4a5b      	ldr	r2, [pc, #364]	@ (8003548 <HAL_RCC_OscConfig+0x470>)
 80033dc:	f043 0301 	orr.w	r3, r3, #1
 80033e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80033e2:	e00b      	b.n	80033fc <HAL_RCC_OscConfig+0x324>
 80033e4:	4b58      	ldr	r3, [pc, #352]	@ (8003548 <HAL_RCC_OscConfig+0x470>)
 80033e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033e8:	4a57      	ldr	r2, [pc, #348]	@ (8003548 <HAL_RCC_OscConfig+0x470>)
 80033ea:	f023 0301 	bic.w	r3, r3, #1
 80033ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80033f0:	4b55      	ldr	r3, [pc, #340]	@ (8003548 <HAL_RCC_OscConfig+0x470>)
 80033f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033f4:	4a54      	ldr	r2, [pc, #336]	@ (8003548 <HAL_RCC_OscConfig+0x470>)
 80033f6:	f023 0304 	bic.w	r3, r3, #4
 80033fa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d015      	beq.n	8003430 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003404:	f7fe fb7c 	bl	8001b00 <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800340a:	e00a      	b.n	8003422 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800340c:	f7fe fb78 	bl	8001b00 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	f241 3288 	movw	r2, #5000	@ 0x1388
 800341a:	4293      	cmp	r3, r2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e0cb      	b.n	80035ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003422:	4b49      	ldr	r3, [pc, #292]	@ (8003548 <HAL_RCC_OscConfig+0x470>)
 8003424:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d0ee      	beq.n	800340c <HAL_RCC_OscConfig+0x334>
 800342e:	e014      	b.n	800345a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003430:	f7fe fb66 	bl	8001b00 <HAL_GetTick>
 8003434:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003436:	e00a      	b.n	800344e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003438:	f7fe fb62 	bl	8001b00 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003446:	4293      	cmp	r3, r2
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e0b5      	b.n	80035ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800344e:	4b3e      	ldr	r3, [pc, #248]	@ (8003548 <HAL_RCC_OscConfig+0x470>)
 8003450:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1ee      	bne.n	8003438 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800345a:	7dfb      	ldrb	r3, [r7, #23]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d105      	bne.n	800346c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003460:	4b39      	ldr	r3, [pc, #228]	@ (8003548 <HAL_RCC_OscConfig+0x470>)
 8003462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003464:	4a38      	ldr	r2, [pc, #224]	@ (8003548 <HAL_RCC_OscConfig+0x470>)
 8003466:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800346a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	2b00      	cmp	r3, #0
 8003472:	f000 80a1 	beq.w	80035b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003476:	4b34      	ldr	r3, [pc, #208]	@ (8003548 <HAL_RCC_OscConfig+0x470>)
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f003 030c 	and.w	r3, r3, #12
 800347e:	2b08      	cmp	r3, #8
 8003480:	d05c      	beq.n	800353c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	2b02      	cmp	r3, #2
 8003488:	d141      	bne.n	800350e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800348a:	4b31      	ldr	r3, [pc, #196]	@ (8003550 <HAL_RCC_OscConfig+0x478>)
 800348c:	2200      	movs	r2, #0
 800348e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003490:	f7fe fb36 	bl	8001b00 <HAL_GetTick>
 8003494:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003496:	e008      	b.n	80034aa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003498:	f7fe fb32 	bl	8001b00 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e087      	b.n	80035ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034aa:	4b27      	ldr	r3, [pc, #156]	@ (8003548 <HAL_RCC_OscConfig+0x470>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1f0      	bne.n	8003498 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	69da      	ldr	r2, [r3, #28]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	431a      	orrs	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c4:	019b      	lsls	r3, r3, #6
 80034c6:	431a      	orrs	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034cc:	085b      	lsrs	r3, r3, #1
 80034ce:	3b01      	subs	r3, #1
 80034d0:	041b      	lsls	r3, r3, #16
 80034d2:	431a      	orrs	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034d8:	061b      	lsls	r3, r3, #24
 80034da:	491b      	ldr	r1, [pc, #108]	@ (8003548 <HAL_RCC_OscConfig+0x470>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034e0:	4b1b      	ldr	r3, [pc, #108]	@ (8003550 <HAL_RCC_OscConfig+0x478>)
 80034e2:	2201      	movs	r2, #1
 80034e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e6:	f7fe fb0b 	bl	8001b00 <HAL_GetTick>
 80034ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ec:	e008      	b.n	8003500 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ee:	f7fe fb07 	bl	8001b00 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d901      	bls.n	8003500 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e05c      	b.n	80035ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003500:	4b11      	ldr	r3, [pc, #68]	@ (8003548 <HAL_RCC_OscConfig+0x470>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d0f0      	beq.n	80034ee <HAL_RCC_OscConfig+0x416>
 800350c:	e054      	b.n	80035b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800350e:	4b10      	ldr	r3, [pc, #64]	@ (8003550 <HAL_RCC_OscConfig+0x478>)
 8003510:	2200      	movs	r2, #0
 8003512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003514:	f7fe faf4 	bl	8001b00 <HAL_GetTick>
 8003518:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800351a:	e008      	b.n	800352e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800351c:	f7fe faf0 	bl	8001b00 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b02      	cmp	r3, #2
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e045      	b.n	80035ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800352e:	4b06      	ldr	r3, [pc, #24]	@ (8003548 <HAL_RCC_OscConfig+0x470>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1f0      	bne.n	800351c <HAL_RCC_OscConfig+0x444>
 800353a:	e03d      	b.n	80035b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	2b01      	cmp	r3, #1
 8003542:	d107      	bne.n	8003554 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e038      	b.n	80035ba <HAL_RCC_OscConfig+0x4e2>
 8003548:	40023800 	.word	0x40023800
 800354c:	40007000 	.word	0x40007000
 8003550:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003554:	4b1b      	ldr	r3, [pc, #108]	@ (80035c4 <HAL_RCC_OscConfig+0x4ec>)
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	2b01      	cmp	r3, #1
 8003560:	d028      	beq.n	80035b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800356c:	429a      	cmp	r2, r3
 800356e:	d121      	bne.n	80035b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800357a:	429a      	cmp	r2, r3
 800357c:	d11a      	bne.n	80035b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003584:	4013      	ands	r3, r2
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800358a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800358c:	4293      	cmp	r3, r2
 800358e:	d111      	bne.n	80035b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800359a:	085b      	lsrs	r3, r3, #1
 800359c:	3b01      	subs	r3, #1
 800359e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d107      	bne.n	80035b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d001      	beq.n	80035b8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e000      	b.n	80035ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3718      	adds	r7, #24
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	40023800 	.word	0x40023800

080035c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d101      	bne.n	80035dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e0cc      	b.n	8003776 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035dc:	4b68      	ldr	r3, [pc, #416]	@ (8003780 <HAL_RCC_ClockConfig+0x1b8>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0307 	and.w	r3, r3, #7
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d90c      	bls.n	8003604 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ea:	4b65      	ldr	r3, [pc, #404]	@ (8003780 <HAL_RCC_ClockConfig+0x1b8>)
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	b2d2      	uxtb	r2, r2
 80035f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035f2:	4b63      	ldr	r3, [pc, #396]	@ (8003780 <HAL_RCC_ClockConfig+0x1b8>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0307 	and.w	r3, r3, #7
 80035fa:	683a      	ldr	r2, [r7, #0]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d001      	beq.n	8003604 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e0b8      	b.n	8003776 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0302 	and.w	r3, r3, #2
 800360c:	2b00      	cmp	r3, #0
 800360e:	d020      	beq.n	8003652 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0304 	and.w	r3, r3, #4
 8003618:	2b00      	cmp	r3, #0
 800361a:	d005      	beq.n	8003628 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800361c:	4b59      	ldr	r3, [pc, #356]	@ (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	4a58      	ldr	r2, [pc, #352]	@ (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 8003622:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003626:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0308 	and.w	r3, r3, #8
 8003630:	2b00      	cmp	r3, #0
 8003632:	d005      	beq.n	8003640 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003634:	4b53      	ldr	r3, [pc, #332]	@ (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	4a52      	ldr	r2, [pc, #328]	@ (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 800363a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800363e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003640:	4b50      	ldr	r3, [pc, #320]	@ (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	494d      	ldr	r1, [pc, #308]	@ (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 800364e:	4313      	orrs	r3, r2
 8003650:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	2b00      	cmp	r3, #0
 800365c:	d044      	beq.n	80036e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d107      	bne.n	8003676 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003666:	4b47      	ldr	r3, [pc, #284]	@ (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d119      	bne.n	80036a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e07f      	b.n	8003776 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	2b02      	cmp	r3, #2
 800367c:	d003      	beq.n	8003686 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003682:	2b03      	cmp	r3, #3
 8003684:	d107      	bne.n	8003696 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003686:	4b3f      	ldr	r3, [pc, #252]	@ (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d109      	bne.n	80036a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e06f      	b.n	8003776 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003696:	4b3b      	ldr	r3, [pc, #236]	@ (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d101      	bne.n	80036a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e067      	b.n	8003776 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036a6:	4b37      	ldr	r3, [pc, #220]	@ (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f023 0203 	bic.w	r2, r3, #3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	4934      	ldr	r1, [pc, #208]	@ (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036b8:	f7fe fa22 	bl	8001b00 <HAL_GetTick>
 80036bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036be:	e00a      	b.n	80036d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036c0:	f7fe fa1e 	bl	8001b00 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e04f      	b.n	8003776 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036d6:	4b2b      	ldr	r3, [pc, #172]	@ (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f003 020c 	and.w	r2, r3, #12
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d1eb      	bne.n	80036c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036e8:	4b25      	ldr	r3, [pc, #148]	@ (8003780 <HAL_RCC_ClockConfig+0x1b8>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0307 	and.w	r3, r3, #7
 80036f0:	683a      	ldr	r2, [r7, #0]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d20c      	bcs.n	8003710 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036f6:	4b22      	ldr	r3, [pc, #136]	@ (8003780 <HAL_RCC_ClockConfig+0x1b8>)
 80036f8:	683a      	ldr	r2, [r7, #0]
 80036fa:	b2d2      	uxtb	r2, r2
 80036fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036fe:	4b20      	ldr	r3, [pc, #128]	@ (8003780 <HAL_RCC_ClockConfig+0x1b8>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0307 	and.w	r3, r3, #7
 8003706:	683a      	ldr	r2, [r7, #0]
 8003708:	429a      	cmp	r2, r3
 800370a:	d001      	beq.n	8003710 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e032      	b.n	8003776 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0304 	and.w	r3, r3, #4
 8003718:	2b00      	cmp	r3, #0
 800371a:	d008      	beq.n	800372e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800371c:	4b19      	ldr	r3, [pc, #100]	@ (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	4916      	ldr	r1, [pc, #88]	@ (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 800372a:	4313      	orrs	r3, r2
 800372c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0308 	and.w	r3, r3, #8
 8003736:	2b00      	cmp	r3, #0
 8003738:	d009      	beq.n	800374e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800373a:	4b12      	ldr	r3, [pc, #72]	@ (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	00db      	lsls	r3, r3, #3
 8003748:	490e      	ldr	r1, [pc, #56]	@ (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 800374a:	4313      	orrs	r3, r2
 800374c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800374e:	f000 f821 	bl	8003794 <HAL_RCC_GetSysClockFreq>
 8003752:	4602      	mov	r2, r0
 8003754:	4b0b      	ldr	r3, [pc, #44]	@ (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	091b      	lsrs	r3, r3, #4
 800375a:	f003 030f 	and.w	r3, r3, #15
 800375e:	490a      	ldr	r1, [pc, #40]	@ (8003788 <HAL_RCC_ClockConfig+0x1c0>)
 8003760:	5ccb      	ldrb	r3, [r1, r3]
 8003762:	fa22 f303 	lsr.w	r3, r2, r3
 8003766:	4a09      	ldr	r2, [pc, #36]	@ (800378c <HAL_RCC_ClockConfig+0x1c4>)
 8003768:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800376a:	4b09      	ldr	r3, [pc, #36]	@ (8003790 <HAL_RCC_ClockConfig+0x1c8>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4618      	mov	r0, r3
 8003770:	f7fe f982 	bl	8001a78 <HAL_InitTick>

  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3710      	adds	r7, #16
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	40023c00 	.word	0x40023c00
 8003784:	40023800 	.word	0x40023800
 8003788:	08006f90 	.word	0x08006f90
 800378c:	20000008 	.word	0x20000008
 8003790:	2000000c 	.word	0x2000000c

08003794 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003794:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003798:	b094      	sub	sp, #80	@ 0x50
 800379a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800379c:	2300      	movs	r3, #0
 800379e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80037a0:	2300      	movs	r3, #0
 80037a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80037a4:	2300      	movs	r3, #0
 80037a6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80037a8:	2300      	movs	r3, #0
 80037aa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037ac:	4b79      	ldr	r3, [pc, #484]	@ (8003994 <HAL_RCC_GetSysClockFreq+0x200>)
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f003 030c 	and.w	r3, r3, #12
 80037b4:	2b08      	cmp	r3, #8
 80037b6:	d00d      	beq.n	80037d4 <HAL_RCC_GetSysClockFreq+0x40>
 80037b8:	2b08      	cmp	r3, #8
 80037ba:	f200 80e1 	bhi.w	8003980 <HAL_RCC_GetSysClockFreq+0x1ec>
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d002      	beq.n	80037c8 <HAL_RCC_GetSysClockFreq+0x34>
 80037c2:	2b04      	cmp	r3, #4
 80037c4:	d003      	beq.n	80037ce <HAL_RCC_GetSysClockFreq+0x3a>
 80037c6:	e0db      	b.n	8003980 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037c8:	4b73      	ldr	r3, [pc, #460]	@ (8003998 <HAL_RCC_GetSysClockFreq+0x204>)
 80037ca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80037cc:	e0db      	b.n	8003986 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037ce:	4b73      	ldr	r3, [pc, #460]	@ (800399c <HAL_RCC_GetSysClockFreq+0x208>)
 80037d0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80037d2:	e0d8      	b.n	8003986 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037d4:	4b6f      	ldr	r3, [pc, #444]	@ (8003994 <HAL_RCC_GetSysClockFreq+0x200>)
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80037dc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037de:	4b6d      	ldr	r3, [pc, #436]	@ (8003994 <HAL_RCC_GetSysClockFreq+0x200>)
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d063      	beq.n	80038b2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037ea:	4b6a      	ldr	r3, [pc, #424]	@ (8003994 <HAL_RCC_GetSysClockFreq+0x200>)
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	099b      	lsrs	r3, r3, #6
 80037f0:	2200      	movs	r2, #0
 80037f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80037f4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80037f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80037fe:	2300      	movs	r3, #0
 8003800:	637b      	str	r3, [r7, #52]	@ 0x34
 8003802:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003806:	4622      	mov	r2, r4
 8003808:	462b      	mov	r3, r5
 800380a:	f04f 0000 	mov.w	r0, #0
 800380e:	f04f 0100 	mov.w	r1, #0
 8003812:	0159      	lsls	r1, r3, #5
 8003814:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003818:	0150      	lsls	r0, r2, #5
 800381a:	4602      	mov	r2, r0
 800381c:	460b      	mov	r3, r1
 800381e:	4621      	mov	r1, r4
 8003820:	1a51      	subs	r1, r2, r1
 8003822:	6139      	str	r1, [r7, #16]
 8003824:	4629      	mov	r1, r5
 8003826:	eb63 0301 	sbc.w	r3, r3, r1
 800382a:	617b      	str	r3, [r7, #20]
 800382c:	f04f 0200 	mov.w	r2, #0
 8003830:	f04f 0300 	mov.w	r3, #0
 8003834:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003838:	4659      	mov	r1, fp
 800383a:	018b      	lsls	r3, r1, #6
 800383c:	4651      	mov	r1, sl
 800383e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003842:	4651      	mov	r1, sl
 8003844:	018a      	lsls	r2, r1, #6
 8003846:	4651      	mov	r1, sl
 8003848:	ebb2 0801 	subs.w	r8, r2, r1
 800384c:	4659      	mov	r1, fp
 800384e:	eb63 0901 	sbc.w	r9, r3, r1
 8003852:	f04f 0200 	mov.w	r2, #0
 8003856:	f04f 0300 	mov.w	r3, #0
 800385a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800385e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003862:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003866:	4690      	mov	r8, r2
 8003868:	4699      	mov	r9, r3
 800386a:	4623      	mov	r3, r4
 800386c:	eb18 0303 	adds.w	r3, r8, r3
 8003870:	60bb      	str	r3, [r7, #8]
 8003872:	462b      	mov	r3, r5
 8003874:	eb49 0303 	adc.w	r3, r9, r3
 8003878:	60fb      	str	r3, [r7, #12]
 800387a:	f04f 0200 	mov.w	r2, #0
 800387e:	f04f 0300 	mov.w	r3, #0
 8003882:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003886:	4629      	mov	r1, r5
 8003888:	024b      	lsls	r3, r1, #9
 800388a:	4621      	mov	r1, r4
 800388c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003890:	4621      	mov	r1, r4
 8003892:	024a      	lsls	r2, r1, #9
 8003894:	4610      	mov	r0, r2
 8003896:	4619      	mov	r1, r3
 8003898:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800389a:	2200      	movs	r2, #0
 800389c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800389e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80038a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80038a4:	f7fc fd44 	bl	8000330 <__aeabi_uldivmod>
 80038a8:	4602      	mov	r2, r0
 80038aa:	460b      	mov	r3, r1
 80038ac:	4613      	mov	r3, r2
 80038ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038b0:	e058      	b.n	8003964 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038b2:	4b38      	ldr	r3, [pc, #224]	@ (8003994 <HAL_RCC_GetSysClockFreq+0x200>)
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	099b      	lsrs	r3, r3, #6
 80038b8:	2200      	movs	r2, #0
 80038ba:	4618      	mov	r0, r3
 80038bc:	4611      	mov	r1, r2
 80038be:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80038c2:	623b      	str	r3, [r7, #32]
 80038c4:	2300      	movs	r3, #0
 80038c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80038c8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80038cc:	4642      	mov	r2, r8
 80038ce:	464b      	mov	r3, r9
 80038d0:	f04f 0000 	mov.w	r0, #0
 80038d4:	f04f 0100 	mov.w	r1, #0
 80038d8:	0159      	lsls	r1, r3, #5
 80038da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038de:	0150      	lsls	r0, r2, #5
 80038e0:	4602      	mov	r2, r0
 80038e2:	460b      	mov	r3, r1
 80038e4:	4641      	mov	r1, r8
 80038e6:	ebb2 0a01 	subs.w	sl, r2, r1
 80038ea:	4649      	mov	r1, r9
 80038ec:	eb63 0b01 	sbc.w	fp, r3, r1
 80038f0:	f04f 0200 	mov.w	r2, #0
 80038f4:	f04f 0300 	mov.w	r3, #0
 80038f8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80038fc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003900:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003904:	ebb2 040a 	subs.w	r4, r2, sl
 8003908:	eb63 050b 	sbc.w	r5, r3, fp
 800390c:	f04f 0200 	mov.w	r2, #0
 8003910:	f04f 0300 	mov.w	r3, #0
 8003914:	00eb      	lsls	r3, r5, #3
 8003916:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800391a:	00e2      	lsls	r2, r4, #3
 800391c:	4614      	mov	r4, r2
 800391e:	461d      	mov	r5, r3
 8003920:	4643      	mov	r3, r8
 8003922:	18e3      	adds	r3, r4, r3
 8003924:	603b      	str	r3, [r7, #0]
 8003926:	464b      	mov	r3, r9
 8003928:	eb45 0303 	adc.w	r3, r5, r3
 800392c:	607b      	str	r3, [r7, #4]
 800392e:	f04f 0200 	mov.w	r2, #0
 8003932:	f04f 0300 	mov.w	r3, #0
 8003936:	e9d7 4500 	ldrd	r4, r5, [r7]
 800393a:	4629      	mov	r1, r5
 800393c:	028b      	lsls	r3, r1, #10
 800393e:	4621      	mov	r1, r4
 8003940:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003944:	4621      	mov	r1, r4
 8003946:	028a      	lsls	r2, r1, #10
 8003948:	4610      	mov	r0, r2
 800394a:	4619      	mov	r1, r3
 800394c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800394e:	2200      	movs	r2, #0
 8003950:	61bb      	str	r3, [r7, #24]
 8003952:	61fa      	str	r2, [r7, #28]
 8003954:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003958:	f7fc fcea 	bl	8000330 <__aeabi_uldivmod>
 800395c:	4602      	mov	r2, r0
 800395e:	460b      	mov	r3, r1
 8003960:	4613      	mov	r3, r2
 8003962:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003964:	4b0b      	ldr	r3, [pc, #44]	@ (8003994 <HAL_RCC_GetSysClockFreq+0x200>)
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	0c1b      	lsrs	r3, r3, #16
 800396a:	f003 0303 	and.w	r3, r3, #3
 800396e:	3301      	adds	r3, #1
 8003970:	005b      	lsls	r3, r3, #1
 8003972:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003974:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003976:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003978:	fbb2 f3f3 	udiv	r3, r2, r3
 800397c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800397e:	e002      	b.n	8003986 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003980:	4b05      	ldr	r3, [pc, #20]	@ (8003998 <HAL_RCC_GetSysClockFreq+0x204>)
 8003982:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003984:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003986:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003988:	4618      	mov	r0, r3
 800398a:	3750      	adds	r7, #80	@ 0x50
 800398c:	46bd      	mov	sp, r7
 800398e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003992:	bf00      	nop
 8003994:	40023800 	.word	0x40023800
 8003998:	00f42400 	.word	0x00f42400
 800399c:	007a1200 	.word	0x007a1200

080039a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e041      	b.n	8003a36 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d106      	bne.n	80039cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f7fd fe3a 	bl	8001640 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2202      	movs	r2, #2
 80039d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	3304      	adds	r3, #4
 80039dc:	4619      	mov	r1, r3
 80039de:	4610      	mov	r0, r2
 80039e0:	f000 ff10 	bl	8004804 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3708      	adds	r7, #8
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
	...

08003a40 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b085      	sub	sp, #20
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d001      	beq.n	8003a58 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e046      	b.n	8003ae6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2202      	movs	r2, #2
 8003a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a23      	ldr	r2, [pc, #140]	@ (8003af4 <HAL_TIM_Base_Start+0xb4>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d022      	beq.n	8003ab0 <HAL_TIM_Base_Start+0x70>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a72:	d01d      	beq.n	8003ab0 <HAL_TIM_Base_Start+0x70>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a1f      	ldr	r2, [pc, #124]	@ (8003af8 <HAL_TIM_Base_Start+0xb8>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d018      	beq.n	8003ab0 <HAL_TIM_Base_Start+0x70>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a1e      	ldr	r2, [pc, #120]	@ (8003afc <HAL_TIM_Base_Start+0xbc>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d013      	beq.n	8003ab0 <HAL_TIM_Base_Start+0x70>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a1c      	ldr	r2, [pc, #112]	@ (8003b00 <HAL_TIM_Base_Start+0xc0>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d00e      	beq.n	8003ab0 <HAL_TIM_Base_Start+0x70>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a1b      	ldr	r2, [pc, #108]	@ (8003b04 <HAL_TIM_Base_Start+0xc4>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d009      	beq.n	8003ab0 <HAL_TIM_Base_Start+0x70>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a19      	ldr	r2, [pc, #100]	@ (8003b08 <HAL_TIM_Base_Start+0xc8>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d004      	beq.n	8003ab0 <HAL_TIM_Base_Start+0x70>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a18      	ldr	r2, [pc, #96]	@ (8003b0c <HAL_TIM_Base_Start+0xcc>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d111      	bne.n	8003ad4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f003 0307 	and.w	r3, r3, #7
 8003aba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2b06      	cmp	r3, #6
 8003ac0:	d010      	beq.n	8003ae4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f042 0201 	orr.w	r2, r2, #1
 8003ad0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ad2:	e007      	b.n	8003ae4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f042 0201 	orr.w	r2, r2, #1
 8003ae2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3714      	adds	r7, #20
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	40010000 	.word	0x40010000
 8003af8:	40000400 	.word	0x40000400
 8003afc:	40000800 	.word	0x40000800
 8003b00:	40000c00 	.word	0x40000c00
 8003b04:	40010400 	.word	0x40010400
 8003b08:	40014000 	.word	0x40014000
 8003b0c:	40001800 	.word	0x40001800

08003b10 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d101      	bne.n	8003b22 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e041      	b.n	8003ba6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d106      	bne.n	8003b3c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 f839 	bl	8003bae <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2202      	movs	r2, #2
 8003b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	3304      	adds	r3, #4
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	4610      	mov	r0, r2
 8003b50:	f000 fe58 	bl	8004804 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3708      	adds	r7, #8
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}

08003bae <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003bae:	b480      	push	{r7}
 8003bb0:	b083      	sub	sp, #12
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003bb6:	bf00      	nop
 8003bb8:	370c      	adds	r7, #12
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
	...

08003bc4 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b086      	sub	sp, #24
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	607a      	str	r2, [r7, #4]
 8003bd0:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d109      	bne.n	8003bf0 <HAL_TIM_PWM_Start_DMA+0x2c>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	bf0c      	ite	eq
 8003be8:	2301      	moveq	r3, #1
 8003bea:	2300      	movne	r3, #0
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	e022      	b.n	8003c36 <HAL_TIM_PWM_Start_DMA+0x72>
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	2b04      	cmp	r3, #4
 8003bf4:	d109      	bne.n	8003c0a <HAL_TIM_PWM_Start_DMA+0x46>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	bf0c      	ite	eq
 8003c02:	2301      	moveq	r3, #1
 8003c04:	2300      	movne	r3, #0
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	e015      	b.n	8003c36 <HAL_TIM_PWM_Start_DMA+0x72>
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	2b08      	cmp	r3, #8
 8003c0e:	d109      	bne.n	8003c24 <HAL_TIM_PWM_Start_DMA+0x60>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	bf0c      	ite	eq
 8003c1c:	2301      	moveq	r3, #1
 8003c1e:	2300      	movne	r3, #0
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	e008      	b.n	8003c36 <HAL_TIM_PWM_Start_DMA+0x72>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	bf0c      	ite	eq
 8003c30:	2301      	moveq	r3, #1
 8003c32:	2300      	movne	r3, #0
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d001      	beq.n	8003c3e <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	e171      	b.n	8003f22 <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d109      	bne.n	8003c58 <HAL_TIM_PWM_Start_DMA+0x94>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	bf0c      	ite	eq
 8003c50:	2301      	moveq	r3, #1
 8003c52:	2300      	movne	r3, #0
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	e022      	b.n	8003c9e <HAL_TIM_PWM_Start_DMA+0xda>
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	2b04      	cmp	r3, #4
 8003c5c:	d109      	bne.n	8003c72 <HAL_TIM_PWM_Start_DMA+0xae>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	bf0c      	ite	eq
 8003c6a:	2301      	moveq	r3, #1
 8003c6c:	2300      	movne	r3, #0
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	e015      	b.n	8003c9e <HAL_TIM_PWM_Start_DMA+0xda>
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	2b08      	cmp	r3, #8
 8003c76:	d109      	bne.n	8003c8c <HAL_TIM_PWM_Start_DMA+0xc8>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	bf0c      	ite	eq
 8003c84:	2301      	moveq	r3, #1
 8003c86:	2300      	movne	r3, #0
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	e008      	b.n	8003c9e <HAL_TIM_PWM_Start_DMA+0xda>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	bf0c      	ite	eq
 8003c98:	2301      	moveq	r3, #1
 8003c9a:	2300      	movne	r3, #0
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d024      	beq.n	8003cec <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d002      	beq.n	8003cae <HAL_TIM_PWM_Start_DMA+0xea>
 8003ca8:	887b      	ldrh	r3, [r7, #2]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d101      	bne.n	8003cb2 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e137      	b.n	8003f22 <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d104      	bne.n	8003cc2 <HAL_TIM_PWM_Start_DMA+0xfe>
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2202      	movs	r2, #2
 8003cbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003cc0:	e016      	b.n	8003cf0 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	2b04      	cmp	r3, #4
 8003cc6:	d104      	bne.n	8003cd2 <HAL_TIM_PWM_Start_DMA+0x10e>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2202      	movs	r2, #2
 8003ccc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003cd0:	e00e      	b.n	8003cf0 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	2b08      	cmp	r3, #8
 8003cd6:	d104      	bne.n	8003ce2 <HAL_TIM_PWM_Start_DMA+0x11e>
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2202      	movs	r2, #2
 8003cdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ce0:	e006      	b.n	8003cf0 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2202      	movs	r2, #2
 8003ce6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003cea:	e001      	b.n	8003cf0 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e118      	b.n	8003f22 <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	2b0c      	cmp	r3, #12
 8003cf4:	f200 80ae 	bhi.w	8003e54 <HAL_TIM_PWM_Start_DMA+0x290>
 8003cf8:	a201      	add	r2, pc, #4	@ (adr r2, 8003d00 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8003cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cfe:	bf00      	nop
 8003d00:	08003d35 	.word	0x08003d35
 8003d04:	08003e55 	.word	0x08003e55
 8003d08:	08003e55 	.word	0x08003e55
 8003d0c:	08003e55 	.word	0x08003e55
 8003d10:	08003d7d 	.word	0x08003d7d
 8003d14:	08003e55 	.word	0x08003e55
 8003d18:	08003e55 	.word	0x08003e55
 8003d1c:	08003e55 	.word	0x08003e55
 8003d20:	08003dc5 	.word	0x08003dc5
 8003d24:	08003e55 	.word	0x08003e55
 8003d28:	08003e55 	.word	0x08003e55
 8003d2c:	08003e55 	.word	0x08003e55
 8003d30:	08003e0d 	.word	0x08003e0d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d38:	4a7c      	ldr	r2, [pc, #496]	@ (8003f2c <HAL_TIM_PWM_Start_DMA+0x368>)
 8003d3a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d40:	4a7b      	ldr	r2, [pc, #492]	@ (8003f30 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003d42:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d48:	4a7a      	ldr	r2, [pc, #488]	@ (8003f34 <HAL_TIM_PWM_Start_DMA+0x370>)
 8003d4a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8003d50:	6879      	ldr	r1, [r7, #4]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	3334      	adds	r3, #52	@ 0x34
 8003d58:	461a      	mov	r2, r3
 8003d5a:	887b      	ldrh	r3, [r7, #2]
 8003d5c:	f7fe fd3c 	bl	80027d8 <HAL_DMA_Start_IT>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d001      	beq.n	8003d6a <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e0db      	b.n	8003f22 <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68da      	ldr	r2, [r3, #12]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d78:	60da      	str	r2, [r3, #12]
      break;
 8003d7a:	e06e      	b.n	8003e5a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d80:	4a6a      	ldr	r2, [pc, #424]	@ (8003f2c <HAL_TIM_PWM_Start_DMA+0x368>)
 8003d82:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d88:	4a69      	ldr	r2, [pc, #420]	@ (8003f30 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003d8a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d90:	4a68      	ldr	r2, [pc, #416]	@ (8003f34 <HAL_TIM_PWM_Start_DMA+0x370>)
 8003d92:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003d98:	6879      	ldr	r1, [r7, #4]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	3338      	adds	r3, #56	@ 0x38
 8003da0:	461a      	mov	r2, r3
 8003da2:	887b      	ldrh	r3, [r7, #2]
 8003da4:	f7fe fd18 	bl	80027d8 <HAL_DMA_Start_IT>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d001      	beq.n	8003db2 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e0b7      	b.n	8003f22 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68da      	ldr	r2, [r3, #12]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003dc0:	60da      	str	r2, [r3, #12]
      break;
 8003dc2:	e04a      	b.n	8003e5a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc8:	4a58      	ldr	r2, [pc, #352]	@ (8003f2c <HAL_TIM_PWM_Start_DMA+0x368>)
 8003dca:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dd0:	4a57      	ldr	r2, [pc, #348]	@ (8003f30 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003dd2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dd8:	4a56      	ldr	r2, [pc, #344]	@ (8003f34 <HAL_TIM_PWM_Start_DMA+0x370>)
 8003dda:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8003de0:	6879      	ldr	r1, [r7, #4]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	333c      	adds	r3, #60	@ 0x3c
 8003de8:	461a      	mov	r2, r3
 8003dea:	887b      	ldrh	r3, [r7, #2]
 8003dec:	f7fe fcf4 	bl	80027d8 <HAL_DMA_Start_IT>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e093      	b.n	8003f22 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68da      	ldr	r2, [r3, #12]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e08:	60da      	str	r2, [r3, #12]
      break;
 8003e0a:	e026      	b.n	8003e5a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e10:	4a46      	ldr	r2, [pc, #280]	@ (8003f2c <HAL_TIM_PWM_Start_DMA+0x368>)
 8003e12:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e18:	4a45      	ldr	r2, [pc, #276]	@ (8003f30 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003e1a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e20:	4a44      	ldr	r2, [pc, #272]	@ (8003f34 <HAL_TIM_PWM_Start_DMA+0x370>)
 8003e22:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003e28:	6879      	ldr	r1, [r7, #4]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	3340      	adds	r3, #64	@ 0x40
 8003e30:	461a      	mov	r2, r3
 8003e32:	887b      	ldrh	r3, [r7, #2]
 8003e34:	f7fe fcd0 	bl	80027d8 <HAL_DMA_Start_IT>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e06f      	b.n	8003f22 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68da      	ldr	r2, [r3, #12]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003e50:	60da      	str	r2, [r3, #12]
      break;
 8003e52:	e002      	b.n	8003e5a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	75fb      	strb	r3, [r7, #23]
      break;
 8003e58:	bf00      	nop
  }

  if (status == HAL_OK)
 8003e5a:	7dfb      	ldrb	r3, [r7, #23]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d15f      	bne.n	8003f20 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2201      	movs	r2, #1
 8003e66:	68b9      	ldr	r1, [r7, #8]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f000 ffbb 	bl	8004de4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a31      	ldr	r2, [pc, #196]	@ (8003f38 <HAL_TIM_PWM_Start_DMA+0x374>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d004      	beq.n	8003e82 <HAL_TIM_PWM_Start_DMA+0x2be>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a2f      	ldr	r2, [pc, #188]	@ (8003f3c <HAL_TIM_PWM_Start_DMA+0x378>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d101      	bne.n	8003e86 <HAL_TIM_PWM_Start_DMA+0x2c2>
 8003e82:	2301      	movs	r3, #1
 8003e84:	e000      	b.n	8003e88 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8003e86:	2300      	movs	r3, #0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d007      	beq.n	8003e9c <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e9a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a25      	ldr	r2, [pc, #148]	@ (8003f38 <HAL_TIM_PWM_Start_DMA+0x374>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d022      	beq.n	8003eec <HAL_TIM_PWM_Start_DMA+0x328>
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003eae:	d01d      	beq.n	8003eec <HAL_TIM_PWM_Start_DMA+0x328>
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a22      	ldr	r2, [pc, #136]	@ (8003f40 <HAL_TIM_PWM_Start_DMA+0x37c>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d018      	beq.n	8003eec <HAL_TIM_PWM_Start_DMA+0x328>
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a21      	ldr	r2, [pc, #132]	@ (8003f44 <HAL_TIM_PWM_Start_DMA+0x380>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d013      	beq.n	8003eec <HAL_TIM_PWM_Start_DMA+0x328>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a1f      	ldr	r2, [pc, #124]	@ (8003f48 <HAL_TIM_PWM_Start_DMA+0x384>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d00e      	beq.n	8003eec <HAL_TIM_PWM_Start_DMA+0x328>
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a1a      	ldr	r2, [pc, #104]	@ (8003f3c <HAL_TIM_PWM_Start_DMA+0x378>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d009      	beq.n	8003eec <HAL_TIM_PWM_Start_DMA+0x328>
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a1b      	ldr	r2, [pc, #108]	@ (8003f4c <HAL_TIM_PWM_Start_DMA+0x388>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d004      	beq.n	8003eec <HAL_TIM_PWM_Start_DMA+0x328>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a1a      	ldr	r2, [pc, #104]	@ (8003f50 <HAL_TIM_PWM_Start_DMA+0x38c>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d111      	bne.n	8003f10 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	f003 0307 	and.w	r3, r3, #7
 8003ef6:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	2b06      	cmp	r3, #6
 8003efc:	d010      	beq.n	8003f20 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f042 0201 	orr.w	r2, r2, #1
 8003f0c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f0e:	e007      	b.n	8003f20 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f042 0201 	orr.w	r2, r2, #1
 8003f1e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003f20:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3718      	adds	r7, #24
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	080046f5 	.word	0x080046f5
 8003f30:	0800479d 	.word	0x0800479d
 8003f34:	08004663 	.word	0x08004663
 8003f38:	40010000 	.word	0x40010000
 8003f3c:	40010400 	.word	0x40010400
 8003f40:	40000400 	.word	0x40000400
 8003f44:	40000800 	.word	0x40000800
 8003f48:	40000c00 	.word	0x40000c00
 8003f4c:	40014000 	.word	0x40014000
 8003f50:	40001800 	.word	0x40001800

08003f54 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	2b0c      	cmp	r3, #12
 8003f66:	d855      	bhi.n	8004014 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8003f68:	a201      	add	r2, pc, #4	@ (adr r2, 8003f70 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8003f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f6e:	bf00      	nop
 8003f70:	08003fa5 	.word	0x08003fa5
 8003f74:	08004015 	.word	0x08004015
 8003f78:	08004015 	.word	0x08004015
 8003f7c:	08004015 	.word	0x08004015
 8003f80:	08003fc1 	.word	0x08003fc1
 8003f84:	08004015 	.word	0x08004015
 8003f88:	08004015 	.word	0x08004015
 8003f8c:	08004015 	.word	0x08004015
 8003f90:	08003fdd 	.word	0x08003fdd
 8003f94:	08004015 	.word	0x08004015
 8003f98:	08004015 	.word	0x08004015
 8003f9c:	08004015 	.word	0x08004015
 8003fa0:	08003ff9 	.word	0x08003ff9
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68da      	ldr	r2, [r3, #12]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003fb2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f7fe fc65 	bl	8002888 <HAL_DMA_Abort_IT>
      break;
 8003fbe:	e02c      	b.n	800401a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68da      	ldr	r2, [r3, #12]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fce:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7fe fc57 	bl	8002888 <HAL_DMA_Abort_IT>
      break;
 8003fda:	e01e      	b.n	800401a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68da      	ldr	r2, [r3, #12]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003fea:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f7fe fc49 	bl	8002888 <HAL_DMA_Abort_IT>
      break;
 8003ff6:	e010      	b.n	800401a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68da      	ldr	r2, [r3, #12]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004006:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800400c:	4618      	mov	r0, r3
 800400e:	f7fe fc3b 	bl	8002888 <HAL_DMA_Abort_IT>
      break;
 8004012:	e002      	b.n	800401a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	73fb      	strb	r3, [r7, #15]
      break;
 8004018:	bf00      	nop
  }

  if (status == HAL_OK)
 800401a:	7bfb      	ldrb	r3, [r7, #15]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d161      	bne.n	80040e4 <HAL_TIM_PWM_Stop_DMA+0x190>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2200      	movs	r2, #0
 8004026:	6839      	ldr	r1, [r7, #0]
 8004028:	4618      	mov	r0, r3
 800402a:	f000 fedb 	bl	8004de4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a2f      	ldr	r2, [pc, #188]	@ (80040f0 <HAL_TIM_PWM_Stop_DMA+0x19c>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d004      	beq.n	8004042 <HAL_TIM_PWM_Stop_DMA+0xee>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a2d      	ldr	r2, [pc, #180]	@ (80040f4 <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d101      	bne.n	8004046 <HAL_TIM_PWM_Stop_DMA+0xf2>
 8004042:	2301      	movs	r3, #1
 8004044:	e000      	b.n	8004048 <HAL_TIM_PWM_Stop_DMA+0xf4>
 8004046:	2300      	movs	r3, #0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d017      	beq.n	800407c <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	6a1a      	ldr	r2, [r3, #32]
 8004052:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004056:	4013      	ands	r3, r2
 8004058:	2b00      	cmp	r3, #0
 800405a:	d10f      	bne.n	800407c <HAL_TIM_PWM_Stop_DMA+0x128>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	6a1a      	ldr	r2, [r3, #32]
 8004062:	f240 4344 	movw	r3, #1092	@ 0x444
 8004066:	4013      	ands	r3, r2
 8004068:	2b00      	cmp	r3, #0
 800406a:	d107      	bne.n	800407c <HAL_TIM_PWM_Stop_DMA+0x128>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800407a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	6a1a      	ldr	r2, [r3, #32]
 8004082:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004086:	4013      	ands	r3, r2
 8004088:	2b00      	cmp	r3, #0
 800408a:	d10f      	bne.n	80040ac <HAL_TIM_PWM_Stop_DMA+0x158>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	6a1a      	ldr	r2, [r3, #32]
 8004092:	f240 4344 	movw	r3, #1092	@ 0x444
 8004096:	4013      	ands	r3, r2
 8004098:	2b00      	cmp	r3, #0
 800409a:	d107      	bne.n	80040ac <HAL_TIM_PWM_Stop_DMA+0x158>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f022 0201 	bic.w	r2, r2, #1
 80040aa:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d104      	bne.n	80040bc <HAL_TIM_PWM_Stop_DMA+0x168>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80040ba:	e013      	b.n	80040e4 <HAL_TIM_PWM_Stop_DMA+0x190>
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	2b04      	cmp	r3, #4
 80040c0:	d104      	bne.n	80040cc <HAL_TIM_PWM_Stop_DMA+0x178>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2201      	movs	r2, #1
 80040c6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80040ca:	e00b      	b.n	80040e4 <HAL_TIM_PWM_Stop_DMA+0x190>
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	2b08      	cmp	r3, #8
 80040d0:	d104      	bne.n	80040dc <HAL_TIM_PWM_Stop_DMA+0x188>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80040da:	e003      	b.n	80040e4 <HAL_TIM_PWM_Stop_DMA+0x190>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 80040e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3710      	adds	r7, #16
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	40010000 	.word	0x40010000
 80040f4:	40010400 	.word	0x40010400

080040f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	2b00      	cmp	r3, #0
 8004118:	d020      	beq.n	800415c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f003 0302 	and.w	r3, r3, #2
 8004120:	2b00      	cmp	r3, #0
 8004122:	d01b      	beq.n	800415c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f06f 0202 	mvn.w	r2, #2
 800412c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2201      	movs	r2, #1
 8004132:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	f003 0303 	and.w	r3, r3, #3
 800413e:	2b00      	cmp	r3, #0
 8004140:	d003      	beq.n	800414a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 fa65 	bl	8004612 <HAL_TIM_IC_CaptureCallback>
 8004148:	e005      	b.n	8004156 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f000 fa57 	bl	80045fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f7fc facd 	bl	80006f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	f003 0304 	and.w	r3, r3, #4
 8004162:	2b00      	cmp	r3, #0
 8004164:	d020      	beq.n	80041a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f003 0304 	and.w	r3, r3, #4
 800416c:	2b00      	cmp	r3, #0
 800416e:	d01b      	beq.n	80041a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f06f 0204 	mvn.w	r2, #4
 8004178:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2202      	movs	r2, #2
 800417e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800418a:	2b00      	cmp	r3, #0
 800418c:	d003      	beq.n	8004196 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f000 fa3f 	bl	8004612 <HAL_TIM_IC_CaptureCallback>
 8004194:	e005      	b.n	80041a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 fa31 	bl	80045fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f7fc faa7 	bl	80006f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	f003 0308 	and.w	r3, r3, #8
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d020      	beq.n	80041f4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f003 0308 	and.w	r3, r3, #8
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d01b      	beq.n	80041f4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f06f 0208 	mvn.w	r2, #8
 80041c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2204      	movs	r2, #4
 80041ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	69db      	ldr	r3, [r3, #28]
 80041d2:	f003 0303 	and.w	r3, r3, #3
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d003      	beq.n	80041e2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 fa19 	bl	8004612 <HAL_TIM_IC_CaptureCallback>
 80041e0:	e005      	b.n	80041ee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 fa0b 	bl	80045fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f7fc fa81 	bl	80006f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	f003 0310 	and.w	r3, r3, #16
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d020      	beq.n	8004240 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f003 0310 	and.w	r3, r3, #16
 8004204:	2b00      	cmp	r3, #0
 8004206:	d01b      	beq.n	8004240 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f06f 0210 	mvn.w	r2, #16
 8004210:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2208      	movs	r2, #8
 8004216:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	69db      	ldr	r3, [r3, #28]
 800421e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004222:	2b00      	cmp	r3, #0
 8004224:	d003      	beq.n	800422e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 f9f3 	bl	8004612 <HAL_TIM_IC_CaptureCallback>
 800422c:	e005      	b.n	800423a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 f9e5 	bl	80045fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f7fc fa5b 	bl	80006f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	f003 0301 	and.w	r3, r3, #1
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00c      	beq.n	8004264 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f003 0301 	and.w	r3, r3, #1
 8004250:	2b00      	cmp	r3, #0
 8004252:	d007      	beq.n	8004264 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f06f 0201 	mvn.w	r2, #1
 800425c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 f9c3 	bl	80045ea <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00c      	beq.n	8004288 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004274:	2b00      	cmp	r3, #0
 8004276:	d007      	beq.n	8004288 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 feac 	bl	8004fe0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800428e:	2b00      	cmp	r3, #0
 8004290:	d00c      	beq.n	80042ac <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004298:	2b00      	cmp	r3, #0
 800429a:	d007      	beq.n	80042ac <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80042a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 f9c7 	bl	800463a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	f003 0320 	and.w	r3, r3, #32
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00c      	beq.n	80042d0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f003 0320 	and.w	r3, r3, #32
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d007      	beq.n	80042d0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f06f 0220 	mvn.w	r2, #32
 80042c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 fe7e 	bl	8004fcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042d0:	bf00      	nop
 80042d2:	3710      	adds	r7, #16
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b086      	sub	sp, #24
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042e4:	2300      	movs	r3, #0
 80042e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d101      	bne.n	80042f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80042f2:	2302      	movs	r3, #2
 80042f4:	e0ae      	b.n	8004454 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2201      	movs	r2, #1
 80042fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2b0c      	cmp	r3, #12
 8004302:	f200 809f 	bhi.w	8004444 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004306:	a201      	add	r2, pc, #4	@ (adr r2, 800430c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800430c:	08004341 	.word	0x08004341
 8004310:	08004445 	.word	0x08004445
 8004314:	08004445 	.word	0x08004445
 8004318:	08004445 	.word	0x08004445
 800431c:	08004381 	.word	0x08004381
 8004320:	08004445 	.word	0x08004445
 8004324:	08004445 	.word	0x08004445
 8004328:	08004445 	.word	0x08004445
 800432c:	080043c3 	.word	0x080043c3
 8004330:	08004445 	.word	0x08004445
 8004334:	08004445 	.word	0x08004445
 8004338:	08004445 	.word	0x08004445
 800433c:	08004403 	.word	0x08004403
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	68b9      	ldr	r1, [r7, #8]
 8004346:	4618      	mov	r0, r3
 8004348:	f000 fb02 	bl	8004950 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	699a      	ldr	r2, [r3, #24]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f042 0208 	orr.w	r2, r2, #8
 800435a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	699a      	ldr	r2, [r3, #24]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f022 0204 	bic.w	r2, r2, #4
 800436a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	6999      	ldr	r1, [r3, #24]
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	691a      	ldr	r2, [r3, #16]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	430a      	orrs	r2, r1
 800437c:	619a      	str	r2, [r3, #24]
      break;
 800437e:	e064      	b.n	800444a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68b9      	ldr	r1, [r7, #8]
 8004386:	4618      	mov	r0, r3
 8004388:	f000 fb52 	bl	8004a30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	699a      	ldr	r2, [r3, #24]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800439a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	699a      	ldr	r2, [r3, #24]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	6999      	ldr	r1, [r3, #24]
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	021a      	lsls	r2, r3, #8
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	430a      	orrs	r2, r1
 80043be:	619a      	str	r2, [r3, #24]
      break;
 80043c0:	e043      	b.n	800444a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68b9      	ldr	r1, [r7, #8]
 80043c8:	4618      	mov	r0, r3
 80043ca:	f000 fba7 	bl	8004b1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	69da      	ldr	r2, [r3, #28]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f042 0208 	orr.w	r2, r2, #8
 80043dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	69da      	ldr	r2, [r3, #28]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f022 0204 	bic.w	r2, r2, #4
 80043ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	69d9      	ldr	r1, [r3, #28]
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	691a      	ldr	r2, [r3, #16]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	430a      	orrs	r2, r1
 80043fe:	61da      	str	r2, [r3, #28]
      break;
 8004400:	e023      	b.n	800444a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68b9      	ldr	r1, [r7, #8]
 8004408:	4618      	mov	r0, r3
 800440a:	f000 fbfb 	bl	8004c04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	69da      	ldr	r2, [r3, #28]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800441c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	69da      	ldr	r2, [r3, #28]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800442c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	69d9      	ldr	r1, [r3, #28]
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	021a      	lsls	r2, r3, #8
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	430a      	orrs	r2, r1
 8004440:	61da      	str	r2, [r3, #28]
      break;
 8004442:	e002      	b.n	800444a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	75fb      	strb	r3, [r7, #23]
      break;
 8004448:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004452:	7dfb      	ldrb	r3, [r7, #23]
}
 8004454:	4618      	mov	r0, r3
 8004456:	3718      	adds	r7, #24
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004466:	2300      	movs	r3, #0
 8004468:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004470:	2b01      	cmp	r3, #1
 8004472:	d101      	bne.n	8004478 <HAL_TIM_ConfigClockSource+0x1c>
 8004474:	2302      	movs	r3, #2
 8004476:	e0b4      	b.n	80045e2 <HAL_TIM_ConfigClockSource+0x186>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2202      	movs	r2, #2
 8004484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004496:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800449e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68ba      	ldr	r2, [r7, #8]
 80044a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044b0:	d03e      	beq.n	8004530 <HAL_TIM_ConfigClockSource+0xd4>
 80044b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044b6:	f200 8087 	bhi.w	80045c8 <HAL_TIM_ConfigClockSource+0x16c>
 80044ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044be:	f000 8086 	beq.w	80045ce <HAL_TIM_ConfigClockSource+0x172>
 80044c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044c6:	d87f      	bhi.n	80045c8 <HAL_TIM_ConfigClockSource+0x16c>
 80044c8:	2b70      	cmp	r3, #112	@ 0x70
 80044ca:	d01a      	beq.n	8004502 <HAL_TIM_ConfigClockSource+0xa6>
 80044cc:	2b70      	cmp	r3, #112	@ 0x70
 80044ce:	d87b      	bhi.n	80045c8 <HAL_TIM_ConfigClockSource+0x16c>
 80044d0:	2b60      	cmp	r3, #96	@ 0x60
 80044d2:	d050      	beq.n	8004576 <HAL_TIM_ConfigClockSource+0x11a>
 80044d4:	2b60      	cmp	r3, #96	@ 0x60
 80044d6:	d877      	bhi.n	80045c8 <HAL_TIM_ConfigClockSource+0x16c>
 80044d8:	2b50      	cmp	r3, #80	@ 0x50
 80044da:	d03c      	beq.n	8004556 <HAL_TIM_ConfigClockSource+0xfa>
 80044dc:	2b50      	cmp	r3, #80	@ 0x50
 80044de:	d873      	bhi.n	80045c8 <HAL_TIM_ConfigClockSource+0x16c>
 80044e0:	2b40      	cmp	r3, #64	@ 0x40
 80044e2:	d058      	beq.n	8004596 <HAL_TIM_ConfigClockSource+0x13a>
 80044e4:	2b40      	cmp	r3, #64	@ 0x40
 80044e6:	d86f      	bhi.n	80045c8 <HAL_TIM_ConfigClockSource+0x16c>
 80044e8:	2b30      	cmp	r3, #48	@ 0x30
 80044ea:	d064      	beq.n	80045b6 <HAL_TIM_ConfigClockSource+0x15a>
 80044ec:	2b30      	cmp	r3, #48	@ 0x30
 80044ee:	d86b      	bhi.n	80045c8 <HAL_TIM_ConfigClockSource+0x16c>
 80044f0:	2b20      	cmp	r3, #32
 80044f2:	d060      	beq.n	80045b6 <HAL_TIM_ConfigClockSource+0x15a>
 80044f4:	2b20      	cmp	r3, #32
 80044f6:	d867      	bhi.n	80045c8 <HAL_TIM_ConfigClockSource+0x16c>
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d05c      	beq.n	80045b6 <HAL_TIM_ConfigClockSource+0x15a>
 80044fc:	2b10      	cmp	r3, #16
 80044fe:	d05a      	beq.n	80045b6 <HAL_TIM_ConfigClockSource+0x15a>
 8004500:	e062      	b.n	80045c8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004512:	f000 fc47 	bl	8004da4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004524:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	68ba      	ldr	r2, [r7, #8]
 800452c:	609a      	str	r2, [r3, #8]
      break;
 800452e:	e04f      	b.n	80045d0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004540:	f000 fc30 	bl	8004da4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	689a      	ldr	r2, [r3, #8]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004552:	609a      	str	r2, [r3, #8]
      break;
 8004554:	e03c      	b.n	80045d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004562:	461a      	mov	r2, r3
 8004564:	f000 fba4 	bl	8004cb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2150      	movs	r1, #80	@ 0x50
 800456e:	4618      	mov	r0, r3
 8004570:	f000 fbfd 	bl	8004d6e <TIM_ITRx_SetConfig>
      break;
 8004574:	e02c      	b.n	80045d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004582:	461a      	mov	r2, r3
 8004584:	f000 fbc3 	bl	8004d0e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2160      	movs	r1, #96	@ 0x60
 800458e:	4618      	mov	r0, r3
 8004590:	f000 fbed 	bl	8004d6e <TIM_ITRx_SetConfig>
      break;
 8004594:	e01c      	b.n	80045d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045a2:	461a      	mov	r2, r3
 80045a4:	f000 fb84 	bl	8004cb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2140      	movs	r1, #64	@ 0x40
 80045ae:	4618      	mov	r0, r3
 80045b0:	f000 fbdd 	bl	8004d6e <TIM_ITRx_SetConfig>
      break;
 80045b4:	e00c      	b.n	80045d0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4619      	mov	r1, r3
 80045c0:	4610      	mov	r0, r2
 80045c2:	f000 fbd4 	bl	8004d6e <TIM_ITRx_SetConfig>
      break;
 80045c6:	e003      	b.n	80045d0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	73fb      	strb	r3, [r7, #15]
      break;
 80045cc:	e000      	b.n	80045d0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80045ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80045e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3710      	adds	r7, #16
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045ea:	b480      	push	{r7}
 80045ec:	b083      	sub	sp, #12
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80045f2:	bf00      	nop
 80045f4:	370c      	adds	r7, #12
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr

080045fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045fe:	b480      	push	{r7}
 8004600:	b083      	sub	sp, #12
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004606:	bf00      	nop
 8004608:	370c      	adds	r7, #12
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr

08004612 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004612:	b480      	push	{r7}
 8004614:	b083      	sub	sp, #12
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800461a:	bf00      	nop
 800461c:	370c      	adds	r7, #12
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr

08004626 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004626:	b480      	push	{r7}
 8004628:	b083      	sub	sp, #12
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800462e:	bf00      	nop
 8004630:	370c      	adds	r7, #12
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr

0800463a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800463a:	b480      	push	{r7}
 800463c:	b083      	sub	sp, #12
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004642:	bf00      	nop
 8004644:	370c      	adds	r7, #12
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr

0800464e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800464e:	b480      	push	{r7}
 8004650:	b083      	sub	sp, #12
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004656:	bf00      	nop
 8004658:	370c      	adds	r7, #12
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr

08004662 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004662:	b580      	push	{r7, lr}
 8004664:	b084      	sub	sp, #16
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800466e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	429a      	cmp	r2, r3
 8004678:	d107      	bne.n	800468a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2201      	movs	r2, #1
 800467e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004688:	e02a      	b.n	80046e0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	429a      	cmp	r2, r3
 8004692:	d107      	bne.n	80046a4 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2202      	movs	r2, #2
 8004698:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2201      	movs	r2, #1
 800469e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046a2:	e01d      	b.n	80046e0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d107      	bne.n	80046be <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2204      	movs	r2, #4
 80046b2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046bc:	e010      	b.n	80046e0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d107      	bne.n	80046d8 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2208      	movs	r2, #8
 80046cc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2201      	movs	r2, #1
 80046d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80046d6:	e003      	b.n	80046e0 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80046e0:	68f8      	ldr	r0, [r7, #12]
 80046e2:	f7ff ffb4 	bl	800464e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2200      	movs	r2, #0
 80046ea:	771a      	strb	r2, [r3, #28]
}
 80046ec:	bf00      	nop
 80046ee:	3710      	adds	r7, #16
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004700:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	429a      	cmp	r2, r3
 800470a:	d10b      	bne.n	8004724 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2201      	movs	r2, #1
 8004710:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	69db      	ldr	r3, [r3, #28]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d136      	bne.n	8004788 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2201      	movs	r2, #1
 800471e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004722:	e031      	b.n	8004788 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	429a      	cmp	r2, r3
 800472c:	d10b      	bne.n	8004746 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2202      	movs	r2, #2
 8004732:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	69db      	ldr	r3, [r3, #28]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d125      	bne.n	8004788 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004744:	e020      	b.n	8004788 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	429a      	cmp	r2, r3
 800474e:	d10b      	bne.n	8004768 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2204      	movs	r2, #4
 8004754:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	69db      	ldr	r3, [r3, #28]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d114      	bne.n	8004788 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2201      	movs	r2, #1
 8004762:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004766:	e00f      	b.n	8004788 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	429a      	cmp	r2, r3
 8004770:	d10a      	bne.n	8004788 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2208      	movs	r2, #8
 8004776:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	69db      	ldr	r3, [r3, #28]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d103      	bne.n	8004788 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004788:	68f8      	ldr	r0, [r7, #12]
 800478a:	f7fb ffb1 	bl	80006f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2200      	movs	r2, #0
 8004792:	771a      	strb	r2, [r3, #28]
}
 8004794:	bf00      	nop
 8004796:	3710      	adds	r7, #16
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047a8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d103      	bne.n	80047bc <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2201      	movs	r2, #1
 80047b8:	771a      	strb	r2, [r3, #28]
 80047ba:	e019      	b.n	80047f0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d103      	bne.n	80047ce <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2202      	movs	r2, #2
 80047ca:	771a      	strb	r2, [r3, #28]
 80047cc:	e010      	b.n	80047f0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d103      	bne.n	80047e0 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2204      	movs	r2, #4
 80047dc:	771a      	strb	r2, [r3, #28]
 80047de:	e007      	b.n	80047f0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d102      	bne.n	80047f0 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2208      	movs	r2, #8
 80047ee:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80047f0:	68f8      	ldr	r0, [r7, #12]
 80047f2:	f7ff ff18 	bl	8004626 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2200      	movs	r2, #0
 80047fa:	771a      	strb	r2, [r3, #28]
}
 80047fc:	bf00      	nop
 80047fe:	3710      	adds	r7, #16
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004804:	b480      	push	{r7}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a43      	ldr	r2, [pc, #268]	@ (8004924 <TIM_Base_SetConfig+0x120>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d013      	beq.n	8004844 <TIM_Base_SetConfig+0x40>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004822:	d00f      	beq.n	8004844 <TIM_Base_SetConfig+0x40>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a40      	ldr	r2, [pc, #256]	@ (8004928 <TIM_Base_SetConfig+0x124>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d00b      	beq.n	8004844 <TIM_Base_SetConfig+0x40>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a3f      	ldr	r2, [pc, #252]	@ (800492c <TIM_Base_SetConfig+0x128>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d007      	beq.n	8004844 <TIM_Base_SetConfig+0x40>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4a3e      	ldr	r2, [pc, #248]	@ (8004930 <TIM_Base_SetConfig+0x12c>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d003      	beq.n	8004844 <TIM_Base_SetConfig+0x40>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a3d      	ldr	r2, [pc, #244]	@ (8004934 <TIM_Base_SetConfig+0x130>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d108      	bne.n	8004856 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800484a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	4313      	orrs	r3, r2
 8004854:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a32      	ldr	r2, [pc, #200]	@ (8004924 <TIM_Base_SetConfig+0x120>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d02b      	beq.n	80048b6 <TIM_Base_SetConfig+0xb2>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004864:	d027      	beq.n	80048b6 <TIM_Base_SetConfig+0xb2>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a2f      	ldr	r2, [pc, #188]	@ (8004928 <TIM_Base_SetConfig+0x124>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d023      	beq.n	80048b6 <TIM_Base_SetConfig+0xb2>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a2e      	ldr	r2, [pc, #184]	@ (800492c <TIM_Base_SetConfig+0x128>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d01f      	beq.n	80048b6 <TIM_Base_SetConfig+0xb2>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a2d      	ldr	r2, [pc, #180]	@ (8004930 <TIM_Base_SetConfig+0x12c>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d01b      	beq.n	80048b6 <TIM_Base_SetConfig+0xb2>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a2c      	ldr	r2, [pc, #176]	@ (8004934 <TIM_Base_SetConfig+0x130>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d017      	beq.n	80048b6 <TIM_Base_SetConfig+0xb2>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a2b      	ldr	r2, [pc, #172]	@ (8004938 <TIM_Base_SetConfig+0x134>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d013      	beq.n	80048b6 <TIM_Base_SetConfig+0xb2>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a2a      	ldr	r2, [pc, #168]	@ (800493c <TIM_Base_SetConfig+0x138>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d00f      	beq.n	80048b6 <TIM_Base_SetConfig+0xb2>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a29      	ldr	r2, [pc, #164]	@ (8004940 <TIM_Base_SetConfig+0x13c>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d00b      	beq.n	80048b6 <TIM_Base_SetConfig+0xb2>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a28      	ldr	r2, [pc, #160]	@ (8004944 <TIM_Base_SetConfig+0x140>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d007      	beq.n	80048b6 <TIM_Base_SetConfig+0xb2>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a27      	ldr	r2, [pc, #156]	@ (8004948 <TIM_Base_SetConfig+0x144>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d003      	beq.n	80048b6 <TIM_Base_SetConfig+0xb2>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a26      	ldr	r2, [pc, #152]	@ (800494c <TIM_Base_SetConfig+0x148>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d108      	bne.n	80048c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	68fa      	ldr	r2, [r7, #12]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	695b      	ldr	r3, [r3, #20]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	689a      	ldr	r2, [r3, #8]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a0e      	ldr	r2, [pc, #56]	@ (8004924 <TIM_Base_SetConfig+0x120>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d003      	beq.n	80048f6 <TIM_Base_SetConfig+0xf2>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a10      	ldr	r2, [pc, #64]	@ (8004934 <TIM_Base_SetConfig+0x130>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d103      	bne.n	80048fe <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	691a      	ldr	r2, [r3, #16]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f043 0204 	orr.w	r2, r3, #4
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2201      	movs	r2, #1
 800490e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	601a      	str	r2, [r3, #0]
}
 8004916:	bf00      	nop
 8004918:	3714      	adds	r7, #20
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	40010000 	.word	0x40010000
 8004928:	40000400 	.word	0x40000400
 800492c:	40000800 	.word	0x40000800
 8004930:	40000c00 	.word	0x40000c00
 8004934:	40010400 	.word	0x40010400
 8004938:	40014000 	.word	0x40014000
 800493c:	40014400 	.word	0x40014400
 8004940:	40014800 	.word	0x40014800
 8004944:	40001800 	.word	0x40001800
 8004948:	40001c00 	.word	0x40001c00
 800494c:	40002000 	.word	0x40002000

08004950 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004950:	b480      	push	{r7}
 8004952:	b087      	sub	sp, #28
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a1b      	ldr	r3, [r3, #32]
 800495e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a1b      	ldr	r3, [r3, #32]
 8004964:	f023 0201 	bic.w	r2, r3, #1
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	699b      	ldr	r3, [r3, #24]
 8004976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800497e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f023 0303 	bic.w	r3, r3, #3
 8004986:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	4313      	orrs	r3, r2
 8004990:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	f023 0302 	bic.w	r3, r3, #2
 8004998:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	697a      	ldr	r2, [r7, #20]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a20      	ldr	r2, [pc, #128]	@ (8004a28 <TIM_OC1_SetConfig+0xd8>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d003      	beq.n	80049b4 <TIM_OC1_SetConfig+0x64>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a1f      	ldr	r2, [pc, #124]	@ (8004a2c <TIM_OC1_SetConfig+0xdc>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d10c      	bne.n	80049ce <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	f023 0308 	bic.w	r3, r3, #8
 80049ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	697a      	ldr	r2, [r7, #20]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	f023 0304 	bic.w	r3, r3, #4
 80049cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a15      	ldr	r2, [pc, #84]	@ (8004a28 <TIM_OC1_SetConfig+0xd8>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d003      	beq.n	80049de <TIM_OC1_SetConfig+0x8e>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a14      	ldr	r2, [pc, #80]	@ (8004a2c <TIM_OC1_SetConfig+0xdc>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d111      	bne.n	8004a02 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80049e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80049ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	695b      	ldr	r3, [r3, #20]
 80049f2:	693a      	ldr	r2, [r7, #16]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	699b      	ldr	r3, [r3, #24]
 80049fc:	693a      	ldr	r2, [r7, #16]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	693a      	ldr	r2, [r7, #16]
 8004a06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	68fa      	ldr	r2, [r7, #12]
 8004a0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	685a      	ldr	r2, [r3, #4]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	697a      	ldr	r2, [r7, #20]
 8004a1a:	621a      	str	r2, [r3, #32]
}
 8004a1c:	bf00      	nop
 8004a1e:	371c      	adds	r7, #28
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr
 8004a28:	40010000 	.word	0x40010000
 8004a2c:	40010400 	.word	0x40010400

08004a30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b087      	sub	sp, #28
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a1b      	ldr	r3, [r3, #32]
 8004a3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6a1b      	ldr	r3, [r3, #32]
 8004a44:	f023 0210 	bic.w	r2, r3, #16
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	021b      	lsls	r3, r3, #8
 8004a6e:	68fa      	ldr	r2, [r7, #12]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	f023 0320 	bic.w	r3, r3, #32
 8004a7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	011b      	lsls	r3, r3, #4
 8004a82:	697a      	ldr	r2, [r7, #20]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4a22      	ldr	r2, [pc, #136]	@ (8004b14 <TIM_OC2_SetConfig+0xe4>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d003      	beq.n	8004a98 <TIM_OC2_SetConfig+0x68>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4a21      	ldr	r2, [pc, #132]	@ (8004b18 <TIM_OC2_SetConfig+0xe8>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d10d      	bne.n	8004ab4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	011b      	lsls	r3, r3, #4
 8004aa6:	697a      	ldr	r2, [r7, #20]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ab2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a17      	ldr	r2, [pc, #92]	@ (8004b14 <TIM_OC2_SetConfig+0xe4>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d003      	beq.n	8004ac4 <TIM_OC2_SetConfig+0x94>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a16      	ldr	r2, [pc, #88]	@ (8004b18 <TIM_OC2_SetConfig+0xe8>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d113      	bne.n	8004aec <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004aca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004ad2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	695b      	ldr	r3, [r3, #20]
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	693a      	ldr	r2, [r7, #16]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	699b      	ldr	r3, [r3, #24]
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	693a      	ldr	r2, [r7, #16]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	693a      	ldr	r2, [r7, #16]
 8004af0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	685a      	ldr	r2, [r3, #4]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	697a      	ldr	r2, [r7, #20]
 8004b04:	621a      	str	r2, [r3, #32]
}
 8004b06:	bf00      	nop
 8004b08:	371c      	adds	r7, #28
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	40010000 	.word	0x40010000
 8004b18:	40010400 	.word	0x40010400

08004b1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b087      	sub	sp, #28
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a1b      	ldr	r3, [r3, #32]
 8004b2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a1b      	ldr	r3, [r3, #32]
 8004b30:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	69db      	ldr	r3, [r3, #28]
 8004b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f023 0303 	bic.w	r3, r3, #3
 8004b52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004b64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	021b      	lsls	r3, r3, #8
 8004b6c:	697a      	ldr	r2, [r7, #20]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a21      	ldr	r2, [pc, #132]	@ (8004bfc <TIM_OC3_SetConfig+0xe0>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d003      	beq.n	8004b82 <TIM_OC3_SetConfig+0x66>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a20      	ldr	r2, [pc, #128]	@ (8004c00 <TIM_OC3_SetConfig+0xe4>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d10d      	bne.n	8004b9e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004b88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	021b      	lsls	r3, r3, #8
 8004b90:	697a      	ldr	r2, [r7, #20]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004b9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a16      	ldr	r2, [pc, #88]	@ (8004bfc <TIM_OC3_SetConfig+0xe0>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d003      	beq.n	8004bae <TIM_OC3_SetConfig+0x92>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a15      	ldr	r2, [pc, #84]	@ (8004c00 <TIM_OC3_SetConfig+0xe4>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d113      	bne.n	8004bd6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004bb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004bbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	695b      	ldr	r3, [r3, #20]
 8004bc2:	011b      	lsls	r3, r3, #4
 8004bc4:	693a      	ldr	r2, [r7, #16]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	699b      	ldr	r3, [r3, #24]
 8004bce:	011b      	lsls	r3, r3, #4
 8004bd0:	693a      	ldr	r2, [r7, #16]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	685a      	ldr	r2, [r3, #4]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	697a      	ldr	r2, [r7, #20]
 8004bee:	621a      	str	r2, [r3, #32]
}
 8004bf0:	bf00      	nop
 8004bf2:	371c      	adds	r7, #28
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr
 8004bfc:	40010000 	.word	0x40010000
 8004c00:	40010400 	.word	0x40010400

08004c04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b087      	sub	sp, #28
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a1b      	ldr	r3, [r3, #32]
 8004c12:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a1b      	ldr	r3, [r3, #32]
 8004c18:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	69db      	ldr	r3, [r3, #28]
 8004c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	021b      	lsls	r3, r3, #8
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004c4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	031b      	lsls	r3, r3, #12
 8004c56:	693a      	ldr	r2, [r7, #16]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4a12      	ldr	r2, [pc, #72]	@ (8004ca8 <TIM_OC4_SetConfig+0xa4>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d003      	beq.n	8004c6c <TIM_OC4_SetConfig+0x68>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a11      	ldr	r2, [pc, #68]	@ (8004cac <TIM_OC4_SetConfig+0xa8>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d109      	bne.n	8004c80 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004c72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	695b      	ldr	r3, [r3, #20]
 8004c78:	019b      	lsls	r3, r3, #6
 8004c7a:	697a      	ldr	r2, [r7, #20]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	697a      	ldr	r2, [r7, #20]
 8004c84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	685a      	ldr	r2, [r3, #4]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	693a      	ldr	r2, [r7, #16]
 8004c98:	621a      	str	r2, [r3, #32]
}
 8004c9a:	bf00      	nop
 8004c9c:	371c      	adds	r7, #28
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr
 8004ca6:	bf00      	nop
 8004ca8:	40010000 	.word	0x40010000
 8004cac:	40010400 	.word	0x40010400

08004cb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b087      	sub	sp, #28
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6a1b      	ldr	r3, [r3, #32]
 8004cc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	6a1b      	ldr	r3, [r3, #32]
 8004cc6:	f023 0201 	bic.w	r2, r3, #1
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004cda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	011b      	lsls	r3, r3, #4
 8004ce0:	693a      	ldr	r2, [r7, #16]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	f023 030a 	bic.w	r3, r3, #10
 8004cec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004cee:	697a      	ldr	r2, [r7, #20]
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	693a      	ldr	r2, [r7, #16]
 8004cfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	697a      	ldr	r2, [r7, #20]
 8004d00:	621a      	str	r2, [r3, #32]
}
 8004d02:	bf00      	nop
 8004d04:	371c      	adds	r7, #28
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr

08004d0e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d0e:	b480      	push	{r7}
 8004d10:	b087      	sub	sp, #28
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	60f8      	str	r0, [r7, #12]
 8004d16:	60b9      	str	r1, [r7, #8]
 8004d18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	6a1b      	ldr	r3, [r3, #32]
 8004d1e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6a1b      	ldr	r3, [r3, #32]
 8004d24:	f023 0210 	bic.w	r2, r3, #16
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	699b      	ldr	r3, [r3, #24]
 8004d30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004d38:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	031b      	lsls	r3, r3, #12
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004d4a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	011b      	lsls	r3, r3, #4
 8004d50:	697a      	ldr	r2, [r7, #20]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	693a      	ldr	r2, [r7, #16]
 8004d5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	697a      	ldr	r2, [r7, #20]
 8004d60:	621a      	str	r2, [r3, #32]
}
 8004d62:	bf00      	nop
 8004d64:	371c      	adds	r7, #28
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr

08004d6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d6e:	b480      	push	{r7}
 8004d70:	b085      	sub	sp, #20
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
 8004d76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d86:	683a      	ldr	r2, [r7, #0]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	f043 0307 	orr.w	r3, r3, #7
 8004d90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	68fa      	ldr	r2, [r7, #12]
 8004d96:	609a      	str	r2, [r3, #8]
}
 8004d98:	bf00      	nop
 8004d9a:	3714      	adds	r7, #20
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b087      	sub	sp, #28
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	60b9      	str	r1, [r7, #8]
 8004dae:	607a      	str	r2, [r7, #4]
 8004db0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004dbe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	021a      	lsls	r2, r3, #8
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	431a      	orrs	r2, r3
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	697a      	ldr	r2, [r7, #20]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	697a      	ldr	r2, [r7, #20]
 8004dd6:	609a      	str	r2, [r3, #8]
}
 8004dd8:	bf00      	nop
 8004dda:	371c      	adds	r7, #28
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b087      	sub	sp, #28
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	60b9      	str	r1, [r7, #8]
 8004dee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	f003 031f 	and.w	r3, r3, #31
 8004df6:	2201      	movs	r2, #1
 8004df8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6a1a      	ldr	r2, [r3, #32]
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	43db      	mvns	r3, r3
 8004e06:	401a      	ands	r2, r3
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6a1a      	ldr	r2, [r3, #32]
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	f003 031f 	and.w	r3, r3, #31
 8004e16:	6879      	ldr	r1, [r7, #4]
 8004e18:	fa01 f303 	lsl.w	r3, r1, r3
 8004e1c:	431a      	orrs	r2, r3
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	621a      	str	r2, [r3, #32]
}
 8004e22:	bf00      	nop
 8004e24:	371c      	adds	r7, #28
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
	...

08004e30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b085      	sub	sp, #20
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d101      	bne.n	8004e48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e44:	2302      	movs	r3, #2
 8004e46:	e05a      	b.n	8004efe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2202      	movs	r2, #2
 8004e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68fa      	ldr	r2, [r7, #12]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a21      	ldr	r2, [pc, #132]	@ (8004f0c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d022      	beq.n	8004ed2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e94:	d01d      	beq.n	8004ed2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a1d      	ldr	r2, [pc, #116]	@ (8004f10 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d018      	beq.n	8004ed2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a1b      	ldr	r2, [pc, #108]	@ (8004f14 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d013      	beq.n	8004ed2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a1a      	ldr	r2, [pc, #104]	@ (8004f18 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d00e      	beq.n	8004ed2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a18      	ldr	r2, [pc, #96]	@ (8004f1c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d009      	beq.n	8004ed2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a17      	ldr	r2, [pc, #92]	@ (8004f20 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d004      	beq.n	8004ed2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a15      	ldr	r2, [pc, #84]	@ (8004f24 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d10c      	bne.n	8004eec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ed8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	68ba      	ldr	r2, [r7, #8]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68ba      	ldr	r2, [r7, #8]
 8004eea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3714      	adds	r7, #20
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	40010000 	.word	0x40010000
 8004f10:	40000400 	.word	0x40000400
 8004f14:	40000800 	.word	0x40000800
 8004f18:	40000c00 	.word	0x40000c00
 8004f1c:	40010400 	.word	0x40010400
 8004f20:	40014000 	.word	0x40014000
 8004f24:	40001800 	.word	0x40001800

08004f28 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004f32:	2300      	movs	r3, #0
 8004f34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d101      	bne.n	8004f44 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004f40:	2302      	movs	r3, #2
 8004f42:	e03d      	b.n	8004fc0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	695b      	ldr	r3, [r3, #20]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	69db      	ldr	r3, [r3, #28]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3714      	adds	r7, #20
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004fd4:	bf00      	nop
 8004fd6:	370c      	adds	r7, #12
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004fe8:	bf00      	nop
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <arm_rfft_fast_init_f32>:
 8004ff4:	084b      	lsrs	r3, r1, #1
 8004ff6:	2b80      	cmp	r3, #128	@ 0x80
 8004ff8:	b410      	push	{r4}
 8004ffa:	8201      	strh	r1, [r0, #16]
 8004ffc:	8003      	strh	r3, [r0, #0]
 8004ffe:	d047      	beq.n	8005090 <arm_rfft_fast_init_f32+0x9c>
 8005000:	d917      	bls.n	8005032 <arm_rfft_fast_init_f32+0x3e>
 8005002:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005006:	d03d      	beq.n	8005084 <arm_rfft_fast_init_f32+0x90>
 8005008:	d929      	bls.n	800505e <arm_rfft_fast_init_f32+0x6a>
 800500a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800500e:	d020      	beq.n	8005052 <arm_rfft_fast_init_f32+0x5e>
 8005010:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005014:	d113      	bne.n	800503e <arm_rfft_fast_init_f32+0x4a>
 8005016:	4921      	ldr	r1, [pc, #132]	@ (800509c <arm_rfft_fast_init_f32+0xa8>)
 8005018:	4a21      	ldr	r2, [pc, #132]	@ (80050a0 <arm_rfft_fast_init_f32+0xac>)
 800501a:	4b22      	ldr	r3, [pc, #136]	@ (80050a4 <arm_rfft_fast_init_f32+0xb0>)
 800501c:	f44f 646e 	mov.w	r4, #3808	@ 0xee0
 8005020:	8184      	strh	r4, [r0, #12]
 8005022:	6081      	str	r1, [r0, #8]
 8005024:	6042      	str	r2, [r0, #4]
 8005026:	6143      	str	r3, [r0, #20]
 8005028:	2000      	movs	r0, #0
 800502a:	b240      	sxtb	r0, r0
 800502c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005030:	4770      	bx	lr
 8005032:	2b20      	cmp	r3, #32
 8005034:	d01c      	beq.n	8005070 <arm_rfft_fast_init_f32+0x7c>
 8005036:	2b40      	cmp	r3, #64	@ 0x40
 8005038:	d006      	beq.n	8005048 <arm_rfft_fast_init_f32+0x54>
 800503a:	2b10      	cmp	r3, #16
 800503c:	d01d      	beq.n	800507a <arm_rfft_fast_init_f32+0x86>
 800503e:	20ff      	movs	r0, #255	@ 0xff
 8005040:	b240      	sxtb	r0, r0
 8005042:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005046:	4770      	bx	lr
 8005048:	2438      	movs	r4, #56	@ 0x38
 800504a:	4917      	ldr	r1, [pc, #92]	@ (80050a8 <arm_rfft_fast_init_f32+0xb4>)
 800504c:	4a17      	ldr	r2, [pc, #92]	@ (80050ac <arm_rfft_fast_init_f32+0xb8>)
 800504e:	4b18      	ldr	r3, [pc, #96]	@ (80050b0 <arm_rfft_fast_init_f32+0xbc>)
 8005050:	e7e6      	b.n	8005020 <arm_rfft_fast_init_f32+0x2c>
 8005052:	f44f 64e1 	mov.w	r4, #1800	@ 0x708
 8005056:	4917      	ldr	r1, [pc, #92]	@ (80050b4 <arm_rfft_fast_init_f32+0xc0>)
 8005058:	4a17      	ldr	r2, [pc, #92]	@ (80050b8 <arm_rfft_fast_init_f32+0xc4>)
 800505a:	4b18      	ldr	r3, [pc, #96]	@ (80050bc <arm_rfft_fast_init_f32+0xc8>)
 800505c:	e7e0      	b.n	8005020 <arm_rfft_fast_init_f32+0x2c>
 800505e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005062:	d1ec      	bne.n	800503e <arm_rfft_fast_init_f32+0x4a>
 8005064:	f44f 74dc 	mov.w	r4, #440	@ 0x1b8
 8005068:	4915      	ldr	r1, [pc, #84]	@ (80050c0 <arm_rfft_fast_init_f32+0xcc>)
 800506a:	4a16      	ldr	r2, [pc, #88]	@ (80050c4 <arm_rfft_fast_init_f32+0xd0>)
 800506c:	4b16      	ldr	r3, [pc, #88]	@ (80050c8 <arm_rfft_fast_init_f32+0xd4>)
 800506e:	e7d7      	b.n	8005020 <arm_rfft_fast_init_f32+0x2c>
 8005070:	2430      	movs	r4, #48	@ 0x30
 8005072:	4916      	ldr	r1, [pc, #88]	@ (80050cc <arm_rfft_fast_init_f32+0xd8>)
 8005074:	4a16      	ldr	r2, [pc, #88]	@ (80050d0 <arm_rfft_fast_init_f32+0xdc>)
 8005076:	4b17      	ldr	r3, [pc, #92]	@ (80050d4 <arm_rfft_fast_init_f32+0xe0>)
 8005078:	e7d2      	b.n	8005020 <arm_rfft_fast_init_f32+0x2c>
 800507a:	2414      	movs	r4, #20
 800507c:	4916      	ldr	r1, [pc, #88]	@ (80050d8 <arm_rfft_fast_init_f32+0xe4>)
 800507e:	4a17      	ldr	r2, [pc, #92]	@ (80050dc <arm_rfft_fast_init_f32+0xe8>)
 8005080:	4b17      	ldr	r3, [pc, #92]	@ (80050e0 <arm_rfft_fast_init_f32+0xec>)
 8005082:	e7cd      	b.n	8005020 <arm_rfft_fast_init_f32+0x2c>
 8005084:	f44f 74e0 	mov.w	r4, #448	@ 0x1c0
 8005088:	4916      	ldr	r1, [pc, #88]	@ (80050e4 <arm_rfft_fast_init_f32+0xf0>)
 800508a:	4a17      	ldr	r2, [pc, #92]	@ (80050e8 <arm_rfft_fast_init_f32+0xf4>)
 800508c:	4b17      	ldr	r3, [pc, #92]	@ (80050ec <arm_rfft_fast_init_f32+0xf8>)
 800508e:	e7c7      	b.n	8005020 <arm_rfft_fast_init_f32+0x2c>
 8005090:	24d0      	movs	r4, #208	@ 0xd0
 8005092:	4917      	ldr	r1, [pc, #92]	@ (80050f0 <arm_rfft_fast_init_f32+0xfc>)
 8005094:	4a17      	ldr	r2, [pc, #92]	@ (80050f4 <arm_rfft_fast_init_f32+0x100>)
 8005096:	4b18      	ldr	r3, [pc, #96]	@ (80050f8 <arm_rfft_fast_init_f32+0x104>)
 8005098:	e7c2      	b.n	8005020 <arm_rfft_fast_init_f32+0x2c>
 800509a:	bf00      	nop
 800509c:	08015db0 	.word	0x08015db0
 80050a0:	08006fa8 	.word	0x08006fa8
 80050a4:	0800d118 	.word	0x0800d118
 80050a8:	0800b0a8 	.word	0x0800b0a8
 80050ac:	08017b70 	.word	0x08017b70
 80050b0:	0801a060 	.word	0x0801a060
 80050b4:	08013a98 	.word	0x08013a98
 80050b8:	08011998 	.word	0x08011998
 80050bc:	0800b118 	.word	0x0800b118
 80050c0:	08019cf0 	.word	0x08019cf0
 80050c4:	08011118 	.word	0x08011118
 80050c8:	08017d70 	.word	0x08017d70
 80050cc:	08014950 	.word	0x08014950
 80050d0:	08013998 	.word	0x08013998
 80050d4:	0800afa8 	.word	0x0800afa8
 80050d8:	080148a8 	.word	0x080148a8
 80050dc:	08011918 	.word	0x08011918
 80050e0:	080148d0 	.word	0x080148d0
 80050e4:	08018570 	.word	0x08018570
 80050e8:	08014db0 	.word	0x08014db0
 80050ec:	080188f0 	.word	0x080188f0
 80050f0:	0801a260 	.word	0x0801a260
 80050f4:	080149b0 	.word	0x080149b0
 80050f8:	080198f0 	.word	0x080198f0

080050fc <arm_rfft_fast_f32>:
 80050fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005100:	8a06      	ldrh	r6, [r0, #16]
 8005102:	0876      	lsrs	r6, r6, #1
 8005104:	4607      	mov	r7, r0
 8005106:	4615      	mov	r5, r2
 8005108:	8006      	strh	r6, [r0, #0]
 800510a:	460c      	mov	r4, r1
 800510c:	2b00      	cmp	r3, #0
 800510e:	d15c      	bne.n	80051ca <arm_rfft_fast_f32+0xce>
 8005110:	461a      	mov	r2, r3
 8005112:	2301      	movs	r3, #1
 8005114:	f000 fbe6 	bl	80058e4 <arm_cfft_f32>
 8005118:	edd4 7a00 	vldr	s15, [r4]
 800511c:	ed94 7a01 	vldr	s14, [r4, #4]
 8005120:	883e      	ldrh	r6, [r7, #0]
 8005122:	6978      	ldr	r0, [r7, #20]
 8005124:	ee37 7a07 	vadd.f32	s14, s14, s14
 8005128:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800512c:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 8005130:	ee77 6a87 	vadd.f32	s13, s15, s14
 8005134:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005138:	3e01      	subs	r6, #1
 800513a:	ee26 7aa3 	vmul.f32	s14, s13, s7
 800513e:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8005142:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8005146:	ed85 7a00 	vstr	s14, [r5]
 800514a:	edc5 7a01 	vstr	s15, [r5, #4]
 800514e:	3010      	adds	r0, #16
 8005150:	f105 0210 	add.w	r2, r5, #16
 8005154:	3b08      	subs	r3, #8
 8005156:	f104 0110 	add.w	r1, r4, #16
 800515a:	ed51 4a02 	vldr	s9, [r1, #-8]
 800515e:	ed93 5a02 	vldr	s10, [r3, #8]
 8005162:	ed11 7a01 	vldr	s14, [r1, #-4]
 8005166:	ed10 6a02 	vldr	s12, [r0, #-8]
 800516a:	edd3 5a03 	vldr	s11, [r3, #12]
 800516e:	ed50 6a01 	vldr	s13, [r0, #-4]
 8005172:	ee75 7a64 	vsub.f32	s15, s10, s9
 8005176:	ee35 4a87 	vadd.f32	s8, s11, s14
 800517a:	ee35 5a24 	vadd.f32	s10, s10, s9
 800517e:	ee77 5a65 	vsub.f32	s11, s14, s11
 8005182:	ee66 4a27 	vmul.f32	s9, s12, s15
 8005186:	ee26 7aa7 	vmul.f32	s14, s13, s15
 800518a:	ee34 5a85 	vadd.f32	s10, s9, s10
 800518e:	ee26 6a04 	vmul.f32	s12, s12, s8
 8005192:	ee66 6a84 	vmul.f32	s13, s13, s8
 8005196:	ee77 7a25 	vadd.f32	s15, s14, s11
 800519a:	ee76 6a85 	vadd.f32	s13, s13, s10
 800519e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80051a2:	ee66 6aa3 	vmul.f32	s13, s13, s7
 80051a6:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80051aa:	3e01      	subs	r6, #1
 80051ac:	ed42 6a02 	vstr	s13, [r2, #-8]
 80051b0:	ed42 7a01 	vstr	s15, [r2, #-4]
 80051b4:	f1a3 0308 	sub.w	r3, r3, #8
 80051b8:	f101 0108 	add.w	r1, r1, #8
 80051bc:	f100 0008 	add.w	r0, r0, #8
 80051c0:	f102 0208 	add.w	r2, r2, #8
 80051c4:	d1c9      	bne.n	800515a <arm_rfft_fast_f32+0x5e>
 80051c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051ca:	edd1 7a00 	vldr	s15, [r1]
 80051ce:	edd1 6a01 	vldr	s13, [r1, #4]
 80051d2:	6941      	ldr	r1, [r0, #20]
 80051d4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80051d8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80051dc:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 80051e0:	ee27 7a23 	vmul.f32	s14, s14, s7
 80051e4:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80051e8:	3e01      	subs	r6, #1
 80051ea:	ed82 7a00 	vstr	s14, [r2]
 80051ee:	edc2 7a01 	vstr	s15, [r2, #4]
 80051f2:	00f0      	lsls	r0, r6, #3
 80051f4:	b3ee      	cbz	r6, 8005272 <arm_rfft_fast_f32+0x176>
 80051f6:	3808      	subs	r0, #8
 80051f8:	f101 0e10 	add.w	lr, r1, #16
 80051fc:	4420      	add	r0, r4
 80051fe:	f104 0110 	add.w	r1, r4, #16
 8005202:	f102 0c10 	add.w	ip, r2, #16
 8005206:	ed90 7a02 	vldr	s14, [r0, #8]
 800520a:	ed51 6a02 	vldr	s13, [r1, #-8]
 800520e:	ed1e 6a02 	vldr	s12, [lr, #-8]
 8005212:	ed90 4a03 	vldr	s8, [r0, #12]
 8005216:	ed11 5a01 	vldr	s10, [r1, #-4]
 800521a:	ed5e 5a01 	vldr	s11, [lr, #-4]
 800521e:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8005222:	ee74 4a05 	vadd.f32	s9, s8, s10
 8005226:	ee26 3a27 	vmul.f32	s6, s12, s15
 800522a:	ee77 6a26 	vadd.f32	s13, s14, s13
 800522e:	ee35 5a44 	vsub.f32	s10, s10, s8
 8005232:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8005236:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800523a:	ee77 7a05 	vadd.f32	s15, s14, s10
 800523e:	ee26 6a24 	vmul.f32	s12, s12, s9
 8005242:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8005246:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800524a:	ee36 7ae5 	vsub.f32	s14, s13, s11
 800524e:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8005252:	ee27 7a23 	vmul.f32	s14, s14, s7
 8005256:	3e01      	subs	r6, #1
 8005258:	ed0c 7a02 	vstr	s14, [ip, #-8]
 800525c:	ed4c 7a01 	vstr	s15, [ip, #-4]
 8005260:	f1a0 0008 	sub.w	r0, r0, #8
 8005264:	f101 0108 	add.w	r1, r1, #8
 8005268:	f10e 0e08 	add.w	lr, lr, #8
 800526c:	f10c 0c08 	add.w	ip, ip, #8
 8005270:	d1c9      	bne.n	8005206 <arm_rfft_fast_f32+0x10a>
 8005272:	4638      	mov	r0, r7
 8005274:	4629      	mov	r1, r5
 8005276:	461a      	mov	r2, r3
 8005278:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800527c:	2301      	movs	r3, #1
 800527e:	f000 bb31 	b.w	80058e4 <arm_cfft_f32>
 8005282:	bf00      	nop

08005284 <arm_cfft_radix8by2_f32>:
 8005284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005288:	ed2d 8b08 	vpush	{d8-d11}
 800528c:	f8b0 e000 	ldrh.w	lr, [r0]
 8005290:	6842      	ldr	r2, [r0, #4]
 8005292:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8005296:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 800529a:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 800529e:	4607      	mov	r7, r0
 80052a0:	ea4f 038c 	mov.w	r3, ip, lsl #2
 80052a4:	f000 80af 	beq.w	8005406 <arm_cfft_radix8by2_f32+0x182>
 80052a8:	3310      	adds	r3, #16
 80052aa:	18ce      	adds	r6, r1, r3
 80052ac:	3210      	adds	r2, #16
 80052ae:	4443      	add	r3, r8
 80052b0:	f101 0510 	add.w	r5, r1, #16
 80052b4:	f108 0410 	add.w	r4, r8, #16
 80052b8:	ed54 1a04 	vldr	s3, [r4, #-16]
 80052bc:	ed13 4a04 	vldr	s8, [r3, #-16]
 80052c0:	ed53 3a03 	vldr	s7, [r3, #-12]
 80052c4:	ed53 5a02 	vldr	s11, [r3, #-8]
 80052c8:	ed13 5a01 	vldr	s10, [r3, #-4]
 80052cc:	ed54 6a03 	vldr	s13, [r4, #-12]
 80052d0:	ed14 0a02 	vldr	s0, [r4, #-8]
 80052d4:	ed16 2a04 	vldr	s4, [r6, #-16]
 80052d8:	ed56 2a03 	vldr	s5, [r6, #-12]
 80052dc:	ed15 6a03 	vldr	s12, [r5, #-12]
 80052e0:	ed15 7a01 	vldr	s14, [r5, #-4]
 80052e4:	ed15 3a04 	vldr	s6, [r5, #-16]
 80052e8:	ed54 7a01 	vldr	s15, [r4, #-4]
 80052ec:	ed56 0a02 	vldr	s1, [r6, #-8]
 80052f0:	ed16 1a01 	vldr	s2, [r6, #-4]
 80052f4:	ed55 4a02 	vldr	s9, [r5, #-8]
 80052f8:	ee73 ba21 	vadd.f32	s23, s6, s3
 80052fc:	ee36 ba26 	vadd.f32	s22, s12, s13
 8005300:	ee37 aa27 	vadd.f32	s20, s14, s15
 8005304:	ee72 9a04 	vadd.f32	s19, s4, s8
 8005308:	ee32 9aa3 	vadd.f32	s18, s5, s7
 800530c:	ee31 8a05 	vadd.f32	s16, s2, s10
 8005310:	ee74 aa80 	vadd.f32	s21, s9, s0
 8005314:	ee70 8aa5 	vadd.f32	s17, s1, s11
 8005318:	ed45 ba04 	vstr	s23, [r5, #-16]
 800531c:	ed05 ba03 	vstr	s22, [r5, #-12]
 8005320:	ed45 aa02 	vstr	s21, [r5, #-8]
 8005324:	ed05 aa01 	vstr	s20, [r5, #-4]
 8005328:	ed06 8a01 	vstr	s16, [r6, #-4]
 800532c:	ed46 9a04 	vstr	s19, [r6, #-16]
 8005330:	ed06 9a03 	vstr	s18, [r6, #-12]
 8005334:	ed46 8a02 	vstr	s17, [r6, #-8]
 8005338:	ee76 6a66 	vsub.f32	s13, s12, s13
 800533c:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8005340:	ed12 6a03 	vldr	s12, [r2, #-12]
 8005344:	ed52 2a04 	vldr	s5, [r2, #-16]
 8005348:	ee33 3a61 	vsub.f32	s6, s6, s3
 800534c:	ee34 4a42 	vsub.f32	s8, s8, s4
 8005350:	ee26 8a86 	vmul.f32	s16, s13, s12
 8005354:	ee24 2a06 	vmul.f32	s4, s8, s12
 8005358:	ee63 1a22 	vmul.f32	s3, s6, s5
 800535c:	ee24 4a22 	vmul.f32	s8, s8, s5
 8005360:	ee23 3a06 	vmul.f32	s6, s6, s12
 8005364:	ee66 6aa2 	vmul.f32	s13, s13, s5
 8005368:	ee23 6a86 	vmul.f32	s12, s7, s12
 800536c:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8005370:	ee36 6a04 	vadd.f32	s12, s12, s8
 8005374:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8005378:	ee72 3a63 	vsub.f32	s7, s4, s7
 800537c:	ee71 2a88 	vadd.f32	s5, s3, s16
 8005380:	ed44 6a03 	vstr	s13, [r4, #-12]
 8005384:	ed44 2a04 	vstr	s5, [r4, #-16]
 8005388:	ed43 3a04 	vstr	s7, [r3, #-16]
 800538c:	ed03 6a03 	vstr	s12, [r3, #-12]
 8005390:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005394:	ee75 6ae0 	vsub.f32	s13, s11, s1
 8005398:	ed12 7a01 	vldr	s14, [r2, #-4]
 800539c:	ed52 5a02 	vldr	s11, [r2, #-8]
 80053a0:	ee35 6a41 	vsub.f32	s12, s10, s2
 80053a4:	ee74 4ac0 	vsub.f32	s9, s9, s0
 80053a8:	ee67 3a87 	vmul.f32	s7, s15, s14
 80053ac:	ee26 5a87 	vmul.f32	s10, s13, s14
 80053b0:	ee24 4aa5 	vmul.f32	s8, s9, s11
 80053b4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80053b8:	ee64 4a87 	vmul.f32	s9, s9, s14
 80053bc:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80053c0:	ee26 7a07 	vmul.f32	s14, s12, s14
 80053c4:	ee26 6a25 	vmul.f32	s12, s12, s11
 80053c8:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80053cc:	ee74 5a23 	vadd.f32	s11, s8, s7
 80053d0:	ee35 6a46 	vsub.f32	s12, s10, s12
 80053d4:	ee37 7a26 	vadd.f32	s14, s14, s13
 80053d8:	f1be 0e01 	subs.w	lr, lr, #1
 80053dc:	ed44 5a02 	vstr	s11, [r4, #-8]
 80053e0:	f105 0510 	add.w	r5, r5, #16
 80053e4:	ed44 7a01 	vstr	s15, [r4, #-4]
 80053e8:	f106 0610 	add.w	r6, r6, #16
 80053ec:	ed03 6a02 	vstr	s12, [r3, #-8]
 80053f0:	ed03 7a01 	vstr	s14, [r3, #-4]
 80053f4:	f102 0210 	add.w	r2, r2, #16
 80053f8:	f104 0410 	add.w	r4, r4, #16
 80053fc:	f103 0310 	add.w	r3, r3, #16
 8005400:	f47f af5a 	bne.w	80052b8 <arm_cfft_radix8by2_f32+0x34>
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	fa1f f48c 	uxth.w	r4, ip
 800540a:	4608      	mov	r0, r1
 800540c:	2302      	movs	r3, #2
 800540e:	4621      	mov	r1, r4
 8005410:	f000 fae2 	bl	80059d8 <arm_radix8_butterfly_f32>
 8005414:	ecbd 8b08 	vpop	{d8-d11}
 8005418:	4640      	mov	r0, r8
 800541a:	4621      	mov	r1, r4
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	2302      	movs	r3, #2
 8005420:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005424:	f000 bad8 	b.w	80059d8 <arm_radix8_butterfly_f32>

08005428 <arm_cfft_radix8by4_f32>:
 8005428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800542c:	ed2d 8b0a 	vpush	{d8-d12}
 8005430:	8802      	ldrh	r2, [r0, #0]
 8005432:	ed91 6a00 	vldr	s12, [r1]
 8005436:	b08f      	sub	sp, #60	@ 0x3c
 8005438:	460f      	mov	r7, r1
 800543a:	0852      	lsrs	r2, r2, #1
 800543c:	0093      	lsls	r3, r2, #2
 800543e:	900c      	str	r0, [sp, #48]	@ 0x30
 8005440:	9103      	str	r1, [sp, #12]
 8005442:	6841      	ldr	r1, [r0, #4]
 8005444:	ed97 7a01 	vldr	s14, [r7, #4]
 8005448:	4638      	mov	r0, r7
 800544a:	4418      	add	r0, r3
 800544c:	4606      	mov	r6, r0
 800544e:	9009      	str	r0, [sp, #36]	@ 0x24
 8005450:	4418      	add	r0, r3
 8005452:	edd0 6a00 	vldr	s13, [r0]
 8005456:	edd6 3a00 	vldr	s7, [r6]
 800545a:	edd6 2a01 	vldr	s5, [r6, #4]
 800545e:	edd0 7a01 	vldr	s15, [r0, #4]
 8005462:	900a      	str	r0, [sp, #40]	@ 0x28
 8005464:	ee76 5a26 	vadd.f32	s11, s12, s13
 8005468:	4604      	mov	r4, r0
 800546a:	4625      	mov	r5, r4
 800546c:	441c      	add	r4, r3
 800546e:	ed94 4a00 	vldr	s8, [r4]
 8005472:	ed94 5a01 	vldr	s10, [r4, #4]
 8005476:	9401      	str	r4, [sp, #4]
 8005478:	ee75 4aa3 	vadd.f32	s9, s11, s7
 800547c:	4630      	mov	r0, r6
 800547e:	ee74 4a24 	vadd.f32	s9, s8, s9
 8005482:	463e      	mov	r6, r7
 8005484:	ee14 ea90 	vmov	lr, s9
 8005488:	ee76 6a66 	vsub.f32	s13, s12, s13
 800548c:	f846 eb08 	str.w	lr, [r6], #8
 8005490:	ee37 6a27 	vadd.f32	s12, s14, s15
 8005494:	edd0 4a01 	vldr	s9, [r0, #4]
 8005498:	9604      	str	r6, [sp, #16]
 800549a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800549e:	9e01      	ldr	r6, [sp, #4]
 80054a0:	ee32 3aa6 	vadd.f32	s6, s5, s13
 80054a4:	ed96 2a01 	vldr	s4, [r6, #4]
 80054a8:	ee36 7a24 	vadd.f32	s14, s12, s9
 80054ac:	ee75 5ae3 	vsub.f32	s11, s11, s7
 80054b0:	ee77 4ae3 	vsub.f32	s9, s15, s7
 80054b4:	ee36 6a62 	vsub.f32	s12, s12, s5
 80054b8:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80054bc:	ee76 6ae2 	vsub.f32	s13, s13, s5
 80054c0:	ee73 3a45 	vsub.f32	s7, s6, s10
 80054c4:	4604      	mov	r4, r0
 80054c6:	ee36 6a45 	vsub.f32	s12, s12, s10
 80054ca:	ee75 6a26 	vadd.f32	s13, s10, s13
 80054ce:	46a3      	mov	fp, r4
 80054d0:	ee37 7a02 	vadd.f32	s14, s14, s4
 80054d4:	ee34 5a84 	vadd.f32	s10, s9, s8
 80054d8:	ee13 8a90 	vmov	r8, s7
 80054dc:	46a4      	mov	ip, r4
 80054de:	ee75 5ac4 	vsub.f32	s11, s11, s8
 80054e2:	ed87 7a01 	vstr	s14, [r7, #4]
 80054e6:	f84b 8b08 	str.w	r8, [fp], #8
 80054ea:	f1ac 0704 	sub.w	r7, ip, #4
 80054ee:	ed8c 5a01 	vstr	s10, [ip, #4]
 80054f2:	f101 0c08 	add.w	ip, r1, #8
 80054f6:	462c      	mov	r4, r5
 80054f8:	f8cd c014 	str.w	ip, [sp, #20]
 80054fc:	ee15 ca90 	vmov	ip, s11
 8005500:	f844 cb08 	str.w	ip, [r4], #8
 8005504:	9407      	str	r4, [sp, #28]
 8005506:	f101 0410 	add.w	r4, r1, #16
 800550a:	ed85 6a01 	vstr	s12, [r5, #4]
 800550e:	0852      	lsrs	r2, r2, #1
 8005510:	9402      	str	r4, [sp, #8]
 8005512:	462c      	mov	r4, r5
 8005514:	f101 0518 	add.w	r5, r1, #24
 8005518:	920b      	str	r2, [sp, #44]	@ 0x2c
 800551a:	46b2      	mov	sl, r6
 800551c:	9506      	str	r5, [sp, #24]
 800551e:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8005522:	3a02      	subs	r2, #2
 8005524:	ee16 5a90 	vmov	r5, s13
 8005528:	46b6      	mov	lr, r6
 800552a:	4630      	mov	r0, r6
 800552c:	0852      	lsrs	r2, r2, #1
 800552e:	f84a 5b08 	str.w	r5, [sl], #8
 8005532:	f1a0 0604 	sub.w	r6, r0, #4
 8005536:	edce 7a01 	vstr	s15, [lr, #4]
 800553a:	9208      	str	r2, [sp, #32]
 800553c:	f000 8130 	beq.w	80057a0 <arm_cfft_radix8by4_f32+0x378>
 8005540:	4691      	mov	r9, r2
 8005542:	9a03      	ldr	r2, [sp, #12]
 8005544:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005548:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
 800554c:	3b08      	subs	r3, #8
 800554e:	f102 0510 	add.w	r5, r2, #16
 8005552:	f101 0c20 	add.w	ip, r1, #32
 8005556:	f1a4 020c 	sub.w	r2, r4, #12
 800555a:	f101 0e30 	add.w	lr, r1, #48	@ 0x30
 800555e:	4433      	add	r3, r6
 8005560:	3410      	adds	r4, #16
 8005562:	4650      	mov	r0, sl
 8005564:	4659      	mov	r1, fp
 8005566:	ed55 3a02 	vldr	s7, [r5, #-8]
 800556a:	ed14 5a02 	vldr	s10, [r4, #-8]
 800556e:	ed91 7a00 	vldr	s14, [r1]
 8005572:	edd0 7a00 	vldr	s15, [r0]
 8005576:	ed15 4a01 	vldr	s8, [r5, #-4]
 800557a:	ed54 5a01 	vldr	s11, [r4, #-4]
 800557e:	edd0 6a01 	vldr	s13, [r0, #4]
 8005582:	ed91 6a01 	vldr	s12, [r1, #4]
 8005586:	ee33 8a85 	vadd.f32	s16, s7, s10
 800558a:	ee34 0a25 	vadd.f32	s0, s8, s11
 800558e:	ee78 4a07 	vadd.f32	s9, s16, s14
 8005592:	ee74 5a65 	vsub.f32	s11, s8, s11
 8005596:	ee77 4aa4 	vadd.f32	s9, s15, s9
 800559a:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800559e:	ed45 4a02 	vstr	s9, [r5, #-8]
 80055a2:	edd1 4a01 	vldr	s9, [r1, #4]
 80055a6:	ed90 4a01 	vldr	s8, [r0, #4]
 80055aa:	ee70 4a24 	vadd.f32	s9, s0, s9
 80055ae:	ee76 aa05 	vadd.f32	s21, s12, s10
 80055b2:	ee74 4a84 	vadd.f32	s9, s9, s8
 80055b6:	ee35 aac7 	vsub.f32	s20, s11, s14
 80055ba:	ed45 4a01 	vstr	s9, [r5, #-4]
 80055be:	edd6 1a00 	vldr	s3, [r6]
 80055c2:	edd7 0a00 	vldr	s1, [r7]
 80055c6:	ed92 4a02 	vldr	s8, [r2, #8]
 80055ca:	edd3 3a02 	vldr	s7, [r3, #8]
 80055ce:	ed93 2a01 	vldr	s4, [r3, #4]
 80055d2:	ed16 1a01 	vldr	s2, [r6, #-4]
 80055d6:	edd2 2a01 	vldr	s5, [r2, #4]
 80055da:	ed57 9a01 	vldr	s19, [r7, #-4]
 80055de:	ee70 4aa1 	vadd.f32	s9, s1, s3
 80055e2:	ee39 3a81 	vadd.f32	s6, s19, s2
 80055e6:	ee74 8a84 	vadd.f32	s17, s9, s8
 80055ea:	ee70 1ae1 	vsub.f32	s3, s1, s3
 80055ee:	ee73 8aa8 	vadd.f32	s17, s7, s17
 80055f2:	ee7a aae6 	vsub.f32	s21, s21, s13
 80055f6:	ee18 aa90 	vmov	sl, s17
 80055fa:	f847 a908 	str.w	sl, [r7], #-8
 80055fe:	edd2 8a01 	vldr	s17, [r2, #4]
 8005602:	ed93 9a01 	vldr	s18, [r3, #4]
 8005606:	ee73 8a28 	vadd.f32	s17, s6, s17
 800560a:	ee3a aa27 	vadd.f32	s20, s20, s15
 800560e:	ee78 8a89 	vadd.f32	s17, s17, s18
 8005612:	ee74 0a63 	vsub.f32	s1, s8, s7
 8005616:	edc7 8a01 	vstr	s17, [r7, #4]
 800561a:	ed18 ba02 	vldr	s22, [r8, #-8]
 800561e:	ed58 8a01 	vldr	s17, [r8, #-4]
 8005622:	ee39 1ac1 	vsub.f32	s2, s19, s2
 8005626:	ee6a ba28 	vmul.f32	s23, s20, s17
 800562a:	ee2a ca8b 	vmul.f32	s24, s21, s22
 800562e:	ee71 9ae2 	vsub.f32	s19, s3, s5
 8005632:	ee30 9a81 	vadd.f32	s18, s1, s2
 8005636:	ee79 9a82 	vadd.f32	s19, s19, s4
 800563a:	ee3c ca2b 	vadd.f32	s24, s24, s23
 800563e:	ee6a aaa8 	vmul.f32	s21, s21, s17
 8005642:	ee69 baa8 	vmul.f32	s23, s19, s17
 8005646:	ee2a aa0b 	vmul.f32	s20, s20, s22
 800564a:	ee69 9a8b 	vmul.f32	s19, s19, s22
 800564e:	ee69 8a28 	vmul.f32	s17, s18, s17
 8005652:	ee29 ba0b 	vmul.f32	s22, s18, s22
 8005656:	ee1c aa10 	vmov	sl, s24
 800565a:	ee78 8aa9 	vadd.f32	s17, s17, s19
 800565e:	f841 ab08 	str.w	sl, [r1], #8
 8005662:	ee3a aa6a 	vsub.f32	s20, s20, s21
 8005666:	ee3b bacb 	vsub.f32	s22, s23, s22
 800566a:	ee34 4ac4 	vsub.f32	s8, s9, s8
 800566e:	ee33 3a62 	vsub.f32	s6, s6, s5
 8005672:	ed01 aa01 	vstr	s20, [r1, #-4]
 8005676:	edc2 8a01 	vstr	s17, [r2, #4]
 800567a:	ed82 ba02 	vstr	s22, [r2, #8]
 800567e:	ed5c 4a04 	vldr	s9, [ip, #-16]
 8005682:	ee74 3a63 	vsub.f32	s7, s8, s7
 8005686:	ee38 8a47 	vsub.f32	s16, s16, s14
 800568a:	ed1c 4a03 	vldr	s8, [ip, #-12]
 800568e:	ee30 0a46 	vsub.f32	s0, s0, s12
 8005692:	ee33 3a42 	vsub.f32	s6, s6, s4
 8005696:	ee38 8a67 	vsub.f32	s16, s16, s15
 800569a:	ee30 0a66 	vsub.f32	s0, s0, s13
 800569e:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 80056a2:	ee63 8a04 	vmul.f32	s17, s6, s8
 80056a6:	ee28 aa24 	vmul.f32	s20, s16, s9
 80056aa:	ee60 9a04 	vmul.f32	s19, s0, s8
 80056ae:	ee28 8a04 	vmul.f32	s16, s16, s8
 80056b2:	ee20 0a24 	vmul.f32	s0, s0, s9
 80056b6:	ee63 3a84 	vmul.f32	s7, s7, s8
 80056ba:	ee39 4a68 	vsub.f32	s8, s18, s17
 80056be:	ee7a 9a29 	vadd.f32	s19, s20, s19
 80056c2:	ee14 aa10 	vmov	sl, s8
 80056c6:	ee30 0a48 	vsub.f32	s0, s0, s16
 80056ca:	ee63 4a24 	vmul.f32	s9, s6, s9
 80056ce:	ed44 9a02 	vstr	s19, [r4, #-8]
 80056d2:	ee73 3ae4 	vsub.f32	s7, s7, s9
 80056d6:	ed04 0a01 	vstr	s0, [r4, #-4]
 80056da:	f846 a908 	str.w	sl, [r6], #-8
 80056de:	ee35 6a46 	vsub.f32	s12, s10, s12
 80056e2:	ee35 7a87 	vadd.f32	s14, s11, s14
 80056e6:	edc6 3a01 	vstr	s7, [r6, #4]
 80056ea:	ee76 6a86 	vadd.f32	s13, s13, s12
 80056ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80056f2:	ed1e 6a05 	vldr	s12, [lr, #-20]	@ 0xffffffec
 80056f6:	ed1e 7a06 	vldr	s14, [lr, #-24]	@ 0xffffffe8
 80056fa:	ee67 5a86 	vmul.f32	s11, s15, s12
 80056fe:	ee26 5a87 	vmul.f32	s10, s13, s14
 8005702:	ee72 2a62 	vsub.f32	s5, s4, s5
 8005706:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800570a:	ee72 2ae1 	vsub.f32	s5, s5, s3
 800570e:	ee75 5a25 	vadd.f32	s11, s10, s11
 8005712:	ee62 0a86 	vmul.f32	s1, s5, s12
 8005716:	ee66 6a86 	vmul.f32	s13, s13, s12
 800571a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800571e:	ee21 6a06 	vmul.f32	s12, s2, s12
 8005722:	ee62 2a87 	vmul.f32	s5, s5, s14
 8005726:	ee21 1a07 	vmul.f32	s2, s2, s14
 800572a:	ee15 aa90 	vmov	sl, s11
 800572e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005732:	f840 ab08 	str.w	sl, [r0], #8
 8005736:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800573a:	ee76 2a22 	vadd.f32	s5, s12, s5
 800573e:	f1b9 0901 	subs.w	r9, r9, #1
 8005742:	ed40 7a01 	vstr	s15, [r0, #-4]
 8005746:	f105 0508 	add.w	r5, r5, #8
 800574a:	ed83 1a02 	vstr	s2, [r3, #8]
 800574e:	edc3 2a01 	vstr	s5, [r3, #4]
 8005752:	f108 0808 	add.w	r8, r8, #8
 8005756:	f1a2 0208 	sub.w	r2, r2, #8
 800575a:	f10c 0c10 	add.w	ip, ip, #16
 800575e:	f104 0408 	add.w	r4, r4, #8
 8005762:	f10e 0e18 	add.w	lr, lr, #24
 8005766:	f1a3 0308 	sub.w	r3, r3, #8
 800576a:	f47f aefc 	bne.w	8005566 <arm_cfft_radix8by4_f32+0x13e>
 800576e:	9908      	ldr	r1, [sp, #32]
 8005770:	9802      	ldr	r0, [sp, #8]
 8005772:	f8dd a034 	ldr.w	sl, [sp, #52]	@ 0x34
 8005776:	00cb      	lsls	r3, r1, #3
 8005778:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800577c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8005780:	9102      	str	r1, [sp, #8]
 8005782:	9904      	ldr	r1, [sp, #16]
 8005784:	4419      	add	r1, r3
 8005786:	9104      	str	r1, [sp, #16]
 8005788:	9905      	ldr	r1, [sp, #20]
 800578a:	4419      	add	r1, r3
 800578c:	9105      	str	r1, [sp, #20]
 800578e:	9907      	ldr	r1, [sp, #28]
 8005790:	449b      	add	fp, r3
 8005792:	4419      	add	r1, r3
 8005794:	449a      	add	sl, r3
 8005796:	9b06      	ldr	r3, [sp, #24]
 8005798:	9107      	str	r1, [sp, #28]
 800579a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800579e:	9306      	str	r3, [sp, #24]
 80057a0:	9a04      	ldr	r2, [sp, #16]
 80057a2:	9807      	ldr	r0, [sp, #28]
 80057a4:	edd2 3a00 	vldr	s7, [r2]
 80057a8:	ed90 4a00 	vldr	s8, [r0]
 80057ac:	eddb 7a00 	vldr	s15, [fp]
 80057b0:	ed9a 3a00 	vldr	s6, [sl]
 80057b4:	edd2 4a01 	vldr	s9, [r2, #4]
 80057b8:	ed90 7a01 	vldr	s14, [r0, #4]
 80057bc:	ed9b 2a01 	vldr	s4, [fp, #4]
 80057c0:	edda 5a01 	vldr	s11, [sl, #4]
 80057c4:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 80057c8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80057ca:	ee73 6a84 	vadd.f32	s13, s7, s8
 80057ce:	ee34 6a87 	vadd.f32	s12, s9, s14
 80057d2:	ee36 5aa7 	vadd.f32	s10, s13, s15
 80057d6:	ee34 7ac7 	vsub.f32	s14, s9, s14
 80057da:	ee33 5a05 	vadd.f32	s10, s6, s10
 80057de:	ee33 4ac4 	vsub.f32	s8, s7, s8
 80057e2:	ed82 5a00 	vstr	s10, [r2]
 80057e6:	ed9b 5a01 	vldr	s10, [fp, #4]
 80057ea:	edda 4a01 	vldr	s9, [sl, #4]
 80057ee:	ee36 5a05 	vadd.f32	s10, s12, s10
 80057f2:	ee72 3a04 	vadd.f32	s7, s4, s8
 80057f6:	ee35 5a24 	vadd.f32	s10, s10, s9
 80057fa:	ee77 4a67 	vsub.f32	s9, s14, s15
 80057fe:	ed82 5a01 	vstr	s10, [r2, #4]
 8005802:	9a05      	ldr	r2, [sp, #20]
 8005804:	ee34 5a83 	vadd.f32	s10, s9, s6
 8005808:	edd2 1a00 	vldr	s3, [r2]
 800580c:	edd2 2a01 	vldr	s5, [r2, #4]
 8005810:	9a02      	ldr	r2, [sp, #8]
 8005812:	ee73 3ae5 	vsub.f32	s7, s7, s11
 8005816:	ee36 6a42 	vsub.f32	s12, s12, s4
 800581a:	ee63 4aa1 	vmul.f32	s9, s7, s3
 800581e:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8005822:	ee65 2a22 	vmul.f32	s5, s10, s5
 8005826:	ee25 5a21 	vmul.f32	s10, s10, s3
 800582a:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800582e:	ee35 5a63 	vsub.f32	s10, s10, s7
 8005832:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005836:	edcb 2a00 	vstr	s5, [fp]
 800583a:	ed8b 5a01 	vstr	s10, [fp, #4]
 800583e:	edd2 3a01 	vldr	s7, [r2, #4]
 8005842:	ed92 5a00 	vldr	s10, [r2]
 8005846:	9a06      	ldr	r2, [sp, #24]
 8005848:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800584c:	ee36 6a65 	vsub.f32	s12, s12, s11
 8005850:	ee66 4a85 	vmul.f32	s9, s13, s10
 8005854:	ee26 5a05 	vmul.f32	s10, s12, s10
 8005858:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800585c:	ee26 6a23 	vmul.f32	s12, s12, s7
 8005860:	ee75 6a66 	vsub.f32	s13, s10, s13
 8005864:	ee34 6a86 	vadd.f32	s12, s9, s12
 8005868:	ee34 4a42 	vsub.f32	s8, s8, s4
 800586c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005870:	edc0 6a01 	vstr	s13, [r0, #4]
 8005874:	ed80 6a00 	vstr	s12, [r0]
 8005878:	ed92 6a01 	vldr	s12, [r2, #4]
 800587c:	9803      	ldr	r0, [sp, #12]
 800587e:	ee77 7a43 	vsub.f32	s15, s14, s6
 8005882:	ee75 5a84 	vadd.f32	s11, s11, s8
 8005886:	ed92 7a00 	vldr	s14, [r2]
 800588a:	ee65 6a87 	vmul.f32	s13, s11, s14
 800588e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005892:	ee65 5a86 	vmul.f32	s11, s11, s12
 8005896:	ee67 7a86 	vmul.f32	s15, s15, s12
 800589a:	ee77 5a65 	vsub.f32	s11, s14, s11
 800589e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058a2:	edca 5a01 	vstr	s11, [sl, #4]
 80058a6:	edca 7a00 	vstr	s15, [sl]
 80058aa:	6872      	ldr	r2, [r6, #4]
 80058ac:	4621      	mov	r1, r4
 80058ae:	2304      	movs	r3, #4
 80058b0:	f000 f892 	bl	80059d8 <arm_radix8_butterfly_f32>
 80058b4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80058b6:	6872      	ldr	r2, [r6, #4]
 80058b8:	4621      	mov	r1, r4
 80058ba:	2304      	movs	r3, #4
 80058bc:	f000 f88c 	bl	80059d8 <arm_radix8_butterfly_f32>
 80058c0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80058c2:	6872      	ldr	r2, [r6, #4]
 80058c4:	4621      	mov	r1, r4
 80058c6:	2304      	movs	r3, #4
 80058c8:	f000 f886 	bl	80059d8 <arm_radix8_butterfly_f32>
 80058cc:	9801      	ldr	r0, [sp, #4]
 80058ce:	6872      	ldr	r2, [r6, #4]
 80058d0:	4621      	mov	r1, r4
 80058d2:	2304      	movs	r3, #4
 80058d4:	b00f      	add	sp, #60	@ 0x3c
 80058d6:	ecbd 8b0a 	vpop	{d8-d12}
 80058da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058de:	f000 b87b 	b.w	80059d8 <arm_radix8_butterfly_f32>
 80058e2:	bf00      	nop

080058e4 <arm_cfft_f32>:
 80058e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058e8:	2a01      	cmp	r2, #1
 80058ea:	4606      	mov	r6, r0
 80058ec:	4617      	mov	r7, r2
 80058ee:	460c      	mov	r4, r1
 80058f0:	4698      	mov	r8, r3
 80058f2:	8805      	ldrh	r5, [r0, #0]
 80058f4:	d054      	beq.n	80059a0 <arm_cfft_f32+0xbc>
 80058f6:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 80058fa:	d04c      	beq.n	8005996 <arm_cfft_f32+0xb2>
 80058fc:	d916      	bls.n	800592c <arm_cfft_f32+0x48>
 80058fe:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 8005902:	d01a      	beq.n	800593a <arm_cfft_f32+0x56>
 8005904:	d95c      	bls.n	80059c0 <arm_cfft_f32+0xdc>
 8005906:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 800590a:	d044      	beq.n	8005996 <arm_cfft_f32+0xb2>
 800590c:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8005910:	d105      	bne.n	800591e <arm_cfft_f32+0x3a>
 8005912:	4620      	mov	r0, r4
 8005914:	4629      	mov	r1, r5
 8005916:	6872      	ldr	r2, [r6, #4]
 8005918:	2301      	movs	r3, #1
 800591a:	f000 f85d 	bl	80059d8 <arm_radix8_butterfly_f32>
 800591e:	f1b8 0f00 	cmp.w	r8, #0
 8005922:	d111      	bne.n	8005948 <arm_cfft_f32+0x64>
 8005924:	2f01      	cmp	r7, #1
 8005926:	d016      	beq.n	8005956 <arm_cfft_f32+0x72>
 8005928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800592c:	2d20      	cmp	r5, #32
 800592e:	d032      	beq.n	8005996 <arm_cfft_f32+0xb2>
 8005930:	d94a      	bls.n	80059c8 <arm_cfft_f32+0xe4>
 8005932:	2d40      	cmp	r5, #64	@ 0x40
 8005934:	d0ed      	beq.n	8005912 <arm_cfft_f32+0x2e>
 8005936:	2d80      	cmp	r5, #128	@ 0x80
 8005938:	d1f1      	bne.n	800591e <arm_cfft_f32+0x3a>
 800593a:	4630      	mov	r0, r6
 800593c:	4621      	mov	r1, r4
 800593e:	f7ff fca1 	bl	8005284 <arm_cfft_radix8by2_f32>
 8005942:	f1b8 0f00 	cmp.w	r8, #0
 8005946:	d0ed      	beq.n	8005924 <arm_cfft_f32+0x40>
 8005948:	4620      	mov	r0, r4
 800594a:	89b1      	ldrh	r1, [r6, #12]
 800594c:	68b2      	ldr	r2, [r6, #8]
 800594e:	f7fa fc3f 	bl	80001d0 <arm_bitreversal_32>
 8005952:	2f01      	cmp	r7, #1
 8005954:	d1e8      	bne.n	8005928 <arm_cfft_f32+0x44>
 8005956:	ee07 5a90 	vmov	s15, r5
 800595a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800595e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8005962:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 8005966:	2d00      	cmp	r5, #0
 8005968:	d0de      	beq.n	8005928 <arm_cfft_f32+0x44>
 800596a:	f104 0108 	add.w	r1, r4, #8
 800596e:	2300      	movs	r3, #0
 8005970:	3301      	adds	r3, #1
 8005972:	429d      	cmp	r5, r3
 8005974:	f101 0108 	add.w	r1, r1, #8
 8005978:	ed11 7a04 	vldr	s14, [r1, #-16]
 800597c:	ed51 7a03 	vldr	s15, [r1, #-12]
 8005980:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005984:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8005988:	ed01 7a04 	vstr	s14, [r1, #-16]
 800598c:	ed41 7a03 	vstr	s15, [r1, #-12]
 8005990:	d1ee      	bne.n	8005970 <arm_cfft_f32+0x8c>
 8005992:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005996:	4630      	mov	r0, r6
 8005998:	4621      	mov	r1, r4
 800599a:	f7ff fd45 	bl	8005428 <arm_cfft_radix8by4_f32>
 800599e:	e7be      	b.n	800591e <arm_cfft_f32+0x3a>
 80059a0:	b1ad      	cbz	r5, 80059ce <arm_cfft_f32+0xea>
 80059a2:	f101 030c 	add.w	r3, r1, #12
 80059a6:	2200      	movs	r2, #0
 80059a8:	ed53 7a02 	vldr	s15, [r3, #-8]
 80059ac:	3201      	adds	r2, #1
 80059ae:	eef1 7a67 	vneg.f32	s15, s15
 80059b2:	4295      	cmp	r5, r2
 80059b4:	ed43 7a02 	vstr	s15, [r3, #-8]
 80059b8:	f103 0308 	add.w	r3, r3, #8
 80059bc:	d1f4      	bne.n	80059a8 <arm_cfft_f32+0xc4>
 80059be:	e79a      	b.n	80058f6 <arm_cfft_f32+0x12>
 80059c0:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 80059c4:	d0a5      	beq.n	8005912 <arm_cfft_f32+0x2e>
 80059c6:	e7aa      	b.n	800591e <arm_cfft_f32+0x3a>
 80059c8:	2d10      	cmp	r5, #16
 80059ca:	d0b6      	beq.n	800593a <arm_cfft_f32+0x56>
 80059cc:	e7a7      	b.n	800591e <arm_cfft_f32+0x3a>
 80059ce:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 80059d2:	d894      	bhi.n	80058fe <arm_cfft_f32+0x1a>
 80059d4:	e7aa      	b.n	800592c <arm_cfft_f32+0x48>
 80059d6:	bf00      	nop

080059d8 <arm_radix8_butterfly_f32>:
 80059d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059dc:	ed2d 8b10 	vpush	{d8-d15}
 80059e0:	b09d      	sub	sp, #116	@ 0x74
 80059e2:	461c      	mov	r4, r3
 80059e4:	ed9f bac8 	vldr	s22, [pc, #800]	@ 8005d08 <arm_radix8_butterfly_f32+0x330>
 80059e8:	921a      	str	r2, [sp, #104]	@ 0x68
 80059ea:	1d03      	adds	r3, r0, #4
 80059ec:	4682      	mov	sl, r0
 80059ee:	4689      	mov	r9, r1
 80059f0:	468b      	mov	fp, r1
 80059f2:	931b      	str	r3, [sp, #108]	@ 0x6c
 80059f4:	9400      	str	r4, [sp, #0]
 80059f6:	469e      	mov	lr, r3
 80059f8:	ea4f 03db 	mov.w	r3, fp, lsr #3
 80059fc:	005a      	lsls	r2, r3, #1
 80059fe:	18d6      	adds	r6, r2, r3
 8005a00:	18f5      	adds	r5, r6, r3
 8005a02:	9203      	str	r2, [sp, #12]
 8005a04:	195a      	adds	r2, r3, r5
 8005a06:	18d0      	adds	r0, r2, r3
 8005a08:	00df      	lsls	r7, r3, #3
 8005a0a:	1819      	adds	r1, r3, r0
 8005a0c:	463c      	mov	r4, r7
 8005a0e:	9701      	str	r7, [sp, #4]
 8005a10:	4457      	add	r7, sl
 8005a12:	930c      	str	r3, [sp, #48]	@ 0x30
 8005a14:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 8005a18:	011b      	lsls	r3, r3, #4
 8005a1a:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
 8005a1e:	eb07 0c04 	add.w	ip, r7, r4
 8005a22:	9c00      	ldr	r4, [sp, #0]
 8005a24:	9302      	str	r3, [sp, #8]
 8005a26:	eb0a 06c6 	add.w	r6, sl, r6, lsl #3
 8005a2a:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
 8005a2e:	3204      	adds	r2, #4
 8005a30:	3104      	adds	r1, #4
 8005a32:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
 8005a36:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005a3a:	f04f 0800 	mov.w	r8, #0
 8005a3e:	eddc 7a00 	vldr	s15, [ip]
 8005a42:	edd7 6a00 	vldr	s13, [r7]
 8005a46:	edd6 3a00 	vldr	s7, [r6]
 8005a4a:	ed5e aa01 	vldr	s21, [lr, #-4]
 8005a4e:	edd5 4a00 	vldr	s9, [r5]
 8005a52:	ed90 2a00 	vldr	s4, [r0]
 8005a56:	ed12 7a01 	vldr	s14, [r2, #-4]
 8005a5a:	ed51 0a01 	vldr	s1, [r1, #-4]
 8005a5e:	ee77 8a82 	vadd.f32	s17, s15, s4
 8005a62:	ee33 4aa0 	vadd.f32	s8, s7, s1
 8005a66:	ee76 1a87 	vadd.f32	s3, s13, s14
 8005a6a:	ee3a 3aa4 	vadd.f32	s6, s21, s9
 8005a6e:	ee31 6a84 	vadd.f32	s12, s3, s8
 8005a72:	ee33 5a28 	vadd.f32	s10, s6, s17
 8005a76:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8005a7a:	ee75 6a06 	vadd.f32	s13, s10, s12
 8005a7e:	ee35 5a46 	vsub.f32	s10, s10, s12
 8005a82:	ed4e 6a01 	vstr	s13, [lr, #-4]
 8005a86:	ed85 5a00 	vstr	s10, [r5]
 8005a8a:	ed96 1a01 	vldr	s2, [r6, #4]
 8005a8e:	edd7 5a01 	vldr	s11, [r7, #4]
 8005a92:	ed92 aa00 	vldr	s20, [r2]
 8005a96:	ed91 6a00 	vldr	s12, [r1]
 8005a9a:	ed9e 9a00 	vldr	s18, [lr]
 8005a9e:	ed95 5a01 	vldr	s10, [r5, #4]
 8005aa2:	eddc 6a01 	vldr	s13, [ip, #4]
 8005aa6:	edd0 9a01 	vldr	s19, [r0, #4]
 8005aaa:	ee73 0ae0 	vsub.f32	s1, s7, s1
 8005aae:	ee71 2a46 	vsub.f32	s5, s2, s12
 8005ab2:	ee75 3aca 	vsub.f32	s7, s11, s20
 8005ab6:	ee37 0a60 	vsub.f32	s0, s14, s1
 8005aba:	ee33 8aa2 	vadd.f32	s16, s7, s5
 8005abe:	ee37 7a20 	vadd.f32	s14, s14, s1
 8005ac2:	ee73 2ae2 	vsub.f32	s5, s7, s5
 8005ac6:	ee37 2ac2 	vsub.f32	s4, s15, s4
 8005aca:	ee79 3a05 	vadd.f32	s7, s18, s10
 8005ace:	ee60 0a0b 	vmul.f32	s1, s0, s22
 8005ad2:	ee39 5a45 	vsub.f32	s10, s18, s10
 8005ad6:	ee7a 4ae4 	vsub.f32	s9, s21, s9
 8005ada:	ee36 9aa9 	vadd.f32	s18, s13, s19
 8005ade:	ee75 5a8a 	vadd.f32	s11, s11, s20
 8005ae2:	ee31 6a06 	vadd.f32	s12, s2, s12
 8005ae6:	ee76 6ae9 	vsub.f32	s13, s13, s19
 8005aea:	ee28 8a0b 	vmul.f32	s16, s16, s22
 8005aee:	ee62 2a8b 	vmul.f32	s5, s5, s22
 8005af2:	ee67 7a0b 	vmul.f32	s15, s14, s22
 8005af6:	ee33 3a68 	vsub.f32	s6, s6, s17
 8005afa:	ee36 0a88 	vadd.f32	s0, s13, s16
 8005afe:	ee75 8a86 	vadd.f32	s17, s11, s12
 8005b02:	ee36 7ac8 	vsub.f32	s14, s13, s16
 8005b06:	ee71 1ac4 	vsub.f32	s3, s3, s8
 8005b0a:	ee75 6a62 	vsub.f32	s13, s10, s5
 8005b0e:	ee33 4ac9 	vsub.f32	s8, s7, s18
 8005b12:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8005b16:	ee33 1a89 	vadd.f32	s2, s7, s18
 8005b1a:	ee74 5ae0 	vsub.f32	s11, s9, s1
 8005b1e:	ee74 3aa0 	vadd.f32	s7, s9, s1
 8005b22:	ee75 4a22 	vadd.f32	s9, s10, s5
 8005b26:	ee32 5a27 	vadd.f32	s10, s4, s15
 8005b2a:	ee72 7a67 	vsub.f32	s15, s4, s15
 8005b2e:	ee33 8a06 	vadd.f32	s16, s6, s12
 8005b32:	ee75 2a87 	vadd.f32	s5, s11, s14
 8005b36:	ee31 9a28 	vadd.f32	s18, s2, s17
 8005b3a:	ee33 6a46 	vsub.f32	s12, s6, s12
 8005b3e:	ee74 0a61 	vsub.f32	s1, s8, s3
 8005b42:	ee33 2a80 	vadd.f32	s4, s7, s0
 8005b46:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8005b4a:	ee34 3ac5 	vsub.f32	s6, s9, s10
 8005b4e:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8005b52:	ee31 1a68 	vsub.f32	s2, s2, s17
 8005b56:	ee34 4a21 	vadd.f32	s8, s8, s3
 8005b5a:	ee73 3ac0 	vsub.f32	s7, s7, s0
 8005b5e:	ee74 4a85 	vadd.f32	s9, s9, s10
 8005b62:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005b66:	44d8      	add	r8, fp
 8005b68:	45c1      	cmp	r9, r8
 8005b6a:	ed8e 9a00 	vstr	s18, [lr]
 8005b6e:	ed85 1a01 	vstr	s2, [r5, #4]
 8005b72:	449e      	add	lr, r3
 8005b74:	ed8c 8a00 	vstr	s16, [ip]
 8005b78:	441d      	add	r5, r3
 8005b7a:	ed80 6a00 	vstr	s12, [r0]
 8005b7e:	edcc 0a01 	vstr	s1, [ip, #4]
 8005b82:	ed80 4a01 	vstr	s8, [r0, #4]
 8005b86:	449c      	add	ip, r3
 8005b88:	ed87 2a00 	vstr	s4, [r7]
 8005b8c:	4418      	add	r0, r3
 8005b8e:	ed41 3a01 	vstr	s7, [r1, #-4]
 8005b92:	ed42 2a01 	vstr	s5, [r2, #-4]
 8005b96:	ed86 7a00 	vstr	s14, [r6]
 8005b9a:	ed87 3a01 	vstr	s6, [r7, #4]
 8005b9e:	edc1 4a00 	vstr	s9, [r1]
 8005ba2:	441f      	add	r7, r3
 8005ba4:	edc2 5a00 	vstr	s11, [r2]
 8005ba8:	4419      	add	r1, r3
 8005baa:	edc6 6a01 	vstr	s13, [r6, #4]
 8005bae:	441a      	add	r2, r3
 8005bb0:	441e      	add	r6, r3
 8005bb2:	f63f af44 	bhi.w	8005a3e <arm_radix8_butterfly_f32+0x66>
 8005bb6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8005bb8:	2907      	cmp	r1, #7
 8005bba:	4620      	mov	r0, r4
 8005bbc:	f240 81e9 	bls.w	8005f92 <arm_radix8_butterfly_f32+0x5ba>
 8005bc0:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 8005bc4:	193e      	adds	r6, r7, r4
 8005bc6:	1935      	adds	r5, r6, r4
 8005bc8:	9c03      	ldr	r4, [sp, #12]
 8005bca:	9000      	str	r0, [sp, #0]
 8005bcc:	4622      	mov	r2, r4
 8005bce:	3201      	adds	r2, #1
 8005bd0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8005bd4:	9900      	ldr	r1, [sp, #0]
 8005bd6:	1828      	adds	r0, r5, r0
 8005bd8:	eb00 0e01 	add.w	lr, r0, r1
 8005bdc:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8005bde:	440a      	add	r2, r1
 8005be0:	eb04 0c01 	add.w	ip, r4, r1
 8005be4:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 8005be8:	eb0a 0ec2 	add.w	lr, sl, r2, lsl #3
 8005bec:	9a00      	ldr	r2, [sp, #0]
 8005bee:	940f      	str	r4, [sp, #60]	@ 0x3c
 8005bf0:	00ed      	lsls	r5, r5, #3
 8005bf2:	9511      	str	r5, [sp, #68]	@ 0x44
 8005bf4:	00d5      	lsls	r5, r2, #3
 8005bf6:	950d      	str	r5, [sp, #52]	@ 0x34
 8005bf8:	9d01      	ldr	r5, [sp, #4]
 8005bfa:	3508      	adds	r5, #8
 8005bfc:	9516      	str	r5, [sp, #88]	@ 0x58
 8005bfe:	9d02      	ldr	r5, [sp, #8]
 8005c00:	3508      	adds	r5, #8
 8005c02:	0114      	lsls	r4, r2, #4
 8005c04:	9517      	str	r5, [sp, #92]	@ 0x5c
 8005c06:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8005c08:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8005c0a:	940e      	str	r4, [sp, #56]	@ 0x38
 8005c0c:	00c0      	lsls	r0, r0, #3
 8005c0e:	9010      	str	r0, [sp, #64]	@ 0x40
 8005c10:	18aa      	adds	r2, r5, r2
 8005c12:	9207      	str	r2, [sp, #28]
 8005c14:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8005c16:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8005c18:	18aa      	adds	r2, r5, r2
 8005c1a:	9208      	str	r2, [sp, #32]
 8005c1c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005c1e:	18aa      	adds	r2, r5, r2
 8005c20:	9209      	str	r2, [sp, #36]	@ 0x24
 8005c22:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8005c26:	f10e 0204 	add.w	r2, lr, #4
 8005c2a:	920a      	str	r2, [sp, #40]	@ 0x28
 8005c2c:	00c9      	lsls	r1, r1, #3
 8005c2e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005c30:	310c      	adds	r1, #12
 8005c32:	00f6      	lsls	r6, r6, #3
 8005c34:	ea4f 00cc 	mov.w	r0, ip, lsl #3
 8005c38:	9114      	str	r1, [sp, #80]	@ 0x50
 8005c3a:	18a9      	adds	r1, r5, r2
 8005c3c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005c3e:	9612      	str	r6, [sp, #72]	@ 0x48
 8005c40:	00ff      	lsls	r7, r7, #3
 8005c42:	19ae      	adds	r6, r5, r6
 8005c44:	3008      	adds	r0, #8
 8005c46:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8005c4a:	9606      	str	r6, [sp, #24]
 8005c4c:	9019      	str	r0, [sp, #100]	@ 0x64
 8005c4e:	18aa      	adds	r2, r5, r2
 8005c50:	0164      	lsls	r4, r4, #5
 8005c52:	19ee      	adds	r6, r5, r7
 8005c54:	f10c 000c 	add.w	r0, ip, #12
 8005c58:	9713      	str	r7, [sp, #76]	@ 0x4c
 8005c5a:	9604      	str	r6, [sp, #16]
 8005c5c:	9015      	str	r0, [sp, #84]	@ 0x54
 8005c5e:	9103      	str	r1, [sp, #12]
 8005c60:	9205      	str	r2, [sp, #20]
 8005c62:	f104 0208 	add.w	r2, r4, #8
 8005c66:	9218      	str	r2, [sp, #96]	@ 0x60
 8005c68:	f04f 0801 	mov.w	r8, #1
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f102 0108 	add.w	r1, r2, #8
 8005c72:	460f      	mov	r7, r1
 8005c74:	910b      	str	r1, [sp, #44]	@ 0x2c
 8005c76:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8005c78:	188e      	adds	r6, r1, r2
 8005c7a:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8005c7c:	188d      	adds	r5, r1, r2
 8005c7e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8005c80:	188c      	adds	r4, r1, r2
 8005c82:	9919      	ldr	r1, [sp, #100]	@ 0x64
 8005c84:	1888      	adds	r0, r1, r2
 8005c86:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8005c88:	eb01 0c02 	add.w	ip, r1, r2
 8005c8c:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8005c8e:	440a      	add	r2, r1
 8005c90:	9903      	ldr	r1, [sp, #12]
 8005c92:	edd1 fa00 	vldr	s31, [r1]
 8005c96:	9905      	ldr	r1, [sp, #20]
 8005c98:	ed91 fa00 	vldr	s30, [r1]
 8005c9c:	9904      	ldr	r1, [sp, #16]
 8005c9e:	edd1 ea00 	vldr	s29, [r1]
 8005ca2:	9906      	ldr	r1, [sp, #24]
 8005ca4:	ed91 ea00 	vldr	s28, [r1]
 8005ca8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005caa:	edd1 da00 	vldr	s27, [r1]
 8005cae:	9908      	ldr	r1, [sp, #32]
 8005cb0:	ed91 da00 	vldr	s26, [r1]
 8005cb4:	9907      	ldr	r1, [sp, #28]
 8005cb6:	edd1 ca00 	vldr	s25, [r1]
 8005cba:	9903      	ldr	r1, [sp, #12]
 8005cbc:	ed91 ca01 	vldr	s24, [r1, #4]
 8005cc0:	9905      	ldr	r1, [sp, #20]
 8005cc2:	edd1 ba01 	vldr	s23, [r1, #4]
 8005cc6:	9904      	ldr	r1, [sp, #16]
 8005cc8:	edd1 aa01 	vldr	s21, [r1, #4]
 8005ccc:	9906      	ldr	r1, [sp, #24]
 8005cce:	ed91 aa01 	vldr	s20, [r1, #4]
 8005cd2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005cd4:	edd1 7a01 	vldr	s15, [r1, #4]
 8005cd8:	9908      	ldr	r1, [sp, #32]
 8005cda:	edcd 7a00 	vstr	s15, [sp]
 8005cde:	edd1 7a01 	vldr	s15, [r1, #4]
 8005ce2:	9907      	ldr	r1, [sp, #28]
 8005ce4:	edcd 7a01 	vstr	s15, [sp, #4]
 8005ce8:	edd1 7a01 	vldr	s15, [r1, #4]
 8005cec:	eb0a 0e07 	add.w	lr, sl, r7
 8005cf0:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8005cf2:	edcd 7a02 	vstr	s15, [sp, #8]
 8005cf6:	eb0c 010a 	add.w	r1, ip, sl
 8005cfa:	4456      	add	r6, sl
 8005cfc:	4455      	add	r5, sl
 8005cfe:	4454      	add	r4, sl
 8005d00:	4450      	add	r0, sl
 8005d02:	4452      	add	r2, sl
 8005d04:	46c4      	mov	ip, r8
 8005d06:	e001      	b.n	8005d0c <arm_radix8_butterfly_f32+0x334>
 8005d08:	3f3504f3 	.word	0x3f3504f3
 8005d0c:	ed96 5a00 	vldr	s10, [r6]
 8005d10:	ed52 9a01 	vldr	s19, [r2, #-4]
 8005d14:	ed11 6a01 	vldr	s12, [r1, #-4]
 8005d18:	edd0 7a00 	vldr	s15, [r0]
 8005d1c:	ed17 7a01 	vldr	s14, [r7, #-4]
 8005d20:	edde 3a00 	vldr	s7, [lr]
 8005d24:	ed94 3a00 	vldr	s6, [r4]
 8005d28:	ed95 2a00 	vldr	s4, [r5]
 8005d2c:	ed9e 0a01 	vldr	s0, [lr, #4]
 8005d30:	ee33 8a85 	vadd.f32	s16, s7, s10
 8005d34:	ee32 1a06 	vadd.f32	s2, s4, s12
 8005d38:	ee33 4a29 	vadd.f32	s8, s6, s19
 8005d3c:	ee77 4a87 	vadd.f32	s9, s15, s14
 8005d40:	ee78 1a04 	vadd.f32	s3, s16, s8
 8005d44:	ee71 6a24 	vadd.f32	s13, s2, s9
 8005d48:	ee32 2a46 	vsub.f32	s4, s4, s12
 8005d4c:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8005d50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005d54:	ed8e 6a00 	vstr	s12, [lr]
 8005d58:	edd0 8a01 	vldr	s17, [r0, #4]
 8005d5c:	ed95 9a01 	vldr	s18, [r5, #4]
 8005d60:	edd1 2a00 	vldr	s5, [r1]
 8005d64:	ed97 7a00 	vldr	s14, [r7]
 8005d68:	edd4 0a01 	vldr	s1, [r4, #4]
 8005d6c:	ed96 6a01 	vldr	s12, [r6, #4]
 8005d70:	edd2 5a00 	vldr	s11, [r2]
 8005d74:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8005d78:	ee33 3a69 	vsub.f32	s6, s6, s19
 8005d7c:	ee39 5a62 	vsub.f32	s10, s18, s5
 8005d80:	ee78 9ac7 	vsub.f32	s19, s17, s14
 8005d84:	ee38 4a44 	vsub.f32	s8, s16, s8
 8005d88:	ee38 7a87 	vadd.f32	s14, s17, s14
 8005d8c:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8005d90:	ee79 2a22 	vadd.f32	s5, s18, s5
 8005d94:	ee75 8a69 	vsub.f32	s17, s10, s19
 8005d98:	ee32 9a27 	vadd.f32	s18, s4, s15
 8005d9c:	ee35 5a29 	vadd.f32	s10, s10, s19
 8005da0:	ee72 7a67 	vsub.f32	s15, s4, s15
 8005da4:	ee30 2a06 	vadd.f32	s4, s0, s12
 8005da8:	ee69 9a0b 	vmul.f32	s19, s18, s22
 8005dac:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8005db0:	ee32 9a08 	vadd.f32	s18, s4, s16
 8005db4:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8005db8:	ee32 2a48 	vsub.f32	s4, s4, s16
 8005dbc:	ee71 4a64 	vsub.f32	s9, s2, s9
 8005dc0:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8005dc4:	ee32 1a87 	vadd.f32	s2, s5, s14
 8005dc8:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8005dcc:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8005dd0:	ee30 6a46 	vsub.f32	s12, s0, s12
 8005dd4:	ee73 0a29 	vadd.f32	s1, s6, s19
 8005dd8:	ee36 0a28 	vadd.f32	s0, s12, s17
 8005ddc:	ee33 3a69 	vsub.f32	s6, s6, s19
 8005de0:	ee32 7a64 	vsub.f32	s14, s4, s9
 8005de4:	ee73 9aa7 	vadd.f32	s19, s7, s15
 8005de8:	ee36 6a68 	vsub.f32	s12, s12, s17
 8005dec:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8005df0:	ee75 8a85 	vadd.f32	s17, s11, s10
 8005df4:	ee74 3a22 	vadd.f32	s7, s8, s5
 8005df8:	ee35 5ac5 	vsub.f32	s10, s11, s10
 8005dfc:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8005e00:	ee79 1a41 	vsub.f32	s3, s18, s2
 8005e04:	ee39 8aa8 	vadd.f32	s16, s19, s17
 8005e08:	ee76 5a43 	vsub.f32	s11, s12, s6
 8005e0c:	ee74 2a62 	vsub.f32	s5, s8, s5
 8005e10:	ee72 4a24 	vadd.f32	s9, s4, s9
 8005e14:	ee30 4a60 	vsub.f32	s8, s0, s1
 8005e18:	ee79 8ae8 	vsub.f32	s17, s19, s17
 8005e1c:	ee30 0a20 	vadd.f32	s0, s0, s1
 8005e20:	ee77 9a85 	vadd.f32	s19, s15, s10
 8005e24:	ee36 6a03 	vadd.f32	s12, s12, s6
 8005e28:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8005e2c:	ee2e 2a21 	vmul.f32	s4, s28, s3
 8005e30:	ee2e 5a26 	vmul.f32	s10, s28, s13
 8005e34:	ee6f 0a23 	vmul.f32	s1, s30, s7
 8005e38:	ee2a 3a21 	vmul.f32	s6, s20, s3
 8005e3c:	ee39 1a01 	vadd.f32	s2, s18, s2
 8005e40:	ee6a 6a26 	vmul.f32	s13, s20, s13
 8005e44:	ee2b 9a87 	vmul.f32	s18, s23, s14
 8005e48:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 8005e4c:	ee2f 7a07 	vmul.f32	s14, s30, s14
 8005e50:	ee6f 1a84 	vmul.f32	s3, s31, s8
 8005e54:	ee35 3a03 	vadd.f32	s6, s10, s6
 8005e58:	ee72 6a66 	vsub.f32	s13, s4, s13
 8005e5c:	ee2c 5a04 	vmul.f32	s10, s24, s8
 8005e60:	ee2f 2a88 	vmul.f32	s4, s31, s16
 8005e64:	ed9d 4a02 	vldr	s8, [sp, #8]
 8005e68:	ed8e 1a01 	vstr	s2, [lr, #4]
 8005e6c:	ee77 3a63 	vsub.f32	s7, s14, s7
 8005e70:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8005e74:	ed9d 7a01 	vldr	s14, [sp, #4]
 8005e78:	ed86 3a00 	vstr	s6, [r6]
 8005e7c:	ee30 9a89 	vadd.f32	s18, s1, s18
 8005e80:	ee32 2a05 	vadd.f32	s4, s4, s10
 8005e84:	ee6d 0a22 	vmul.f32	s1, s26, s5
 8005e88:	ee31 8ac8 	vsub.f32	s16, s3, s16
 8005e8c:	ee67 2a22 	vmul.f32	s5, s14, s5
 8005e90:	ee64 1a00 	vmul.f32	s3, s8, s0
 8005e94:	ee27 7a24 	vmul.f32	s14, s14, s9
 8005e98:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 8005e9c:	ee6d 4a24 	vmul.f32	s9, s26, s9
 8005ea0:	ee64 8a28 	vmul.f32	s17, s8, s17
 8005ea4:	ed9d 4a00 	vldr	s8, [sp]
 8005ea8:	edc6 6a01 	vstr	s13, [r6, #4]
 8005eac:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8005eb0:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 8005eb4:	ee64 9a29 	vmul.f32	s19, s8, s19
 8005eb8:	ee24 4a25 	vmul.f32	s8, s8, s11
 8005ebc:	ee30 7a87 	vadd.f32	s14, s1, s14
 8005ec0:	ee74 4a84 	vadd.f32	s9, s9, s8
 8005ec4:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 8005ec8:	ee2a 4a86 	vmul.f32	s8, s21, s12
 8005ecc:	ee2c 0a80 	vmul.f32	s0, s25, s0
 8005ed0:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 8005ed4:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 8005ed8:	ee2e 6a86 	vmul.f32	s12, s29, s12
 8005edc:	ee75 1a21 	vadd.f32	s3, s10, s3
 8005ee0:	ee30 0a68 	vsub.f32	s0, s0, s17
 8005ee4:	ee75 9ae9 	vsub.f32	s19, s11, s19
 8005ee8:	ee70 0a84 	vadd.f32	s1, s1, s8
 8005eec:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005ef0:	44dc      	add	ip, fp
 8005ef2:	45e1      	cmp	r9, ip
 8005ef4:	ed84 9a00 	vstr	s18, [r4]
 8005ef8:	edc4 3a01 	vstr	s7, [r4, #4]
 8005efc:	449e      	add	lr, r3
 8005efe:	ed02 7a01 	vstr	s14, [r2, #-4]
 8005f02:	edc2 2a00 	vstr	s5, [r2]
 8005f06:	441e      	add	r6, r3
 8005f08:	ed85 2a00 	vstr	s4, [r5]
 8005f0c:	ed85 8a01 	vstr	s16, [r5, #4]
 8005f10:	441c      	add	r4, r3
 8005f12:	ed47 1a01 	vstr	s3, [r7, #-4]
 8005f16:	ed87 0a00 	vstr	s0, [r7]
 8005f1a:	441a      	add	r2, r3
 8005f1c:	ed41 4a01 	vstr	s9, [r1, #-4]
 8005f20:	edc1 9a00 	vstr	s19, [r1]
 8005f24:	441d      	add	r5, r3
 8005f26:	edc0 0a00 	vstr	s1, [r0]
 8005f2a:	441f      	add	r7, r3
 8005f2c:	ed80 6a01 	vstr	s12, [r0, #4]
 8005f30:	4419      	add	r1, r3
 8005f32:	4418      	add	r0, r3
 8005f34:	f63f aeea 	bhi.w	8005d0c <arm_radix8_butterfly_f32+0x334>
 8005f38:	9a03      	ldr	r2, [sp, #12]
 8005f3a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005f3c:	440a      	add	r2, r1
 8005f3e:	9203      	str	r2, [sp, #12]
 8005f40:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005f42:	9a05      	ldr	r2, [sp, #20]
 8005f44:	440a      	add	r2, r1
 8005f46:	9205      	str	r2, [sp, #20]
 8005f48:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8005f4a:	9a04      	ldr	r2, [sp, #16]
 8005f4c:	440a      	add	r2, r1
 8005f4e:	9204      	str	r2, [sp, #16]
 8005f50:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8005f52:	9a06      	ldr	r2, [sp, #24]
 8005f54:	440a      	add	r2, r1
 8005f56:	9206      	str	r2, [sp, #24]
 8005f58:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8005f5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f5c:	440a      	add	r2, r1
 8005f5e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005f60:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8005f62:	9a08      	ldr	r2, [sp, #32]
 8005f64:	440a      	add	r2, r1
 8005f66:	9208      	str	r2, [sp, #32]
 8005f68:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005f6a:	9a07      	ldr	r2, [sp, #28]
 8005f6c:	440a      	add	r2, r1
 8005f6e:	9207      	str	r2, [sp, #28]
 8005f70:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8005f72:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005f74:	f108 0801 	add.w	r8, r8, #1
 8005f78:	3208      	adds	r2, #8
 8005f7a:	4588      	cmp	r8, r1
 8005f7c:	920a      	str	r2, [sp, #40]	@ 0x28
 8005f7e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005f80:	f47f ae75 	bne.w	8005c6e <arm_radix8_butterfly_f32+0x296>
 8005f84:	f8bd 3034 	ldrh.w	r3, [sp, #52]	@ 0x34
 8005f88:	9300      	str	r3, [sp, #0]
 8005f8a:	46c3      	mov	fp, r8
 8005f8c:	f8dd e06c 	ldr.w	lr, [sp, #108]	@ 0x6c
 8005f90:	e532      	b.n	80059f8 <arm_radix8_butterfly_f32+0x20>
 8005f92:	b01d      	add	sp, #116	@ 0x74
 8005f94:	ecbd 8b10 	vpop	{d8-d15}
 8005f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005f9c <srand>:
 8005f9c:	b538      	push	{r3, r4, r5, lr}
 8005f9e:	4b10      	ldr	r3, [pc, #64]	@ (8005fe0 <srand+0x44>)
 8005fa0:	681d      	ldr	r5, [r3, #0]
 8005fa2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8005fa4:	4604      	mov	r4, r0
 8005fa6:	b9b3      	cbnz	r3, 8005fd6 <srand+0x3a>
 8005fa8:	2018      	movs	r0, #24
 8005faa:	f000 fa0f 	bl	80063cc <malloc>
 8005fae:	4602      	mov	r2, r0
 8005fb0:	6328      	str	r0, [r5, #48]	@ 0x30
 8005fb2:	b920      	cbnz	r0, 8005fbe <srand+0x22>
 8005fb4:	4b0b      	ldr	r3, [pc, #44]	@ (8005fe4 <srand+0x48>)
 8005fb6:	480c      	ldr	r0, [pc, #48]	@ (8005fe8 <srand+0x4c>)
 8005fb8:	2146      	movs	r1, #70	@ 0x46
 8005fba:	f000 f99f 	bl	80062fc <__assert_func>
 8005fbe:	490b      	ldr	r1, [pc, #44]	@ (8005fec <srand+0x50>)
 8005fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8005ff0 <srand+0x54>)
 8005fc2:	e9c0 1300 	strd	r1, r3, [r0]
 8005fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8005ff4 <srand+0x58>)
 8005fc8:	6083      	str	r3, [r0, #8]
 8005fca:	230b      	movs	r3, #11
 8005fcc:	8183      	strh	r3, [r0, #12]
 8005fce:	2100      	movs	r1, #0
 8005fd0:	2001      	movs	r0, #1
 8005fd2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005fd6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8005fd8:	2200      	movs	r2, #0
 8005fda:	611c      	str	r4, [r3, #16]
 8005fdc:	615a      	str	r2, [r3, #20]
 8005fde:	bd38      	pop	{r3, r4, r5, pc}
 8005fe0:	20000020 	.word	0x20000020
 8005fe4:	0801a400 	.word	0x0801a400
 8005fe8:	0801a417 	.word	0x0801a417
 8005fec:	abcd330e 	.word	0xabcd330e
 8005ff0:	e66d1234 	.word	0xe66d1234
 8005ff4:	0005deec 	.word	0x0005deec

08005ff8 <std>:
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	b510      	push	{r4, lr}
 8005ffc:	4604      	mov	r4, r0
 8005ffe:	e9c0 3300 	strd	r3, r3, [r0]
 8006002:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006006:	6083      	str	r3, [r0, #8]
 8006008:	8181      	strh	r1, [r0, #12]
 800600a:	6643      	str	r3, [r0, #100]	@ 0x64
 800600c:	81c2      	strh	r2, [r0, #14]
 800600e:	6183      	str	r3, [r0, #24]
 8006010:	4619      	mov	r1, r3
 8006012:	2208      	movs	r2, #8
 8006014:	305c      	adds	r0, #92	@ 0x5c
 8006016:	f000 f8f4 	bl	8006202 <memset>
 800601a:	4b0d      	ldr	r3, [pc, #52]	@ (8006050 <std+0x58>)
 800601c:	6263      	str	r3, [r4, #36]	@ 0x24
 800601e:	4b0d      	ldr	r3, [pc, #52]	@ (8006054 <std+0x5c>)
 8006020:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006022:	4b0d      	ldr	r3, [pc, #52]	@ (8006058 <std+0x60>)
 8006024:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006026:	4b0d      	ldr	r3, [pc, #52]	@ (800605c <std+0x64>)
 8006028:	6323      	str	r3, [r4, #48]	@ 0x30
 800602a:	4b0d      	ldr	r3, [pc, #52]	@ (8006060 <std+0x68>)
 800602c:	6224      	str	r4, [r4, #32]
 800602e:	429c      	cmp	r4, r3
 8006030:	d006      	beq.n	8006040 <std+0x48>
 8006032:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006036:	4294      	cmp	r4, r2
 8006038:	d002      	beq.n	8006040 <std+0x48>
 800603a:	33d0      	adds	r3, #208	@ 0xd0
 800603c:	429c      	cmp	r4, r3
 800603e:	d105      	bne.n	800604c <std+0x54>
 8006040:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006048:	f000 b954 	b.w	80062f4 <__retarget_lock_init_recursive>
 800604c:	bd10      	pop	{r4, pc}
 800604e:	bf00      	nop
 8006050:	0800617d 	.word	0x0800617d
 8006054:	0800619f 	.word	0x0800619f
 8006058:	080061d7 	.word	0x080061d7
 800605c:	080061fb 	.word	0x080061fb
 8006060:	20004e94 	.word	0x20004e94

08006064 <stdio_exit_handler>:
 8006064:	4a02      	ldr	r2, [pc, #8]	@ (8006070 <stdio_exit_handler+0xc>)
 8006066:	4903      	ldr	r1, [pc, #12]	@ (8006074 <stdio_exit_handler+0x10>)
 8006068:	4803      	ldr	r0, [pc, #12]	@ (8006078 <stdio_exit_handler+0x14>)
 800606a:	f000 b869 	b.w	8006140 <_fwalk_sglue>
 800606e:	bf00      	nop
 8006070:	20000014 	.word	0x20000014
 8006074:	08006641 	.word	0x08006641
 8006078:	20000024 	.word	0x20000024

0800607c <cleanup_stdio>:
 800607c:	6841      	ldr	r1, [r0, #4]
 800607e:	4b0c      	ldr	r3, [pc, #48]	@ (80060b0 <cleanup_stdio+0x34>)
 8006080:	4299      	cmp	r1, r3
 8006082:	b510      	push	{r4, lr}
 8006084:	4604      	mov	r4, r0
 8006086:	d001      	beq.n	800608c <cleanup_stdio+0x10>
 8006088:	f000 fada 	bl	8006640 <_fflush_r>
 800608c:	68a1      	ldr	r1, [r4, #8]
 800608e:	4b09      	ldr	r3, [pc, #36]	@ (80060b4 <cleanup_stdio+0x38>)
 8006090:	4299      	cmp	r1, r3
 8006092:	d002      	beq.n	800609a <cleanup_stdio+0x1e>
 8006094:	4620      	mov	r0, r4
 8006096:	f000 fad3 	bl	8006640 <_fflush_r>
 800609a:	68e1      	ldr	r1, [r4, #12]
 800609c:	4b06      	ldr	r3, [pc, #24]	@ (80060b8 <cleanup_stdio+0x3c>)
 800609e:	4299      	cmp	r1, r3
 80060a0:	d004      	beq.n	80060ac <cleanup_stdio+0x30>
 80060a2:	4620      	mov	r0, r4
 80060a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060a8:	f000 baca 	b.w	8006640 <_fflush_r>
 80060ac:	bd10      	pop	{r4, pc}
 80060ae:	bf00      	nop
 80060b0:	20004e94 	.word	0x20004e94
 80060b4:	20004efc 	.word	0x20004efc
 80060b8:	20004f64 	.word	0x20004f64

080060bc <global_stdio_init.part.0>:
 80060bc:	b510      	push	{r4, lr}
 80060be:	4b0b      	ldr	r3, [pc, #44]	@ (80060ec <global_stdio_init.part.0+0x30>)
 80060c0:	4c0b      	ldr	r4, [pc, #44]	@ (80060f0 <global_stdio_init.part.0+0x34>)
 80060c2:	4a0c      	ldr	r2, [pc, #48]	@ (80060f4 <global_stdio_init.part.0+0x38>)
 80060c4:	601a      	str	r2, [r3, #0]
 80060c6:	4620      	mov	r0, r4
 80060c8:	2200      	movs	r2, #0
 80060ca:	2104      	movs	r1, #4
 80060cc:	f7ff ff94 	bl	8005ff8 <std>
 80060d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80060d4:	2201      	movs	r2, #1
 80060d6:	2109      	movs	r1, #9
 80060d8:	f7ff ff8e 	bl	8005ff8 <std>
 80060dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80060e0:	2202      	movs	r2, #2
 80060e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060e6:	2112      	movs	r1, #18
 80060e8:	f7ff bf86 	b.w	8005ff8 <std>
 80060ec:	20004fcc 	.word	0x20004fcc
 80060f0:	20004e94 	.word	0x20004e94
 80060f4:	08006065 	.word	0x08006065

080060f8 <__sfp_lock_acquire>:
 80060f8:	4801      	ldr	r0, [pc, #4]	@ (8006100 <__sfp_lock_acquire+0x8>)
 80060fa:	f000 b8fc 	b.w	80062f6 <__retarget_lock_acquire_recursive>
 80060fe:	bf00      	nop
 8006100:	20004fd5 	.word	0x20004fd5

08006104 <__sfp_lock_release>:
 8006104:	4801      	ldr	r0, [pc, #4]	@ (800610c <__sfp_lock_release+0x8>)
 8006106:	f000 b8f7 	b.w	80062f8 <__retarget_lock_release_recursive>
 800610a:	bf00      	nop
 800610c:	20004fd5 	.word	0x20004fd5

08006110 <__sinit>:
 8006110:	b510      	push	{r4, lr}
 8006112:	4604      	mov	r4, r0
 8006114:	f7ff fff0 	bl	80060f8 <__sfp_lock_acquire>
 8006118:	6a23      	ldr	r3, [r4, #32]
 800611a:	b11b      	cbz	r3, 8006124 <__sinit+0x14>
 800611c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006120:	f7ff bff0 	b.w	8006104 <__sfp_lock_release>
 8006124:	4b04      	ldr	r3, [pc, #16]	@ (8006138 <__sinit+0x28>)
 8006126:	6223      	str	r3, [r4, #32]
 8006128:	4b04      	ldr	r3, [pc, #16]	@ (800613c <__sinit+0x2c>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d1f5      	bne.n	800611c <__sinit+0xc>
 8006130:	f7ff ffc4 	bl	80060bc <global_stdio_init.part.0>
 8006134:	e7f2      	b.n	800611c <__sinit+0xc>
 8006136:	bf00      	nop
 8006138:	0800607d 	.word	0x0800607d
 800613c:	20004fcc 	.word	0x20004fcc

08006140 <_fwalk_sglue>:
 8006140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006144:	4607      	mov	r7, r0
 8006146:	4688      	mov	r8, r1
 8006148:	4614      	mov	r4, r2
 800614a:	2600      	movs	r6, #0
 800614c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006150:	f1b9 0901 	subs.w	r9, r9, #1
 8006154:	d505      	bpl.n	8006162 <_fwalk_sglue+0x22>
 8006156:	6824      	ldr	r4, [r4, #0]
 8006158:	2c00      	cmp	r4, #0
 800615a:	d1f7      	bne.n	800614c <_fwalk_sglue+0xc>
 800615c:	4630      	mov	r0, r6
 800615e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006162:	89ab      	ldrh	r3, [r5, #12]
 8006164:	2b01      	cmp	r3, #1
 8006166:	d907      	bls.n	8006178 <_fwalk_sglue+0x38>
 8006168:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800616c:	3301      	adds	r3, #1
 800616e:	d003      	beq.n	8006178 <_fwalk_sglue+0x38>
 8006170:	4629      	mov	r1, r5
 8006172:	4638      	mov	r0, r7
 8006174:	47c0      	blx	r8
 8006176:	4306      	orrs	r6, r0
 8006178:	3568      	adds	r5, #104	@ 0x68
 800617a:	e7e9      	b.n	8006150 <_fwalk_sglue+0x10>

0800617c <__sread>:
 800617c:	b510      	push	{r4, lr}
 800617e:	460c      	mov	r4, r1
 8006180:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006184:	f000 f868 	bl	8006258 <_read_r>
 8006188:	2800      	cmp	r0, #0
 800618a:	bfab      	itete	ge
 800618c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800618e:	89a3      	ldrhlt	r3, [r4, #12]
 8006190:	181b      	addge	r3, r3, r0
 8006192:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006196:	bfac      	ite	ge
 8006198:	6563      	strge	r3, [r4, #84]	@ 0x54
 800619a:	81a3      	strhlt	r3, [r4, #12]
 800619c:	bd10      	pop	{r4, pc}

0800619e <__swrite>:
 800619e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061a2:	461f      	mov	r7, r3
 80061a4:	898b      	ldrh	r3, [r1, #12]
 80061a6:	05db      	lsls	r3, r3, #23
 80061a8:	4605      	mov	r5, r0
 80061aa:	460c      	mov	r4, r1
 80061ac:	4616      	mov	r6, r2
 80061ae:	d505      	bpl.n	80061bc <__swrite+0x1e>
 80061b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061b4:	2302      	movs	r3, #2
 80061b6:	2200      	movs	r2, #0
 80061b8:	f000 f83c 	bl	8006234 <_lseek_r>
 80061bc:	89a3      	ldrh	r3, [r4, #12]
 80061be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80061c6:	81a3      	strh	r3, [r4, #12]
 80061c8:	4632      	mov	r2, r6
 80061ca:	463b      	mov	r3, r7
 80061cc:	4628      	mov	r0, r5
 80061ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061d2:	f000 b853 	b.w	800627c <_write_r>

080061d6 <__sseek>:
 80061d6:	b510      	push	{r4, lr}
 80061d8:	460c      	mov	r4, r1
 80061da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061de:	f000 f829 	bl	8006234 <_lseek_r>
 80061e2:	1c43      	adds	r3, r0, #1
 80061e4:	89a3      	ldrh	r3, [r4, #12]
 80061e6:	bf15      	itete	ne
 80061e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80061ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80061ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80061f2:	81a3      	strheq	r3, [r4, #12]
 80061f4:	bf18      	it	ne
 80061f6:	81a3      	strhne	r3, [r4, #12]
 80061f8:	bd10      	pop	{r4, pc}

080061fa <__sclose>:
 80061fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061fe:	f000 b809 	b.w	8006214 <_close_r>

08006202 <memset>:
 8006202:	4402      	add	r2, r0
 8006204:	4603      	mov	r3, r0
 8006206:	4293      	cmp	r3, r2
 8006208:	d100      	bne.n	800620c <memset+0xa>
 800620a:	4770      	bx	lr
 800620c:	f803 1b01 	strb.w	r1, [r3], #1
 8006210:	e7f9      	b.n	8006206 <memset+0x4>
	...

08006214 <_close_r>:
 8006214:	b538      	push	{r3, r4, r5, lr}
 8006216:	4d06      	ldr	r5, [pc, #24]	@ (8006230 <_close_r+0x1c>)
 8006218:	2300      	movs	r3, #0
 800621a:	4604      	mov	r4, r0
 800621c:	4608      	mov	r0, r1
 800621e:	602b      	str	r3, [r5, #0]
 8006220:	f7fb fb62 	bl	80018e8 <_close>
 8006224:	1c43      	adds	r3, r0, #1
 8006226:	d102      	bne.n	800622e <_close_r+0x1a>
 8006228:	682b      	ldr	r3, [r5, #0]
 800622a:	b103      	cbz	r3, 800622e <_close_r+0x1a>
 800622c:	6023      	str	r3, [r4, #0]
 800622e:	bd38      	pop	{r3, r4, r5, pc}
 8006230:	20004fd0 	.word	0x20004fd0

08006234 <_lseek_r>:
 8006234:	b538      	push	{r3, r4, r5, lr}
 8006236:	4d07      	ldr	r5, [pc, #28]	@ (8006254 <_lseek_r+0x20>)
 8006238:	4604      	mov	r4, r0
 800623a:	4608      	mov	r0, r1
 800623c:	4611      	mov	r1, r2
 800623e:	2200      	movs	r2, #0
 8006240:	602a      	str	r2, [r5, #0]
 8006242:	461a      	mov	r2, r3
 8006244:	f7fb fb77 	bl	8001936 <_lseek>
 8006248:	1c43      	adds	r3, r0, #1
 800624a:	d102      	bne.n	8006252 <_lseek_r+0x1e>
 800624c:	682b      	ldr	r3, [r5, #0]
 800624e:	b103      	cbz	r3, 8006252 <_lseek_r+0x1e>
 8006250:	6023      	str	r3, [r4, #0]
 8006252:	bd38      	pop	{r3, r4, r5, pc}
 8006254:	20004fd0 	.word	0x20004fd0

08006258 <_read_r>:
 8006258:	b538      	push	{r3, r4, r5, lr}
 800625a:	4d07      	ldr	r5, [pc, #28]	@ (8006278 <_read_r+0x20>)
 800625c:	4604      	mov	r4, r0
 800625e:	4608      	mov	r0, r1
 8006260:	4611      	mov	r1, r2
 8006262:	2200      	movs	r2, #0
 8006264:	602a      	str	r2, [r5, #0]
 8006266:	461a      	mov	r2, r3
 8006268:	f7fb fb05 	bl	8001876 <_read>
 800626c:	1c43      	adds	r3, r0, #1
 800626e:	d102      	bne.n	8006276 <_read_r+0x1e>
 8006270:	682b      	ldr	r3, [r5, #0]
 8006272:	b103      	cbz	r3, 8006276 <_read_r+0x1e>
 8006274:	6023      	str	r3, [r4, #0]
 8006276:	bd38      	pop	{r3, r4, r5, pc}
 8006278:	20004fd0 	.word	0x20004fd0

0800627c <_write_r>:
 800627c:	b538      	push	{r3, r4, r5, lr}
 800627e:	4d07      	ldr	r5, [pc, #28]	@ (800629c <_write_r+0x20>)
 8006280:	4604      	mov	r4, r0
 8006282:	4608      	mov	r0, r1
 8006284:	4611      	mov	r1, r2
 8006286:	2200      	movs	r2, #0
 8006288:	602a      	str	r2, [r5, #0]
 800628a:	461a      	mov	r2, r3
 800628c:	f7fb fb10 	bl	80018b0 <_write>
 8006290:	1c43      	adds	r3, r0, #1
 8006292:	d102      	bne.n	800629a <_write_r+0x1e>
 8006294:	682b      	ldr	r3, [r5, #0]
 8006296:	b103      	cbz	r3, 800629a <_write_r+0x1e>
 8006298:	6023      	str	r3, [r4, #0]
 800629a:	bd38      	pop	{r3, r4, r5, pc}
 800629c:	20004fd0 	.word	0x20004fd0

080062a0 <__errno>:
 80062a0:	4b01      	ldr	r3, [pc, #4]	@ (80062a8 <__errno+0x8>)
 80062a2:	6818      	ldr	r0, [r3, #0]
 80062a4:	4770      	bx	lr
 80062a6:	bf00      	nop
 80062a8:	20000020 	.word	0x20000020

080062ac <__libc_init_array>:
 80062ac:	b570      	push	{r4, r5, r6, lr}
 80062ae:	4d0d      	ldr	r5, [pc, #52]	@ (80062e4 <__libc_init_array+0x38>)
 80062b0:	4c0d      	ldr	r4, [pc, #52]	@ (80062e8 <__libc_init_array+0x3c>)
 80062b2:	1b64      	subs	r4, r4, r5
 80062b4:	10a4      	asrs	r4, r4, #2
 80062b6:	2600      	movs	r6, #0
 80062b8:	42a6      	cmp	r6, r4
 80062ba:	d109      	bne.n	80062d0 <__libc_init_array+0x24>
 80062bc:	4d0b      	ldr	r5, [pc, #44]	@ (80062ec <__libc_init_array+0x40>)
 80062be:	4c0c      	ldr	r4, [pc, #48]	@ (80062f0 <__libc_init_array+0x44>)
 80062c0:	f000 fe5a 	bl	8006f78 <_init>
 80062c4:	1b64      	subs	r4, r4, r5
 80062c6:	10a4      	asrs	r4, r4, #2
 80062c8:	2600      	movs	r6, #0
 80062ca:	42a6      	cmp	r6, r4
 80062cc:	d105      	bne.n	80062da <__libc_init_array+0x2e>
 80062ce:	bd70      	pop	{r4, r5, r6, pc}
 80062d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80062d4:	4798      	blx	r3
 80062d6:	3601      	adds	r6, #1
 80062d8:	e7ee      	b.n	80062b8 <__libc_init_array+0xc>
 80062da:	f855 3b04 	ldr.w	r3, [r5], #4
 80062de:	4798      	blx	r3
 80062e0:	3601      	adds	r6, #1
 80062e2:	e7f2      	b.n	80062ca <__libc_init_array+0x1e>
 80062e4:	0801a4e8 	.word	0x0801a4e8
 80062e8:	0801a4e8 	.word	0x0801a4e8
 80062ec:	0801a4e8 	.word	0x0801a4e8
 80062f0:	0801a4ec 	.word	0x0801a4ec

080062f4 <__retarget_lock_init_recursive>:
 80062f4:	4770      	bx	lr

080062f6 <__retarget_lock_acquire_recursive>:
 80062f6:	4770      	bx	lr

080062f8 <__retarget_lock_release_recursive>:
 80062f8:	4770      	bx	lr
	...

080062fc <__assert_func>:
 80062fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80062fe:	4614      	mov	r4, r2
 8006300:	461a      	mov	r2, r3
 8006302:	4b09      	ldr	r3, [pc, #36]	@ (8006328 <__assert_func+0x2c>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4605      	mov	r5, r0
 8006308:	68d8      	ldr	r0, [r3, #12]
 800630a:	b14c      	cbz	r4, 8006320 <__assert_func+0x24>
 800630c:	4b07      	ldr	r3, [pc, #28]	@ (800632c <__assert_func+0x30>)
 800630e:	9100      	str	r1, [sp, #0]
 8006310:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006314:	4906      	ldr	r1, [pc, #24]	@ (8006330 <__assert_func+0x34>)
 8006316:	462b      	mov	r3, r5
 8006318:	f000 f9ba 	bl	8006690 <fiprintf>
 800631c:	f000 f9da 	bl	80066d4 <abort>
 8006320:	4b04      	ldr	r3, [pc, #16]	@ (8006334 <__assert_func+0x38>)
 8006322:	461c      	mov	r4, r3
 8006324:	e7f3      	b.n	800630e <__assert_func+0x12>
 8006326:	bf00      	nop
 8006328:	20000020 	.word	0x20000020
 800632c:	0801a46f 	.word	0x0801a46f
 8006330:	0801a47c 	.word	0x0801a47c
 8006334:	0801a4aa 	.word	0x0801a4aa

08006338 <_free_r>:
 8006338:	b538      	push	{r3, r4, r5, lr}
 800633a:	4605      	mov	r5, r0
 800633c:	2900      	cmp	r1, #0
 800633e:	d041      	beq.n	80063c4 <_free_r+0x8c>
 8006340:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006344:	1f0c      	subs	r4, r1, #4
 8006346:	2b00      	cmp	r3, #0
 8006348:	bfb8      	it	lt
 800634a:	18e4      	addlt	r4, r4, r3
 800634c:	f000 f8e8 	bl	8006520 <__malloc_lock>
 8006350:	4a1d      	ldr	r2, [pc, #116]	@ (80063c8 <_free_r+0x90>)
 8006352:	6813      	ldr	r3, [r2, #0]
 8006354:	b933      	cbnz	r3, 8006364 <_free_r+0x2c>
 8006356:	6063      	str	r3, [r4, #4]
 8006358:	6014      	str	r4, [r2, #0]
 800635a:	4628      	mov	r0, r5
 800635c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006360:	f000 b8e4 	b.w	800652c <__malloc_unlock>
 8006364:	42a3      	cmp	r3, r4
 8006366:	d908      	bls.n	800637a <_free_r+0x42>
 8006368:	6820      	ldr	r0, [r4, #0]
 800636a:	1821      	adds	r1, r4, r0
 800636c:	428b      	cmp	r3, r1
 800636e:	bf01      	itttt	eq
 8006370:	6819      	ldreq	r1, [r3, #0]
 8006372:	685b      	ldreq	r3, [r3, #4]
 8006374:	1809      	addeq	r1, r1, r0
 8006376:	6021      	streq	r1, [r4, #0]
 8006378:	e7ed      	b.n	8006356 <_free_r+0x1e>
 800637a:	461a      	mov	r2, r3
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	b10b      	cbz	r3, 8006384 <_free_r+0x4c>
 8006380:	42a3      	cmp	r3, r4
 8006382:	d9fa      	bls.n	800637a <_free_r+0x42>
 8006384:	6811      	ldr	r1, [r2, #0]
 8006386:	1850      	adds	r0, r2, r1
 8006388:	42a0      	cmp	r0, r4
 800638a:	d10b      	bne.n	80063a4 <_free_r+0x6c>
 800638c:	6820      	ldr	r0, [r4, #0]
 800638e:	4401      	add	r1, r0
 8006390:	1850      	adds	r0, r2, r1
 8006392:	4283      	cmp	r3, r0
 8006394:	6011      	str	r1, [r2, #0]
 8006396:	d1e0      	bne.n	800635a <_free_r+0x22>
 8006398:	6818      	ldr	r0, [r3, #0]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	6053      	str	r3, [r2, #4]
 800639e:	4408      	add	r0, r1
 80063a0:	6010      	str	r0, [r2, #0]
 80063a2:	e7da      	b.n	800635a <_free_r+0x22>
 80063a4:	d902      	bls.n	80063ac <_free_r+0x74>
 80063a6:	230c      	movs	r3, #12
 80063a8:	602b      	str	r3, [r5, #0]
 80063aa:	e7d6      	b.n	800635a <_free_r+0x22>
 80063ac:	6820      	ldr	r0, [r4, #0]
 80063ae:	1821      	adds	r1, r4, r0
 80063b0:	428b      	cmp	r3, r1
 80063b2:	bf04      	itt	eq
 80063b4:	6819      	ldreq	r1, [r3, #0]
 80063b6:	685b      	ldreq	r3, [r3, #4]
 80063b8:	6063      	str	r3, [r4, #4]
 80063ba:	bf04      	itt	eq
 80063bc:	1809      	addeq	r1, r1, r0
 80063be:	6021      	streq	r1, [r4, #0]
 80063c0:	6054      	str	r4, [r2, #4]
 80063c2:	e7ca      	b.n	800635a <_free_r+0x22>
 80063c4:	bd38      	pop	{r3, r4, r5, pc}
 80063c6:	bf00      	nop
 80063c8:	20004fdc 	.word	0x20004fdc

080063cc <malloc>:
 80063cc:	4b02      	ldr	r3, [pc, #8]	@ (80063d8 <malloc+0xc>)
 80063ce:	4601      	mov	r1, r0
 80063d0:	6818      	ldr	r0, [r3, #0]
 80063d2:	f000 b825 	b.w	8006420 <_malloc_r>
 80063d6:	bf00      	nop
 80063d8:	20000020 	.word	0x20000020

080063dc <sbrk_aligned>:
 80063dc:	b570      	push	{r4, r5, r6, lr}
 80063de:	4e0f      	ldr	r6, [pc, #60]	@ (800641c <sbrk_aligned+0x40>)
 80063e0:	460c      	mov	r4, r1
 80063e2:	6831      	ldr	r1, [r6, #0]
 80063e4:	4605      	mov	r5, r0
 80063e6:	b911      	cbnz	r1, 80063ee <sbrk_aligned+0x12>
 80063e8:	f000 f964 	bl	80066b4 <_sbrk_r>
 80063ec:	6030      	str	r0, [r6, #0]
 80063ee:	4621      	mov	r1, r4
 80063f0:	4628      	mov	r0, r5
 80063f2:	f000 f95f 	bl	80066b4 <_sbrk_r>
 80063f6:	1c43      	adds	r3, r0, #1
 80063f8:	d103      	bne.n	8006402 <sbrk_aligned+0x26>
 80063fa:	f04f 34ff 	mov.w	r4, #4294967295
 80063fe:	4620      	mov	r0, r4
 8006400:	bd70      	pop	{r4, r5, r6, pc}
 8006402:	1cc4      	adds	r4, r0, #3
 8006404:	f024 0403 	bic.w	r4, r4, #3
 8006408:	42a0      	cmp	r0, r4
 800640a:	d0f8      	beq.n	80063fe <sbrk_aligned+0x22>
 800640c:	1a21      	subs	r1, r4, r0
 800640e:	4628      	mov	r0, r5
 8006410:	f000 f950 	bl	80066b4 <_sbrk_r>
 8006414:	3001      	adds	r0, #1
 8006416:	d1f2      	bne.n	80063fe <sbrk_aligned+0x22>
 8006418:	e7ef      	b.n	80063fa <sbrk_aligned+0x1e>
 800641a:	bf00      	nop
 800641c:	20004fd8 	.word	0x20004fd8

08006420 <_malloc_r>:
 8006420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006424:	1ccd      	adds	r5, r1, #3
 8006426:	f025 0503 	bic.w	r5, r5, #3
 800642a:	3508      	adds	r5, #8
 800642c:	2d0c      	cmp	r5, #12
 800642e:	bf38      	it	cc
 8006430:	250c      	movcc	r5, #12
 8006432:	2d00      	cmp	r5, #0
 8006434:	4606      	mov	r6, r0
 8006436:	db01      	blt.n	800643c <_malloc_r+0x1c>
 8006438:	42a9      	cmp	r1, r5
 800643a:	d904      	bls.n	8006446 <_malloc_r+0x26>
 800643c:	230c      	movs	r3, #12
 800643e:	6033      	str	r3, [r6, #0]
 8006440:	2000      	movs	r0, #0
 8006442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006446:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800651c <_malloc_r+0xfc>
 800644a:	f000 f869 	bl	8006520 <__malloc_lock>
 800644e:	f8d8 3000 	ldr.w	r3, [r8]
 8006452:	461c      	mov	r4, r3
 8006454:	bb44      	cbnz	r4, 80064a8 <_malloc_r+0x88>
 8006456:	4629      	mov	r1, r5
 8006458:	4630      	mov	r0, r6
 800645a:	f7ff ffbf 	bl	80063dc <sbrk_aligned>
 800645e:	1c43      	adds	r3, r0, #1
 8006460:	4604      	mov	r4, r0
 8006462:	d158      	bne.n	8006516 <_malloc_r+0xf6>
 8006464:	f8d8 4000 	ldr.w	r4, [r8]
 8006468:	4627      	mov	r7, r4
 800646a:	2f00      	cmp	r7, #0
 800646c:	d143      	bne.n	80064f6 <_malloc_r+0xd6>
 800646e:	2c00      	cmp	r4, #0
 8006470:	d04b      	beq.n	800650a <_malloc_r+0xea>
 8006472:	6823      	ldr	r3, [r4, #0]
 8006474:	4639      	mov	r1, r7
 8006476:	4630      	mov	r0, r6
 8006478:	eb04 0903 	add.w	r9, r4, r3
 800647c:	f000 f91a 	bl	80066b4 <_sbrk_r>
 8006480:	4581      	cmp	r9, r0
 8006482:	d142      	bne.n	800650a <_malloc_r+0xea>
 8006484:	6821      	ldr	r1, [r4, #0]
 8006486:	1a6d      	subs	r5, r5, r1
 8006488:	4629      	mov	r1, r5
 800648a:	4630      	mov	r0, r6
 800648c:	f7ff ffa6 	bl	80063dc <sbrk_aligned>
 8006490:	3001      	adds	r0, #1
 8006492:	d03a      	beq.n	800650a <_malloc_r+0xea>
 8006494:	6823      	ldr	r3, [r4, #0]
 8006496:	442b      	add	r3, r5
 8006498:	6023      	str	r3, [r4, #0]
 800649a:	f8d8 3000 	ldr.w	r3, [r8]
 800649e:	685a      	ldr	r2, [r3, #4]
 80064a0:	bb62      	cbnz	r2, 80064fc <_malloc_r+0xdc>
 80064a2:	f8c8 7000 	str.w	r7, [r8]
 80064a6:	e00f      	b.n	80064c8 <_malloc_r+0xa8>
 80064a8:	6822      	ldr	r2, [r4, #0]
 80064aa:	1b52      	subs	r2, r2, r5
 80064ac:	d420      	bmi.n	80064f0 <_malloc_r+0xd0>
 80064ae:	2a0b      	cmp	r2, #11
 80064b0:	d917      	bls.n	80064e2 <_malloc_r+0xc2>
 80064b2:	1961      	adds	r1, r4, r5
 80064b4:	42a3      	cmp	r3, r4
 80064b6:	6025      	str	r5, [r4, #0]
 80064b8:	bf18      	it	ne
 80064ba:	6059      	strne	r1, [r3, #4]
 80064bc:	6863      	ldr	r3, [r4, #4]
 80064be:	bf08      	it	eq
 80064c0:	f8c8 1000 	streq.w	r1, [r8]
 80064c4:	5162      	str	r2, [r4, r5]
 80064c6:	604b      	str	r3, [r1, #4]
 80064c8:	4630      	mov	r0, r6
 80064ca:	f000 f82f 	bl	800652c <__malloc_unlock>
 80064ce:	f104 000b 	add.w	r0, r4, #11
 80064d2:	1d23      	adds	r3, r4, #4
 80064d4:	f020 0007 	bic.w	r0, r0, #7
 80064d8:	1ac2      	subs	r2, r0, r3
 80064da:	bf1c      	itt	ne
 80064dc:	1a1b      	subne	r3, r3, r0
 80064de:	50a3      	strne	r3, [r4, r2]
 80064e0:	e7af      	b.n	8006442 <_malloc_r+0x22>
 80064e2:	6862      	ldr	r2, [r4, #4]
 80064e4:	42a3      	cmp	r3, r4
 80064e6:	bf0c      	ite	eq
 80064e8:	f8c8 2000 	streq.w	r2, [r8]
 80064ec:	605a      	strne	r2, [r3, #4]
 80064ee:	e7eb      	b.n	80064c8 <_malloc_r+0xa8>
 80064f0:	4623      	mov	r3, r4
 80064f2:	6864      	ldr	r4, [r4, #4]
 80064f4:	e7ae      	b.n	8006454 <_malloc_r+0x34>
 80064f6:	463c      	mov	r4, r7
 80064f8:	687f      	ldr	r7, [r7, #4]
 80064fa:	e7b6      	b.n	800646a <_malloc_r+0x4a>
 80064fc:	461a      	mov	r2, r3
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	42a3      	cmp	r3, r4
 8006502:	d1fb      	bne.n	80064fc <_malloc_r+0xdc>
 8006504:	2300      	movs	r3, #0
 8006506:	6053      	str	r3, [r2, #4]
 8006508:	e7de      	b.n	80064c8 <_malloc_r+0xa8>
 800650a:	230c      	movs	r3, #12
 800650c:	6033      	str	r3, [r6, #0]
 800650e:	4630      	mov	r0, r6
 8006510:	f000 f80c 	bl	800652c <__malloc_unlock>
 8006514:	e794      	b.n	8006440 <_malloc_r+0x20>
 8006516:	6005      	str	r5, [r0, #0]
 8006518:	e7d6      	b.n	80064c8 <_malloc_r+0xa8>
 800651a:	bf00      	nop
 800651c:	20004fdc 	.word	0x20004fdc

08006520 <__malloc_lock>:
 8006520:	4801      	ldr	r0, [pc, #4]	@ (8006528 <__malloc_lock+0x8>)
 8006522:	f7ff bee8 	b.w	80062f6 <__retarget_lock_acquire_recursive>
 8006526:	bf00      	nop
 8006528:	20004fd4 	.word	0x20004fd4

0800652c <__malloc_unlock>:
 800652c:	4801      	ldr	r0, [pc, #4]	@ (8006534 <__malloc_unlock+0x8>)
 800652e:	f7ff bee3 	b.w	80062f8 <__retarget_lock_release_recursive>
 8006532:	bf00      	nop
 8006534:	20004fd4 	.word	0x20004fd4

08006538 <__sflush_r>:
 8006538:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800653c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006540:	0716      	lsls	r6, r2, #28
 8006542:	4605      	mov	r5, r0
 8006544:	460c      	mov	r4, r1
 8006546:	d454      	bmi.n	80065f2 <__sflush_r+0xba>
 8006548:	684b      	ldr	r3, [r1, #4]
 800654a:	2b00      	cmp	r3, #0
 800654c:	dc02      	bgt.n	8006554 <__sflush_r+0x1c>
 800654e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006550:	2b00      	cmp	r3, #0
 8006552:	dd48      	ble.n	80065e6 <__sflush_r+0xae>
 8006554:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006556:	2e00      	cmp	r6, #0
 8006558:	d045      	beq.n	80065e6 <__sflush_r+0xae>
 800655a:	2300      	movs	r3, #0
 800655c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006560:	682f      	ldr	r7, [r5, #0]
 8006562:	6a21      	ldr	r1, [r4, #32]
 8006564:	602b      	str	r3, [r5, #0]
 8006566:	d030      	beq.n	80065ca <__sflush_r+0x92>
 8006568:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800656a:	89a3      	ldrh	r3, [r4, #12]
 800656c:	0759      	lsls	r1, r3, #29
 800656e:	d505      	bpl.n	800657c <__sflush_r+0x44>
 8006570:	6863      	ldr	r3, [r4, #4]
 8006572:	1ad2      	subs	r2, r2, r3
 8006574:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006576:	b10b      	cbz	r3, 800657c <__sflush_r+0x44>
 8006578:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800657a:	1ad2      	subs	r2, r2, r3
 800657c:	2300      	movs	r3, #0
 800657e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006580:	6a21      	ldr	r1, [r4, #32]
 8006582:	4628      	mov	r0, r5
 8006584:	47b0      	blx	r6
 8006586:	1c43      	adds	r3, r0, #1
 8006588:	89a3      	ldrh	r3, [r4, #12]
 800658a:	d106      	bne.n	800659a <__sflush_r+0x62>
 800658c:	6829      	ldr	r1, [r5, #0]
 800658e:	291d      	cmp	r1, #29
 8006590:	d82b      	bhi.n	80065ea <__sflush_r+0xb2>
 8006592:	4a2a      	ldr	r2, [pc, #168]	@ (800663c <__sflush_r+0x104>)
 8006594:	40ca      	lsrs	r2, r1
 8006596:	07d6      	lsls	r6, r2, #31
 8006598:	d527      	bpl.n	80065ea <__sflush_r+0xb2>
 800659a:	2200      	movs	r2, #0
 800659c:	6062      	str	r2, [r4, #4]
 800659e:	04d9      	lsls	r1, r3, #19
 80065a0:	6922      	ldr	r2, [r4, #16]
 80065a2:	6022      	str	r2, [r4, #0]
 80065a4:	d504      	bpl.n	80065b0 <__sflush_r+0x78>
 80065a6:	1c42      	adds	r2, r0, #1
 80065a8:	d101      	bne.n	80065ae <__sflush_r+0x76>
 80065aa:	682b      	ldr	r3, [r5, #0]
 80065ac:	b903      	cbnz	r3, 80065b0 <__sflush_r+0x78>
 80065ae:	6560      	str	r0, [r4, #84]	@ 0x54
 80065b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80065b2:	602f      	str	r7, [r5, #0]
 80065b4:	b1b9      	cbz	r1, 80065e6 <__sflush_r+0xae>
 80065b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80065ba:	4299      	cmp	r1, r3
 80065bc:	d002      	beq.n	80065c4 <__sflush_r+0x8c>
 80065be:	4628      	mov	r0, r5
 80065c0:	f7ff feba 	bl	8006338 <_free_r>
 80065c4:	2300      	movs	r3, #0
 80065c6:	6363      	str	r3, [r4, #52]	@ 0x34
 80065c8:	e00d      	b.n	80065e6 <__sflush_r+0xae>
 80065ca:	2301      	movs	r3, #1
 80065cc:	4628      	mov	r0, r5
 80065ce:	47b0      	blx	r6
 80065d0:	4602      	mov	r2, r0
 80065d2:	1c50      	adds	r0, r2, #1
 80065d4:	d1c9      	bne.n	800656a <__sflush_r+0x32>
 80065d6:	682b      	ldr	r3, [r5, #0]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d0c6      	beq.n	800656a <__sflush_r+0x32>
 80065dc:	2b1d      	cmp	r3, #29
 80065de:	d001      	beq.n	80065e4 <__sflush_r+0xac>
 80065e0:	2b16      	cmp	r3, #22
 80065e2:	d11e      	bne.n	8006622 <__sflush_r+0xea>
 80065e4:	602f      	str	r7, [r5, #0]
 80065e6:	2000      	movs	r0, #0
 80065e8:	e022      	b.n	8006630 <__sflush_r+0xf8>
 80065ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065ee:	b21b      	sxth	r3, r3
 80065f0:	e01b      	b.n	800662a <__sflush_r+0xf2>
 80065f2:	690f      	ldr	r7, [r1, #16]
 80065f4:	2f00      	cmp	r7, #0
 80065f6:	d0f6      	beq.n	80065e6 <__sflush_r+0xae>
 80065f8:	0793      	lsls	r3, r2, #30
 80065fa:	680e      	ldr	r6, [r1, #0]
 80065fc:	bf08      	it	eq
 80065fe:	694b      	ldreq	r3, [r1, #20]
 8006600:	600f      	str	r7, [r1, #0]
 8006602:	bf18      	it	ne
 8006604:	2300      	movne	r3, #0
 8006606:	eba6 0807 	sub.w	r8, r6, r7
 800660a:	608b      	str	r3, [r1, #8]
 800660c:	f1b8 0f00 	cmp.w	r8, #0
 8006610:	dde9      	ble.n	80065e6 <__sflush_r+0xae>
 8006612:	6a21      	ldr	r1, [r4, #32]
 8006614:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006616:	4643      	mov	r3, r8
 8006618:	463a      	mov	r2, r7
 800661a:	4628      	mov	r0, r5
 800661c:	47b0      	blx	r6
 800661e:	2800      	cmp	r0, #0
 8006620:	dc08      	bgt.n	8006634 <__sflush_r+0xfc>
 8006622:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006626:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800662a:	81a3      	strh	r3, [r4, #12]
 800662c:	f04f 30ff 	mov.w	r0, #4294967295
 8006630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006634:	4407      	add	r7, r0
 8006636:	eba8 0800 	sub.w	r8, r8, r0
 800663a:	e7e7      	b.n	800660c <__sflush_r+0xd4>
 800663c:	20400001 	.word	0x20400001

08006640 <_fflush_r>:
 8006640:	b538      	push	{r3, r4, r5, lr}
 8006642:	690b      	ldr	r3, [r1, #16]
 8006644:	4605      	mov	r5, r0
 8006646:	460c      	mov	r4, r1
 8006648:	b913      	cbnz	r3, 8006650 <_fflush_r+0x10>
 800664a:	2500      	movs	r5, #0
 800664c:	4628      	mov	r0, r5
 800664e:	bd38      	pop	{r3, r4, r5, pc}
 8006650:	b118      	cbz	r0, 800665a <_fflush_r+0x1a>
 8006652:	6a03      	ldr	r3, [r0, #32]
 8006654:	b90b      	cbnz	r3, 800665a <_fflush_r+0x1a>
 8006656:	f7ff fd5b 	bl	8006110 <__sinit>
 800665a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d0f3      	beq.n	800664a <_fflush_r+0xa>
 8006662:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006664:	07d0      	lsls	r0, r2, #31
 8006666:	d404      	bmi.n	8006672 <_fflush_r+0x32>
 8006668:	0599      	lsls	r1, r3, #22
 800666a:	d402      	bmi.n	8006672 <_fflush_r+0x32>
 800666c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800666e:	f7ff fe42 	bl	80062f6 <__retarget_lock_acquire_recursive>
 8006672:	4628      	mov	r0, r5
 8006674:	4621      	mov	r1, r4
 8006676:	f7ff ff5f 	bl	8006538 <__sflush_r>
 800667a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800667c:	07da      	lsls	r2, r3, #31
 800667e:	4605      	mov	r5, r0
 8006680:	d4e4      	bmi.n	800664c <_fflush_r+0xc>
 8006682:	89a3      	ldrh	r3, [r4, #12]
 8006684:	059b      	lsls	r3, r3, #22
 8006686:	d4e1      	bmi.n	800664c <_fflush_r+0xc>
 8006688:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800668a:	f7ff fe35 	bl	80062f8 <__retarget_lock_release_recursive>
 800668e:	e7dd      	b.n	800664c <_fflush_r+0xc>

08006690 <fiprintf>:
 8006690:	b40e      	push	{r1, r2, r3}
 8006692:	b503      	push	{r0, r1, lr}
 8006694:	4601      	mov	r1, r0
 8006696:	ab03      	add	r3, sp, #12
 8006698:	4805      	ldr	r0, [pc, #20]	@ (80066b0 <fiprintf+0x20>)
 800669a:	f853 2b04 	ldr.w	r2, [r3], #4
 800669e:	6800      	ldr	r0, [r0, #0]
 80066a0:	9301      	str	r3, [sp, #4]
 80066a2:	f000 f847 	bl	8006734 <_vfiprintf_r>
 80066a6:	b002      	add	sp, #8
 80066a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80066ac:	b003      	add	sp, #12
 80066ae:	4770      	bx	lr
 80066b0:	20000020 	.word	0x20000020

080066b4 <_sbrk_r>:
 80066b4:	b538      	push	{r3, r4, r5, lr}
 80066b6:	4d06      	ldr	r5, [pc, #24]	@ (80066d0 <_sbrk_r+0x1c>)
 80066b8:	2300      	movs	r3, #0
 80066ba:	4604      	mov	r4, r0
 80066bc:	4608      	mov	r0, r1
 80066be:	602b      	str	r3, [r5, #0]
 80066c0:	f7fb f946 	bl	8001950 <_sbrk>
 80066c4:	1c43      	adds	r3, r0, #1
 80066c6:	d102      	bne.n	80066ce <_sbrk_r+0x1a>
 80066c8:	682b      	ldr	r3, [r5, #0]
 80066ca:	b103      	cbz	r3, 80066ce <_sbrk_r+0x1a>
 80066cc:	6023      	str	r3, [r4, #0]
 80066ce:	bd38      	pop	{r3, r4, r5, pc}
 80066d0:	20004fd0 	.word	0x20004fd0

080066d4 <abort>:
 80066d4:	b508      	push	{r3, lr}
 80066d6:	2006      	movs	r0, #6
 80066d8:	f000 fb8c 	bl	8006df4 <raise>
 80066dc:	2001      	movs	r0, #1
 80066de:	f7fb f8bf 	bl	8001860 <_exit>

080066e2 <__sfputc_r>:
 80066e2:	6893      	ldr	r3, [r2, #8]
 80066e4:	3b01      	subs	r3, #1
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	b410      	push	{r4}
 80066ea:	6093      	str	r3, [r2, #8]
 80066ec:	da08      	bge.n	8006700 <__sfputc_r+0x1e>
 80066ee:	6994      	ldr	r4, [r2, #24]
 80066f0:	42a3      	cmp	r3, r4
 80066f2:	db01      	blt.n	80066f8 <__sfputc_r+0x16>
 80066f4:	290a      	cmp	r1, #10
 80066f6:	d103      	bne.n	8006700 <__sfputc_r+0x1e>
 80066f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80066fc:	f000 babe 	b.w	8006c7c <__swbuf_r>
 8006700:	6813      	ldr	r3, [r2, #0]
 8006702:	1c58      	adds	r0, r3, #1
 8006704:	6010      	str	r0, [r2, #0]
 8006706:	7019      	strb	r1, [r3, #0]
 8006708:	4608      	mov	r0, r1
 800670a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800670e:	4770      	bx	lr

08006710 <__sfputs_r>:
 8006710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006712:	4606      	mov	r6, r0
 8006714:	460f      	mov	r7, r1
 8006716:	4614      	mov	r4, r2
 8006718:	18d5      	adds	r5, r2, r3
 800671a:	42ac      	cmp	r4, r5
 800671c:	d101      	bne.n	8006722 <__sfputs_r+0x12>
 800671e:	2000      	movs	r0, #0
 8006720:	e007      	b.n	8006732 <__sfputs_r+0x22>
 8006722:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006726:	463a      	mov	r2, r7
 8006728:	4630      	mov	r0, r6
 800672a:	f7ff ffda 	bl	80066e2 <__sfputc_r>
 800672e:	1c43      	adds	r3, r0, #1
 8006730:	d1f3      	bne.n	800671a <__sfputs_r+0xa>
 8006732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006734 <_vfiprintf_r>:
 8006734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006738:	460d      	mov	r5, r1
 800673a:	b09d      	sub	sp, #116	@ 0x74
 800673c:	4614      	mov	r4, r2
 800673e:	4698      	mov	r8, r3
 8006740:	4606      	mov	r6, r0
 8006742:	b118      	cbz	r0, 800674c <_vfiprintf_r+0x18>
 8006744:	6a03      	ldr	r3, [r0, #32]
 8006746:	b90b      	cbnz	r3, 800674c <_vfiprintf_r+0x18>
 8006748:	f7ff fce2 	bl	8006110 <__sinit>
 800674c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800674e:	07d9      	lsls	r1, r3, #31
 8006750:	d405      	bmi.n	800675e <_vfiprintf_r+0x2a>
 8006752:	89ab      	ldrh	r3, [r5, #12]
 8006754:	059a      	lsls	r2, r3, #22
 8006756:	d402      	bmi.n	800675e <_vfiprintf_r+0x2a>
 8006758:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800675a:	f7ff fdcc 	bl	80062f6 <__retarget_lock_acquire_recursive>
 800675e:	89ab      	ldrh	r3, [r5, #12]
 8006760:	071b      	lsls	r3, r3, #28
 8006762:	d501      	bpl.n	8006768 <_vfiprintf_r+0x34>
 8006764:	692b      	ldr	r3, [r5, #16]
 8006766:	b99b      	cbnz	r3, 8006790 <_vfiprintf_r+0x5c>
 8006768:	4629      	mov	r1, r5
 800676a:	4630      	mov	r0, r6
 800676c:	f000 fac4 	bl	8006cf8 <__swsetup_r>
 8006770:	b170      	cbz	r0, 8006790 <_vfiprintf_r+0x5c>
 8006772:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006774:	07dc      	lsls	r4, r3, #31
 8006776:	d504      	bpl.n	8006782 <_vfiprintf_r+0x4e>
 8006778:	f04f 30ff 	mov.w	r0, #4294967295
 800677c:	b01d      	add	sp, #116	@ 0x74
 800677e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006782:	89ab      	ldrh	r3, [r5, #12]
 8006784:	0598      	lsls	r0, r3, #22
 8006786:	d4f7      	bmi.n	8006778 <_vfiprintf_r+0x44>
 8006788:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800678a:	f7ff fdb5 	bl	80062f8 <__retarget_lock_release_recursive>
 800678e:	e7f3      	b.n	8006778 <_vfiprintf_r+0x44>
 8006790:	2300      	movs	r3, #0
 8006792:	9309      	str	r3, [sp, #36]	@ 0x24
 8006794:	2320      	movs	r3, #32
 8006796:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800679a:	f8cd 800c 	str.w	r8, [sp, #12]
 800679e:	2330      	movs	r3, #48	@ 0x30
 80067a0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006950 <_vfiprintf_r+0x21c>
 80067a4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80067a8:	f04f 0901 	mov.w	r9, #1
 80067ac:	4623      	mov	r3, r4
 80067ae:	469a      	mov	sl, r3
 80067b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80067b4:	b10a      	cbz	r2, 80067ba <_vfiprintf_r+0x86>
 80067b6:	2a25      	cmp	r2, #37	@ 0x25
 80067b8:	d1f9      	bne.n	80067ae <_vfiprintf_r+0x7a>
 80067ba:	ebba 0b04 	subs.w	fp, sl, r4
 80067be:	d00b      	beq.n	80067d8 <_vfiprintf_r+0xa4>
 80067c0:	465b      	mov	r3, fp
 80067c2:	4622      	mov	r2, r4
 80067c4:	4629      	mov	r1, r5
 80067c6:	4630      	mov	r0, r6
 80067c8:	f7ff ffa2 	bl	8006710 <__sfputs_r>
 80067cc:	3001      	adds	r0, #1
 80067ce:	f000 80a7 	beq.w	8006920 <_vfiprintf_r+0x1ec>
 80067d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80067d4:	445a      	add	r2, fp
 80067d6:	9209      	str	r2, [sp, #36]	@ 0x24
 80067d8:	f89a 3000 	ldrb.w	r3, [sl]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	f000 809f 	beq.w	8006920 <_vfiprintf_r+0x1ec>
 80067e2:	2300      	movs	r3, #0
 80067e4:	f04f 32ff 	mov.w	r2, #4294967295
 80067e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80067ec:	f10a 0a01 	add.w	sl, sl, #1
 80067f0:	9304      	str	r3, [sp, #16]
 80067f2:	9307      	str	r3, [sp, #28]
 80067f4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80067f8:	931a      	str	r3, [sp, #104]	@ 0x68
 80067fa:	4654      	mov	r4, sl
 80067fc:	2205      	movs	r2, #5
 80067fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006802:	4853      	ldr	r0, [pc, #332]	@ (8006950 <_vfiprintf_r+0x21c>)
 8006804:	f7f9 fd44 	bl	8000290 <memchr>
 8006808:	9a04      	ldr	r2, [sp, #16]
 800680a:	b9d8      	cbnz	r0, 8006844 <_vfiprintf_r+0x110>
 800680c:	06d1      	lsls	r1, r2, #27
 800680e:	bf44      	itt	mi
 8006810:	2320      	movmi	r3, #32
 8006812:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006816:	0713      	lsls	r3, r2, #28
 8006818:	bf44      	itt	mi
 800681a:	232b      	movmi	r3, #43	@ 0x2b
 800681c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006820:	f89a 3000 	ldrb.w	r3, [sl]
 8006824:	2b2a      	cmp	r3, #42	@ 0x2a
 8006826:	d015      	beq.n	8006854 <_vfiprintf_r+0x120>
 8006828:	9a07      	ldr	r2, [sp, #28]
 800682a:	4654      	mov	r4, sl
 800682c:	2000      	movs	r0, #0
 800682e:	f04f 0c0a 	mov.w	ip, #10
 8006832:	4621      	mov	r1, r4
 8006834:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006838:	3b30      	subs	r3, #48	@ 0x30
 800683a:	2b09      	cmp	r3, #9
 800683c:	d94b      	bls.n	80068d6 <_vfiprintf_r+0x1a2>
 800683e:	b1b0      	cbz	r0, 800686e <_vfiprintf_r+0x13a>
 8006840:	9207      	str	r2, [sp, #28]
 8006842:	e014      	b.n	800686e <_vfiprintf_r+0x13a>
 8006844:	eba0 0308 	sub.w	r3, r0, r8
 8006848:	fa09 f303 	lsl.w	r3, r9, r3
 800684c:	4313      	orrs	r3, r2
 800684e:	9304      	str	r3, [sp, #16]
 8006850:	46a2      	mov	sl, r4
 8006852:	e7d2      	b.n	80067fa <_vfiprintf_r+0xc6>
 8006854:	9b03      	ldr	r3, [sp, #12]
 8006856:	1d19      	adds	r1, r3, #4
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	9103      	str	r1, [sp, #12]
 800685c:	2b00      	cmp	r3, #0
 800685e:	bfbb      	ittet	lt
 8006860:	425b      	neglt	r3, r3
 8006862:	f042 0202 	orrlt.w	r2, r2, #2
 8006866:	9307      	strge	r3, [sp, #28]
 8006868:	9307      	strlt	r3, [sp, #28]
 800686a:	bfb8      	it	lt
 800686c:	9204      	strlt	r2, [sp, #16]
 800686e:	7823      	ldrb	r3, [r4, #0]
 8006870:	2b2e      	cmp	r3, #46	@ 0x2e
 8006872:	d10a      	bne.n	800688a <_vfiprintf_r+0x156>
 8006874:	7863      	ldrb	r3, [r4, #1]
 8006876:	2b2a      	cmp	r3, #42	@ 0x2a
 8006878:	d132      	bne.n	80068e0 <_vfiprintf_r+0x1ac>
 800687a:	9b03      	ldr	r3, [sp, #12]
 800687c:	1d1a      	adds	r2, r3, #4
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	9203      	str	r2, [sp, #12]
 8006882:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006886:	3402      	adds	r4, #2
 8006888:	9305      	str	r3, [sp, #20]
 800688a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006960 <_vfiprintf_r+0x22c>
 800688e:	7821      	ldrb	r1, [r4, #0]
 8006890:	2203      	movs	r2, #3
 8006892:	4650      	mov	r0, sl
 8006894:	f7f9 fcfc 	bl	8000290 <memchr>
 8006898:	b138      	cbz	r0, 80068aa <_vfiprintf_r+0x176>
 800689a:	9b04      	ldr	r3, [sp, #16]
 800689c:	eba0 000a 	sub.w	r0, r0, sl
 80068a0:	2240      	movs	r2, #64	@ 0x40
 80068a2:	4082      	lsls	r2, r0
 80068a4:	4313      	orrs	r3, r2
 80068a6:	3401      	adds	r4, #1
 80068a8:	9304      	str	r3, [sp, #16]
 80068aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068ae:	4829      	ldr	r0, [pc, #164]	@ (8006954 <_vfiprintf_r+0x220>)
 80068b0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80068b4:	2206      	movs	r2, #6
 80068b6:	f7f9 fceb 	bl	8000290 <memchr>
 80068ba:	2800      	cmp	r0, #0
 80068bc:	d03f      	beq.n	800693e <_vfiprintf_r+0x20a>
 80068be:	4b26      	ldr	r3, [pc, #152]	@ (8006958 <_vfiprintf_r+0x224>)
 80068c0:	bb1b      	cbnz	r3, 800690a <_vfiprintf_r+0x1d6>
 80068c2:	9b03      	ldr	r3, [sp, #12]
 80068c4:	3307      	adds	r3, #7
 80068c6:	f023 0307 	bic.w	r3, r3, #7
 80068ca:	3308      	adds	r3, #8
 80068cc:	9303      	str	r3, [sp, #12]
 80068ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068d0:	443b      	add	r3, r7
 80068d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80068d4:	e76a      	b.n	80067ac <_vfiprintf_r+0x78>
 80068d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80068da:	460c      	mov	r4, r1
 80068dc:	2001      	movs	r0, #1
 80068de:	e7a8      	b.n	8006832 <_vfiprintf_r+0xfe>
 80068e0:	2300      	movs	r3, #0
 80068e2:	3401      	adds	r4, #1
 80068e4:	9305      	str	r3, [sp, #20]
 80068e6:	4619      	mov	r1, r3
 80068e8:	f04f 0c0a 	mov.w	ip, #10
 80068ec:	4620      	mov	r0, r4
 80068ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80068f2:	3a30      	subs	r2, #48	@ 0x30
 80068f4:	2a09      	cmp	r2, #9
 80068f6:	d903      	bls.n	8006900 <_vfiprintf_r+0x1cc>
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d0c6      	beq.n	800688a <_vfiprintf_r+0x156>
 80068fc:	9105      	str	r1, [sp, #20]
 80068fe:	e7c4      	b.n	800688a <_vfiprintf_r+0x156>
 8006900:	fb0c 2101 	mla	r1, ip, r1, r2
 8006904:	4604      	mov	r4, r0
 8006906:	2301      	movs	r3, #1
 8006908:	e7f0      	b.n	80068ec <_vfiprintf_r+0x1b8>
 800690a:	ab03      	add	r3, sp, #12
 800690c:	9300      	str	r3, [sp, #0]
 800690e:	462a      	mov	r2, r5
 8006910:	4b12      	ldr	r3, [pc, #72]	@ (800695c <_vfiprintf_r+0x228>)
 8006912:	a904      	add	r1, sp, #16
 8006914:	4630      	mov	r0, r6
 8006916:	f3af 8000 	nop.w
 800691a:	4607      	mov	r7, r0
 800691c:	1c78      	adds	r0, r7, #1
 800691e:	d1d6      	bne.n	80068ce <_vfiprintf_r+0x19a>
 8006920:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006922:	07d9      	lsls	r1, r3, #31
 8006924:	d405      	bmi.n	8006932 <_vfiprintf_r+0x1fe>
 8006926:	89ab      	ldrh	r3, [r5, #12]
 8006928:	059a      	lsls	r2, r3, #22
 800692a:	d402      	bmi.n	8006932 <_vfiprintf_r+0x1fe>
 800692c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800692e:	f7ff fce3 	bl	80062f8 <__retarget_lock_release_recursive>
 8006932:	89ab      	ldrh	r3, [r5, #12]
 8006934:	065b      	lsls	r3, r3, #25
 8006936:	f53f af1f 	bmi.w	8006778 <_vfiprintf_r+0x44>
 800693a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800693c:	e71e      	b.n	800677c <_vfiprintf_r+0x48>
 800693e:	ab03      	add	r3, sp, #12
 8006940:	9300      	str	r3, [sp, #0]
 8006942:	462a      	mov	r2, r5
 8006944:	4b05      	ldr	r3, [pc, #20]	@ (800695c <_vfiprintf_r+0x228>)
 8006946:	a904      	add	r1, sp, #16
 8006948:	4630      	mov	r0, r6
 800694a:	f000 f879 	bl	8006a40 <_printf_i>
 800694e:	e7e4      	b.n	800691a <_vfiprintf_r+0x1e6>
 8006950:	0801a4ab 	.word	0x0801a4ab
 8006954:	0801a4b5 	.word	0x0801a4b5
 8006958:	00000000 	.word	0x00000000
 800695c:	08006711 	.word	0x08006711
 8006960:	0801a4b1 	.word	0x0801a4b1

08006964 <_printf_common>:
 8006964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006968:	4616      	mov	r6, r2
 800696a:	4698      	mov	r8, r3
 800696c:	688a      	ldr	r2, [r1, #8]
 800696e:	690b      	ldr	r3, [r1, #16]
 8006970:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006974:	4293      	cmp	r3, r2
 8006976:	bfb8      	it	lt
 8006978:	4613      	movlt	r3, r2
 800697a:	6033      	str	r3, [r6, #0]
 800697c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006980:	4607      	mov	r7, r0
 8006982:	460c      	mov	r4, r1
 8006984:	b10a      	cbz	r2, 800698a <_printf_common+0x26>
 8006986:	3301      	adds	r3, #1
 8006988:	6033      	str	r3, [r6, #0]
 800698a:	6823      	ldr	r3, [r4, #0]
 800698c:	0699      	lsls	r1, r3, #26
 800698e:	bf42      	ittt	mi
 8006990:	6833      	ldrmi	r3, [r6, #0]
 8006992:	3302      	addmi	r3, #2
 8006994:	6033      	strmi	r3, [r6, #0]
 8006996:	6825      	ldr	r5, [r4, #0]
 8006998:	f015 0506 	ands.w	r5, r5, #6
 800699c:	d106      	bne.n	80069ac <_printf_common+0x48>
 800699e:	f104 0a19 	add.w	sl, r4, #25
 80069a2:	68e3      	ldr	r3, [r4, #12]
 80069a4:	6832      	ldr	r2, [r6, #0]
 80069a6:	1a9b      	subs	r3, r3, r2
 80069a8:	42ab      	cmp	r3, r5
 80069aa:	dc26      	bgt.n	80069fa <_printf_common+0x96>
 80069ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80069b0:	6822      	ldr	r2, [r4, #0]
 80069b2:	3b00      	subs	r3, #0
 80069b4:	bf18      	it	ne
 80069b6:	2301      	movne	r3, #1
 80069b8:	0692      	lsls	r2, r2, #26
 80069ba:	d42b      	bmi.n	8006a14 <_printf_common+0xb0>
 80069bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80069c0:	4641      	mov	r1, r8
 80069c2:	4638      	mov	r0, r7
 80069c4:	47c8      	blx	r9
 80069c6:	3001      	adds	r0, #1
 80069c8:	d01e      	beq.n	8006a08 <_printf_common+0xa4>
 80069ca:	6823      	ldr	r3, [r4, #0]
 80069cc:	6922      	ldr	r2, [r4, #16]
 80069ce:	f003 0306 	and.w	r3, r3, #6
 80069d2:	2b04      	cmp	r3, #4
 80069d4:	bf02      	ittt	eq
 80069d6:	68e5      	ldreq	r5, [r4, #12]
 80069d8:	6833      	ldreq	r3, [r6, #0]
 80069da:	1aed      	subeq	r5, r5, r3
 80069dc:	68a3      	ldr	r3, [r4, #8]
 80069de:	bf0c      	ite	eq
 80069e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80069e4:	2500      	movne	r5, #0
 80069e6:	4293      	cmp	r3, r2
 80069e8:	bfc4      	itt	gt
 80069ea:	1a9b      	subgt	r3, r3, r2
 80069ec:	18ed      	addgt	r5, r5, r3
 80069ee:	2600      	movs	r6, #0
 80069f0:	341a      	adds	r4, #26
 80069f2:	42b5      	cmp	r5, r6
 80069f4:	d11a      	bne.n	8006a2c <_printf_common+0xc8>
 80069f6:	2000      	movs	r0, #0
 80069f8:	e008      	b.n	8006a0c <_printf_common+0xa8>
 80069fa:	2301      	movs	r3, #1
 80069fc:	4652      	mov	r2, sl
 80069fe:	4641      	mov	r1, r8
 8006a00:	4638      	mov	r0, r7
 8006a02:	47c8      	blx	r9
 8006a04:	3001      	adds	r0, #1
 8006a06:	d103      	bne.n	8006a10 <_printf_common+0xac>
 8006a08:	f04f 30ff 	mov.w	r0, #4294967295
 8006a0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a10:	3501      	adds	r5, #1
 8006a12:	e7c6      	b.n	80069a2 <_printf_common+0x3e>
 8006a14:	18e1      	adds	r1, r4, r3
 8006a16:	1c5a      	adds	r2, r3, #1
 8006a18:	2030      	movs	r0, #48	@ 0x30
 8006a1a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006a1e:	4422      	add	r2, r4
 8006a20:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006a24:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006a28:	3302      	adds	r3, #2
 8006a2a:	e7c7      	b.n	80069bc <_printf_common+0x58>
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	4622      	mov	r2, r4
 8006a30:	4641      	mov	r1, r8
 8006a32:	4638      	mov	r0, r7
 8006a34:	47c8      	blx	r9
 8006a36:	3001      	adds	r0, #1
 8006a38:	d0e6      	beq.n	8006a08 <_printf_common+0xa4>
 8006a3a:	3601      	adds	r6, #1
 8006a3c:	e7d9      	b.n	80069f2 <_printf_common+0x8e>
	...

08006a40 <_printf_i>:
 8006a40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a44:	7e0f      	ldrb	r7, [r1, #24]
 8006a46:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006a48:	2f78      	cmp	r7, #120	@ 0x78
 8006a4a:	4691      	mov	r9, r2
 8006a4c:	4680      	mov	r8, r0
 8006a4e:	460c      	mov	r4, r1
 8006a50:	469a      	mov	sl, r3
 8006a52:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006a56:	d807      	bhi.n	8006a68 <_printf_i+0x28>
 8006a58:	2f62      	cmp	r7, #98	@ 0x62
 8006a5a:	d80a      	bhi.n	8006a72 <_printf_i+0x32>
 8006a5c:	2f00      	cmp	r7, #0
 8006a5e:	f000 80d1 	beq.w	8006c04 <_printf_i+0x1c4>
 8006a62:	2f58      	cmp	r7, #88	@ 0x58
 8006a64:	f000 80b8 	beq.w	8006bd8 <_printf_i+0x198>
 8006a68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a6c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006a70:	e03a      	b.n	8006ae8 <_printf_i+0xa8>
 8006a72:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006a76:	2b15      	cmp	r3, #21
 8006a78:	d8f6      	bhi.n	8006a68 <_printf_i+0x28>
 8006a7a:	a101      	add	r1, pc, #4	@ (adr r1, 8006a80 <_printf_i+0x40>)
 8006a7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a80:	08006ad9 	.word	0x08006ad9
 8006a84:	08006aed 	.word	0x08006aed
 8006a88:	08006a69 	.word	0x08006a69
 8006a8c:	08006a69 	.word	0x08006a69
 8006a90:	08006a69 	.word	0x08006a69
 8006a94:	08006a69 	.word	0x08006a69
 8006a98:	08006aed 	.word	0x08006aed
 8006a9c:	08006a69 	.word	0x08006a69
 8006aa0:	08006a69 	.word	0x08006a69
 8006aa4:	08006a69 	.word	0x08006a69
 8006aa8:	08006a69 	.word	0x08006a69
 8006aac:	08006beb 	.word	0x08006beb
 8006ab0:	08006b17 	.word	0x08006b17
 8006ab4:	08006ba5 	.word	0x08006ba5
 8006ab8:	08006a69 	.word	0x08006a69
 8006abc:	08006a69 	.word	0x08006a69
 8006ac0:	08006c0d 	.word	0x08006c0d
 8006ac4:	08006a69 	.word	0x08006a69
 8006ac8:	08006b17 	.word	0x08006b17
 8006acc:	08006a69 	.word	0x08006a69
 8006ad0:	08006a69 	.word	0x08006a69
 8006ad4:	08006bad 	.word	0x08006bad
 8006ad8:	6833      	ldr	r3, [r6, #0]
 8006ada:	1d1a      	adds	r2, r3, #4
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	6032      	str	r2, [r6, #0]
 8006ae0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ae4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e09c      	b.n	8006c26 <_printf_i+0x1e6>
 8006aec:	6833      	ldr	r3, [r6, #0]
 8006aee:	6820      	ldr	r0, [r4, #0]
 8006af0:	1d19      	adds	r1, r3, #4
 8006af2:	6031      	str	r1, [r6, #0]
 8006af4:	0606      	lsls	r6, r0, #24
 8006af6:	d501      	bpl.n	8006afc <_printf_i+0xbc>
 8006af8:	681d      	ldr	r5, [r3, #0]
 8006afa:	e003      	b.n	8006b04 <_printf_i+0xc4>
 8006afc:	0645      	lsls	r5, r0, #25
 8006afe:	d5fb      	bpl.n	8006af8 <_printf_i+0xb8>
 8006b00:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006b04:	2d00      	cmp	r5, #0
 8006b06:	da03      	bge.n	8006b10 <_printf_i+0xd0>
 8006b08:	232d      	movs	r3, #45	@ 0x2d
 8006b0a:	426d      	negs	r5, r5
 8006b0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b10:	4858      	ldr	r0, [pc, #352]	@ (8006c74 <_printf_i+0x234>)
 8006b12:	230a      	movs	r3, #10
 8006b14:	e011      	b.n	8006b3a <_printf_i+0xfa>
 8006b16:	6821      	ldr	r1, [r4, #0]
 8006b18:	6833      	ldr	r3, [r6, #0]
 8006b1a:	0608      	lsls	r0, r1, #24
 8006b1c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006b20:	d402      	bmi.n	8006b28 <_printf_i+0xe8>
 8006b22:	0649      	lsls	r1, r1, #25
 8006b24:	bf48      	it	mi
 8006b26:	b2ad      	uxthmi	r5, r5
 8006b28:	2f6f      	cmp	r7, #111	@ 0x6f
 8006b2a:	4852      	ldr	r0, [pc, #328]	@ (8006c74 <_printf_i+0x234>)
 8006b2c:	6033      	str	r3, [r6, #0]
 8006b2e:	bf14      	ite	ne
 8006b30:	230a      	movne	r3, #10
 8006b32:	2308      	moveq	r3, #8
 8006b34:	2100      	movs	r1, #0
 8006b36:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006b3a:	6866      	ldr	r6, [r4, #4]
 8006b3c:	60a6      	str	r6, [r4, #8]
 8006b3e:	2e00      	cmp	r6, #0
 8006b40:	db05      	blt.n	8006b4e <_printf_i+0x10e>
 8006b42:	6821      	ldr	r1, [r4, #0]
 8006b44:	432e      	orrs	r6, r5
 8006b46:	f021 0104 	bic.w	r1, r1, #4
 8006b4a:	6021      	str	r1, [r4, #0]
 8006b4c:	d04b      	beq.n	8006be6 <_printf_i+0x1a6>
 8006b4e:	4616      	mov	r6, r2
 8006b50:	fbb5 f1f3 	udiv	r1, r5, r3
 8006b54:	fb03 5711 	mls	r7, r3, r1, r5
 8006b58:	5dc7      	ldrb	r7, [r0, r7]
 8006b5a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006b5e:	462f      	mov	r7, r5
 8006b60:	42bb      	cmp	r3, r7
 8006b62:	460d      	mov	r5, r1
 8006b64:	d9f4      	bls.n	8006b50 <_printf_i+0x110>
 8006b66:	2b08      	cmp	r3, #8
 8006b68:	d10b      	bne.n	8006b82 <_printf_i+0x142>
 8006b6a:	6823      	ldr	r3, [r4, #0]
 8006b6c:	07df      	lsls	r7, r3, #31
 8006b6e:	d508      	bpl.n	8006b82 <_printf_i+0x142>
 8006b70:	6923      	ldr	r3, [r4, #16]
 8006b72:	6861      	ldr	r1, [r4, #4]
 8006b74:	4299      	cmp	r1, r3
 8006b76:	bfde      	ittt	le
 8006b78:	2330      	movle	r3, #48	@ 0x30
 8006b7a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006b7e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006b82:	1b92      	subs	r2, r2, r6
 8006b84:	6122      	str	r2, [r4, #16]
 8006b86:	f8cd a000 	str.w	sl, [sp]
 8006b8a:	464b      	mov	r3, r9
 8006b8c:	aa03      	add	r2, sp, #12
 8006b8e:	4621      	mov	r1, r4
 8006b90:	4640      	mov	r0, r8
 8006b92:	f7ff fee7 	bl	8006964 <_printf_common>
 8006b96:	3001      	adds	r0, #1
 8006b98:	d14a      	bne.n	8006c30 <_printf_i+0x1f0>
 8006b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8006b9e:	b004      	add	sp, #16
 8006ba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ba4:	6823      	ldr	r3, [r4, #0]
 8006ba6:	f043 0320 	orr.w	r3, r3, #32
 8006baa:	6023      	str	r3, [r4, #0]
 8006bac:	4832      	ldr	r0, [pc, #200]	@ (8006c78 <_printf_i+0x238>)
 8006bae:	2778      	movs	r7, #120	@ 0x78
 8006bb0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006bb4:	6823      	ldr	r3, [r4, #0]
 8006bb6:	6831      	ldr	r1, [r6, #0]
 8006bb8:	061f      	lsls	r7, r3, #24
 8006bba:	f851 5b04 	ldr.w	r5, [r1], #4
 8006bbe:	d402      	bmi.n	8006bc6 <_printf_i+0x186>
 8006bc0:	065f      	lsls	r7, r3, #25
 8006bc2:	bf48      	it	mi
 8006bc4:	b2ad      	uxthmi	r5, r5
 8006bc6:	6031      	str	r1, [r6, #0]
 8006bc8:	07d9      	lsls	r1, r3, #31
 8006bca:	bf44      	itt	mi
 8006bcc:	f043 0320 	orrmi.w	r3, r3, #32
 8006bd0:	6023      	strmi	r3, [r4, #0]
 8006bd2:	b11d      	cbz	r5, 8006bdc <_printf_i+0x19c>
 8006bd4:	2310      	movs	r3, #16
 8006bd6:	e7ad      	b.n	8006b34 <_printf_i+0xf4>
 8006bd8:	4826      	ldr	r0, [pc, #152]	@ (8006c74 <_printf_i+0x234>)
 8006bda:	e7e9      	b.n	8006bb0 <_printf_i+0x170>
 8006bdc:	6823      	ldr	r3, [r4, #0]
 8006bde:	f023 0320 	bic.w	r3, r3, #32
 8006be2:	6023      	str	r3, [r4, #0]
 8006be4:	e7f6      	b.n	8006bd4 <_printf_i+0x194>
 8006be6:	4616      	mov	r6, r2
 8006be8:	e7bd      	b.n	8006b66 <_printf_i+0x126>
 8006bea:	6833      	ldr	r3, [r6, #0]
 8006bec:	6825      	ldr	r5, [r4, #0]
 8006bee:	6961      	ldr	r1, [r4, #20]
 8006bf0:	1d18      	adds	r0, r3, #4
 8006bf2:	6030      	str	r0, [r6, #0]
 8006bf4:	062e      	lsls	r6, r5, #24
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	d501      	bpl.n	8006bfe <_printf_i+0x1be>
 8006bfa:	6019      	str	r1, [r3, #0]
 8006bfc:	e002      	b.n	8006c04 <_printf_i+0x1c4>
 8006bfe:	0668      	lsls	r0, r5, #25
 8006c00:	d5fb      	bpl.n	8006bfa <_printf_i+0x1ba>
 8006c02:	8019      	strh	r1, [r3, #0]
 8006c04:	2300      	movs	r3, #0
 8006c06:	6123      	str	r3, [r4, #16]
 8006c08:	4616      	mov	r6, r2
 8006c0a:	e7bc      	b.n	8006b86 <_printf_i+0x146>
 8006c0c:	6833      	ldr	r3, [r6, #0]
 8006c0e:	1d1a      	adds	r2, r3, #4
 8006c10:	6032      	str	r2, [r6, #0]
 8006c12:	681e      	ldr	r6, [r3, #0]
 8006c14:	6862      	ldr	r2, [r4, #4]
 8006c16:	2100      	movs	r1, #0
 8006c18:	4630      	mov	r0, r6
 8006c1a:	f7f9 fb39 	bl	8000290 <memchr>
 8006c1e:	b108      	cbz	r0, 8006c24 <_printf_i+0x1e4>
 8006c20:	1b80      	subs	r0, r0, r6
 8006c22:	6060      	str	r0, [r4, #4]
 8006c24:	6863      	ldr	r3, [r4, #4]
 8006c26:	6123      	str	r3, [r4, #16]
 8006c28:	2300      	movs	r3, #0
 8006c2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c2e:	e7aa      	b.n	8006b86 <_printf_i+0x146>
 8006c30:	6923      	ldr	r3, [r4, #16]
 8006c32:	4632      	mov	r2, r6
 8006c34:	4649      	mov	r1, r9
 8006c36:	4640      	mov	r0, r8
 8006c38:	47d0      	blx	sl
 8006c3a:	3001      	adds	r0, #1
 8006c3c:	d0ad      	beq.n	8006b9a <_printf_i+0x15a>
 8006c3e:	6823      	ldr	r3, [r4, #0]
 8006c40:	079b      	lsls	r3, r3, #30
 8006c42:	d413      	bmi.n	8006c6c <_printf_i+0x22c>
 8006c44:	68e0      	ldr	r0, [r4, #12]
 8006c46:	9b03      	ldr	r3, [sp, #12]
 8006c48:	4298      	cmp	r0, r3
 8006c4a:	bfb8      	it	lt
 8006c4c:	4618      	movlt	r0, r3
 8006c4e:	e7a6      	b.n	8006b9e <_printf_i+0x15e>
 8006c50:	2301      	movs	r3, #1
 8006c52:	4632      	mov	r2, r6
 8006c54:	4649      	mov	r1, r9
 8006c56:	4640      	mov	r0, r8
 8006c58:	47d0      	blx	sl
 8006c5a:	3001      	adds	r0, #1
 8006c5c:	d09d      	beq.n	8006b9a <_printf_i+0x15a>
 8006c5e:	3501      	adds	r5, #1
 8006c60:	68e3      	ldr	r3, [r4, #12]
 8006c62:	9903      	ldr	r1, [sp, #12]
 8006c64:	1a5b      	subs	r3, r3, r1
 8006c66:	42ab      	cmp	r3, r5
 8006c68:	dcf2      	bgt.n	8006c50 <_printf_i+0x210>
 8006c6a:	e7eb      	b.n	8006c44 <_printf_i+0x204>
 8006c6c:	2500      	movs	r5, #0
 8006c6e:	f104 0619 	add.w	r6, r4, #25
 8006c72:	e7f5      	b.n	8006c60 <_printf_i+0x220>
 8006c74:	0801a4bc 	.word	0x0801a4bc
 8006c78:	0801a4cd 	.word	0x0801a4cd

08006c7c <__swbuf_r>:
 8006c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c7e:	460e      	mov	r6, r1
 8006c80:	4614      	mov	r4, r2
 8006c82:	4605      	mov	r5, r0
 8006c84:	b118      	cbz	r0, 8006c8e <__swbuf_r+0x12>
 8006c86:	6a03      	ldr	r3, [r0, #32]
 8006c88:	b90b      	cbnz	r3, 8006c8e <__swbuf_r+0x12>
 8006c8a:	f7ff fa41 	bl	8006110 <__sinit>
 8006c8e:	69a3      	ldr	r3, [r4, #24]
 8006c90:	60a3      	str	r3, [r4, #8]
 8006c92:	89a3      	ldrh	r3, [r4, #12]
 8006c94:	071a      	lsls	r2, r3, #28
 8006c96:	d501      	bpl.n	8006c9c <__swbuf_r+0x20>
 8006c98:	6923      	ldr	r3, [r4, #16]
 8006c9a:	b943      	cbnz	r3, 8006cae <__swbuf_r+0x32>
 8006c9c:	4621      	mov	r1, r4
 8006c9e:	4628      	mov	r0, r5
 8006ca0:	f000 f82a 	bl	8006cf8 <__swsetup_r>
 8006ca4:	b118      	cbz	r0, 8006cae <__swbuf_r+0x32>
 8006ca6:	f04f 37ff 	mov.w	r7, #4294967295
 8006caa:	4638      	mov	r0, r7
 8006cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cae:	6823      	ldr	r3, [r4, #0]
 8006cb0:	6922      	ldr	r2, [r4, #16]
 8006cb2:	1a98      	subs	r0, r3, r2
 8006cb4:	6963      	ldr	r3, [r4, #20]
 8006cb6:	b2f6      	uxtb	r6, r6
 8006cb8:	4283      	cmp	r3, r0
 8006cba:	4637      	mov	r7, r6
 8006cbc:	dc05      	bgt.n	8006cca <__swbuf_r+0x4e>
 8006cbe:	4621      	mov	r1, r4
 8006cc0:	4628      	mov	r0, r5
 8006cc2:	f7ff fcbd 	bl	8006640 <_fflush_r>
 8006cc6:	2800      	cmp	r0, #0
 8006cc8:	d1ed      	bne.n	8006ca6 <__swbuf_r+0x2a>
 8006cca:	68a3      	ldr	r3, [r4, #8]
 8006ccc:	3b01      	subs	r3, #1
 8006cce:	60a3      	str	r3, [r4, #8]
 8006cd0:	6823      	ldr	r3, [r4, #0]
 8006cd2:	1c5a      	adds	r2, r3, #1
 8006cd4:	6022      	str	r2, [r4, #0]
 8006cd6:	701e      	strb	r6, [r3, #0]
 8006cd8:	6962      	ldr	r2, [r4, #20]
 8006cda:	1c43      	adds	r3, r0, #1
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d004      	beq.n	8006cea <__swbuf_r+0x6e>
 8006ce0:	89a3      	ldrh	r3, [r4, #12]
 8006ce2:	07db      	lsls	r3, r3, #31
 8006ce4:	d5e1      	bpl.n	8006caa <__swbuf_r+0x2e>
 8006ce6:	2e0a      	cmp	r6, #10
 8006ce8:	d1df      	bne.n	8006caa <__swbuf_r+0x2e>
 8006cea:	4621      	mov	r1, r4
 8006cec:	4628      	mov	r0, r5
 8006cee:	f7ff fca7 	bl	8006640 <_fflush_r>
 8006cf2:	2800      	cmp	r0, #0
 8006cf4:	d0d9      	beq.n	8006caa <__swbuf_r+0x2e>
 8006cf6:	e7d6      	b.n	8006ca6 <__swbuf_r+0x2a>

08006cf8 <__swsetup_r>:
 8006cf8:	b538      	push	{r3, r4, r5, lr}
 8006cfa:	4b29      	ldr	r3, [pc, #164]	@ (8006da0 <__swsetup_r+0xa8>)
 8006cfc:	4605      	mov	r5, r0
 8006cfe:	6818      	ldr	r0, [r3, #0]
 8006d00:	460c      	mov	r4, r1
 8006d02:	b118      	cbz	r0, 8006d0c <__swsetup_r+0x14>
 8006d04:	6a03      	ldr	r3, [r0, #32]
 8006d06:	b90b      	cbnz	r3, 8006d0c <__swsetup_r+0x14>
 8006d08:	f7ff fa02 	bl	8006110 <__sinit>
 8006d0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d10:	0719      	lsls	r1, r3, #28
 8006d12:	d422      	bmi.n	8006d5a <__swsetup_r+0x62>
 8006d14:	06da      	lsls	r2, r3, #27
 8006d16:	d407      	bmi.n	8006d28 <__swsetup_r+0x30>
 8006d18:	2209      	movs	r2, #9
 8006d1a:	602a      	str	r2, [r5, #0]
 8006d1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d20:	81a3      	strh	r3, [r4, #12]
 8006d22:	f04f 30ff 	mov.w	r0, #4294967295
 8006d26:	e033      	b.n	8006d90 <__swsetup_r+0x98>
 8006d28:	0758      	lsls	r0, r3, #29
 8006d2a:	d512      	bpl.n	8006d52 <__swsetup_r+0x5a>
 8006d2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006d2e:	b141      	cbz	r1, 8006d42 <__swsetup_r+0x4a>
 8006d30:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006d34:	4299      	cmp	r1, r3
 8006d36:	d002      	beq.n	8006d3e <__swsetup_r+0x46>
 8006d38:	4628      	mov	r0, r5
 8006d3a:	f7ff fafd 	bl	8006338 <_free_r>
 8006d3e:	2300      	movs	r3, #0
 8006d40:	6363      	str	r3, [r4, #52]	@ 0x34
 8006d42:	89a3      	ldrh	r3, [r4, #12]
 8006d44:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006d48:	81a3      	strh	r3, [r4, #12]
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	6063      	str	r3, [r4, #4]
 8006d4e:	6923      	ldr	r3, [r4, #16]
 8006d50:	6023      	str	r3, [r4, #0]
 8006d52:	89a3      	ldrh	r3, [r4, #12]
 8006d54:	f043 0308 	orr.w	r3, r3, #8
 8006d58:	81a3      	strh	r3, [r4, #12]
 8006d5a:	6923      	ldr	r3, [r4, #16]
 8006d5c:	b94b      	cbnz	r3, 8006d72 <__swsetup_r+0x7a>
 8006d5e:	89a3      	ldrh	r3, [r4, #12]
 8006d60:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006d64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d68:	d003      	beq.n	8006d72 <__swsetup_r+0x7a>
 8006d6a:	4621      	mov	r1, r4
 8006d6c:	4628      	mov	r0, r5
 8006d6e:	f000 f883 	bl	8006e78 <__smakebuf_r>
 8006d72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d76:	f013 0201 	ands.w	r2, r3, #1
 8006d7a:	d00a      	beq.n	8006d92 <__swsetup_r+0x9a>
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	60a2      	str	r2, [r4, #8]
 8006d80:	6962      	ldr	r2, [r4, #20]
 8006d82:	4252      	negs	r2, r2
 8006d84:	61a2      	str	r2, [r4, #24]
 8006d86:	6922      	ldr	r2, [r4, #16]
 8006d88:	b942      	cbnz	r2, 8006d9c <__swsetup_r+0xa4>
 8006d8a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006d8e:	d1c5      	bne.n	8006d1c <__swsetup_r+0x24>
 8006d90:	bd38      	pop	{r3, r4, r5, pc}
 8006d92:	0799      	lsls	r1, r3, #30
 8006d94:	bf58      	it	pl
 8006d96:	6962      	ldrpl	r2, [r4, #20]
 8006d98:	60a2      	str	r2, [r4, #8]
 8006d9a:	e7f4      	b.n	8006d86 <__swsetup_r+0x8e>
 8006d9c:	2000      	movs	r0, #0
 8006d9e:	e7f7      	b.n	8006d90 <__swsetup_r+0x98>
 8006da0:	20000020 	.word	0x20000020

08006da4 <_raise_r>:
 8006da4:	291f      	cmp	r1, #31
 8006da6:	b538      	push	{r3, r4, r5, lr}
 8006da8:	4605      	mov	r5, r0
 8006daa:	460c      	mov	r4, r1
 8006dac:	d904      	bls.n	8006db8 <_raise_r+0x14>
 8006dae:	2316      	movs	r3, #22
 8006db0:	6003      	str	r3, [r0, #0]
 8006db2:	f04f 30ff 	mov.w	r0, #4294967295
 8006db6:	bd38      	pop	{r3, r4, r5, pc}
 8006db8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006dba:	b112      	cbz	r2, 8006dc2 <_raise_r+0x1e>
 8006dbc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006dc0:	b94b      	cbnz	r3, 8006dd6 <_raise_r+0x32>
 8006dc2:	4628      	mov	r0, r5
 8006dc4:	f000 f830 	bl	8006e28 <_getpid_r>
 8006dc8:	4622      	mov	r2, r4
 8006dca:	4601      	mov	r1, r0
 8006dcc:	4628      	mov	r0, r5
 8006dce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006dd2:	f000 b817 	b.w	8006e04 <_kill_r>
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d00a      	beq.n	8006df0 <_raise_r+0x4c>
 8006dda:	1c59      	adds	r1, r3, #1
 8006ddc:	d103      	bne.n	8006de6 <_raise_r+0x42>
 8006dde:	2316      	movs	r3, #22
 8006de0:	6003      	str	r3, [r0, #0]
 8006de2:	2001      	movs	r0, #1
 8006de4:	e7e7      	b.n	8006db6 <_raise_r+0x12>
 8006de6:	2100      	movs	r1, #0
 8006de8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006dec:	4620      	mov	r0, r4
 8006dee:	4798      	blx	r3
 8006df0:	2000      	movs	r0, #0
 8006df2:	e7e0      	b.n	8006db6 <_raise_r+0x12>

08006df4 <raise>:
 8006df4:	4b02      	ldr	r3, [pc, #8]	@ (8006e00 <raise+0xc>)
 8006df6:	4601      	mov	r1, r0
 8006df8:	6818      	ldr	r0, [r3, #0]
 8006dfa:	f7ff bfd3 	b.w	8006da4 <_raise_r>
 8006dfe:	bf00      	nop
 8006e00:	20000020 	.word	0x20000020

08006e04 <_kill_r>:
 8006e04:	b538      	push	{r3, r4, r5, lr}
 8006e06:	4d07      	ldr	r5, [pc, #28]	@ (8006e24 <_kill_r+0x20>)
 8006e08:	2300      	movs	r3, #0
 8006e0a:	4604      	mov	r4, r0
 8006e0c:	4608      	mov	r0, r1
 8006e0e:	4611      	mov	r1, r2
 8006e10:	602b      	str	r3, [r5, #0]
 8006e12:	f7fa fd15 	bl	8001840 <_kill>
 8006e16:	1c43      	adds	r3, r0, #1
 8006e18:	d102      	bne.n	8006e20 <_kill_r+0x1c>
 8006e1a:	682b      	ldr	r3, [r5, #0]
 8006e1c:	b103      	cbz	r3, 8006e20 <_kill_r+0x1c>
 8006e1e:	6023      	str	r3, [r4, #0]
 8006e20:	bd38      	pop	{r3, r4, r5, pc}
 8006e22:	bf00      	nop
 8006e24:	20004fd0 	.word	0x20004fd0

08006e28 <_getpid_r>:
 8006e28:	f7fa bd02 	b.w	8001830 <_getpid>

08006e2c <__swhatbuf_r>:
 8006e2c:	b570      	push	{r4, r5, r6, lr}
 8006e2e:	460c      	mov	r4, r1
 8006e30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e34:	2900      	cmp	r1, #0
 8006e36:	b096      	sub	sp, #88	@ 0x58
 8006e38:	4615      	mov	r5, r2
 8006e3a:	461e      	mov	r6, r3
 8006e3c:	da0d      	bge.n	8006e5a <__swhatbuf_r+0x2e>
 8006e3e:	89a3      	ldrh	r3, [r4, #12]
 8006e40:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006e44:	f04f 0100 	mov.w	r1, #0
 8006e48:	bf14      	ite	ne
 8006e4a:	2340      	movne	r3, #64	@ 0x40
 8006e4c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006e50:	2000      	movs	r0, #0
 8006e52:	6031      	str	r1, [r6, #0]
 8006e54:	602b      	str	r3, [r5, #0]
 8006e56:	b016      	add	sp, #88	@ 0x58
 8006e58:	bd70      	pop	{r4, r5, r6, pc}
 8006e5a:	466a      	mov	r2, sp
 8006e5c:	f000 f848 	bl	8006ef0 <_fstat_r>
 8006e60:	2800      	cmp	r0, #0
 8006e62:	dbec      	blt.n	8006e3e <__swhatbuf_r+0x12>
 8006e64:	9901      	ldr	r1, [sp, #4]
 8006e66:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006e6a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006e6e:	4259      	negs	r1, r3
 8006e70:	4159      	adcs	r1, r3
 8006e72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006e76:	e7eb      	b.n	8006e50 <__swhatbuf_r+0x24>

08006e78 <__smakebuf_r>:
 8006e78:	898b      	ldrh	r3, [r1, #12]
 8006e7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e7c:	079d      	lsls	r5, r3, #30
 8006e7e:	4606      	mov	r6, r0
 8006e80:	460c      	mov	r4, r1
 8006e82:	d507      	bpl.n	8006e94 <__smakebuf_r+0x1c>
 8006e84:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006e88:	6023      	str	r3, [r4, #0]
 8006e8a:	6123      	str	r3, [r4, #16]
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	6163      	str	r3, [r4, #20]
 8006e90:	b003      	add	sp, #12
 8006e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e94:	ab01      	add	r3, sp, #4
 8006e96:	466a      	mov	r2, sp
 8006e98:	f7ff ffc8 	bl	8006e2c <__swhatbuf_r>
 8006e9c:	9f00      	ldr	r7, [sp, #0]
 8006e9e:	4605      	mov	r5, r0
 8006ea0:	4639      	mov	r1, r7
 8006ea2:	4630      	mov	r0, r6
 8006ea4:	f7ff fabc 	bl	8006420 <_malloc_r>
 8006ea8:	b948      	cbnz	r0, 8006ebe <__smakebuf_r+0x46>
 8006eaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006eae:	059a      	lsls	r2, r3, #22
 8006eb0:	d4ee      	bmi.n	8006e90 <__smakebuf_r+0x18>
 8006eb2:	f023 0303 	bic.w	r3, r3, #3
 8006eb6:	f043 0302 	orr.w	r3, r3, #2
 8006eba:	81a3      	strh	r3, [r4, #12]
 8006ebc:	e7e2      	b.n	8006e84 <__smakebuf_r+0xc>
 8006ebe:	89a3      	ldrh	r3, [r4, #12]
 8006ec0:	6020      	str	r0, [r4, #0]
 8006ec2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ec6:	81a3      	strh	r3, [r4, #12]
 8006ec8:	9b01      	ldr	r3, [sp, #4]
 8006eca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006ece:	b15b      	cbz	r3, 8006ee8 <__smakebuf_r+0x70>
 8006ed0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ed4:	4630      	mov	r0, r6
 8006ed6:	f000 f81d 	bl	8006f14 <_isatty_r>
 8006eda:	b128      	cbz	r0, 8006ee8 <__smakebuf_r+0x70>
 8006edc:	89a3      	ldrh	r3, [r4, #12]
 8006ede:	f023 0303 	bic.w	r3, r3, #3
 8006ee2:	f043 0301 	orr.w	r3, r3, #1
 8006ee6:	81a3      	strh	r3, [r4, #12]
 8006ee8:	89a3      	ldrh	r3, [r4, #12]
 8006eea:	431d      	orrs	r5, r3
 8006eec:	81a5      	strh	r5, [r4, #12]
 8006eee:	e7cf      	b.n	8006e90 <__smakebuf_r+0x18>

08006ef0 <_fstat_r>:
 8006ef0:	b538      	push	{r3, r4, r5, lr}
 8006ef2:	4d07      	ldr	r5, [pc, #28]	@ (8006f10 <_fstat_r+0x20>)
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	4604      	mov	r4, r0
 8006ef8:	4608      	mov	r0, r1
 8006efa:	4611      	mov	r1, r2
 8006efc:	602b      	str	r3, [r5, #0]
 8006efe:	f7fa fcff 	bl	8001900 <_fstat>
 8006f02:	1c43      	adds	r3, r0, #1
 8006f04:	d102      	bne.n	8006f0c <_fstat_r+0x1c>
 8006f06:	682b      	ldr	r3, [r5, #0]
 8006f08:	b103      	cbz	r3, 8006f0c <_fstat_r+0x1c>
 8006f0a:	6023      	str	r3, [r4, #0]
 8006f0c:	bd38      	pop	{r3, r4, r5, pc}
 8006f0e:	bf00      	nop
 8006f10:	20004fd0 	.word	0x20004fd0

08006f14 <_isatty_r>:
 8006f14:	b538      	push	{r3, r4, r5, lr}
 8006f16:	4d06      	ldr	r5, [pc, #24]	@ (8006f30 <_isatty_r+0x1c>)
 8006f18:	2300      	movs	r3, #0
 8006f1a:	4604      	mov	r4, r0
 8006f1c:	4608      	mov	r0, r1
 8006f1e:	602b      	str	r3, [r5, #0]
 8006f20:	f7fa fcfe 	bl	8001920 <_isatty>
 8006f24:	1c43      	adds	r3, r0, #1
 8006f26:	d102      	bne.n	8006f2e <_isatty_r+0x1a>
 8006f28:	682b      	ldr	r3, [r5, #0]
 8006f2a:	b103      	cbz	r3, 8006f2e <_isatty_r+0x1a>
 8006f2c:	6023      	str	r3, [r4, #0]
 8006f2e:	bd38      	pop	{r3, r4, r5, pc}
 8006f30:	20004fd0 	.word	0x20004fd0

08006f34 <sqrtf>:
 8006f34:	b508      	push	{r3, lr}
 8006f36:	ed2d 8b02 	vpush	{d8}
 8006f3a:	eeb0 8a40 	vmov.f32	s16, s0
 8006f3e:	f000 f817 	bl	8006f70 <__ieee754_sqrtf>
 8006f42:	eeb4 8a48 	vcmp.f32	s16, s16
 8006f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f4a:	d60c      	bvs.n	8006f66 <sqrtf+0x32>
 8006f4c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8006f6c <sqrtf+0x38>
 8006f50:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8006f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f58:	d505      	bpl.n	8006f66 <sqrtf+0x32>
 8006f5a:	f7ff f9a1 	bl	80062a0 <__errno>
 8006f5e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8006f62:	2321      	movs	r3, #33	@ 0x21
 8006f64:	6003      	str	r3, [r0, #0]
 8006f66:	ecbd 8b02 	vpop	{d8}
 8006f6a:	bd08      	pop	{r3, pc}
 8006f6c:	00000000 	.word	0x00000000

08006f70 <__ieee754_sqrtf>:
 8006f70:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8006f74:	4770      	bx	lr
	...

08006f78 <_init>:
 8006f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f7a:	bf00      	nop
 8006f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f7e:	bc08      	pop	{r3}
 8006f80:	469e      	mov	lr, r3
 8006f82:	4770      	bx	lr

08006f84 <_fini>:
 8006f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f86:	bf00      	nop
 8006f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f8a:	bc08      	pop	{r3}
 8006f8c:	469e      	mov	lr, r3
 8006f8e:	4770      	bx	lr
