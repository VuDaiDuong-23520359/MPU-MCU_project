
STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005178  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08005300  08005300  00006300  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054f0  080054f0  0000700c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080054f0  080054f0  000064f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080054f8  080054f8  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054f8  080054f8  000064f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080054fc  080054fc  000064fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005500  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000700c  2**0
                  CONTENTS
 10 .bss          000002f4  2000000c  2000000c  0000700c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000300  20000300  0000700c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000093fb  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018e3  00000000  00000000  00010437  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a28  00000000  00000000  00011d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007d9  00000000  00000000  00012748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020748  00000000  00000000  00012f21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b5f5  00000000  00000000  00033669  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8bca  00000000  00000000  0003ec5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00107828  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002e1c  00000000  00000000  0010786c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000042  00000000  00000000  0010a688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080052e8 	.word	0x080052e8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080052e8 	.word	0x080052e8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_d2f>:
 8000b04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b0c:	bf24      	itt	cs
 8000b0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b16:	d90d      	bls.n	8000b34 <__aeabi_d2f+0x30>
 8000b18:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b24:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b2c:	bf08      	it	eq
 8000b2e:	f020 0001 	biceq.w	r0, r0, #1
 8000b32:	4770      	bx	lr
 8000b34:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b38:	d121      	bne.n	8000b7e <__aeabi_d2f+0x7a>
 8000b3a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b3e:	bfbc      	itt	lt
 8000b40:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b44:	4770      	bxlt	lr
 8000b46:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4e:	f1c2 0218 	rsb	r2, r2, #24
 8000b52:	f1c2 0c20 	rsb	ip, r2, #32
 8000b56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5e:	bf18      	it	ne
 8000b60:	f040 0001 	orrne.w	r0, r0, #1
 8000b64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b70:	ea40 000c 	orr.w	r0, r0, ip
 8000b74:	fa23 f302 	lsr.w	r3, r3, r2
 8000b78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b7c:	e7cc      	b.n	8000b18 <__aeabi_d2f+0x14>
 8000b7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b82:	d107      	bne.n	8000b94 <__aeabi_d2f+0x90>
 8000b84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b88:	bf1e      	ittt	ne
 8000b8a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b8e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b92:	4770      	bxne	lr
 8000b94:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_uldivmod>:
 8000ba4:	b953      	cbnz	r3, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba6:	b94a      	cbnz	r2, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba8:	2900      	cmp	r1, #0
 8000baa:	bf08      	it	eq
 8000bac:	2800      	cmpeq	r0, #0
 8000bae:	bf1c      	itt	ne
 8000bb0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb8:	f000 b988 	b.w	8000ecc <__aeabi_idiv0>
 8000bbc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc4:	f000 f806 	bl	8000bd4 <__udivmoddi4>
 8000bc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd0:	b004      	add	sp, #16
 8000bd2:	4770      	bx	lr

08000bd4 <__udivmoddi4>:
 8000bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd8:	9d08      	ldr	r5, [sp, #32]
 8000bda:	468e      	mov	lr, r1
 8000bdc:	4604      	mov	r4, r0
 8000bde:	4688      	mov	r8, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14a      	bne.n	8000c7a <__udivmoddi4+0xa6>
 8000be4:	428a      	cmp	r2, r1
 8000be6:	4617      	mov	r7, r2
 8000be8:	d962      	bls.n	8000cb0 <__udivmoddi4+0xdc>
 8000bea:	fab2 f682 	clz	r6, r2
 8000bee:	b14e      	cbz	r6, 8000c04 <__udivmoddi4+0x30>
 8000bf0:	f1c6 0320 	rsb	r3, r6, #32
 8000bf4:	fa01 f806 	lsl.w	r8, r1, r6
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	40b7      	lsls	r7, r6
 8000bfe:	ea43 0808 	orr.w	r8, r3, r8
 8000c02:	40b4      	lsls	r4, r6
 8000c04:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c08:	fa1f fc87 	uxth.w	ip, r7
 8000c0c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c10:	0c23      	lsrs	r3, r4, #16
 8000c12:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c16:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1a:	fb01 f20c 	mul.w	r2, r1, ip
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	d909      	bls.n	8000c36 <__udivmoddi4+0x62>
 8000c22:	18fb      	adds	r3, r7, r3
 8000c24:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c28:	f080 80ea 	bcs.w	8000e00 <__udivmoddi4+0x22c>
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	f240 80e7 	bls.w	8000e00 <__udivmoddi4+0x22c>
 8000c32:	3902      	subs	r1, #2
 8000c34:	443b      	add	r3, r7
 8000c36:	1a9a      	subs	r2, r3, r2
 8000c38:	b2a3      	uxth	r3, r4
 8000c3a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c3e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c46:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4a:	459c      	cmp	ip, r3
 8000c4c:	d909      	bls.n	8000c62 <__udivmoddi4+0x8e>
 8000c4e:	18fb      	adds	r3, r7, r3
 8000c50:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c54:	f080 80d6 	bcs.w	8000e04 <__udivmoddi4+0x230>
 8000c58:	459c      	cmp	ip, r3
 8000c5a:	f240 80d3 	bls.w	8000e04 <__udivmoddi4+0x230>
 8000c5e:	443b      	add	r3, r7
 8000c60:	3802      	subs	r0, #2
 8000c62:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c66:	eba3 030c 	sub.w	r3, r3, ip
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	b11d      	cbz	r5, 8000c76 <__udivmoddi4+0xa2>
 8000c6e:	40f3      	lsrs	r3, r6
 8000c70:	2200      	movs	r2, #0
 8000c72:	e9c5 3200 	strd	r3, r2, [r5]
 8000c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7a:	428b      	cmp	r3, r1
 8000c7c:	d905      	bls.n	8000c8a <__udivmoddi4+0xb6>
 8000c7e:	b10d      	cbz	r5, 8000c84 <__udivmoddi4+0xb0>
 8000c80:	e9c5 0100 	strd	r0, r1, [r5]
 8000c84:	2100      	movs	r1, #0
 8000c86:	4608      	mov	r0, r1
 8000c88:	e7f5      	b.n	8000c76 <__udivmoddi4+0xa2>
 8000c8a:	fab3 f183 	clz	r1, r3
 8000c8e:	2900      	cmp	r1, #0
 8000c90:	d146      	bne.n	8000d20 <__udivmoddi4+0x14c>
 8000c92:	4573      	cmp	r3, lr
 8000c94:	d302      	bcc.n	8000c9c <__udivmoddi4+0xc8>
 8000c96:	4282      	cmp	r2, r0
 8000c98:	f200 8105 	bhi.w	8000ea6 <__udivmoddi4+0x2d2>
 8000c9c:	1a84      	subs	r4, r0, r2
 8000c9e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	4690      	mov	r8, r2
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	d0e5      	beq.n	8000c76 <__udivmoddi4+0xa2>
 8000caa:	e9c5 4800 	strd	r4, r8, [r5]
 8000cae:	e7e2      	b.n	8000c76 <__udivmoddi4+0xa2>
 8000cb0:	2a00      	cmp	r2, #0
 8000cb2:	f000 8090 	beq.w	8000dd6 <__udivmoddi4+0x202>
 8000cb6:	fab2 f682 	clz	r6, r2
 8000cba:	2e00      	cmp	r6, #0
 8000cbc:	f040 80a4 	bne.w	8000e08 <__udivmoddi4+0x234>
 8000cc0:	1a8a      	subs	r2, r1, r2
 8000cc2:	0c03      	lsrs	r3, r0, #16
 8000cc4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cc8:	b280      	uxth	r0, r0
 8000cca:	b2bc      	uxth	r4, r7
 8000ccc:	2101      	movs	r1, #1
 8000cce:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd2:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cda:	fb04 f20c 	mul.w	r2, r4, ip
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	d907      	bls.n	8000cf2 <__udivmoddi4+0x11e>
 8000ce2:	18fb      	adds	r3, r7, r3
 8000ce4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000ce8:	d202      	bcs.n	8000cf0 <__udivmoddi4+0x11c>
 8000cea:	429a      	cmp	r2, r3
 8000cec:	f200 80e0 	bhi.w	8000eb0 <__udivmoddi4+0x2dc>
 8000cf0:	46c4      	mov	ip, r8
 8000cf2:	1a9b      	subs	r3, r3, r2
 8000cf4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cf8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000cfc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d00:	fb02 f404 	mul.w	r4, r2, r4
 8000d04:	429c      	cmp	r4, r3
 8000d06:	d907      	bls.n	8000d18 <__udivmoddi4+0x144>
 8000d08:	18fb      	adds	r3, r7, r3
 8000d0a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d0e:	d202      	bcs.n	8000d16 <__udivmoddi4+0x142>
 8000d10:	429c      	cmp	r4, r3
 8000d12:	f200 80ca 	bhi.w	8000eaa <__udivmoddi4+0x2d6>
 8000d16:	4602      	mov	r2, r0
 8000d18:	1b1b      	subs	r3, r3, r4
 8000d1a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d1e:	e7a5      	b.n	8000c6c <__udivmoddi4+0x98>
 8000d20:	f1c1 0620 	rsb	r6, r1, #32
 8000d24:	408b      	lsls	r3, r1
 8000d26:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2a:	431f      	orrs	r7, r3
 8000d2c:	fa0e f401 	lsl.w	r4, lr, r1
 8000d30:	fa20 f306 	lsr.w	r3, r0, r6
 8000d34:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d38:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d3c:	4323      	orrs	r3, r4
 8000d3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d42:	fa1f fc87 	uxth.w	ip, r7
 8000d46:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4a:	0c1c      	lsrs	r4, r3, #16
 8000d4c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d50:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d54:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x1a0>
 8000d60:	193c      	adds	r4, r7, r4
 8000d62:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d66:	f080 809c 	bcs.w	8000ea2 <__udivmoddi4+0x2ce>
 8000d6a:	45a6      	cmp	lr, r4
 8000d6c:	f240 8099 	bls.w	8000ea2 <__udivmoddi4+0x2ce>
 8000d70:	3802      	subs	r0, #2
 8000d72:	443c      	add	r4, r7
 8000d74:	eba4 040e 	sub.w	r4, r4, lr
 8000d78:	fa1f fe83 	uxth.w	lr, r3
 8000d7c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d80:	fb09 4413 	mls	r4, r9, r3, r4
 8000d84:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d88:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d8c:	45a4      	cmp	ip, r4
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x1ce>
 8000d90:	193c      	adds	r4, r7, r4
 8000d92:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d96:	f080 8082 	bcs.w	8000e9e <__udivmoddi4+0x2ca>
 8000d9a:	45a4      	cmp	ip, r4
 8000d9c:	d97f      	bls.n	8000e9e <__udivmoddi4+0x2ca>
 8000d9e:	3b02      	subs	r3, #2
 8000da0:	443c      	add	r4, r7
 8000da2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000da6:	eba4 040c 	sub.w	r4, r4, ip
 8000daa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dae:	4564      	cmp	r4, ip
 8000db0:	4673      	mov	r3, lr
 8000db2:	46e1      	mov	r9, ip
 8000db4:	d362      	bcc.n	8000e7c <__udivmoddi4+0x2a8>
 8000db6:	d05f      	beq.n	8000e78 <__udivmoddi4+0x2a4>
 8000db8:	b15d      	cbz	r5, 8000dd2 <__udivmoddi4+0x1fe>
 8000dba:	ebb8 0203 	subs.w	r2, r8, r3
 8000dbe:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc2:	fa04 f606 	lsl.w	r6, r4, r6
 8000dc6:	fa22 f301 	lsr.w	r3, r2, r1
 8000dca:	431e      	orrs	r6, r3
 8000dcc:	40cc      	lsrs	r4, r1
 8000dce:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	e74f      	b.n	8000c76 <__udivmoddi4+0xa2>
 8000dd6:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dda:	0c01      	lsrs	r1, r0, #16
 8000ddc:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de0:	b280      	uxth	r0, r0
 8000de2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000de6:	463b      	mov	r3, r7
 8000de8:	4638      	mov	r0, r7
 8000dea:	463c      	mov	r4, r7
 8000dec:	46b8      	mov	r8, r7
 8000dee:	46be      	mov	lr, r7
 8000df0:	2620      	movs	r6, #32
 8000df2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000df6:	eba2 0208 	sub.w	r2, r2, r8
 8000dfa:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000dfe:	e766      	b.n	8000cce <__udivmoddi4+0xfa>
 8000e00:	4601      	mov	r1, r0
 8000e02:	e718      	b.n	8000c36 <__udivmoddi4+0x62>
 8000e04:	4610      	mov	r0, r2
 8000e06:	e72c      	b.n	8000c62 <__udivmoddi4+0x8e>
 8000e08:	f1c6 0220 	rsb	r2, r6, #32
 8000e0c:	fa2e f302 	lsr.w	r3, lr, r2
 8000e10:	40b7      	lsls	r7, r6
 8000e12:	40b1      	lsls	r1, r6
 8000e14:	fa20 f202 	lsr.w	r2, r0, r2
 8000e18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1c:	430a      	orrs	r2, r1
 8000e1e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e22:	b2bc      	uxth	r4, r7
 8000e24:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e28:	0c11      	lsrs	r1, r2, #16
 8000e2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e2e:	fb08 f904 	mul.w	r9, r8, r4
 8000e32:	40b0      	lsls	r0, r6
 8000e34:	4589      	cmp	r9, r1
 8000e36:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3a:	b280      	uxth	r0, r0
 8000e3c:	d93e      	bls.n	8000ebc <__udivmoddi4+0x2e8>
 8000e3e:	1879      	adds	r1, r7, r1
 8000e40:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e44:	d201      	bcs.n	8000e4a <__udivmoddi4+0x276>
 8000e46:	4589      	cmp	r9, r1
 8000e48:	d81f      	bhi.n	8000e8a <__udivmoddi4+0x2b6>
 8000e4a:	eba1 0109 	sub.w	r1, r1, r9
 8000e4e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e52:	fb09 f804 	mul.w	r8, r9, r4
 8000e56:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5a:	b292      	uxth	r2, r2
 8000e5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e60:	4542      	cmp	r2, r8
 8000e62:	d229      	bcs.n	8000eb8 <__udivmoddi4+0x2e4>
 8000e64:	18ba      	adds	r2, r7, r2
 8000e66:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e6a:	d2c4      	bcs.n	8000df6 <__udivmoddi4+0x222>
 8000e6c:	4542      	cmp	r2, r8
 8000e6e:	d2c2      	bcs.n	8000df6 <__udivmoddi4+0x222>
 8000e70:	f1a9 0102 	sub.w	r1, r9, #2
 8000e74:	443a      	add	r2, r7
 8000e76:	e7be      	b.n	8000df6 <__udivmoddi4+0x222>
 8000e78:	45f0      	cmp	r8, lr
 8000e7a:	d29d      	bcs.n	8000db8 <__udivmoddi4+0x1e4>
 8000e7c:	ebbe 0302 	subs.w	r3, lr, r2
 8000e80:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e84:	3801      	subs	r0, #1
 8000e86:	46e1      	mov	r9, ip
 8000e88:	e796      	b.n	8000db8 <__udivmoddi4+0x1e4>
 8000e8a:	eba7 0909 	sub.w	r9, r7, r9
 8000e8e:	4449      	add	r1, r9
 8000e90:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e94:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e98:	fb09 f804 	mul.w	r8, r9, r4
 8000e9c:	e7db      	b.n	8000e56 <__udivmoddi4+0x282>
 8000e9e:	4673      	mov	r3, lr
 8000ea0:	e77f      	b.n	8000da2 <__udivmoddi4+0x1ce>
 8000ea2:	4650      	mov	r0, sl
 8000ea4:	e766      	b.n	8000d74 <__udivmoddi4+0x1a0>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e6fd      	b.n	8000ca6 <__udivmoddi4+0xd2>
 8000eaa:	443b      	add	r3, r7
 8000eac:	3a02      	subs	r2, #2
 8000eae:	e733      	b.n	8000d18 <__udivmoddi4+0x144>
 8000eb0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb4:	443b      	add	r3, r7
 8000eb6:	e71c      	b.n	8000cf2 <__udivmoddi4+0x11e>
 8000eb8:	4649      	mov	r1, r9
 8000eba:	e79c      	b.n	8000df6 <__udivmoddi4+0x222>
 8000ebc:	eba1 0109 	sub.w	r1, r1, r9
 8000ec0:	46c4      	mov	ip, r8
 8000ec2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ec6:	fb09 f804 	mul.w	r8, r9, r4
 8000eca:	e7c4      	b.n	8000e56 <__udivmoddi4+0x282>

08000ecc <__aeabi_idiv0>:
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop

08000ed0 <Set_LED>:
	HAL_TIMEx_PWMN_Stop_DMA(&htim1, TIM_CHANNEL_1);
	datasentflag = 1;
}

void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b085      	sub	sp, #20
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	607a      	str	r2, [r7, #4]
 8000edc:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	b2d9      	uxtb	r1, r3
 8000ee2:	4a11      	ldr	r2, [pc, #68]	@ (8000f28 <Set_LED+0x58>)
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	b2d9      	uxtb	r1, r3
 8000eee:	4a0e      	ldr	r2, [pc, #56]	@ (8000f28 <Set_LED+0x58>)
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	4413      	add	r3, r2
 8000ef6:	460a      	mov	r2, r1
 8000ef8:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	b2d9      	uxtb	r1, r3
 8000efe:	4a0a      	ldr	r2, [pc, #40]	@ (8000f28 <Set_LED+0x58>)
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	4413      	add	r3, r2
 8000f06:	460a      	mov	r2, r1
 8000f08:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	b2d9      	uxtb	r1, r3
 8000f0e:	4a06      	ldr	r2, [pc, #24]	@ (8000f28 <Set_LED+0x58>)
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	4413      	add	r3, r2
 8000f16:	460a      	mov	r2, r1
 8000f18:	70da      	strb	r2, [r3, #3]
}
 8000f1a:	bf00      	nop
 8000f1c:	3714      	adds	r7, #20
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	200000d0 	.word	0x200000d0
 8000f2c:	00000000 	.word	0x00000000

08000f30 <Set_Brightness>:

void Set_Brightness (int brightness)  // 0-45
{
 8000f30:	b5b0      	push	{r4, r5, r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS

	if (brightness > 45) brightness = 45;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2b2d      	cmp	r3, #45	@ 0x2d
 8000f3c:	dd01      	ble.n	8000f42 <Set_Brightness+0x12>
 8000f3e:	232d      	movs	r3, #45	@ 0x2d
 8000f40:	607b      	str	r3, [r7, #4]
	for (int i=0; i<MAX_LED; i++)
 8000f42:	2300      	movs	r3, #0
 8000f44:	617b      	str	r3, [r7, #20]
 8000f46:	e060      	b.n	800100a <Set_Brightness+0xda>
	{
		LED_Mod[i][0] = LED_Data[i][0];
 8000f48:	4a37      	ldr	r2, [pc, #220]	@ (8001028 <Set_Brightness+0xf8>)
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 8000f50:	4a36      	ldr	r2, [pc, #216]	@ (800102c <Set_Brightness+0xfc>)
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		for (int j=1; j<4; j++)
 8000f58:	2301      	movs	r3, #1
 8000f5a:	613b      	str	r3, [r7, #16]
 8000f5c:	e04f      	b.n	8000ffe <Set_Brightness+0xce>
		{
			float angle = 90-brightness;  // in degrees
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	f1c3 035a 	rsb	r3, r3, #90	@ 0x5a
 8000f64:	ee07 3a90 	vmov	s15, r3
 8000f68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f6c:	edc7 7a03 	vstr	s15, [r7, #12]
			angle = angle*PI / 180;  // in rad
 8000f70:	68f8      	ldr	r0, [r7, #12]
 8000f72:	f7ff fa8d 	bl	8000490 <__aeabi_f2d>
 8000f76:	a32a      	add	r3, pc, #168	@ (adr r3, 8001020 <Set_Brightness+0xf0>)
 8000f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f7c:	f7ff fae0 	bl	8000540 <__aeabi_dmul>
 8000f80:	4602      	mov	r2, r0
 8000f82:	460b      	mov	r3, r1
 8000f84:	4610      	mov	r0, r2
 8000f86:	4619      	mov	r1, r3
 8000f88:	f04f 0200 	mov.w	r2, #0
 8000f8c:	4b28      	ldr	r3, [pc, #160]	@ (8001030 <Set_Brightness+0x100>)
 8000f8e:	f7ff fc01 	bl	8000794 <__aeabi_ddiv>
 8000f92:	4602      	mov	r2, r0
 8000f94:	460b      	mov	r3, r1
 8000f96:	4610      	mov	r0, r2
 8000f98:	4619      	mov	r1, r3
 8000f9a:	f7ff fdb3 	bl	8000b04 <__aeabi_d2f>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	60fb      	str	r3, [r7, #12]
			LED_Mod[i][j] = (LED_Data[i][j])/(tan(angle));
 8000fa2:	4a21      	ldr	r2, [pc, #132]	@ (8001028 <Set_Brightness+0xf8>)
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	441a      	add	r2, r3
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	4413      	add	r3, r2
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff fa5b 	bl	800046c <__aeabi_i2d>
 8000fb6:	4604      	mov	r4, r0
 8000fb8:	460d      	mov	r5, r1
 8000fba:	68f8      	ldr	r0, [r7, #12]
 8000fbc:	f7ff fa68 	bl	8000490 <__aeabi_f2d>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	ec43 2b10 	vmov	d0, r2, r3
 8000fc8:	f003 f90a 	bl	80041e0 <tan>
 8000fcc:	ec53 2b10 	vmov	r2, r3, d0
 8000fd0:	4620      	mov	r0, r4
 8000fd2:	4629      	mov	r1, r5
 8000fd4:	f7ff fbde 	bl	8000794 <__aeabi_ddiv>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	460b      	mov	r3, r1
 8000fdc:	4610      	mov	r0, r2
 8000fde:	4619      	mov	r1, r3
 8000fe0:	f7ff fd70 	bl	8000ac4 <__aeabi_d2uiz>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	b2d9      	uxtb	r1, r3
 8000fe8:	4a10      	ldr	r2, [pc, #64]	@ (800102c <Set_Brightness+0xfc>)
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	441a      	add	r2, r3
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	460a      	mov	r2, r1
 8000ff6:	701a      	strb	r2, [r3, #0]
		for (int j=1; j<4; j++)
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	613b      	str	r3, [r7, #16]
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	2b03      	cmp	r3, #3
 8001002:	ddac      	ble.n	8000f5e <Set_Brightness+0x2e>
	for (int i=0; i<MAX_LED; i++)
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	3301      	adds	r3, #1
 8001008:	617b      	str	r3, [r7, #20]
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	2b07      	cmp	r3, #7
 800100e:	dd9b      	ble.n	8000f48 <Set_Brightness+0x18>
		}
	}

#endif

}
 8001010:	bf00      	nop
 8001012:	bf00      	nop
 8001014:	3718      	adds	r7, #24
 8001016:	46bd      	mov	sp, r7
 8001018:	bdb0      	pop	{r4, r5, r7, pc}
 800101a:	bf00      	nop
 800101c:	f3af 8000 	nop.w
 8001020:	53c8d4f1 	.word	0x53c8d4f1
 8001024:	400921fb 	.word	0x400921fb
 8001028:	200000d0 	.word	0x200000d0
 800102c:	200000f0 	.word	0x200000f0
 8001030:	40668000 	.word	0x40668000

08001034 <WS2812_Send>:

void WS2812_Send (void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 800103a:	2300      	movs	r3, #0
 800103c:	617b      	str	r3, [r7, #20]
	uint32_t color;


	for (int i= 0; i<MAX_LED; i++)
 800103e:	2300      	movs	r3, #0
 8001040:	613b      	str	r3, [r7, #16]
 8001042:	e036      	b.n	80010b2 <WS2812_Send+0x7e>
	{
#if USE_BRIGHTNESS
		color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
 8001044:	4a2e      	ldr	r2, [pc, #184]	@ (8001100 <WS2812_Send+0xcc>)
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	4413      	add	r3, r2
 800104c:	785b      	ldrb	r3, [r3, #1]
 800104e:	041a      	lsls	r2, r3, #16
 8001050:	492b      	ldr	r1, [pc, #172]	@ (8001100 <WS2812_Send+0xcc>)
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	440b      	add	r3, r1
 8001058:	789b      	ldrb	r3, [r3, #2]
 800105a:	021b      	lsls	r3, r3, #8
 800105c:	431a      	orrs	r2, r3
 800105e:	4928      	ldr	r1, [pc, #160]	@ (8001100 <WS2812_Send+0xcc>)
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	440b      	add	r3, r1
 8001066:	78db      	ldrb	r3, [r3, #3]
 8001068:	4313      	orrs	r3, r2
 800106a:	607b      	str	r3, [r7, #4]
#else
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
#endif

		for (int i=23; i>=0; i--)
 800106c:	2317      	movs	r3, #23
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	e019      	b.n	80010a6 <WS2812_Send+0x72>
		{
			if (color&(1<<i))
 8001072:	2201      	movs	r2, #1
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	461a      	mov	r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	4013      	ands	r3, r2
 8001080:	2b00      	cmp	r3, #0
 8001082:	d005      	beq.n	8001090 <WS2812_Send+0x5c>
			{
				pwmData[indx] = 60;  // 2/3 of 90
 8001084:	4a1f      	ldr	r2, [pc, #124]	@ (8001104 <WS2812_Send+0xd0>)
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	213c      	movs	r1, #60	@ 0x3c
 800108a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800108e:	e004      	b.n	800109a <WS2812_Send+0x66>
			}

			else pwmData[indx] = 30;  // 1/3 of 90
 8001090:	4a1c      	ldr	r2, [pc, #112]	@ (8001104 <WS2812_Send+0xd0>)
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	211e      	movs	r1, #30
 8001096:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			indx++;
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	3301      	adds	r3, #1
 800109e:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	3b01      	subs	r3, #1
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	dae2      	bge.n	8001072 <WS2812_Send+0x3e>
	for (int i= 0; i<MAX_LED; i++)
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	3301      	adds	r3, #1
 80010b0:	613b      	str	r3, [r7, #16]
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	2b07      	cmp	r3, #7
 80010b6:	ddc5      	ble.n	8001044 <WS2812_Send+0x10>
		}

	}

	for (int i=0; i<50; i++)
 80010b8:	2300      	movs	r3, #0
 80010ba:	60bb      	str	r3, [r7, #8]
 80010bc:	e00a      	b.n	80010d4 <WS2812_Send+0xa0>
	{
		pwmData[indx] = 0;
 80010be:	4a11      	ldr	r2, [pc, #68]	@ (8001104 <WS2812_Send+0xd0>)
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	2100      	movs	r1, #0
 80010c4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	3301      	adds	r3, #1
 80010cc:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	3301      	adds	r3, #1
 80010d2:	60bb      	str	r3, [r7, #8]
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	2b31      	cmp	r3, #49	@ 0x31
 80010d8:	ddf1      	ble.n	80010be <WS2812_Send+0x8a>
	}

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	b29b      	uxth	r3, r3
 80010de:	4a09      	ldr	r2, [pc, #36]	@ (8001104 <WS2812_Send+0xd0>)
 80010e0:	2100      	movs	r1, #0
 80010e2:	4809      	ldr	r0, [pc, #36]	@ (8001108 <WS2812_Send+0xd4>)
 80010e4:	f002 f82a 	bl	800313c <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag){};
 80010e8:	bf00      	nop
 80010ea:	4b08      	ldr	r3, [pc, #32]	@ (800110c <WS2812_Send+0xd8>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d0fb      	beq.n	80010ea <WS2812_Send+0xb6>
	datasentflag = 0;
 80010f2:	4b06      	ldr	r3, [pc, #24]	@ (800110c <WS2812_Send+0xd8>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
}
 80010f8:	bf00      	nop
 80010fa:	3718      	adds	r7, #24
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	200000f0 	.word	0x200000f0
 8001104:	20000114 	.word	0x20000114
 8001108:	20000028 	.word	0x20000028
 800110c:	20000110 	.word	0x20000110

08001110 <rainbow_effect>:

uint8_t rainbow_effect() {
 8001110:	b5b0      	push	{r4, r5, r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
    // Options: rainbowlen=50, toLeft=false,
  //if(millis() - strip_0.effStart < 22 * (strip_0.effStep)) return 0x00;
  float factor1, factor2;
  uint16_t ind;

  for(uint16_t j=0;j<54;j++) {
 8001116:	2300      	movs	r3, #0
 8001118:	81fb      	strh	r3, [r7, #14]
 800111a:	e196      	b.n	800144a <rainbow_effect+0x33a>
    ind = 60 - (int16_t)(effStep - j * 1.2) % 60;
 800111c:	4bd7      	ldr	r3, [pc, #860]	@ (800147c <rainbow_effect+0x36c>)
 800111e:	881b      	ldrh	r3, [r3, #0]
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff f9a3 	bl	800046c <__aeabi_i2d>
 8001126:	4604      	mov	r4, r0
 8001128:	460d      	mov	r5, r1
 800112a:	89fb      	ldrh	r3, [r7, #14]
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff f99d 	bl	800046c <__aeabi_i2d>
 8001132:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8001136:	4bd2      	ldr	r3, [pc, #840]	@ (8001480 <rainbow_effect+0x370>)
 8001138:	f7ff fa02 	bl	8000540 <__aeabi_dmul>
 800113c:	4602      	mov	r2, r0
 800113e:	460b      	mov	r3, r1
 8001140:	4620      	mov	r0, r4
 8001142:	4629      	mov	r1, r5
 8001144:	f7ff f844 	bl	80001d0 <__aeabi_dsub>
 8001148:	4602      	mov	r2, r0
 800114a:	460b      	mov	r3, r1
 800114c:	4610      	mov	r0, r2
 800114e:	4619      	mov	r1, r3
 8001150:	f7ff fc90 	bl	8000a74 <__aeabi_d2iz>
 8001154:	4603      	mov	r3, r0
 8001156:	b21a      	sxth	r2, r3
 8001158:	4bca      	ldr	r3, [pc, #808]	@ (8001484 <rainbow_effect+0x374>)
 800115a:	fb83 1302 	smull	r1, r3, r3, r2
 800115e:	4413      	add	r3, r2
 8001160:	1159      	asrs	r1, r3, #5
 8001162:	17d3      	asrs	r3, r2, #31
 8001164:	1ac9      	subs	r1, r1, r3
 8001166:	460b      	mov	r3, r1
 8001168:	011b      	lsls	r3, r3, #4
 800116a:	1a5b      	subs	r3, r3, r1
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	1ad3      	subs	r3, r2, r3
 8001170:	b21b      	sxth	r3, r3
 8001172:	b29b      	uxth	r3, r3
 8001174:	f1c3 033c 	rsb	r3, r3, #60	@ 0x3c
 8001178:	81bb      	strh	r3, [r7, #12]
    switch((int)((ind % 60) / 20)) {
 800117a:	89ba      	ldrh	r2, [r7, #12]
 800117c:	4bc1      	ldr	r3, [pc, #772]	@ (8001484 <rainbow_effect+0x374>)
 800117e:	fba3 1302 	umull	r1, r3, r3, r2
 8001182:	0959      	lsrs	r1, r3, #5
 8001184:	460b      	mov	r3, r1
 8001186:	011b      	lsls	r3, r3, #4
 8001188:	1a5b      	subs	r3, r3, r1
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	b29b      	uxth	r3, r3
 8001190:	4abd      	ldr	r2, [pc, #756]	@ (8001488 <rainbow_effect+0x378>)
 8001192:	fba2 2303 	umull	r2, r3, r2, r3
 8001196:	091b      	lsrs	r3, r3, #4
 8001198:	b29b      	uxth	r3, r3
 800119a:	2b02      	cmp	r3, #2
 800119c:	f000 80e3 	beq.w	8001366 <rainbow_effect+0x256>
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	f300 814f 	bgt.w	8001444 <rainbow_effect+0x334>
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d002      	beq.n	80011b0 <rainbow_effect+0xa0>
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d06c      	beq.n	8001288 <rainbow_effect+0x178>
 80011ae:	e149      	b.n	8001444 <rainbow_effect+0x334>
      case 0: factor1 = 1.0 - ((float)(ind % 60 - 0 * 20) / 20);
 80011b0:	89ba      	ldrh	r2, [r7, #12]
 80011b2:	4bb4      	ldr	r3, [pc, #720]	@ (8001484 <rainbow_effect+0x374>)
 80011b4:	fba3 1302 	umull	r1, r3, r3, r2
 80011b8:	0959      	lsrs	r1, r3, #5
 80011ba:	460b      	mov	r3, r1
 80011bc:	011b      	lsls	r3, r3, #4
 80011be:	1a5b      	subs	r3, r3, r1
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	b29b      	uxth	r3, r3
 80011c6:	ee07 3a90 	vmov	s15, r3
 80011ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011ce:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 80011d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80011da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011de:	edc7 7a02 	vstr	s15, [r7, #8]
              factor2 = (float)((int)(ind - 0) % 60) / 20;
 80011e2:	89ba      	ldrh	r2, [r7, #12]
 80011e4:	4ba7      	ldr	r3, [pc, #668]	@ (8001484 <rainbow_effect+0x374>)
 80011e6:	fb83 1302 	smull	r1, r3, r3, r2
 80011ea:	4413      	add	r3, r2
 80011ec:	1159      	asrs	r1, r3, #5
 80011ee:	17d3      	asrs	r3, r2, #31
 80011f0:	1ac9      	subs	r1, r1, r3
 80011f2:	460b      	mov	r3, r1
 80011f4:	011b      	lsls	r3, r3, #4
 80011f6:	1a5b      	subs	r3, r3, r1
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	1ad1      	subs	r1, r2, r3
 80011fc:	ee07 1a90 	vmov	s15, r1
 8001200:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001204:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 8001208:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800120c:	edc7 7a01 	vstr	s15, [r7, #4]
              Set_LED(j, 255 * factor1 + 0 * factor2, 0 * factor1 + 255 * factor2, 0 * factor1 + 0 * factor2);
 8001210:	89f8      	ldrh	r0, [r7, #14]
 8001212:	edd7 7a02 	vldr	s15, [r7, #8]
 8001216:	ed9f 7a9d 	vldr	s14, [pc, #628]	@ 800148c <rainbow_effect+0x37c>
 800121a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800121e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001222:	eddf 6a9b 	vldr	s13, [pc, #620]	@ 8001490 <rainbow_effect+0x380>
 8001226:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800122a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800122e:	eebd 6ae7 	vcvt.s32.f32	s12, s15
 8001232:	edd7 7a02 	vldr	s15, [r7, #8]
 8001236:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 8001490 <rainbow_effect+0x380>
 800123a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800123e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001242:	eddf 6a92 	vldr	s13, [pc, #584]	@ 800148c <rainbow_effect+0x37c>
 8001246:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800124a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800124e:	eefd 5ae7 	vcvt.s32.f32	s11, s15
 8001252:	edd7 7a02 	vldr	s15, [r7, #8]
 8001256:	ed9f 7a8e 	vldr	s14, [pc, #568]	@ 8001490 <rainbow_effect+0x380>
 800125a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800125e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001262:	eddf 6a8b 	vldr	s13, [pc, #556]	@ 8001490 <rainbow_effect+0x380>
 8001266:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800126a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800126e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001272:	ee17 3a90 	vmov	r3, s15
 8001276:	ee15 2a90 	vmov	r2, s11
 800127a:	ee16 1a10 	vmov	r1, s12
 800127e:	f7ff fe27 	bl	8000ed0 <Set_LED>
              WS2812_Send();
 8001282:	f7ff fed7 	bl	8001034 <WS2812_Send>
              break;
 8001286:	e0dd      	b.n	8001444 <rainbow_effect+0x334>
      case 1: factor1 = 1.0 - ((float)(ind % 60 - 1 * 20) / 20);
 8001288:	89ba      	ldrh	r2, [r7, #12]
 800128a:	4b7e      	ldr	r3, [pc, #504]	@ (8001484 <rainbow_effect+0x374>)
 800128c:	fba3 1302 	umull	r1, r3, r3, r2
 8001290:	0959      	lsrs	r1, r3, #5
 8001292:	460b      	mov	r3, r1
 8001294:	011b      	lsls	r3, r3, #4
 8001296:	1a5b      	subs	r3, r3, r1
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	b29b      	uxth	r3, r3
 800129e:	3b14      	subs	r3, #20
 80012a0:	ee07 3a90 	vmov	s15, r3
 80012a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012a8:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 80012ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80012b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012b8:	edc7 7a02 	vstr	s15, [r7, #8]
              factor2 = (float)((int)(ind - 20) % 60) / 20;
 80012bc:	89bb      	ldrh	r3, [r7, #12]
 80012be:	f1a3 0214 	sub.w	r2, r3, #20
 80012c2:	4b70      	ldr	r3, [pc, #448]	@ (8001484 <rainbow_effect+0x374>)
 80012c4:	fb83 1302 	smull	r1, r3, r3, r2
 80012c8:	4413      	add	r3, r2
 80012ca:	1159      	asrs	r1, r3, #5
 80012cc:	17d3      	asrs	r3, r2, #31
 80012ce:	1ac9      	subs	r1, r1, r3
 80012d0:	460b      	mov	r3, r1
 80012d2:	011b      	lsls	r3, r3, #4
 80012d4:	1a5b      	subs	r3, r3, r1
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	1ad1      	subs	r1, r2, r3
 80012da:	ee07 1a90 	vmov	s15, r1
 80012de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012e2:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 80012e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012ea:	edc7 7a01 	vstr	s15, [r7, #4]
              Set_LED(j, 0 * factor1 + 0 * factor2, 255 * factor1 + 0 * factor2, 0 * factor1 + 255 * factor2);
 80012ee:	89f8      	ldrh	r0, [r7, #14]
 80012f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80012f4:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8001490 <rainbow_effect+0x380>
 80012f8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80012fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001300:	eddf 6a63 	vldr	s13, [pc, #396]	@ 8001490 <rainbow_effect+0x380>
 8001304:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001308:	ee77 7a27 	vadd.f32	s15, s14, s15
 800130c:	eebd 6ae7 	vcvt.s32.f32	s12, s15
 8001310:	edd7 7a02 	vldr	s15, [r7, #8]
 8001314:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 800148c <rainbow_effect+0x37c>
 8001318:	ee27 7a87 	vmul.f32	s14, s15, s14
 800131c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001320:	eddf 6a5b 	vldr	s13, [pc, #364]	@ 8001490 <rainbow_effect+0x380>
 8001324:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001328:	ee77 7a27 	vadd.f32	s15, s14, s15
 800132c:	eefd 5ae7 	vcvt.s32.f32	s11, s15
 8001330:	edd7 7a02 	vldr	s15, [r7, #8]
 8001334:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8001490 <rainbow_effect+0x380>
 8001338:	ee27 7a87 	vmul.f32	s14, s15, s14
 800133c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001340:	eddf 6a52 	vldr	s13, [pc, #328]	@ 800148c <rainbow_effect+0x37c>
 8001344:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001348:	ee77 7a27 	vadd.f32	s15, s14, s15
 800134c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001350:	ee17 3a90 	vmov	r3, s15
 8001354:	ee15 2a90 	vmov	r2, s11
 8001358:	ee16 1a10 	vmov	r1, s12
 800135c:	f7ff fdb8 	bl	8000ed0 <Set_LED>
              WS2812_Send();
 8001360:	f7ff fe68 	bl	8001034 <WS2812_Send>
              break;
 8001364:	e06e      	b.n	8001444 <rainbow_effect+0x334>
      case 2: factor1 = 1.0 - ((float)(ind % 60 - 2 * 20) / 20);
 8001366:	89ba      	ldrh	r2, [r7, #12]
 8001368:	4b46      	ldr	r3, [pc, #280]	@ (8001484 <rainbow_effect+0x374>)
 800136a:	fba3 1302 	umull	r1, r3, r3, r2
 800136e:	0959      	lsrs	r1, r3, #5
 8001370:	460b      	mov	r3, r1
 8001372:	011b      	lsls	r3, r3, #4
 8001374:	1a5b      	subs	r3, r3, r1
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	b29b      	uxth	r3, r3
 800137c:	3b28      	subs	r3, #40	@ 0x28
 800137e:	ee07 3a90 	vmov	s15, r3
 8001382:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001386:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 800138a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800138e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001392:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001396:	edc7 7a02 	vstr	s15, [r7, #8]
              factor2 = (float)((int)(ind - 40) % 60) / 20;
 800139a:	89bb      	ldrh	r3, [r7, #12]
 800139c:	f1a3 0228 	sub.w	r2, r3, #40	@ 0x28
 80013a0:	4b38      	ldr	r3, [pc, #224]	@ (8001484 <rainbow_effect+0x374>)
 80013a2:	fb83 1302 	smull	r1, r3, r3, r2
 80013a6:	4413      	add	r3, r2
 80013a8:	1159      	asrs	r1, r3, #5
 80013aa:	17d3      	asrs	r3, r2, #31
 80013ac:	1ac9      	subs	r1, r1, r3
 80013ae:	460b      	mov	r3, r1
 80013b0:	011b      	lsls	r3, r3, #4
 80013b2:	1a5b      	subs	r3, r3, r1
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	1ad1      	subs	r1, r2, r3
 80013b8:	ee07 1a90 	vmov	s15, r1
 80013bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013c0:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 80013c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013c8:	edc7 7a01 	vstr	s15, [r7, #4]
              Set_LED(j, 0 * factor1 + 255 * factor2, 0 * factor1 + 0 * factor2, 255 * factor1 + 0 * factor2);
 80013cc:	89f8      	ldrh	r0, [r7, #14]
 80013ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80013d2:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8001490 <rainbow_effect+0x380>
 80013d6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013da:	edd7 7a01 	vldr	s15, [r7, #4]
 80013de:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 800148c <rainbow_effect+0x37c>
 80013e2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80013e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013ea:	eebd 6ae7 	vcvt.s32.f32	s12, s15
 80013ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80013f2:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8001490 <rainbow_effect+0x380>
 80013f6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80013fe:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8001490 <rainbow_effect+0x380>
 8001402:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001406:	ee77 7a27 	vadd.f32	s15, s14, s15
 800140a:	eefd 5ae7 	vcvt.s32.f32	s11, s15
 800140e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001412:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 800148c <rainbow_effect+0x37c>
 8001416:	ee27 7a87 	vmul.f32	s14, s15, s14
 800141a:	edd7 7a01 	vldr	s15, [r7, #4]
 800141e:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 8001490 <rainbow_effect+0x380>
 8001422:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001426:	ee77 7a27 	vadd.f32	s15, s14, s15
 800142a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800142e:	ee17 3a90 	vmov	r3, s15
 8001432:	ee15 2a90 	vmov	r2, s11
 8001436:	ee16 1a10 	vmov	r1, s12
 800143a:	f7ff fd49 	bl	8000ed0 <Set_LED>
              WS2812_Send();
 800143e:	f7ff fdf9 	bl	8001034 <WS2812_Send>
              break;
 8001442:	bf00      	nop
  for(uint16_t j=0;j<54;j++) {
 8001444:	89fb      	ldrh	r3, [r7, #14]
 8001446:	3301      	adds	r3, #1
 8001448:	81fb      	strh	r3, [r7, #14]
 800144a:	89fb      	ldrh	r3, [r7, #14]
 800144c:	2b35      	cmp	r3, #53	@ 0x35
 800144e:	f67f ae65 	bls.w	800111c <rainbow_effect+0xc>
    }
  }
  if(effStep >= 60) {effStep = 0; return 0x03; }
 8001452:	4b0a      	ldr	r3, [pc, #40]	@ (800147c <rainbow_effect+0x36c>)
 8001454:	881b      	ldrh	r3, [r3, #0]
 8001456:	2b3b      	cmp	r3, #59	@ 0x3b
 8001458:	d904      	bls.n	8001464 <rainbow_effect+0x354>
 800145a:	4b08      	ldr	r3, [pc, #32]	@ (800147c <rainbow_effect+0x36c>)
 800145c:	2200      	movs	r2, #0
 800145e:	801a      	strh	r2, [r3, #0]
 8001460:	2303      	movs	r3, #3
 8001462:	e006      	b.n	8001472 <rainbow_effect+0x362>
  else effStep++;
 8001464:	4b05      	ldr	r3, [pc, #20]	@ (800147c <rainbow_effect+0x36c>)
 8001466:	881b      	ldrh	r3, [r3, #0]
 8001468:	3301      	adds	r3, #1
 800146a:	b29a      	uxth	r2, r3
 800146c:	4b03      	ldr	r3, [pc, #12]	@ (800147c <rainbow_effect+0x36c>)
 800146e:	801a      	strh	r2, [r3, #0]
  return 0x01;
 8001470:	2301      	movs	r3, #1
}
 8001472:	4618      	mov	r0, r3
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bdb0      	pop	{r4, r5, r7, pc}
 800147a:	bf00      	nop
 800147c:	200002f8 	.word	0x200002f8
 8001480:	3ff33333 	.word	0x3ff33333
 8001484:	88888889 	.word	0x88888889
 8001488:	cccccccd 	.word	0xcccccccd
 800148c:	437f0000 	.word	0x437f0000
 8001490:	00000000 	.word	0x00000000

08001494 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001498:	f000 fa90 	bl	80019bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800149c:	f000 f818 	bl	80014d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014a0:	f000 f940 	bl	8001724 <MX_GPIO_Init>
  MX_DMA_Init();
 80014a4:	f000 f91e 	bl	80016e4 <MX_DMA_Init>
  MX_TIM1_Init();
 80014a8:	f000 f87c 	bl	80015a4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  Set_LED(0, 255, 0, 0);
 80014ac:	2300      	movs	r3, #0
 80014ae:	2200      	movs	r2, #0
 80014b0:	21ff      	movs	r1, #255	@ 0xff
 80014b2:	2000      	movs	r0, #0
 80014b4:	f7ff fd0c 	bl	8000ed0 <Set_LED>
//  Set_LED(4, 156, 233, 100);
//  Set_LED(5, 102, 0, 235);
//  Set_LED(6, 47, 38, 77);
//
//  Set_LED(7, 255, 200, 0);
  Set_Brightness(20);
 80014b8:	2014      	movs	r0, #20
 80014ba:	f7ff fd39 	bl	8000f30 <Set_Brightness>

  WS2812_Send();
 80014be:	f7ff fdb9 	bl	8001034 <WS2812_Send>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  rainbow_effect();
 80014c2:	f7ff fe25 	bl	8001110 <rainbow_effect>
	  HAL_Delay(30);
 80014c6:	201e      	movs	r0, #30
 80014c8:	f000 faea 	bl	8001aa0 <HAL_Delay>
	  rainbow_effect();
 80014cc:	bf00      	nop
 80014ce:	e7f8      	b.n	80014c2 <main+0x2e>

080014d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b094      	sub	sp, #80	@ 0x50
 80014d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014d6:	f107 0320 	add.w	r3, r7, #32
 80014da:	2230      	movs	r2, #48	@ 0x30
 80014dc:	2100      	movs	r1, #0
 80014de:	4618      	mov	r0, r3
 80014e0:	f002 fe50 	bl	8004184 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014e4:	f107 030c 	add.w	r3, r7, #12
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014f4:	2300      	movs	r3, #0
 80014f6:	60bb      	str	r3, [r7, #8]
 80014f8:	4b28      	ldr	r3, [pc, #160]	@ (800159c <SystemClock_Config+0xcc>)
 80014fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fc:	4a27      	ldr	r2, [pc, #156]	@ (800159c <SystemClock_Config+0xcc>)
 80014fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001502:	6413      	str	r3, [r2, #64]	@ 0x40
 8001504:	4b25      	ldr	r3, [pc, #148]	@ (800159c <SystemClock_Config+0xcc>)
 8001506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001508:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800150c:	60bb      	str	r3, [r7, #8]
 800150e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001510:	2300      	movs	r3, #0
 8001512:	607b      	str	r3, [r7, #4]
 8001514:	4b22      	ldr	r3, [pc, #136]	@ (80015a0 <SystemClock_Config+0xd0>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a21      	ldr	r2, [pc, #132]	@ (80015a0 <SystemClock_Config+0xd0>)
 800151a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800151e:	6013      	str	r3, [r2, #0]
 8001520:	4b1f      	ldr	r3, [pc, #124]	@ (80015a0 <SystemClock_Config+0xd0>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001528:	607b      	str	r3, [r7, #4]
 800152a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800152c:	2302      	movs	r3, #2
 800152e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001530:	2301      	movs	r3, #1
 8001532:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001534:	2310      	movs	r3, #16
 8001536:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001538:	2302      	movs	r3, #2
 800153a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800153c:	2300      	movs	r3, #0
 800153e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001540:	2308      	movs	r3, #8
 8001542:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001544:	2348      	movs	r3, #72	@ 0x48
 8001546:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001548:	2302      	movs	r3, #2
 800154a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800154c:	2304      	movs	r3, #4
 800154e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001550:	f107 0320 	add.w	r3, r7, #32
 8001554:	4618      	mov	r0, r3
 8001556:	f001 f8e5 	bl	8002724 <HAL_RCC_OscConfig>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001560:	f000 f8fa 	bl	8001758 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001564:	230f      	movs	r3, #15
 8001566:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001568:	2302      	movs	r3, #2
 800156a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001570:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001574:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001576:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800157a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800157c:	f107 030c 	add.w	r3, r7, #12
 8001580:	2102      	movs	r1, #2
 8001582:	4618      	mov	r0, r3
 8001584:	f001 fb46 	bl	8002c14 <HAL_RCC_ClockConfig>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800158e:	f000 f8e3 	bl	8001758 <Error_Handler>
  }
}
 8001592:	bf00      	nop
 8001594:	3750      	adds	r7, #80	@ 0x50
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40023800 	.word	0x40023800
 80015a0:	40007000 	.word	0x40007000

080015a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b096      	sub	sp, #88	@ 0x58
 80015a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015aa:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	605a      	str	r2, [r3, #4]
 80015b4:	609a      	str	r2, [r3, #8]
 80015b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015b8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	605a      	str	r2, [r3, #4]
 80015cc:	609a      	str	r2, [r3, #8]
 80015ce:	60da      	str	r2, [r3, #12]
 80015d0:	611a      	str	r2, [r3, #16]
 80015d2:	615a      	str	r2, [r3, #20]
 80015d4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015d6:	1d3b      	adds	r3, r7, #4
 80015d8:	2220      	movs	r2, #32
 80015da:	2100      	movs	r1, #0
 80015dc:	4618      	mov	r0, r3
 80015de:	f002 fdd1 	bl	8004184 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015e2:	4b3e      	ldr	r3, [pc, #248]	@ (80016dc <MX_TIM1_Init+0x138>)
 80015e4:	4a3e      	ldr	r2, [pc, #248]	@ (80016e0 <MX_TIM1_Init+0x13c>)
 80015e6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80015e8:	4b3c      	ldr	r3, [pc, #240]	@ (80016dc <MX_TIM1_Init+0x138>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ee:	4b3b      	ldr	r3, [pc, #236]	@ (80016dc <MX_TIM1_Init+0x138>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90 - 1;
 80015f4:	4b39      	ldr	r3, [pc, #228]	@ (80016dc <MX_TIM1_Init+0x138>)
 80015f6:	2259      	movs	r2, #89	@ 0x59
 80015f8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015fa:	4b38      	ldr	r3, [pc, #224]	@ (80016dc <MX_TIM1_Init+0x138>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001600:	4b36      	ldr	r3, [pc, #216]	@ (80016dc <MX_TIM1_Init+0x138>)
 8001602:	2200      	movs	r2, #0
 8001604:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001606:	4b35      	ldr	r3, [pc, #212]	@ (80016dc <MX_TIM1_Init+0x138>)
 8001608:	2200      	movs	r2, #0
 800160a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800160c:	4833      	ldr	r0, [pc, #204]	@ (80016dc <MX_TIM1_Init+0x138>)
 800160e:	f001 fced 	bl	8002fec <HAL_TIM_Base_Init>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001618:	f000 f89e 	bl	8001758 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800161c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001620:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001622:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001626:	4619      	mov	r1, r3
 8001628:	482c      	ldr	r0, [pc, #176]	@ (80016dc <MX_TIM1_Init+0x138>)
 800162a:	f002 f811 	bl	8003650 <HAL_TIM_ConfigClockSource>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001634:	f000 f890 	bl	8001758 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001638:	4828      	ldr	r0, [pc, #160]	@ (80016dc <MX_TIM1_Init+0x138>)
 800163a:	f001 fd26 	bl	800308a <HAL_TIM_PWM_Init>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001644:	f000 f888 	bl	8001758 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001648:	2300      	movs	r3, #0
 800164a:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800164c:	2300      	movs	r3, #0
 800164e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001650:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001654:	4619      	mov	r1, r3
 8001656:	4821      	ldr	r0, [pc, #132]	@ (80016dc <MX_TIM1_Init+0x138>)
 8001658:	f002 fcc6 	bl	8003fe8 <HAL_TIMEx_MasterConfigSynchronization>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001662:	f000 f879 	bl	8001758 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001666:	2360      	movs	r3, #96	@ 0x60
 8001668:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800166a:	2300      	movs	r3, #0
 800166c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800166e:	2300      	movs	r3, #0
 8001670:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001672:	2300      	movs	r3, #0
 8001674:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001676:	2300      	movs	r3, #0
 8001678:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800167a:	2300      	movs	r3, #0
 800167c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800167e:	2300      	movs	r3, #0
 8001680:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001682:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001686:	2200      	movs	r2, #0
 8001688:	4619      	mov	r1, r3
 800168a:	4814      	ldr	r0, [pc, #80]	@ (80016dc <MX_TIM1_Init+0x138>)
 800168c:	f001 ff1e 	bl	80034cc <HAL_TIM_PWM_ConfigChannel>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001696:	f000 f85f 	bl	8001758 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800169a:	2300      	movs	r3, #0
 800169c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800169e:	2300      	movs	r3, #0
 80016a0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016a2:	2300      	movs	r3, #0
 80016a4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016aa:	2300      	movs	r3, #0
 80016ac:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016ae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016b2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016b4:	2300      	movs	r3, #0
 80016b6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80016b8:	1d3b      	adds	r3, r7, #4
 80016ba:	4619      	mov	r1, r3
 80016bc:	4807      	ldr	r0, [pc, #28]	@ (80016dc <MX_TIM1_Init+0x138>)
 80016be:	f002 fd0f 	bl	80040e0 <HAL_TIMEx_ConfigBreakDeadTime>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80016c8:	f000 f846 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80016cc:	4803      	ldr	r0, [pc, #12]	@ (80016dc <MX_TIM1_Init+0x138>)
 80016ce:	f000 f8c5 	bl	800185c <HAL_TIM_MspPostInit>

}
 80016d2:	bf00      	nop
 80016d4:	3758      	adds	r7, #88	@ 0x58
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	20000028 	.word	0x20000028
 80016e0:	40010000 	.word	0x40010000

080016e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	607b      	str	r3, [r7, #4]
 80016ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001720 <MX_DMA_Init+0x3c>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f2:	4a0b      	ldr	r2, [pc, #44]	@ (8001720 <MX_DMA_Init+0x3c>)
 80016f4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80016f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016fa:	4b09      	ldr	r3, [pc, #36]	@ (8001720 <MX_DMA_Init+0x3c>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001702:	607b      	str	r3, [r7, #4]
 8001704:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001706:	2200      	movs	r2, #0
 8001708:	2100      	movs	r1, #0
 800170a:	2039      	movs	r0, #57	@ 0x39
 800170c:	f000 fac7 	bl	8001c9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001710:	2039      	movs	r0, #57	@ 0x39
 8001712:	f000 fae0 	bl	8001cd6 <HAL_NVIC_EnableIRQ>

}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40023800 	.word	0x40023800

08001724 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	607b      	str	r3, [r7, #4]
 800172e:	4b09      	ldr	r3, [pc, #36]	@ (8001754 <MX_GPIO_Init+0x30>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001732:	4a08      	ldr	r2, [pc, #32]	@ (8001754 <MX_GPIO_Init+0x30>)
 8001734:	f043 0310 	orr.w	r3, r3, #16
 8001738:	6313      	str	r3, [r2, #48]	@ 0x30
 800173a:	4b06      	ldr	r3, [pc, #24]	@ (8001754 <MX_GPIO_Init+0x30>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173e:	f003 0310 	and.w	r3, r3, #16
 8001742:	607b      	str	r3, [r7, #4]
 8001744:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001746:	bf00      	nop
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	40023800 	.word	0x40023800

08001758 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800175c:	b672      	cpsid	i
}
 800175e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001760:	bf00      	nop
 8001762:	e7fd      	b.n	8001760 <Error_Handler+0x8>

08001764 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	607b      	str	r3, [r7, #4]
 800176e:	4b10      	ldr	r3, [pc, #64]	@ (80017b0 <HAL_MspInit+0x4c>)
 8001770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001772:	4a0f      	ldr	r2, [pc, #60]	@ (80017b0 <HAL_MspInit+0x4c>)
 8001774:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001778:	6453      	str	r3, [r2, #68]	@ 0x44
 800177a:	4b0d      	ldr	r3, [pc, #52]	@ (80017b0 <HAL_MspInit+0x4c>)
 800177c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800177e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001782:	607b      	str	r3, [r7, #4]
 8001784:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	603b      	str	r3, [r7, #0]
 800178a:	4b09      	ldr	r3, [pc, #36]	@ (80017b0 <HAL_MspInit+0x4c>)
 800178c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178e:	4a08      	ldr	r2, [pc, #32]	@ (80017b0 <HAL_MspInit+0x4c>)
 8001790:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001794:	6413      	str	r3, [r2, #64]	@ 0x40
 8001796:	4b06      	ldr	r3, [pc, #24]	@ (80017b0 <HAL_MspInit+0x4c>)
 8001798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800179a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800179e:	603b      	str	r3, [r7, #0]
 80017a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	40023800 	.word	0x40023800

080017b4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a22      	ldr	r2, [pc, #136]	@ (800184c <HAL_TIM_Base_MspInit+0x98>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d13d      	bne.n	8001842 <HAL_TIM_Base_MspInit+0x8e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	4b21      	ldr	r3, [pc, #132]	@ (8001850 <HAL_TIM_Base_MspInit+0x9c>)
 80017cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ce:	4a20      	ldr	r2, [pc, #128]	@ (8001850 <HAL_TIM_Base_MspInit+0x9c>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80017d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001850 <HAL_TIM_Base_MspInit+0x9c>)
 80017d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 80017e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001854 <HAL_TIM_Base_MspInit+0xa0>)
 80017e4:	4a1c      	ldr	r2, [pc, #112]	@ (8001858 <HAL_TIM_Base_MspInit+0xa4>)
 80017e6:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 80017e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001854 <HAL_TIM_Base_MspInit+0xa0>)
 80017ea:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 80017ee:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017f0:	4b18      	ldr	r3, [pc, #96]	@ (8001854 <HAL_TIM_Base_MspInit+0xa0>)
 80017f2:	2240      	movs	r2, #64	@ 0x40
 80017f4:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80017f6:	4b17      	ldr	r3, [pc, #92]	@ (8001854 <HAL_TIM_Base_MspInit+0xa0>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80017fc:	4b15      	ldr	r3, [pc, #84]	@ (8001854 <HAL_TIM_Base_MspInit+0xa0>)
 80017fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001802:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001804:	4b13      	ldr	r3, [pc, #76]	@ (8001854 <HAL_TIM_Base_MspInit+0xa0>)
 8001806:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800180a:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800180c:	4b11      	ldr	r3, [pc, #68]	@ (8001854 <HAL_TIM_Base_MspInit+0xa0>)
 800180e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001812:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001814:	4b0f      	ldr	r3, [pc, #60]	@ (8001854 <HAL_TIM_Base_MspInit+0xa0>)
 8001816:	2200      	movs	r2, #0
 8001818:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800181a:	4b0e      	ldr	r3, [pc, #56]	@ (8001854 <HAL_TIM_Base_MspInit+0xa0>)
 800181c:	2200      	movs	r2, #0
 800181e:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001820:	4b0c      	ldr	r3, [pc, #48]	@ (8001854 <HAL_TIM_Base_MspInit+0xa0>)
 8001822:	2200      	movs	r2, #0
 8001824:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001826:	480b      	ldr	r0, [pc, #44]	@ (8001854 <HAL_TIM_Base_MspInit+0xa0>)
 8001828:	f000 fa70 	bl	8001d0c <HAL_DMA_Init>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8001832:	f7ff ff91 	bl	8001758 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a06      	ldr	r2, [pc, #24]	@ (8001854 <HAL_TIM_Base_MspInit+0xa0>)
 800183a:	625a      	str	r2, [r3, #36]	@ 0x24
 800183c:	4a05      	ldr	r2, [pc, #20]	@ (8001854 <HAL_TIM_Base_MspInit+0xa0>)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001842:	bf00      	nop
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40010000 	.word	0x40010000
 8001850:	40023800 	.word	0x40023800
 8001854:	20000070 	.word	0x20000070
 8001858:	40026428 	.word	0x40026428

0800185c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b088      	sub	sp, #32
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001864:	f107 030c 	add.w	r3, r7, #12
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	60da      	str	r2, [r3, #12]
 8001872:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a12      	ldr	r2, [pc, #72]	@ (80018c4 <HAL_TIM_MspPostInit+0x68>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d11e      	bne.n	80018bc <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	60bb      	str	r3, [r7, #8]
 8001882:	4b11      	ldr	r3, [pc, #68]	@ (80018c8 <HAL_TIM_MspPostInit+0x6c>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001886:	4a10      	ldr	r2, [pc, #64]	@ (80018c8 <HAL_TIM_MspPostInit+0x6c>)
 8001888:	f043 0310 	orr.w	r3, r3, #16
 800188c:	6313      	str	r3, [r2, #48]	@ 0x30
 800188e:	4b0e      	ldr	r3, [pc, #56]	@ (80018c8 <HAL_TIM_MspPostInit+0x6c>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001892:	f003 0310 	and.w	r3, r3, #16
 8001896:	60bb      	str	r3, [r7, #8]
 8001898:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = RGB_LED_Pin;
 800189a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800189e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a0:	2302      	movs	r3, #2
 80018a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a8:	2300      	movs	r3, #0
 80018aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80018ac:	2301      	movs	r3, #1
 80018ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(RGB_LED_GPIO_Port, &GPIO_InitStruct);
 80018b0:	f107 030c 	add.w	r3, r7, #12
 80018b4:	4619      	mov	r1, r3
 80018b6:	4805      	ldr	r0, [pc, #20]	@ (80018cc <HAL_TIM_MspPostInit+0x70>)
 80018b8:	f000 fd98 	bl	80023ec <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80018bc:	bf00      	nop
 80018be:	3720      	adds	r7, #32
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40010000 	.word	0x40010000
 80018c8:	40023800 	.word	0x40023800
 80018cc:	40021000 	.word	0x40021000

080018d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018d4:	bf00      	nop
 80018d6:	e7fd      	b.n	80018d4 <NMI_Handler+0x4>

080018d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018dc:	bf00      	nop
 80018de:	e7fd      	b.n	80018dc <HardFault_Handler+0x4>

080018e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018e4:	bf00      	nop
 80018e6:	e7fd      	b.n	80018e4 <MemManage_Handler+0x4>

080018e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ec:	bf00      	nop
 80018ee:	e7fd      	b.n	80018ec <BusFault_Handler+0x4>

080018f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018f4:	bf00      	nop
 80018f6:	e7fd      	b.n	80018f4 <UsageFault_Handler+0x4>

080018f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018fc:	bf00      	nop
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr

08001906 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001906:	b480      	push	{r7}
 8001908:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800190a:	bf00      	nop
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001918:	bf00      	nop
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr

08001922 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001926:	f000 f89b 	bl	8001a60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
	...

08001930 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001934:	4802      	ldr	r0, [pc, #8]	@ (8001940 <DMA2_Stream1_IRQHandler+0x10>)
 8001936:	f000 faef 	bl	8001f18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20000070 	.word	0x20000070

08001944 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001948:	4b06      	ldr	r3, [pc, #24]	@ (8001964 <SystemInit+0x20>)
 800194a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800194e:	4a05      	ldr	r2, [pc, #20]	@ (8001964 <SystemInit+0x20>)
 8001950:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001954:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	e000ed00 	.word	0xe000ed00

08001968 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001968:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019a0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800196c:	f7ff ffea 	bl	8001944 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001970:	480c      	ldr	r0, [pc, #48]	@ (80019a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001972:	490d      	ldr	r1, [pc, #52]	@ (80019a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001974:	4a0d      	ldr	r2, [pc, #52]	@ (80019ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001976:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001978:	e002      	b.n	8001980 <LoopCopyDataInit>

0800197a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800197a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800197c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800197e:	3304      	adds	r3, #4

08001980 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001980:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001982:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001984:	d3f9      	bcc.n	800197a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001986:	4a0a      	ldr	r2, [pc, #40]	@ (80019b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001988:	4c0a      	ldr	r4, [pc, #40]	@ (80019b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800198a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800198c:	e001      	b.n	8001992 <LoopFillZerobss>

0800198e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800198e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001990:	3204      	adds	r2, #4

08001992 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001992:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001994:	d3fb      	bcc.n	800198e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001996:	f002 fbfd 	bl	8004194 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800199a:	f7ff fd7b 	bl	8001494 <main>
  bx  lr    
 800199e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80019a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019a8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80019ac:	08005500 	.word	0x08005500
  ldr r2, =_sbss
 80019b0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80019b4:	20000300 	.word	0x20000300

080019b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019b8:	e7fe      	b.n	80019b8 <ADC_IRQHandler>
	...

080019bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019c0:	4b0e      	ldr	r3, [pc, #56]	@ (80019fc <HAL_Init+0x40>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a0d      	ldr	r2, [pc, #52]	@ (80019fc <HAL_Init+0x40>)
 80019c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019cc:	4b0b      	ldr	r3, [pc, #44]	@ (80019fc <HAL_Init+0x40>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a0a      	ldr	r2, [pc, #40]	@ (80019fc <HAL_Init+0x40>)
 80019d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019d8:	4b08      	ldr	r3, [pc, #32]	@ (80019fc <HAL_Init+0x40>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a07      	ldr	r2, [pc, #28]	@ (80019fc <HAL_Init+0x40>)
 80019de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019e4:	2003      	movs	r0, #3
 80019e6:	f000 f94f 	bl	8001c88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019ea:	200f      	movs	r0, #15
 80019ec:	f000 f808 	bl	8001a00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019f0:	f7ff feb8 	bl	8001764 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40023c00 	.word	0x40023c00

08001a00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a08:	4b12      	ldr	r3, [pc, #72]	@ (8001a54 <HAL_InitTick+0x54>)
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	4b12      	ldr	r3, [pc, #72]	@ (8001a58 <HAL_InitTick+0x58>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	4619      	mov	r1, r3
 8001a12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a16:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f000 f967 	bl	8001cf2 <HAL_SYSTICK_Config>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e00e      	b.n	8001a4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2b0f      	cmp	r3, #15
 8001a32:	d80a      	bhi.n	8001a4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a34:	2200      	movs	r2, #0
 8001a36:	6879      	ldr	r1, [r7, #4]
 8001a38:	f04f 30ff 	mov.w	r0, #4294967295
 8001a3c:	f000 f92f 	bl	8001c9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a40:	4a06      	ldr	r2, [pc, #24]	@ (8001a5c <HAL_InitTick+0x5c>)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a46:	2300      	movs	r3, #0
 8001a48:	e000      	b.n	8001a4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	20000000 	.word	0x20000000
 8001a58:	20000008 	.word	0x20000008
 8001a5c:	20000004 	.word	0x20000004

08001a60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a64:	4b06      	ldr	r3, [pc, #24]	@ (8001a80 <HAL_IncTick+0x20>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	461a      	mov	r2, r3
 8001a6a:	4b06      	ldr	r3, [pc, #24]	@ (8001a84 <HAL_IncTick+0x24>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4413      	add	r3, r2
 8001a70:	4a04      	ldr	r2, [pc, #16]	@ (8001a84 <HAL_IncTick+0x24>)
 8001a72:	6013      	str	r3, [r2, #0]
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	20000008 	.word	0x20000008
 8001a84:	200002fc 	.word	0x200002fc

08001a88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a8c:	4b03      	ldr	r3, [pc, #12]	@ (8001a9c <HAL_GetTick+0x14>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	200002fc 	.word	0x200002fc

08001aa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001aa8:	f7ff ffee 	bl	8001a88 <HAL_GetTick>
 8001aac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ab8:	d005      	beq.n	8001ac6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001aba:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae4 <HAL_Delay+0x44>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	461a      	mov	r2, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ac6:	bf00      	nop
 8001ac8:	f7ff ffde 	bl	8001a88 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	68fa      	ldr	r2, [r7, #12]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d8f7      	bhi.n	8001ac8 <HAL_Delay+0x28>
  {
  }
}
 8001ad8:	bf00      	nop
 8001ada:	bf00      	nop
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20000008 	.word	0x20000008

08001ae8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001af8:	4b0c      	ldr	r3, [pc, #48]	@ (8001b2c <__NVIC_SetPriorityGrouping+0x44>)
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001afe:	68ba      	ldr	r2, [r7, #8]
 8001b00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b04:	4013      	ands	r3, r2
 8001b06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b1a:	4a04      	ldr	r2, [pc, #16]	@ (8001b2c <__NVIC_SetPriorityGrouping+0x44>)
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	60d3      	str	r3, [r2, #12]
}
 8001b20:	bf00      	nop
 8001b22:	3714      	adds	r7, #20
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	e000ed00 	.word	0xe000ed00

08001b30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b34:	4b04      	ldr	r3, [pc, #16]	@ (8001b48 <__NVIC_GetPriorityGrouping+0x18>)
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	0a1b      	lsrs	r3, r3, #8
 8001b3a:	f003 0307 	and.w	r3, r3, #7
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	e000ed00 	.word	0xe000ed00

08001b4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	db0b      	blt.n	8001b76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b5e:	79fb      	ldrb	r3, [r7, #7]
 8001b60:	f003 021f 	and.w	r2, r3, #31
 8001b64:	4907      	ldr	r1, [pc, #28]	@ (8001b84 <__NVIC_EnableIRQ+0x38>)
 8001b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6a:	095b      	lsrs	r3, r3, #5
 8001b6c:	2001      	movs	r0, #1
 8001b6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b76:	bf00      	nop
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	e000e100 	.word	0xe000e100

08001b88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	6039      	str	r1, [r7, #0]
 8001b92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	db0a      	blt.n	8001bb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	b2da      	uxtb	r2, r3
 8001ba0:	490c      	ldr	r1, [pc, #48]	@ (8001bd4 <__NVIC_SetPriority+0x4c>)
 8001ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba6:	0112      	lsls	r2, r2, #4
 8001ba8:	b2d2      	uxtb	r2, r2
 8001baa:	440b      	add	r3, r1
 8001bac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bb0:	e00a      	b.n	8001bc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	b2da      	uxtb	r2, r3
 8001bb6:	4908      	ldr	r1, [pc, #32]	@ (8001bd8 <__NVIC_SetPriority+0x50>)
 8001bb8:	79fb      	ldrb	r3, [r7, #7]
 8001bba:	f003 030f 	and.w	r3, r3, #15
 8001bbe:	3b04      	subs	r3, #4
 8001bc0:	0112      	lsls	r2, r2, #4
 8001bc2:	b2d2      	uxtb	r2, r2
 8001bc4:	440b      	add	r3, r1
 8001bc6:	761a      	strb	r2, [r3, #24]
}
 8001bc8:	bf00      	nop
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	e000e100 	.word	0xe000e100
 8001bd8:	e000ed00 	.word	0xe000ed00

08001bdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b089      	sub	sp, #36	@ 0x24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	f1c3 0307 	rsb	r3, r3, #7
 8001bf6:	2b04      	cmp	r3, #4
 8001bf8:	bf28      	it	cs
 8001bfa:	2304      	movcs	r3, #4
 8001bfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	3304      	adds	r3, #4
 8001c02:	2b06      	cmp	r3, #6
 8001c04:	d902      	bls.n	8001c0c <NVIC_EncodePriority+0x30>
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	3b03      	subs	r3, #3
 8001c0a:	e000      	b.n	8001c0e <NVIC_EncodePriority+0x32>
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c10:	f04f 32ff 	mov.w	r2, #4294967295
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	43da      	mvns	r2, r3
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	401a      	ands	r2, r3
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c24:	f04f 31ff 	mov.w	r1, #4294967295
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2e:	43d9      	mvns	r1, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c34:	4313      	orrs	r3, r2
         );
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3724      	adds	r7, #36	@ 0x24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
	...

08001c44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c54:	d301      	bcc.n	8001c5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c56:	2301      	movs	r3, #1
 8001c58:	e00f      	b.n	8001c7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c5a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c84 <SysTick_Config+0x40>)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c62:	210f      	movs	r1, #15
 8001c64:	f04f 30ff 	mov.w	r0, #4294967295
 8001c68:	f7ff ff8e 	bl	8001b88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c6c:	4b05      	ldr	r3, [pc, #20]	@ (8001c84 <SysTick_Config+0x40>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c72:	4b04      	ldr	r3, [pc, #16]	@ (8001c84 <SysTick_Config+0x40>)
 8001c74:	2207      	movs	r2, #7
 8001c76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	e000e010 	.word	0xe000e010

08001c88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f7ff ff29 	bl	8001ae8 <__NVIC_SetPriorityGrouping>
}
 8001c96:	bf00      	nop
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b086      	sub	sp, #24
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	60b9      	str	r1, [r7, #8]
 8001ca8:	607a      	str	r2, [r7, #4]
 8001caa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cac:	2300      	movs	r3, #0
 8001cae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cb0:	f7ff ff3e 	bl	8001b30 <__NVIC_GetPriorityGrouping>
 8001cb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	68b9      	ldr	r1, [r7, #8]
 8001cba:	6978      	ldr	r0, [r7, #20]
 8001cbc:	f7ff ff8e 	bl	8001bdc <NVIC_EncodePriority>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cc6:	4611      	mov	r1, r2
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff ff5d 	bl	8001b88 <__NVIC_SetPriority>
}
 8001cce:	bf00      	nop
 8001cd0:	3718      	adds	r7, #24
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b082      	sub	sp, #8
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	4603      	mov	r3, r0
 8001cde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7ff ff31 	bl	8001b4c <__NVIC_EnableIRQ>
}
 8001cea:	bf00      	nop
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b082      	sub	sp, #8
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f7ff ffa2 	bl	8001c44 <SysTick_Config>
 8001d00:	4603      	mov	r3, r0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
	...

08001d0c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d14:	2300      	movs	r3, #0
 8001d16:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d18:	f7ff feb6 	bl	8001a88 <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d101      	bne.n	8001d28 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e099      	b.n	8001e5c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2202      	movs	r2, #2
 8001d2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f022 0201 	bic.w	r2, r2, #1
 8001d46:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d48:	e00f      	b.n	8001d6a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d4a:	f7ff fe9d 	bl	8001a88 <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	2b05      	cmp	r3, #5
 8001d56:	d908      	bls.n	8001d6a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2220      	movs	r2, #32
 8001d5c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2203      	movs	r2, #3
 8001d62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e078      	b.n	8001e5c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0301 	and.w	r3, r3, #1
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1e8      	bne.n	8001d4a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d80:	697a      	ldr	r2, [r7, #20]
 8001d82:	4b38      	ldr	r3, [pc, #224]	@ (8001e64 <HAL_DMA_Init+0x158>)
 8001d84:	4013      	ands	r3, r2
 8001d86:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685a      	ldr	r2, [r3, #4]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d96:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	691b      	ldr	r3, [r3, #16]
 8001d9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001da2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a1b      	ldr	r3, [r3, #32]
 8001db4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001db6:	697a      	ldr	r2, [r7, #20]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc0:	2b04      	cmp	r3, #4
 8001dc2:	d107      	bne.n	8001dd4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	697a      	ldr	r2, [r7, #20]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	697a      	ldr	r2, [r7, #20]
 8001dda:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	695b      	ldr	r3, [r3, #20]
 8001de2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	f023 0307 	bic.w	r3, r3, #7
 8001dea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df0:	697a      	ldr	r2, [r7, #20]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dfa:	2b04      	cmp	r3, #4
 8001dfc:	d117      	bne.n	8001e2e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e02:	697a      	ldr	r2, [r7, #20]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d00e      	beq.n	8001e2e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f000 fa6f 	bl	80022f4 <DMA_CheckFifoParam>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d008      	beq.n	8001e2e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2240      	movs	r2, #64	@ 0x40
 8001e20:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2201      	movs	r2, #1
 8001e26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e016      	b.n	8001e5c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	697a      	ldr	r2, [r7, #20]
 8001e34:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 fa26 	bl	8002288 <DMA_CalcBaseAndBitshift>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e44:	223f      	movs	r2, #63	@ 0x3f
 8001e46:	409a      	lsls	r2, r3
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2201      	movs	r2, #1
 8001e56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001e5a:	2300      	movs	r3, #0
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3718      	adds	r7, #24
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	f010803f 	.word	0xf010803f

08001e68 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	607a      	str	r2, [r7, #4]
 8001e74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e76:	2300      	movs	r3, #0
 8001e78:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e7e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d101      	bne.n	8001e8e <HAL_DMA_Start_IT+0x26>
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	e040      	b.n	8001f10 <HAL_DMA_Start_IT+0xa8>
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2201      	movs	r2, #1
 8001e92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d12f      	bne.n	8001f02 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2202      	movs	r2, #2
 8001ea6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2200      	movs	r2, #0
 8001eae:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	68b9      	ldr	r1, [r7, #8]
 8001eb6:	68f8      	ldr	r0, [r7, #12]
 8001eb8:	f000 f9b8 	bl	800222c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ec0:	223f      	movs	r2, #63	@ 0x3f
 8001ec2:	409a      	lsls	r2, r3
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f042 0216 	orr.w	r2, r2, #22
 8001ed6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d007      	beq.n	8001ef0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f042 0208 	orr.w	r2, r2, #8
 8001eee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f042 0201 	orr.w	r2, r2, #1
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	e005      	b.n	8001f0e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3718      	adds	r7, #24
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b086      	sub	sp, #24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f20:	2300      	movs	r3, #0
 8001f22:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f24:	4b8e      	ldr	r3, [pc, #568]	@ (8002160 <HAL_DMA_IRQHandler+0x248>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a8e      	ldr	r2, [pc, #568]	@ (8002164 <HAL_DMA_IRQHandler+0x24c>)
 8001f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2e:	0a9b      	lsrs	r3, r3, #10
 8001f30:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f36:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f42:	2208      	movs	r2, #8
 8001f44:	409a      	lsls	r2, r3
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d01a      	beq.n	8001f84 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0304 	and.w	r3, r3, #4
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d013      	beq.n	8001f84 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f022 0204 	bic.w	r2, r2, #4
 8001f6a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f70:	2208      	movs	r2, #8
 8001f72:	409a      	lsls	r2, r3
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f7c:	f043 0201 	orr.w	r2, r3, #1
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f88:	2201      	movs	r2, #1
 8001f8a:	409a      	lsls	r2, r3
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d012      	beq.n	8001fba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d00b      	beq.n	8001fba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	409a      	lsls	r2, r3
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fb2:	f043 0202 	orr.w	r2, r3, #2
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fbe:	2204      	movs	r2, #4
 8001fc0:	409a      	lsls	r2, r3
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d012      	beq.n	8001ff0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d00b      	beq.n	8001ff0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fdc:	2204      	movs	r2, #4
 8001fde:	409a      	lsls	r2, r3
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fe8:	f043 0204 	orr.w	r2, r3, #4
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ff4:	2210      	movs	r2, #16
 8001ff6:	409a      	lsls	r2, r3
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d043      	beq.n	8002088 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0308 	and.w	r3, r3, #8
 800200a:	2b00      	cmp	r3, #0
 800200c:	d03c      	beq.n	8002088 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002012:	2210      	movs	r2, #16
 8002014:	409a      	lsls	r2, r3
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d018      	beq.n	800205a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d108      	bne.n	8002048 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203a:	2b00      	cmp	r3, #0
 800203c:	d024      	beq.n	8002088 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	4798      	blx	r3
 8002046:	e01f      	b.n	8002088 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800204c:	2b00      	cmp	r3, #0
 800204e:	d01b      	beq.n	8002088 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	4798      	blx	r3
 8002058:	e016      	b.n	8002088 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002064:	2b00      	cmp	r3, #0
 8002066:	d107      	bne.n	8002078 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f022 0208 	bic.w	r2, r2, #8
 8002076:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207c:	2b00      	cmp	r3, #0
 800207e:	d003      	beq.n	8002088 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800208c:	2220      	movs	r2, #32
 800208e:	409a      	lsls	r2, r3
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	4013      	ands	r3, r2
 8002094:	2b00      	cmp	r3, #0
 8002096:	f000 808f 	beq.w	80021b8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0310 	and.w	r3, r3, #16
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f000 8087 	beq.w	80021b8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ae:	2220      	movs	r2, #32
 80020b0:	409a      	lsls	r2, r3
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	2b05      	cmp	r3, #5
 80020c0:	d136      	bne.n	8002130 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f022 0216 	bic.w	r2, r2, #22
 80020d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	695a      	ldr	r2, [r3, #20]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80020e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d103      	bne.n	80020f2 <HAL_DMA_IRQHandler+0x1da>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d007      	beq.n	8002102 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f022 0208 	bic.w	r2, r2, #8
 8002100:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002106:	223f      	movs	r2, #63	@ 0x3f
 8002108:	409a      	lsls	r2, r3
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2201      	movs	r2, #1
 8002112:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002122:	2b00      	cmp	r3, #0
 8002124:	d07e      	beq.n	8002224 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	4798      	blx	r3
        }
        return;
 800212e:	e079      	b.n	8002224 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d01d      	beq.n	800217a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d10d      	bne.n	8002168 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002150:	2b00      	cmp	r3, #0
 8002152:	d031      	beq.n	80021b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	4798      	blx	r3
 800215c:	e02c      	b.n	80021b8 <HAL_DMA_IRQHandler+0x2a0>
 800215e:	bf00      	nop
 8002160:	20000000 	.word	0x20000000
 8002164:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800216c:	2b00      	cmp	r3, #0
 800216e:	d023      	beq.n	80021b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	4798      	blx	r3
 8002178:	e01e      	b.n	80021b8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002184:	2b00      	cmp	r3, #0
 8002186:	d10f      	bne.n	80021a8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f022 0210 	bic.w	r2, r2, #16
 8002196:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d003      	beq.n	80021b8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d032      	beq.n	8002226 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021c4:	f003 0301 	and.w	r3, r3, #1
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d022      	beq.n	8002212 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2205      	movs	r2, #5
 80021d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f022 0201 	bic.w	r2, r2, #1
 80021e2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	3301      	adds	r3, #1
 80021e8:	60bb      	str	r3, [r7, #8]
 80021ea:	697a      	ldr	r2, [r7, #20]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d307      	bcc.n	8002200 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1f2      	bne.n	80021e4 <HAL_DMA_IRQHandler+0x2cc>
 80021fe:	e000      	b.n	8002202 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002200:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2201      	movs	r2, #1
 8002206:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002216:	2b00      	cmp	r3, #0
 8002218:	d005      	beq.n	8002226 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	4798      	blx	r3
 8002222:	e000      	b.n	8002226 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002224:	bf00      	nop
    }
  }
}
 8002226:	3718      	adds	r7, #24
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	607a      	str	r2, [r7, #4]
 8002238:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002248:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	2b40      	cmp	r3, #64	@ 0x40
 8002258:	d108      	bne.n	800226c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68ba      	ldr	r2, [r7, #8]
 8002268:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800226a:	e007      	b.n	800227c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68ba      	ldr	r2, [r7, #8]
 8002272:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	60da      	str	r2, [r3, #12]
}
 800227c:	bf00      	nop
 800227e:	3714      	adds	r7, #20
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	b2db      	uxtb	r3, r3
 8002296:	3b10      	subs	r3, #16
 8002298:	4a14      	ldr	r2, [pc, #80]	@ (80022ec <DMA_CalcBaseAndBitshift+0x64>)
 800229a:	fba2 2303 	umull	r2, r3, r2, r3
 800229e:	091b      	lsrs	r3, r3, #4
 80022a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022a2:	4a13      	ldr	r2, [pc, #76]	@ (80022f0 <DMA_CalcBaseAndBitshift+0x68>)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	4413      	add	r3, r2
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	461a      	mov	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2b03      	cmp	r3, #3
 80022b4:	d909      	bls.n	80022ca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80022be:	f023 0303 	bic.w	r3, r3, #3
 80022c2:	1d1a      	adds	r2, r3, #4
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	659a      	str	r2, [r3, #88]	@ 0x58
 80022c8:	e007      	b.n	80022da <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80022d2:	f023 0303 	bic.w	r3, r3, #3
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3714      	adds	r7, #20
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	aaaaaaab 	.word	0xaaaaaaab
 80022f0:	08005310 	.word	0x08005310

080022f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022fc:	2300      	movs	r3, #0
 80022fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002304:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d11f      	bne.n	800234e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	2b03      	cmp	r3, #3
 8002312:	d856      	bhi.n	80023c2 <DMA_CheckFifoParam+0xce>
 8002314:	a201      	add	r2, pc, #4	@ (adr r2, 800231c <DMA_CheckFifoParam+0x28>)
 8002316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800231a:	bf00      	nop
 800231c:	0800232d 	.word	0x0800232d
 8002320:	0800233f 	.word	0x0800233f
 8002324:	0800232d 	.word	0x0800232d
 8002328:	080023c3 	.word	0x080023c3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002330:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d046      	beq.n	80023c6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800233c:	e043      	b.n	80023c6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002342:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002346:	d140      	bne.n	80023ca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800234c:	e03d      	b.n	80023ca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002356:	d121      	bne.n	800239c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	2b03      	cmp	r3, #3
 800235c:	d837      	bhi.n	80023ce <DMA_CheckFifoParam+0xda>
 800235e:	a201      	add	r2, pc, #4	@ (adr r2, 8002364 <DMA_CheckFifoParam+0x70>)
 8002360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002364:	08002375 	.word	0x08002375
 8002368:	0800237b 	.word	0x0800237b
 800236c:	08002375 	.word	0x08002375
 8002370:	0800238d 	.word	0x0800238d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	73fb      	strb	r3, [r7, #15]
      break;
 8002378:	e030      	b.n	80023dc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800237e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d025      	beq.n	80023d2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800238a:	e022      	b.n	80023d2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002390:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002394:	d11f      	bne.n	80023d6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800239a:	e01c      	b.n	80023d6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d903      	bls.n	80023aa <DMA_CheckFifoParam+0xb6>
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	2b03      	cmp	r3, #3
 80023a6:	d003      	beq.n	80023b0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80023a8:	e018      	b.n	80023dc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	73fb      	strb	r3, [r7, #15]
      break;
 80023ae:	e015      	b.n	80023dc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d00e      	beq.n	80023da <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	73fb      	strb	r3, [r7, #15]
      break;
 80023c0:	e00b      	b.n	80023da <DMA_CheckFifoParam+0xe6>
      break;
 80023c2:	bf00      	nop
 80023c4:	e00a      	b.n	80023dc <DMA_CheckFifoParam+0xe8>
      break;
 80023c6:	bf00      	nop
 80023c8:	e008      	b.n	80023dc <DMA_CheckFifoParam+0xe8>
      break;
 80023ca:	bf00      	nop
 80023cc:	e006      	b.n	80023dc <DMA_CheckFifoParam+0xe8>
      break;
 80023ce:	bf00      	nop
 80023d0:	e004      	b.n	80023dc <DMA_CheckFifoParam+0xe8>
      break;
 80023d2:	bf00      	nop
 80023d4:	e002      	b.n	80023dc <DMA_CheckFifoParam+0xe8>
      break;   
 80023d6:	bf00      	nop
 80023d8:	e000      	b.n	80023dc <DMA_CheckFifoParam+0xe8>
      break;
 80023da:	bf00      	nop
    }
  } 
  
  return status; 
 80023dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3714      	adds	r7, #20
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop

080023ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b089      	sub	sp, #36	@ 0x24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023f6:	2300      	movs	r3, #0
 80023f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023fa:	2300      	movs	r3, #0
 80023fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023fe:	2300      	movs	r3, #0
 8002400:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002402:	2300      	movs	r3, #0
 8002404:	61fb      	str	r3, [r7, #28]
 8002406:	e16b      	b.n	80026e0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002408:	2201      	movs	r2, #1
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	4013      	ands	r3, r2
 800241a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800241c:	693a      	ldr	r2, [r7, #16]
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	429a      	cmp	r2, r3
 8002422:	f040 815a 	bne.w	80026da <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f003 0303 	and.w	r3, r3, #3
 800242e:	2b01      	cmp	r3, #1
 8002430:	d005      	beq.n	800243e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800243a:	2b02      	cmp	r3, #2
 800243c:	d130      	bne.n	80024a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	2203      	movs	r2, #3
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	43db      	mvns	r3, r3
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	4013      	ands	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	68da      	ldr	r2, [r3, #12]
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	4313      	orrs	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002474:	2201      	movs	r2, #1
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	43db      	mvns	r3, r3
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	4013      	ands	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	091b      	lsrs	r3, r3, #4
 800248a:	f003 0201 	and.w	r2, r3, #1
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	4313      	orrs	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f003 0303 	and.w	r3, r3, #3
 80024a8:	2b03      	cmp	r3, #3
 80024aa:	d017      	beq.n	80024dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	2203      	movs	r2, #3
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	43db      	mvns	r3, r3
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4013      	ands	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	689a      	ldr	r2, [r3, #8]
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f003 0303 	and.w	r3, r3, #3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d123      	bne.n	8002530 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	08da      	lsrs	r2, r3, #3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	3208      	adds	r2, #8
 80024f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	f003 0307 	and.w	r3, r3, #7
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	220f      	movs	r2, #15
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	43db      	mvns	r3, r3
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	4013      	ands	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	691a      	ldr	r2, [r3, #16]
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	f003 0307 	and.w	r3, r3, #7
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	4313      	orrs	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	08da      	lsrs	r2, r3, #3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	3208      	adds	r2, #8
 800252a:	69b9      	ldr	r1, [r7, #24]
 800252c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	2203      	movs	r2, #3
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	43db      	mvns	r3, r3
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	4013      	ands	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f003 0203 	and.w	r2, r3, #3
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	4313      	orrs	r3, r2
 800255c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800256c:	2b00      	cmp	r3, #0
 800256e:	f000 80b4 	beq.w	80026da <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002572:	2300      	movs	r3, #0
 8002574:	60fb      	str	r3, [r7, #12]
 8002576:	4b60      	ldr	r3, [pc, #384]	@ (80026f8 <HAL_GPIO_Init+0x30c>)
 8002578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800257a:	4a5f      	ldr	r2, [pc, #380]	@ (80026f8 <HAL_GPIO_Init+0x30c>)
 800257c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002580:	6453      	str	r3, [r2, #68]	@ 0x44
 8002582:	4b5d      	ldr	r3, [pc, #372]	@ (80026f8 <HAL_GPIO_Init+0x30c>)
 8002584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002586:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800258a:	60fb      	str	r3, [r7, #12]
 800258c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800258e:	4a5b      	ldr	r2, [pc, #364]	@ (80026fc <HAL_GPIO_Init+0x310>)
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	089b      	lsrs	r3, r3, #2
 8002594:	3302      	adds	r3, #2
 8002596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800259a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	f003 0303 	and.w	r3, r3, #3
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	220f      	movs	r2, #15
 80025a6:	fa02 f303 	lsl.w	r3, r2, r3
 80025aa:	43db      	mvns	r3, r3
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	4013      	ands	r3, r2
 80025b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a52      	ldr	r2, [pc, #328]	@ (8002700 <HAL_GPIO_Init+0x314>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d02b      	beq.n	8002612 <HAL_GPIO_Init+0x226>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a51      	ldr	r2, [pc, #324]	@ (8002704 <HAL_GPIO_Init+0x318>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d025      	beq.n	800260e <HAL_GPIO_Init+0x222>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a50      	ldr	r2, [pc, #320]	@ (8002708 <HAL_GPIO_Init+0x31c>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d01f      	beq.n	800260a <HAL_GPIO_Init+0x21e>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a4f      	ldr	r2, [pc, #316]	@ (800270c <HAL_GPIO_Init+0x320>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d019      	beq.n	8002606 <HAL_GPIO_Init+0x21a>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a4e      	ldr	r2, [pc, #312]	@ (8002710 <HAL_GPIO_Init+0x324>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d013      	beq.n	8002602 <HAL_GPIO_Init+0x216>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a4d      	ldr	r2, [pc, #308]	@ (8002714 <HAL_GPIO_Init+0x328>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d00d      	beq.n	80025fe <HAL_GPIO_Init+0x212>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a4c      	ldr	r2, [pc, #304]	@ (8002718 <HAL_GPIO_Init+0x32c>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d007      	beq.n	80025fa <HAL_GPIO_Init+0x20e>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a4b      	ldr	r2, [pc, #300]	@ (800271c <HAL_GPIO_Init+0x330>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d101      	bne.n	80025f6 <HAL_GPIO_Init+0x20a>
 80025f2:	2307      	movs	r3, #7
 80025f4:	e00e      	b.n	8002614 <HAL_GPIO_Init+0x228>
 80025f6:	2308      	movs	r3, #8
 80025f8:	e00c      	b.n	8002614 <HAL_GPIO_Init+0x228>
 80025fa:	2306      	movs	r3, #6
 80025fc:	e00a      	b.n	8002614 <HAL_GPIO_Init+0x228>
 80025fe:	2305      	movs	r3, #5
 8002600:	e008      	b.n	8002614 <HAL_GPIO_Init+0x228>
 8002602:	2304      	movs	r3, #4
 8002604:	e006      	b.n	8002614 <HAL_GPIO_Init+0x228>
 8002606:	2303      	movs	r3, #3
 8002608:	e004      	b.n	8002614 <HAL_GPIO_Init+0x228>
 800260a:	2302      	movs	r3, #2
 800260c:	e002      	b.n	8002614 <HAL_GPIO_Init+0x228>
 800260e:	2301      	movs	r3, #1
 8002610:	e000      	b.n	8002614 <HAL_GPIO_Init+0x228>
 8002612:	2300      	movs	r3, #0
 8002614:	69fa      	ldr	r2, [r7, #28]
 8002616:	f002 0203 	and.w	r2, r2, #3
 800261a:	0092      	lsls	r2, r2, #2
 800261c:	4093      	lsls	r3, r2
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	4313      	orrs	r3, r2
 8002622:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002624:	4935      	ldr	r1, [pc, #212]	@ (80026fc <HAL_GPIO_Init+0x310>)
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	089b      	lsrs	r3, r3, #2
 800262a:	3302      	adds	r3, #2
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002632:	4b3b      	ldr	r3, [pc, #236]	@ (8002720 <HAL_GPIO_Init+0x334>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	43db      	mvns	r3, r3
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	4013      	ands	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d003      	beq.n	8002656 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	4313      	orrs	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002656:	4a32      	ldr	r2, [pc, #200]	@ (8002720 <HAL_GPIO_Init+0x334>)
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800265c:	4b30      	ldr	r3, [pc, #192]	@ (8002720 <HAL_GPIO_Init+0x334>)
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	43db      	mvns	r3, r3
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4013      	ands	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d003      	beq.n	8002680 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	4313      	orrs	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002680:	4a27      	ldr	r2, [pc, #156]	@ (8002720 <HAL_GPIO_Init+0x334>)
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002686:	4b26      	ldr	r3, [pc, #152]	@ (8002720 <HAL_GPIO_Init+0x334>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	43db      	mvns	r3, r3
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	4013      	ands	r3, r2
 8002694:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d003      	beq.n	80026aa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026aa:	4a1d      	ldr	r2, [pc, #116]	@ (8002720 <HAL_GPIO_Init+0x334>)
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002720 <HAL_GPIO_Init+0x334>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	43db      	mvns	r3, r3
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	4013      	ands	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d003      	beq.n	80026d4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026d4:	4a12      	ldr	r2, [pc, #72]	@ (8002720 <HAL_GPIO_Init+0x334>)
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	3301      	adds	r3, #1
 80026de:	61fb      	str	r3, [r7, #28]
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	2b0f      	cmp	r3, #15
 80026e4:	f67f ae90 	bls.w	8002408 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026e8:	bf00      	nop
 80026ea:	bf00      	nop
 80026ec:	3724      	adds	r7, #36	@ 0x24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	40023800 	.word	0x40023800
 80026fc:	40013800 	.word	0x40013800
 8002700:	40020000 	.word	0x40020000
 8002704:	40020400 	.word	0x40020400
 8002708:	40020800 	.word	0x40020800
 800270c:	40020c00 	.word	0x40020c00
 8002710:	40021000 	.word	0x40021000
 8002714:	40021400 	.word	0x40021400
 8002718:	40021800 	.word	0x40021800
 800271c:	40021c00 	.word	0x40021c00
 8002720:	40013c00 	.word	0x40013c00

08002724 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b086      	sub	sp, #24
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e267      	b.n	8002c06 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	2b00      	cmp	r3, #0
 8002740:	d075      	beq.n	800282e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002742:	4b88      	ldr	r3, [pc, #544]	@ (8002964 <HAL_RCC_OscConfig+0x240>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f003 030c 	and.w	r3, r3, #12
 800274a:	2b04      	cmp	r3, #4
 800274c:	d00c      	beq.n	8002768 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800274e:	4b85      	ldr	r3, [pc, #532]	@ (8002964 <HAL_RCC_OscConfig+0x240>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002756:	2b08      	cmp	r3, #8
 8002758:	d112      	bne.n	8002780 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800275a:	4b82      	ldr	r3, [pc, #520]	@ (8002964 <HAL_RCC_OscConfig+0x240>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002762:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002766:	d10b      	bne.n	8002780 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002768:	4b7e      	ldr	r3, [pc, #504]	@ (8002964 <HAL_RCC_OscConfig+0x240>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d05b      	beq.n	800282c <HAL_RCC_OscConfig+0x108>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d157      	bne.n	800282c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e242      	b.n	8002c06 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002788:	d106      	bne.n	8002798 <HAL_RCC_OscConfig+0x74>
 800278a:	4b76      	ldr	r3, [pc, #472]	@ (8002964 <HAL_RCC_OscConfig+0x240>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a75      	ldr	r2, [pc, #468]	@ (8002964 <HAL_RCC_OscConfig+0x240>)
 8002790:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002794:	6013      	str	r3, [r2, #0]
 8002796:	e01d      	b.n	80027d4 <HAL_RCC_OscConfig+0xb0>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027a0:	d10c      	bne.n	80027bc <HAL_RCC_OscConfig+0x98>
 80027a2:	4b70      	ldr	r3, [pc, #448]	@ (8002964 <HAL_RCC_OscConfig+0x240>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a6f      	ldr	r2, [pc, #444]	@ (8002964 <HAL_RCC_OscConfig+0x240>)
 80027a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027ac:	6013      	str	r3, [r2, #0]
 80027ae:	4b6d      	ldr	r3, [pc, #436]	@ (8002964 <HAL_RCC_OscConfig+0x240>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a6c      	ldr	r2, [pc, #432]	@ (8002964 <HAL_RCC_OscConfig+0x240>)
 80027b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027b8:	6013      	str	r3, [r2, #0]
 80027ba:	e00b      	b.n	80027d4 <HAL_RCC_OscConfig+0xb0>
 80027bc:	4b69      	ldr	r3, [pc, #420]	@ (8002964 <HAL_RCC_OscConfig+0x240>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a68      	ldr	r2, [pc, #416]	@ (8002964 <HAL_RCC_OscConfig+0x240>)
 80027c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027c6:	6013      	str	r3, [r2, #0]
 80027c8:	4b66      	ldr	r3, [pc, #408]	@ (8002964 <HAL_RCC_OscConfig+0x240>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a65      	ldr	r2, [pc, #404]	@ (8002964 <HAL_RCC_OscConfig+0x240>)
 80027ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d013      	beq.n	8002804 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027dc:	f7ff f954 	bl	8001a88 <HAL_GetTick>
 80027e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027e2:	e008      	b.n	80027f6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027e4:	f7ff f950 	bl	8001a88 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	2b64      	cmp	r3, #100	@ 0x64
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e207      	b.n	8002c06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027f6:	4b5b      	ldr	r3, [pc, #364]	@ (8002964 <HAL_RCC_OscConfig+0x240>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d0f0      	beq.n	80027e4 <HAL_RCC_OscConfig+0xc0>
 8002802:	e014      	b.n	800282e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002804:	f7ff f940 	bl	8001a88 <HAL_GetTick>
 8002808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800280a:	e008      	b.n	800281e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800280c:	f7ff f93c 	bl	8001a88 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b64      	cmp	r3, #100	@ 0x64
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e1f3      	b.n	8002c06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800281e:	4b51      	ldr	r3, [pc, #324]	@ (8002964 <HAL_RCC_OscConfig+0x240>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1f0      	bne.n	800280c <HAL_RCC_OscConfig+0xe8>
 800282a:	e000      	b.n	800282e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800282c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d063      	beq.n	8002902 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800283a:	4b4a      	ldr	r3, [pc, #296]	@ (8002964 <HAL_RCC_OscConfig+0x240>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f003 030c 	and.w	r3, r3, #12
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00b      	beq.n	800285e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002846:	4b47      	ldr	r3, [pc, #284]	@ (8002964 <HAL_RCC_OscConfig+0x240>)
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800284e:	2b08      	cmp	r3, #8
 8002850:	d11c      	bne.n	800288c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002852:	4b44      	ldr	r3, [pc, #272]	@ (8002964 <HAL_RCC_OscConfig+0x240>)
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d116      	bne.n	800288c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800285e:	4b41      	ldr	r3, [pc, #260]	@ (8002964 <HAL_RCC_OscConfig+0x240>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d005      	beq.n	8002876 <HAL_RCC_OscConfig+0x152>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d001      	beq.n	8002876 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e1c7      	b.n	8002c06 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002876:	4b3b      	ldr	r3, [pc, #236]	@ (8002964 <HAL_RCC_OscConfig+0x240>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	4937      	ldr	r1, [pc, #220]	@ (8002964 <HAL_RCC_OscConfig+0x240>)
 8002886:	4313      	orrs	r3, r2
 8002888:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800288a:	e03a      	b.n	8002902 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d020      	beq.n	80028d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002894:	4b34      	ldr	r3, [pc, #208]	@ (8002968 <HAL_RCC_OscConfig+0x244>)
 8002896:	2201      	movs	r2, #1
 8002898:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289a:	f7ff f8f5 	bl	8001a88 <HAL_GetTick>
 800289e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028a0:	e008      	b.n	80028b4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028a2:	f7ff f8f1 	bl	8001a88 <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d901      	bls.n	80028b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e1a8      	b.n	8002c06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028b4:	4b2b      	ldr	r3, [pc, #172]	@ (8002964 <HAL_RCC_OscConfig+0x240>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0302 	and.w	r3, r3, #2
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d0f0      	beq.n	80028a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028c0:	4b28      	ldr	r3, [pc, #160]	@ (8002964 <HAL_RCC_OscConfig+0x240>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	00db      	lsls	r3, r3, #3
 80028ce:	4925      	ldr	r1, [pc, #148]	@ (8002964 <HAL_RCC_OscConfig+0x240>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	600b      	str	r3, [r1, #0]
 80028d4:	e015      	b.n	8002902 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028d6:	4b24      	ldr	r3, [pc, #144]	@ (8002968 <HAL_RCC_OscConfig+0x244>)
 80028d8:	2200      	movs	r2, #0
 80028da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028dc:	f7ff f8d4 	bl	8001a88 <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028e4:	f7ff f8d0 	bl	8001a88 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e187      	b.n	8002c06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002964 <HAL_RCC_OscConfig+0x240>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d1f0      	bne.n	80028e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0308 	and.w	r3, r3, #8
 800290a:	2b00      	cmp	r3, #0
 800290c:	d036      	beq.n	800297c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d016      	beq.n	8002944 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002916:	4b15      	ldr	r3, [pc, #84]	@ (800296c <HAL_RCC_OscConfig+0x248>)
 8002918:	2201      	movs	r2, #1
 800291a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800291c:	f7ff f8b4 	bl	8001a88 <HAL_GetTick>
 8002920:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002922:	e008      	b.n	8002936 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002924:	f7ff f8b0 	bl	8001a88 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b02      	cmp	r3, #2
 8002930:	d901      	bls.n	8002936 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e167      	b.n	8002c06 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002936:	4b0b      	ldr	r3, [pc, #44]	@ (8002964 <HAL_RCC_OscConfig+0x240>)
 8002938:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d0f0      	beq.n	8002924 <HAL_RCC_OscConfig+0x200>
 8002942:	e01b      	b.n	800297c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002944:	4b09      	ldr	r3, [pc, #36]	@ (800296c <HAL_RCC_OscConfig+0x248>)
 8002946:	2200      	movs	r2, #0
 8002948:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800294a:	f7ff f89d 	bl	8001a88 <HAL_GetTick>
 800294e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002950:	e00e      	b.n	8002970 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002952:	f7ff f899 	bl	8001a88 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b02      	cmp	r3, #2
 800295e:	d907      	bls.n	8002970 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e150      	b.n	8002c06 <HAL_RCC_OscConfig+0x4e2>
 8002964:	40023800 	.word	0x40023800
 8002968:	42470000 	.word	0x42470000
 800296c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002970:	4b88      	ldr	r3, [pc, #544]	@ (8002b94 <HAL_RCC_OscConfig+0x470>)
 8002972:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002974:	f003 0302 	and.w	r3, r3, #2
 8002978:	2b00      	cmp	r3, #0
 800297a:	d1ea      	bne.n	8002952 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0304 	and.w	r3, r3, #4
 8002984:	2b00      	cmp	r3, #0
 8002986:	f000 8097 	beq.w	8002ab8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800298a:	2300      	movs	r3, #0
 800298c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800298e:	4b81      	ldr	r3, [pc, #516]	@ (8002b94 <HAL_RCC_OscConfig+0x470>)
 8002990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002992:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d10f      	bne.n	80029ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800299a:	2300      	movs	r3, #0
 800299c:	60bb      	str	r3, [r7, #8]
 800299e:	4b7d      	ldr	r3, [pc, #500]	@ (8002b94 <HAL_RCC_OscConfig+0x470>)
 80029a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a2:	4a7c      	ldr	r2, [pc, #496]	@ (8002b94 <HAL_RCC_OscConfig+0x470>)
 80029a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80029aa:	4b7a      	ldr	r3, [pc, #488]	@ (8002b94 <HAL_RCC_OscConfig+0x470>)
 80029ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029b2:	60bb      	str	r3, [r7, #8]
 80029b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029b6:	2301      	movs	r3, #1
 80029b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ba:	4b77      	ldr	r3, [pc, #476]	@ (8002b98 <HAL_RCC_OscConfig+0x474>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d118      	bne.n	80029f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029c6:	4b74      	ldr	r3, [pc, #464]	@ (8002b98 <HAL_RCC_OscConfig+0x474>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a73      	ldr	r2, [pc, #460]	@ (8002b98 <HAL_RCC_OscConfig+0x474>)
 80029cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029d2:	f7ff f859 	bl	8001a88 <HAL_GetTick>
 80029d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d8:	e008      	b.n	80029ec <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029da:	f7ff f855 	bl	8001a88 <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e10c      	b.n	8002c06 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ec:	4b6a      	ldr	r3, [pc, #424]	@ (8002b98 <HAL_RCC_OscConfig+0x474>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d0f0      	beq.n	80029da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d106      	bne.n	8002a0e <HAL_RCC_OscConfig+0x2ea>
 8002a00:	4b64      	ldr	r3, [pc, #400]	@ (8002b94 <HAL_RCC_OscConfig+0x470>)
 8002a02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a04:	4a63      	ldr	r2, [pc, #396]	@ (8002b94 <HAL_RCC_OscConfig+0x470>)
 8002a06:	f043 0301 	orr.w	r3, r3, #1
 8002a0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a0c:	e01c      	b.n	8002a48 <HAL_RCC_OscConfig+0x324>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	2b05      	cmp	r3, #5
 8002a14:	d10c      	bne.n	8002a30 <HAL_RCC_OscConfig+0x30c>
 8002a16:	4b5f      	ldr	r3, [pc, #380]	@ (8002b94 <HAL_RCC_OscConfig+0x470>)
 8002a18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a1a:	4a5e      	ldr	r2, [pc, #376]	@ (8002b94 <HAL_RCC_OscConfig+0x470>)
 8002a1c:	f043 0304 	orr.w	r3, r3, #4
 8002a20:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a22:	4b5c      	ldr	r3, [pc, #368]	@ (8002b94 <HAL_RCC_OscConfig+0x470>)
 8002a24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a26:	4a5b      	ldr	r2, [pc, #364]	@ (8002b94 <HAL_RCC_OscConfig+0x470>)
 8002a28:	f043 0301 	orr.w	r3, r3, #1
 8002a2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a2e:	e00b      	b.n	8002a48 <HAL_RCC_OscConfig+0x324>
 8002a30:	4b58      	ldr	r3, [pc, #352]	@ (8002b94 <HAL_RCC_OscConfig+0x470>)
 8002a32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a34:	4a57      	ldr	r2, [pc, #348]	@ (8002b94 <HAL_RCC_OscConfig+0x470>)
 8002a36:	f023 0301 	bic.w	r3, r3, #1
 8002a3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a3c:	4b55      	ldr	r3, [pc, #340]	@ (8002b94 <HAL_RCC_OscConfig+0x470>)
 8002a3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a40:	4a54      	ldr	r2, [pc, #336]	@ (8002b94 <HAL_RCC_OscConfig+0x470>)
 8002a42:	f023 0304 	bic.w	r3, r3, #4
 8002a46:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d015      	beq.n	8002a7c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a50:	f7ff f81a 	bl	8001a88 <HAL_GetTick>
 8002a54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a56:	e00a      	b.n	8002a6e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a58:	f7ff f816 	bl	8001a88 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e0cb      	b.n	8002c06 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a6e:	4b49      	ldr	r3, [pc, #292]	@ (8002b94 <HAL_RCC_OscConfig+0x470>)
 8002a70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d0ee      	beq.n	8002a58 <HAL_RCC_OscConfig+0x334>
 8002a7a:	e014      	b.n	8002aa6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a7c:	f7ff f804 	bl	8001a88 <HAL_GetTick>
 8002a80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a82:	e00a      	b.n	8002a9a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a84:	f7ff f800 	bl	8001a88 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e0b5      	b.n	8002c06 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a9a:	4b3e      	ldr	r3, [pc, #248]	@ (8002b94 <HAL_RCC_OscConfig+0x470>)
 8002a9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1ee      	bne.n	8002a84 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002aa6:	7dfb      	ldrb	r3, [r7, #23]
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d105      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aac:	4b39      	ldr	r3, [pc, #228]	@ (8002b94 <HAL_RCC_OscConfig+0x470>)
 8002aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab0:	4a38      	ldr	r2, [pc, #224]	@ (8002b94 <HAL_RCC_OscConfig+0x470>)
 8002ab2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ab6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f000 80a1 	beq.w	8002c04 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ac2:	4b34      	ldr	r3, [pc, #208]	@ (8002b94 <HAL_RCC_OscConfig+0x470>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f003 030c 	and.w	r3, r3, #12
 8002aca:	2b08      	cmp	r3, #8
 8002acc:	d05c      	beq.n	8002b88 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	699b      	ldr	r3, [r3, #24]
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d141      	bne.n	8002b5a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ad6:	4b31      	ldr	r3, [pc, #196]	@ (8002b9c <HAL_RCC_OscConfig+0x478>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002adc:	f7fe ffd4 	bl	8001a88 <HAL_GetTick>
 8002ae0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ae2:	e008      	b.n	8002af6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ae4:	f7fe ffd0 	bl	8001a88 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e087      	b.n	8002c06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002af6:	4b27      	ldr	r3, [pc, #156]	@ (8002b94 <HAL_RCC_OscConfig+0x470>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1f0      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	69da      	ldr	r2, [r3, #28]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a1b      	ldr	r3, [r3, #32]
 8002b0a:	431a      	orrs	r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b10:	019b      	lsls	r3, r3, #6
 8002b12:	431a      	orrs	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b18:	085b      	lsrs	r3, r3, #1
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	041b      	lsls	r3, r3, #16
 8002b1e:	431a      	orrs	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b24:	061b      	lsls	r3, r3, #24
 8002b26:	491b      	ldr	r1, [pc, #108]	@ (8002b94 <HAL_RCC_OscConfig+0x470>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b2c:	4b1b      	ldr	r3, [pc, #108]	@ (8002b9c <HAL_RCC_OscConfig+0x478>)
 8002b2e:	2201      	movs	r2, #1
 8002b30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b32:	f7fe ffa9 	bl	8001a88 <HAL_GetTick>
 8002b36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b38:	e008      	b.n	8002b4c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b3a:	f7fe ffa5 	bl	8001a88 <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d901      	bls.n	8002b4c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e05c      	b.n	8002c06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b4c:	4b11      	ldr	r3, [pc, #68]	@ (8002b94 <HAL_RCC_OscConfig+0x470>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d0f0      	beq.n	8002b3a <HAL_RCC_OscConfig+0x416>
 8002b58:	e054      	b.n	8002c04 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b5a:	4b10      	ldr	r3, [pc, #64]	@ (8002b9c <HAL_RCC_OscConfig+0x478>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b60:	f7fe ff92 	bl	8001a88 <HAL_GetTick>
 8002b64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b66:	e008      	b.n	8002b7a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b68:	f7fe ff8e 	bl	8001a88 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e045      	b.n	8002c06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b7a:	4b06      	ldr	r3, [pc, #24]	@ (8002b94 <HAL_RCC_OscConfig+0x470>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1f0      	bne.n	8002b68 <HAL_RCC_OscConfig+0x444>
 8002b86:	e03d      	b.n	8002c04 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d107      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e038      	b.n	8002c06 <HAL_RCC_OscConfig+0x4e2>
 8002b94:	40023800 	.word	0x40023800
 8002b98:	40007000 	.word	0x40007000
 8002b9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ba0:	4b1b      	ldr	r3, [pc, #108]	@ (8002c10 <HAL_RCC_OscConfig+0x4ec>)
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d028      	beq.n	8002c00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d121      	bne.n	8002c00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d11a      	bne.n	8002c00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002bd6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d111      	bne.n	8002c00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002be6:	085b      	lsrs	r3, r3, #1
 8002be8:	3b01      	subs	r3, #1
 8002bea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d107      	bne.n	8002c00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bfa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d001      	beq.n	8002c04 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e000      	b.n	8002c06 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3718      	adds	r7, #24
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	40023800 	.word	0x40023800

08002c14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d101      	bne.n	8002c28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e0cc      	b.n	8002dc2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c28:	4b68      	ldr	r3, [pc, #416]	@ (8002dcc <HAL_RCC_ClockConfig+0x1b8>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0307 	and.w	r3, r3, #7
 8002c30:	683a      	ldr	r2, [r7, #0]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d90c      	bls.n	8002c50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c36:	4b65      	ldr	r3, [pc, #404]	@ (8002dcc <HAL_RCC_ClockConfig+0x1b8>)
 8002c38:	683a      	ldr	r2, [r7, #0]
 8002c3a:	b2d2      	uxtb	r2, r2
 8002c3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c3e:	4b63      	ldr	r3, [pc, #396]	@ (8002dcc <HAL_RCC_ClockConfig+0x1b8>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0307 	and.w	r3, r3, #7
 8002c46:	683a      	ldr	r2, [r7, #0]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d001      	beq.n	8002c50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e0b8      	b.n	8002dc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0302 	and.w	r3, r3, #2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d020      	beq.n	8002c9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0304 	and.w	r3, r3, #4
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d005      	beq.n	8002c74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c68:	4b59      	ldr	r3, [pc, #356]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	4a58      	ldr	r2, [pc, #352]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002c72:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0308 	and.w	r3, r3, #8
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d005      	beq.n	8002c8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c80:	4b53      	ldr	r3, [pc, #332]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	4a52      	ldr	r2, [pc, #328]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c86:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002c8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c8c:	4b50      	ldr	r3, [pc, #320]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	494d      	ldr	r1, [pc, #308]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d044      	beq.n	8002d34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d107      	bne.n	8002cc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cb2:	4b47      	ldr	r3, [pc, #284]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d119      	bne.n	8002cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e07f      	b.n	8002dc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d003      	beq.n	8002cd2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cce:	2b03      	cmp	r3, #3
 8002cd0:	d107      	bne.n	8002ce2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cd2:	4b3f      	ldr	r3, [pc, #252]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d109      	bne.n	8002cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e06f      	b.n	8002dc2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ce2:	4b3b      	ldr	r3, [pc, #236]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e067      	b.n	8002dc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cf2:	4b37      	ldr	r3, [pc, #220]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f023 0203 	bic.w	r2, r3, #3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	4934      	ldr	r1, [pc, #208]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d04:	f7fe fec0 	bl	8001a88 <HAL_GetTick>
 8002d08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d0a:	e00a      	b.n	8002d22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d0c:	f7fe febc 	bl	8001a88 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e04f      	b.n	8002dc2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d22:	4b2b      	ldr	r3, [pc, #172]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f003 020c 	and.w	r2, r3, #12
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d1eb      	bne.n	8002d0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d34:	4b25      	ldr	r3, [pc, #148]	@ (8002dcc <HAL_RCC_ClockConfig+0x1b8>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0307 	and.w	r3, r3, #7
 8002d3c:	683a      	ldr	r2, [r7, #0]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d20c      	bcs.n	8002d5c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d42:	4b22      	ldr	r3, [pc, #136]	@ (8002dcc <HAL_RCC_ClockConfig+0x1b8>)
 8002d44:	683a      	ldr	r2, [r7, #0]
 8002d46:	b2d2      	uxtb	r2, r2
 8002d48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d4a:	4b20      	ldr	r3, [pc, #128]	@ (8002dcc <HAL_RCC_ClockConfig+0x1b8>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0307 	and.w	r3, r3, #7
 8002d52:	683a      	ldr	r2, [r7, #0]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d001      	beq.n	8002d5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e032      	b.n	8002dc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0304 	and.w	r3, r3, #4
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d008      	beq.n	8002d7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d68:	4b19      	ldr	r3, [pc, #100]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	4916      	ldr	r1, [pc, #88]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0308 	and.w	r3, r3, #8
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d009      	beq.n	8002d9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d86:	4b12      	ldr	r3, [pc, #72]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	490e      	ldr	r1, [pc, #56]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d9a:	f000 f821 	bl	8002de0 <HAL_RCC_GetSysClockFreq>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	4b0b      	ldr	r3, [pc, #44]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	091b      	lsrs	r3, r3, #4
 8002da6:	f003 030f 	and.w	r3, r3, #15
 8002daa:	490a      	ldr	r1, [pc, #40]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002dac:	5ccb      	ldrb	r3, [r1, r3]
 8002dae:	fa22 f303 	lsr.w	r3, r2, r3
 8002db2:	4a09      	ldr	r2, [pc, #36]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002db4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002db6:	4b09      	ldr	r3, [pc, #36]	@ (8002ddc <HAL_RCC_ClockConfig+0x1c8>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7fe fe20 	bl	8001a00 <HAL_InitTick>

  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3710      	adds	r7, #16
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	40023c00 	.word	0x40023c00
 8002dd0:	40023800 	.word	0x40023800
 8002dd4:	08005300 	.word	0x08005300
 8002dd8:	20000000 	.word	0x20000000
 8002ddc:	20000004 	.word	0x20000004

08002de0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002de0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002de4:	b094      	sub	sp, #80	@ 0x50
 8002de6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002de8:	2300      	movs	r3, #0
 8002dea:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002dec:	2300      	movs	r3, #0
 8002dee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002df0:	2300      	movs	r3, #0
 8002df2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002df4:	2300      	movs	r3, #0
 8002df6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002df8:	4b79      	ldr	r3, [pc, #484]	@ (8002fe0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f003 030c 	and.w	r3, r3, #12
 8002e00:	2b08      	cmp	r3, #8
 8002e02:	d00d      	beq.n	8002e20 <HAL_RCC_GetSysClockFreq+0x40>
 8002e04:	2b08      	cmp	r3, #8
 8002e06:	f200 80e1 	bhi.w	8002fcc <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d002      	beq.n	8002e14 <HAL_RCC_GetSysClockFreq+0x34>
 8002e0e:	2b04      	cmp	r3, #4
 8002e10:	d003      	beq.n	8002e1a <HAL_RCC_GetSysClockFreq+0x3a>
 8002e12:	e0db      	b.n	8002fcc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e14:	4b73      	ldr	r3, [pc, #460]	@ (8002fe4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e16:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e18:	e0db      	b.n	8002fd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e1a:	4b73      	ldr	r3, [pc, #460]	@ (8002fe8 <HAL_RCC_GetSysClockFreq+0x208>)
 8002e1c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e1e:	e0d8      	b.n	8002fd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e20:	4b6f      	ldr	r3, [pc, #444]	@ (8002fe0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e28:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e2a:	4b6d      	ldr	r3, [pc, #436]	@ (8002fe0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d063      	beq.n	8002efe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e36:	4b6a      	ldr	r3, [pc, #424]	@ (8002fe0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	099b      	lsrs	r3, r3, #6
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e40:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002e42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e48:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e4e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002e52:	4622      	mov	r2, r4
 8002e54:	462b      	mov	r3, r5
 8002e56:	f04f 0000 	mov.w	r0, #0
 8002e5a:	f04f 0100 	mov.w	r1, #0
 8002e5e:	0159      	lsls	r1, r3, #5
 8002e60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e64:	0150      	lsls	r0, r2, #5
 8002e66:	4602      	mov	r2, r0
 8002e68:	460b      	mov	r3, r1
 8002e6a:	4621      	mov	r1, r4
 8002e6c:	1a51      	subs	r1, r2, r1
 8002e6e:	6139      	str	r1, [r7, #16]
 8002e70:	4629      	mov	r1, r5
 8002e72:	eb63 0301 	sbc.w	r3, r3, r1
 8002e76:	617b      	str	r3, [r7, #20]
 8002e78:	f04f 0200 	mov.w	r2, #0
 8002e7c:	f04f 0300 	mov.w	r3, #0
 8002e80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e84:	4659      	mov	r1, fp
 8002e86:	018b      	lsls	r3, r1, #6
 8002e88:	4651      	mov	r1, sl
 8002e8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e8e:	4651      	mov	r1, sl
 8002e90:	018a      	lsls	r2, r1, #6
 8002e92:	4651      	mov	r1, sl
 8002e94:	ebb2 0801 	subs.w	r8, r2, r1
 8002e98:	4659      	mov	r1, fp
 8002e9a:	eb63 0901 	sbc.w	r9, r3, r1
 8002e9e:	f04f 0200 	mov.w	r2, #0
 8002ea2:	f04f 0300 	mov.w	r3, #0
 8002ea6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002eaa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002eae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002eb2:	4690      	mov	r8, r2
 8002eb4:	4699      	mov	r9, r3
 8002eb6:	4623      	mov	r3, r4
 8002eb8:	eb18 0303 	adds.w	r3, r8, r3
 8002ebc:	60bb      	str	r3, [r7, #8]
 8002ebe:	462b      	mov	r3, r5
 8002ec0:	eb49 0303 	adc.w	r3, r9, r3
 8002ec4:	60fb      	str	r3, [r7, #12]
 8002ec6:	f04f 0200 	mov.w	r2, #0
 8002eca:	f04f 0300 	mov.w	r3, #0
 8002ece:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002ed2:	4629      	mov	r1, r5
 8002ed4:	024b      	lsls	r3, r1, #9
 8002ed6:	4621      	mov	r1, r4
 8002ed8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002edc:	4621      	mov	r1, r4
 8002ede:	024a      	lsls	r2, r1, #9
 8002ee0:	4610      	mov	r0, r2
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002eea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002eec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002ef0:	f7fd fe58 	bl	8000ba4 <__aeabi_uldivmod>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	4613      	mov	r3, r2
 8002efa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002efc:	e058      	b.n	8002fb0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002efe:	4b38      	ldr	r3, [pc, #224]	@ (8002fe0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	099b      	lsrs	r3, r3, #6
 8002f04:	2200      	movs	r2, #0
 8002f06:	4618      	mov	r0, r3
 8002f08:	4611      	mov	r1, r2
 8002f0a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f0e:	623b      	str	r3, [r7, #32]
 8002f10:	2300      	movs	r3, #0
 8002f12:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f14:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f18:	4642      	mov	r2, r8
 8002f1a:	464b      	mov	r3, r9
 8002f1c:	f04f 0000 	mov.w	r0, #0
 8002f20:	f04f 0100 	mov.w	r1, #0
 8002f24:	0159      	lsls	r1, r3, #5
 8002f26:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f2a:	0150      	lsls	r0, r2, #5
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	460b      	mov	r3, r1
 8002f30:	4641      	mov	r1, r8
 8002f32:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f36:	4649      	mov	r1, r9
 8002f38:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f3c:	f04f 0200 	mov.w	r2, #0
 8002f40:	f04f 0300 	mov.w	r3, #0
 8002f44:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f48:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f4c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f50:	ebb2 040a 	subs.w	r4, r2, sl
 8002f54:	eb63 050b 	sbc.w	r5, r3, fp
 8002f58:	f04f 0200 	mov.w	r2, #0
 8002f5c:	f04f 0300 	mov.w	r3, #0
 8002f60:	00eb      	lsls	r3, r5, #3
 8002f62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f66:	00e2      	lsls	r2, r4, #3
 8002f68:	4614      	mov	r4, r2
 8002f6a:	461d      	mov	r5, r3
 8002f6c:	4643      	mov	r3, r8
 8002f6e:	18e3      	adds	r3, r4, r3
 8002f70:	603b      	str	r3, [r7, #0]
 8002f72:	464b      	mov	r3, r9
 8002f74:	eb45 0303 	adc.w	r3, r5, r3
 8002f78:	607b      	str	r3, [r7, #4]
 8002f7a:	f04f 0200 	mov.w	r2, #0
 8002f7e:	f04f 0300 	mov.w	r3, #0
 8002f82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f86:	4629      	mov	r1, r5
 8002f88:	028b      	lsls	r3, r1, #10
 8002f8a:	4621      	mov	r1, r4
 8002f8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f90:	4621      	mov	r1, r4
 8002f92:	028a      	lsls	r2, r1, #10
 8002f94:	4610      	mov	r0, r2
 8002f96:	4619      	mov	r1, r3
 8002f98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	61bb      	str	r3, [r7, #24]
 8002f9e:	61fa      	str	r2, [r7, #28]
 8002fa0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fa4:	f7fd fdfe 	bl	8000ba4 <__aeabi_uldivmod>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	460b      	mov	r3, r1
 8002fac:	4613      	mov	r3, r2
 8002fae:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8002fe0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	0c1b      	lsrs	r3, r3, #16
 8002fb6:	f003 0303 	and.w	r3, r3, #3
 8002fba:	3301      	adds	r3, #1
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002fc0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002fc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fc8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002fca:	e002      	b.n	8002fd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fcc:	4b05      	ldr	r3, [pc, #20]	@ (8002fe4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002fce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002fd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3750      	adds	r7, #80	@ 0x50
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fde:	bf00      	nop
 8002fe0:	40023800 	.word	0x40023800
 8002fe4:	00f42400 	.word	0x00f42400
 8002fe8:	007a1200 	.word	0x007a1200

08002fec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d101      	bne.n	8002ffe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e041      	b.n	8003082 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2b00      	cmp	r3, #0
 8003008:	d106      	bne.n	8003018 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f7fe fbce 	bl	80017b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2202      	movs	r2, #2
 800301c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	3304      	adds	r3, #4
 8003028:	4619      	mov	r1, r3
 800302a:	4610      	mov	r0, r2
 800302c:	f000 fcc6 	bl	80039bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800308a:	b580      	push	{r7, lr}
 800308c:	b082      	sub	sp, #8
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d101      	bne.n	800309c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e041      	b.n	8003120 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d106      	bne.n	80030b6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f000 f839 	bl	8003128 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2202      	movs	r2, #2
 80030ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	3304      	adds	r3, #4
 80030c6:	4619      	mov	r1, r3
 80030c8:	4610      	mov	r0, r2
 80030ca:	f000 fc77 	bl	80039bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2201      	movs	r2, #1
 80030d2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2201      	movs	r2, #1
 80030ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2201      	movs	r2, #1
 8003112:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	3708      	adds	r7, #8
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
 8003148:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800314a:	2300      	movs	r3, #0
 800314c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d109      	bne.n	8003168 <HAL_TIM_PWM_Start_DMA+0x2c>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2b02      	cmp	r3, #2
 800315e:	bf0c      	ite	eq
 8003160:	2301      	moveq	r3, #1
 8003162:	2300      	movne	r3, #0
 8003164:	b2db      	uxtb	r3, r3
 8003166:	e022      	b.n	80031ae <HAL_TIM_PWM_Start_DMA+0x72>
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	2b04      	cmp	r3, #4
 800316c:	d109      	bne.n	8003182 <HAL_TIM_PWM_Start_DMA+0x46>
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	bf0c      	ite	eq
 800317a:	2301      	moveq	r3, #1
 800317c:	2300      	movne	r3, #0
 800317e:	b2db      	uxtb	r3, r3
 8003180:	e015      	b.n	80031ae <HAL_TIM_PWM_Start_DMA+0x72>
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	2b08      	cmp	r3, #8
 8003186:	d109      	bne.n	800319c <HAL_TIM_PWM_Start_DMA+0x60>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800318e:	b2db      	uxtb	r3, r3
 8003190:	2b02      	cmp	r3, #2
 8003192:	bf0c      	ite	eq
 8003194:	2301      	moveq	r3, #1
 8003196:	2300      	movne	r3, #0
 8003198:	b2db      	uxtb	r3, r3
 800319a:	e008      	b.n	80031ae <HAL_TIM_PWM_Start_DMA+0x72>
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	bf0c      	ite	eq
 80031a8:	2301      	moveq	r3, #1
 80031aa:	2300      	movne	r3, #0
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d001      	beq.n	80031b6 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80031b2:	2302      	movs	r3, #2
 80031b4:	e171      	b.n	800349a <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d109      	bne.n	80031d0 <HAL_TIM_PWM_Start_DMA+0x94>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	bf0c      	ite	eq
 80031c8:	2301      	moveq	r3, #1
 80031ca:	2300      	movne	r3, #0
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	e022      	b.n	8003216 <HAL_TIM_PWM_Start_DMA+0xda>
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	2b04      	cmp	r3, #4
 80031d4:	d109      	bne.n	80031ea <HAL_TIM_PWM_Start_DMA+0xae>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b01      	cmp	r3, #1
 80031e0:	bf0c      	ite	eq
 80031e2:	2301      	moveq	r3, #1
 80031e4:	2300      	movne	r3, #0
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	e015      	b.n	8003216 <HAL_TIM_PWM_Start_DMA+0xda>
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	2b08      	cmp	r3, #8
 80031ee:	d109      	bne.n	8003204 <HAL_TIM_PWM_Start_DMA+0xc8>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	bf0c      	ite	eq
 80031fc:	2301      	moveq	r3, #1
 80031fe:	2300      	movne	r3, #0
 8003200:	b2db      	uxtb	r3, r3
 8003202:	e008      	b.n	8003216 <HAL_TIM_PWM_Start_DMA+0xda>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800320a:	b2db      	uxtb	r3, r3
 800320c:	2b01      	cmp	r3, #1
 800320e:	bf0c      	ite	eq
 8003210:	2301      	moveq	r3, #1
 8003212:	2300      	movne	r3, #0
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d024      	beq.n	8003264 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d002      	beq.n	8003226 <HAL_TIM_PWM_Start_DMA+0xea>
 8003220:	887b      	ldrh	r3, [r7, #2]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d101      	bne.n	800322a <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e137      	b.n	800349a <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d104      	bne.n	800323a <HAL_TIM_PWM_Start_DMA+0xfe>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2202      	movs	r2, #2
 8003234:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003238:	e016      	b.n	8003268 <HAL_TIM_PWM_Start_DMA+0x12c>
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	2b04      	cmp	r3, #4
 800323e:	d104      	bne.n	800324a <HAL_TIM_PWM_Start_DMA+0x10e>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2202      	movs	r2, #2
 8003244:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003248:	e00e      	b.n	8003268 <HAL_TIM_PWM_Start_DMA+0x12c>
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	2b08      	cmp	r3, #8
 800324e:	d104      	bne.n	800325a <HAL_TIM_PWM_Start_DMA+0x11e>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2202      	movs	r2, #2
 8003254:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003258:	e006      	b.n	8003268 <HAL_TIM_PWM_Start_DMA+0x12c>
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2202      	movs	r2, #2
 800325e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003262:	e001      	b.n	8003268 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e118      	b.n	800349a <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	2b0c      	cmp	r3, #12
 800326c:	f200 80ae 	bhi.w	80033cc <HAL_TIM_PWM_Start_DMA+0x290>
 8003270:	a201      	add	r2, pc, #4	@ (adr r2, 8003278 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8003272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003276:	bf00      	nop
 8003278:	080032ad 	.word	0x080032ad
 800327c:	080033cd 	.word	0x080033cd
 8003280:	080033cd 	.word	0x080033cd
 8003284:	080033cd 	.word	0x080033cd
 8003288:	080032f5 	.word	0x080032f5
 800328c:	080033cd 	.word	0x080033cd
 8003290:	080033cd 	.word	0x080033cd
 8003294:	080033cd 	.word	0x080033cd
 8003298:	0800333d 	.word	0x0800333d
 800329c:	080033cd 	.word	0x080033cd
 80032a0:	080033cd 	.word	0x080033cd
 80032a4:	080033cd 	.word	0x080033cd
 80032a8:	08003385 	.word	0x08003385
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b0:	4a7c      	ldr	r2, [pc, #496]	@ (80034a4 <HAL_TIM_PWM_Start_DMA+0x368>)
 80032b2:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b8:	4a7b      	ldr	r2, [pc, #492]	@ (80034a8 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80032ba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c0:	4a7a      	ldr	r2, [pc, #488]	@ (80034ac <HAL_TIM_PWM_Start_DMA+0x370>)
 80032c2:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80032c8:	6879      	ldr	r1, [r7, #4]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	3334      	adds	r3, #52	@ 0x34
 80032d0:	461a      	mov	r2, r3
 80032d2:	887b      	ldrh	r3, [r7, #2]
 80032d4:	f7fe fdc8 	bl	8001e68 <HAL_DMA_Start_IT>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e0db      	b.n	800349a <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68da      	ldr	r2, [r3, #12]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032f0:	60da      	str	r2, [r3, #12]
      break;
 80032f2:	e06e      	b.n	80033d2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032f8:	4a6a      	ldr	r2, [pc, #424]	@ (80034a4 <HAL_TIM_PWM_Start_DMA+0x368>)
 80032fa:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003300:	4a69      	ldr	r2, [pc, #420]	@ (80034a8 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003302:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003308:	4a68      	ldr	r2, [pc, #416]	@ (80034ac <HAL_TIM_PWM_Start_DMA+0x370>)
 800330a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003310:	6879      	ldr	r1, [r7, #4]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	3338      	adds	r3, #56	@ 0x38
 8003318:	461a      	mov	r2, r3
 800331a:	887b      	ldrh	r3, [r7, #2]
 800331c:	f7fe fda4 	bl	8001e68 <HAL_DMA_Start_IT>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e0b7      	b.n	800349a <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68da      	ldr	r2, [r3, #12]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003338:	60da      	str	r2, [r3, #12]
      break;
 800333a:	e04a      	b.n	80033d2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003340:	4a58      	ldr	r2, [pc, #352]	@ (80034a4 <HAL_TIM_PWM_Start_DMA+0x368>)
 8003342:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003348:	4a57      	ldr	r2, [pc, #348]	@ (80034a8 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800334a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003350:	4a56      	ldr	r2, [pc, #344]	@ (80034ac <HAL_TIM_PWM_Start_DMA+0x370>)
 8003352:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8003358:	6879      	ldr	r1, [r7, #4]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	333c      	adds	r3, #60	@ 0x3c
 8003360:	461a      	mov	r2, r3
 8003362:	887b      	ldrh	r3, [r7, #2]
 8003364:	f7fe fd80 	bl	8001e68 <HAL_DMA_Start_IT>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e093      	b.n	800349a <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68da      	ldr	r2, [r3, #12]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003380:	60da      	str	r2, [r3, #12]
      break;
 8003382:	e026      	b.n	80033d2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003388:	4a46      	ldr	r2, [pc, #280]	@ (80034a4 <HAL_TIM_PWM_Start_DMA+0x368>)
 800338a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003390:	4a45      	ldr	r2, [pc, #276]	@ (80034a8 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003392:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003398:	4a44      	ldr	r2, [pc, #272]	@ (80034ac <HAL_TIM_PWM_Start_DMA+0x370>)
 800339a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80033a0:	6879      	ldr	r1, [r7, #4]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	3340      	adds	r3, #64	@ 0x40
 80033a8:	461a      	mov	r2, r3
 80033aa:	887b      	ldrh	r3, [r7, #2]
 80033ac:	f7fe fd5c 	bl	8001e68 <HAL_DMA_Start_IT>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d001      	beq.n	80033ba <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e06f      	b.n	800349a <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	68da      	ldr	r2, [r3, #12]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80033c8:	60da      	str	r2, [r3, #12]
      break;
 80033ca:	e002      	b.n	80033d2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	75fb      	strb	r3, [r7, #23]
      break;
 80033d0:	bf00      	nop
  }

  if (status == HAL_OK)
 80033d2:	7dfb      	ldrb	r3, [r7, #23]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d15f      	bne.n	8003498 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2201      	movs	r2, #1
 80033de:	68b9      	ldr	r1, [r7, #8]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f000 fddb 	bl	8003f9c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a31      	ldr	r2, [pc, #196]	@ (80034b0 <HAL_TIM_PWM_Start_DMA+0x374>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d004      	beq.n	80033fa <HAL_TIM_PWM_Start_DMA+0x2be>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a2f      	ldr	r2, [pc, #188]	@ (80034b4 <HAL_TIM_PWM_Start_DMA+0x378>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d101      	bne.n	80033fe <HAL_TIM_PWM_Start_DMA+0x2c2>
 80033fa:	2301      	movs	r3, #1
 80033fc:	e000      	b.n	8003400 <HAL_TIM_PWM_Start_DMA+0x2c4>
 80033fe:	2300      	movs	r3, #0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d007      	beq.n	8003414 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003412:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a25      	ldr	r2, [pc, #148]	@ (80034b0 <HAL_TIM_PWM_Start_DMA+0x374>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d022      	beq.n	8003464 <HAL_TIM_PWM_Start_DMA+0x328>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003426:	d01d      	beq.n	8003464 <HAL_TIM_PWM_Start_DMA+0x328>
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a22      	ldr	r2, [pc, #136]	@ (80034b8 <HAL_TIM_PWM_Start_DMA+0x37c>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d018      	beq.n	8003464 <HAL_TIM_PWM_Start_DMA+0x328>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a21      	ldr	r2, [pc, #132]	@ (80034bc <HAL_TIM_PWM_Start_DMA+0x380>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d013      	beq.n	8003464 <HAL_TIM_PWM_Start_DMA+0x328>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a1f      	ldr	r2, [pc, #124]	@ (80034c0 <HAL_TIM_PWM_Start_DMA+0x384>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d00e      	beq.n	8003464 <HAL_TIM_PWM_Start_DMA+0x328>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a1a      	ldr	r2, [pc, #104]	@ (80034b4 <HAL_TIM_PWM_Start_DMA+0x378>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d009      	beq.n	8003464 <HAL_TIM_PWM_Start_DMA+0x328>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a1b      	ldr	r2, [pc, #108]	@ (80034c4 <HAL_TIM_PWM_Start_DMA+0x388>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d004      	beq.n	8003464 <HAL_TIM_PWM_Start_DMA+0x328>
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a1a      	ldr	r2, [pc, #104]	@ (80034c8 <HAL_TIM_PWM_Start_DMA+0x38c>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d111      	bne.n	8003488 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f003 0307 	and.w	r3, r3, #7
 800346e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	2b06      	cmp	r3, #6
 8003474:	d010      	beq.n	8003498 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f042 0201 	orr.w	r2, r2, #1
 8003484:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003486:	e007      	b.n	8003498 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f042 0201 	orr.w	r2, r2, #1
 8003496:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003498:	7dfb      	ldrb	r3, [r7, #23]
}
 800349a:	4618      	mov	r0, r3
 800349c:	3718      	adds	r7, #24
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	080038ad 	.word	0x080038ad
 80034a8:	08003955 	.word	0x08003955
 80034ac:	0800381b 	.word	0x0800381b
 80034b0:	40010000 	.word	0x40010000
 80034b4:	40010400 	.word	0x40010400
 80034b8:	40000400 	.word	0x40000400
 80034bc:	40000800 	.word	0x40000800
 80034c0:	40000c00 	.word	0x40000c00
 80034c4:	40014000 	.word	0x40014000
 80034c8:	40001800 	.word	0x40001800

080034cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b086      	sub	sp, #24
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034d8:	2300      	movs	r3, #0
 80034da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d101      	bne.n	80034ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80034e6:	2302      	movs	r3, #2
 80034e8:	e0ae      	b.n	8003648 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2b0c      	cmp	r3, #12
 80034f6:	f200 809f 	bhi.w	8003638 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80034fa:	a201      	add	r2, pc, #4	@ (adr r2, 8003500 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80034fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003500:	08003535 	.word	0x08003535
 8003504:	08003639 	.word	0x08003639
 8003508:	08003639 	.word	0x08003639
 800350c:	08003639 	.word	0x08003639
 8003510:	08003575 	.word	0x08003575
 8003514:	08003639 	.word	0x08003639
 8003518:	08003639 	.word	0x08003639
 800351c:	08003639 	.word	0x08003639
 8003520:	080035b7 	.word	0x080035b7
 8003524:	08003639 	.word	0x08003639
 8003528:	08003639 	.word	0x08003639
 800352c:	08003639 	.word	0x08003639
 8003530:	080035f7 	.word	0x080035f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68b9      	ldr	r1, [r7, #8]
 800353a:	4618      	mov	r0, r3
 800353c:	f000 fae4 	bl	8003b08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	699a      	ldr	r2, [r3, #24]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f042 0208 	orr.w	r2, r2, #8
 800354e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	699a      	ldr	r2, [r3, #24]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f022 0204 	bic.w	r2, r2, #4
 800355e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	6999      	ldr	r1, [r3, #24]
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	691a      	ldr	r2, [r3, #16]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	430a      	orrs	r2, r1
 8003570:	619a      	str	r2, [r3, #24]
      break;
 8003572:	e064      	b.n	800363e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68b9      	ldr	r1, [r7, #8]
 800357a:	4618      	mov	r0, r3
 800357c:	f000 fb34 	bl	8003be8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	699a      	ldr	r2, [r3, #24]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800358e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	699a      	ldr	r2, [r3, #24]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800359e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	6999      	ldr	r1, [r3, #24]
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	021a      	lsls	r2, r3, #8
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	430a      	orrs	r2, r1
 80035b2:	619a      	str	r2, [r3, #24]
      break;
 80035b4:	e043      	b.n	800363e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68b9      	ldr	r1, [r7, #8]
 80035bc:	4618      	mov	r0, r3
 80035be:	f000 fb89 	bl	8003cd4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	69da      	ldr	r2, [r3, #28]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f042 0208 	orr.w	r2, r2, #8
 80035d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	69da      	ldr	r2, [r3, #28]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f022 0204 	bic.w	r2, r2, #4
 80035e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	69d9      	ldr	r1, [r3, #28]
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	691a      	ldr	r2, [r3, #16]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	430a      	orrs	r2, r1
 80035f2:	61da      	str	r2, [r3, #28]
      break;
 80035f4:	e023      	b.n	800363e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68b9      	ldr	r1, [r7, #8]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f000 fbdd 	bl	8003dbc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	69da      	ldr	r2, [r3, #28]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003610:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	69da      	ldr	r2, [r3, #28]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003620:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	69d9      	ldr	r1, [r3, #28]
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	691b      	ldr	r3, [r3, #16]
 800362c:	021a      	lsls	r2, r3, #8
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	430a      	orrs	r2, r1
 8003634:	61da      	str	r2, [r3, #28]
      break;
 8003636:	e002      	b.n	800363e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	75fb      	strb	r3, [r7, #23]
      break;
 800363c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003646:	7dfb      	ldrb	r3, [r7, #23]
}
 8003648:	4618      	mov	r0, r3
 800364a:	3718      	adds	r7, #24
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800365a:	2300      	movs	r3, #0
 800365c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003664:	2b01      	cmp	r3, #1
 8003666:	d101      	bne.n	800366c <HAL_TIM_ConfigClockSource+0x1c>
 8003668:	2302      	movs	r3, #2
 800366a:	e0b4      	b.n	80037d6 <HAL_TIM_ConfigClockSource+0x186>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2202      	movs	r2, #2
 8003678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800368a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003692:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68ba      	ldr	r2, [r7, #8]
 800369a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036a4:	d03e      	beq.n	8003724 <HAL_TIM_ConfigClockSource+0xd4>
 80036a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036aa:	f200 8087 	bhi.w	80037bc <HAL_TIM_ConfigClockSource+0x16c>
 80036ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036b2:	f000 8086 	beq.w	80037c2 <HAL_TIM_ConfigClockSource+0x172>
 80036b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036ba:	d87f      	bhi.n	80037bc <HAL_TIM_ConfigClockSource+0x16c>
 80036bc:	2b70      	cmp	r3, #112	@ 0x70
 80036be:	d01a      	beq.n	80036f6 <HAL_TIM_ConfigClockSource+0xa6>
 80036c0:	2b70      	cmp	r3, #112	@ 0x70
 80036c2:	d87b      	bhi.n	80037bc <HAL_TIM_ConfigClockSource+0x16c>
 80036c4:	2b60      	cmp	r3, #96	@ 0x60
 80036c6:	d050      	beq.n	800376a <HAL_TIM_ConfigClockSource+0x11a>
 80036c8:	2b60      	cmp	r3, #96	@ 0x60
 80036ca:	d877      	bhi.n	80037bc <HAL_TIM_ConfigClockSource+0x16c>
 80036cc:	2b50      	cmp	r3, #80	@ 0x50
 80036ce:	d03c      	beq.n	800374a <HAL_TIM_ConfigClockSource+0xfa>
 80036d0:	2b50      	cmp	r3, #80	@ 0x50
 80036d2:	d873      	bhi.n	80037bc <HAL_TIM_ConfigClockSource+0x16c>
 80036d4:	2b40      	cmp	r3, #64	@ 0x40
 80036d6:	d058      	beq.n	800378a <HAL_TIM_ConfigClockSource+0x13a>
 80036d8:	2b40      	cmp	r3, #64	@ 0x40
 80036da:	d86f      	bhi.n	80037bc <HAL_TIM_ConfigClockSource+0x16c>
 80036dc:	2b30      	cmp	r3, #48	@ 0x30
 80036de:	d064      	beq.n	80037aa <HAL_TIM_ConfigClockSource+0x15a>
 80036e0:	2b30      	cmp	r3, #48	@ 0x30
 80036e2:	d86b      	bhi.n	80037bc <HAL_TIM_ConfigClockSource+0x16c>
 80036e4:	2b20      	cmp	r3, #32
 80036e6:	d060      	beq.n	80037aa <HAL_TIM_ConfigClockSource+0x15a>
 80036e8:	2b20      	cmp	r3, #32
 80036ea:	d867      	bhi.n	80037bc <HAL_TIM_ConfigClockSource+0x16c>
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d05c      	beq.n	80037aa <HAL_TIM_ConfigClockSource+0x15a>
 80036f0:	2b10      	cmp	r3, #16
 80036f2:	d05a      	beq.n	80037aa <HAL_TIM_ConfigClockSource+0x15a>
 80036f4:	e062      	b.n	80037bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003706:	f000 fc29 	bl	8003f5c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003718:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68ba      	ldr	r2, [r7, #8]
 8003720:	609a      	str	r2, [r3, #8]
      break;
 8003722:	e04f      	b.n	80037c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003734:	f000 fc12 	bl	8003f5c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	689a      	ldr	r2, [r3, #8]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003746:	609a      	str	r2, [r3, #8]
      break;
 8003748:	e03c      	b.n	80037c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003756:	461a      	mov	r2, r3
 8003758:	f000 fb86 	bl	8003e68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2150      	movs	r1, #80	@ 0x50
 8003762:	4618      	mov	r0, r3
 8003764:	f000 fbdf 	bl	8003f26 <TIM_ITRx_SetConfig>
      break;
 8003768:	e02c      	b.n	80037c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003776:	461a      	mov	r2, r3
 8003778:	f000 fba5 	bl	8003ec6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2160      	movs	r1, #96	@ 0x60
 8003782:	4618      	mov	r0, r3
 8003784:	f000 fbcf 	bl	8003f26 <TIM_ITRx_SetConfig>
      break;
 8003788:	e01c      	b.n	80037c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003796:	461a      	mov	r2, r3
 8003798:	f000 fb66 	bl	8003e68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2140      	movs	r1, #64	@ 0x40
 80037a2:	4618      	mov	r0, r3
 80037a4:	f000 fbbf 	bl	8003f26 <TIM_ITRx_SetConfig>
      break;
 80037a8:	e00c      	b.n	80037c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4619      	mov	r1, r3
 80037b4:	4610      	mov	r0, r2
 80037b6:	f000 fbb6 	bl	8003f26 <TIM_ITRx_SetConfig>
      break;
 80037ba:	e003      	b.n	80037c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	73fb      	strb	r3, [r7, #15]
      break;
 80037c0:	e000      	b.n	80037c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80037c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80037d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3710      	adds	r7, #16
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037de:	b480      	push	{r7}
 80037e0:	b083      	sub	sp, #12
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037e6:	bf00      	nop
 80037e8:	370c      	adds	r7, #12
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr

080037f2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80037f2:	b480      	push	{r7}
 80037f4:	b083      	sub	sp, #12
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80037fa:	bf00      	nop
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr

08003806 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003806:	b480      	push	{r7}
 8003808:	b083      	sub	sp, #12
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800380e:	bf00      	nop
 8003810:	370c      	adds	r7, #12
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr

0800381a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800381a:	b580      	push	{r7, lr}
 800381c:	b084      	sub	sp, #16
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003826:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	429a      	cmp	r2, r3
 8003830:	d107      	bne.n	8003842 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2201      	movs	r2, #1
 8003836:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003840:	e02a      	b.n	8003898 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	429a      	cmp	r2, r3
 800384a:	d107      	bne.n	800385c <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2202      	movs	r2, #2
 8003850:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2201      	movs	r2, #1
 8003856:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800385a:	e01d      	b.n	8003898 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	429a      	cmp	r2, r3
 8003864:	d107      	bne.n	8003876 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2204      	movs	r2, #4
 800386a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003874:	e010      	b.n	8003898 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	429a      	cmp	r2, r3
 800387e:	d107      	bne.n	8003890 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2208      	movs	r2, #8
 8003884:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2201      	movs	r2, #1
 800388a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800388e:	e003      	b.n	8003898 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	f7ff ffb4 	bl	8003806 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	771a      	strb	r2, [r3, #28]
}
 80038a4:	bf00      	nop
 80038a6:	3710      	adds	r7, #16
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038b8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d10b      	bne.n	80038dc <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2201      	movs	r2, #1
 80038c8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	69db      	ldr	r3, [r3, #28]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d136      	bne.n	8003940 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2201      	movs	r2, #1
 80038d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80038da:	e031      	b.n	8003940 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d10b      	bne.n	80038fe <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2202      	movs	r2, #2
 80038ea:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	69db      	ldr	r3, [r3, #28]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d125      	bne.n	8003940 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80038fc:	e020      	b.n	8003940 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	429a      	cmp	r2, r3
 8003906:	d10b      	bne.n	8003920 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2204      	movs	r2, #4
 800390c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	69db      	ldr	r3, [r3, #28]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d114      	bne.n	8003940 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2201      	movs	r2, #1
 800391a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800391e:	e00f      	b.n	8003940 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	429a      	cmp	r2, r3
 8003928:	d10a      	bne.n	8003940 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2208      	movs	r2, #8
 800392e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	69db      	ldr	r3, [r3, #28]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d103      	bne.n	8003940 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	f7ff ff4c 	bl	80037de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	771a      	strb	r2, [r3, #28]
}
 800394c:	bf00      	nop
 800394e:	3710      	adds	r7, #16
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003960:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	429a      	cmp	r2, r3
 800396a:	d103      	bne.n	8003974 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2201      	movs	r2, #1
 8003970:	771a      	strb	r2, [r3, #28]
 8003972:	e019      	b.n	80039a8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	429a      	cmp	r2, r3
 800397c:	d103      	bne.n	8003986 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2202      	movs	r2, #2
 8003982:	771a      	strb	r2, [r3, #28]
 8003984:	e010      	b.n	80039a8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	429a      	cmp	r2, r3
 800398e:	d103      	bne.n	8003998 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2204      	movs	r2, #4
 8003994:	771a      	strb	r2, [r3, #28]
 8003996:	e007      	b.n	80039a8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d102      	bne.n	80039a8 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2208      	movs	r2, #8
 80039a6:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80039a8:	68f8      	ldr	r0, [r7, #12]
 80039aa:	f7ff ff22 	bl	80037f2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2200      	movs	r2, #0
 80039b2:	771a      	strb	r2, [r3, #28]
}
 80039b4:	bf00      	nop
 80039b6:	3710      	adds	r7, #16
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80039bc:	b480      	push	{r7}
 80039be:	b085      	sub	sp, #20
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a43      	ldr	r2, [pc, #268]	@ (8003adc <TIM_Base_SetConfig+0x120>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d013      	beq.n	80039fc <TIM_Base_SetConfig+0x40>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039da:	d00f      	beq.n	80039fc <TIM_Base_SetConfig+0x40>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a40      	ldr	r2, [pc, #256]	@ (8003ae0 <TIM_Base_SetConfig+0x124>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d00b      	beq.n	80039fc <TIM_Base_SetConfig+0x40>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a3f      	ldr	r2, [pc, #252]	@ (8003ae4 <TIM_Base_SetConfig+0x128>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d007      	beq.n	80039fc <TIM_Base_SetConfig+0x40>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4a3e      	ldr	r2, [pc, #248]	@ (8003ae8 <TIM_Base_SetConfig+0x12c>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d003      	beq.n	80039fc <TIM_Base_SetConfig+0x40>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4a3d      	ldr	r2, [pc, #244]	@ (8003aec <TIM_Base_SetConfig+0x130>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d108      	bne.n	8003a0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a32      	ldr	r2, [pc, #200]	@ (8003adc <TIM_Base_SetConfig+0x120>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d02b      	beq.n	8003a6e <TIM_Base_SetConfig+0xb2>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a1c:	d027      	beq.n	8003a6e <TIM_Base_SetConfig+0xb2>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a2f      	ldr	r2, [pc, #188]	@ (8003ae0 <TIM_Base_SetConfig+0x124>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d023      	beq.n	8003a6e <TIM_Base_SetConfig+0xb2>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a2e      	ldr	r2, [pc, #184]	@ (8003ae4 <TIM_Base_SetConfig+0x128>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d01f      	beq.n	8003a6e <TIM_Base_SetConfig+0xb2>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a2d      	ldr	r2, [pc, #180]	@ (8003ae8 <TIM_Base_SetConfig+0x12c>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d01b      	beq.n	8003a6e <TIM_Base_SetConfig+0xb2>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a2c      	ldr	r2, [pc, #176]	@ (8003aec <TIM_Base_SetConfig+0x130>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d017      	beq.n	8003a6e <TIM_Base_SetConfig+0xb2>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a2b      	ldr	r2, [pc, #172]	@ (8003af0 <TIM_Base_SetConfig+0x134>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d013      	beq.n	8003a6e <TIM_Base_SetConfig+0xb2>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a2a      	ldr	r2, [pc, #168]	@ (8003af4 <TIM_Base_SetConfig+0x138>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d00f      	beq.n	8003a6e <TIM_Base_SetConfig+0xb2>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a29      	ldr	r2, [pc, #164]	@ (8003af8 <TIM_Base_SetConfig+0x13c>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d00b      	beq.n	8003a6e <TIM_Base_SetConfig+0xb2>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a28      	ldr	r2, [pc, #160]	@ (8003afc <TIM_Base_SetConfig+0x140>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d007      	beq.n	8003a6e <TIM_Base_SetConfig+0xb2>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a27      	ldr	r2, [pc, #156]	@ (8003b00 <TIM_Base_SetConfig+0x144>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d003      	beq.n	8003a6e <TIM_Base_SetConfig+0xb2>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a26      	ldr	r2, [pc, #152]	@ (8003b04 <TIM_Base_SetConfig+0x148>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d108      	bne.n	8003a80 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	689a      	ldr	r2, [r3, #8]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a0e      	ldr	r2, [pc, #56]	@ (8003adc <TIM_Base_SetConfig+0x120>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d003      	beq.n	8003aae <TIM_Base_SetConfig+0xf2>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a10      	ldr	r2, [pc, #64]	@ (8003aec <TIM_Base_SetConfig+0x130>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d103      	bne.n	8003ab6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	691a      	ldr	r2, [r3, #16]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f043 0204 	orr.w	r2, r3, #4
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	601a      	str	r2, [r3, #0]
}
 8003ace:	bf00      	nop
 8003ad0:	3714      	adds	r7, #20
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	40010000 	.word	0x40010000
 8003ae0:	40000400 	.word	0x40000400
 8003ae4:	40000800 	.word	0x40000800
 8003ae8:	40000c00 	.word	0x40000c00
 8003aec:	40010400 	.word	0x40010400
 8003af0:	40014000 	.word	0x40014000
 8003af4:	40014400 	.word	0x40014400
 8003af8:	40014800 	.word	0x40014800
 8003afc:	40001800 	.word	0x40001800
 8003b00:	40001c00 	.word	0x40001c00
 8003b04:	40002000 	.word	0x40002000

08003b08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b087      	sub	sp, #28
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a1b      	ldr	r3, [r3, #32]
 8003b16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a1b      	ldr	r3, [r3, #32]
 8003b1c:	f023 0201 	bic.w	r2, r3, #1
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f023 0303 	bic.w	r3, r3, #3
 8003b3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68fa      	ldr	r2, [r7, #12]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	f023 0302 	bic.w	r3, r3, #2
 8003b50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	697a      	ldr	r2, [r7, #20]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a20      	ldr	r2, [pc, #128]	@ (8003be0 <TIM_OC1_SetConfig+0xd8>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d003      	beq.n	8003b6c <TIM_OC1_SetConfig+0x64>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a1f      	ldr	r2, [pc, #124]	@ (8003be4 <TIM_OC1_SetConfig+0xdc>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d10c      	bne.n	8003b86 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	f023 0308 	bic.w	r3, r3, #8
 8003b72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	697a      	ldr	r2, [r7, #20]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	f023 0304 	bic.w	r3, r3, #4
 8003b84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a15      	ldr	r2, [pc, #84]	@ (8003be0 <TIM_OC1_SetConfig+0xd8>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d003      	beq.n	8003b96 <TIM_OC1_SetConfig+0x8e>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a14      	ldr	r2, [pc, #80]	@ (8003be4 <TIM_OC1_SetConfig+0xdc>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d111      	bne.n	8003bba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003ba4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	699b      	ldr	r3, [r3, #24]
 8003bb4:	693a      	ldr	r2, [r7, #16]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	693a      	ldr	r2, [r7, #16]
 8003bbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	68fa      	ldr	r2, [r7, #12]
 8003bc4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	685a      	ldr	r2, [r3, #4]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	697a      	ldr	r2, [r7, #20]
 8003bd2:	621a      	str	r2, [r3, #32]
}
 8003bd4:	bf00      	nop
 8003bd6:	371c      	adds	r7, #28
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr
 8003be0:	40010000 	.word	0x40010000
 8003be4:	40010400 	.word	0x40010400

08003be8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b087      	sub	sp, #28
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a1b      	ldr	r3, [r3, #32]
 8003bf6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a1b      	ldr	r3, [r3, #32]
 8003bfc:	f023 0210 	bic.w	r2, r3, #16
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	021b      	lsls	r3, r3, #8
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	f023 0320 	bic.w	r3, r3, #32
 8003c32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	011b      	lsls	r3, r3, #4
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4a22      	ldr	r2, [pc, #136]	@ (8003ccc <TIM_OC2_SetConfig+0xe4>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d003      	beq.n	8003c50 <TIM_OC2_SetConfig+0x68>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a21      	ldr	r2, [pc, #132]	@ (8003cd0 <TIM_OC2_SetConfig+0xe8>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d10d      	bne.n	8003c6c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	011b      	lsls	r3, r3, #4
 8003c5e:	697a      	ldr	r2, [r7, #20]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c6a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	4a17      	ldr	r2, [pc, #92]	@ (8003ccc <TIM_OC2_SetConfig+0xe4>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d003      	beq.n	8003c7c <TIM_OC2_SetConfig+0x94>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a16      	ldr	r2, [pc, #88]	@ (8003cd0 <TIM_OC2_SetConfig+0xe8>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d113      	bne.n	8003ca4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003c82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003c8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	695b      	ldr	r3, [r3, #20]
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	699b      	ldr	r3, [r3, #24]
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	68fa      	ldr	r2, [r7, #12]
 8003cae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	685a      	ldr	r2, [r3, #4]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	621a      	str	r2, [r3, #32]
}
 8003cbe:	bf00      	nop
 8003cc0:	371c      	adds	r7, #28
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	40010000 	.word	0x40010000
 8003cd0:	40010400 	.word	0x40010400

08003cd4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b087      	sub	sp, #28
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a1b      	ldr	r3, [r3, #32]
 8003ce2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a1b      	ldr	r3, [r3, #32]
 8003ce8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	69db      	ldr	r3, [r3, #28]
 8003cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f023 0303 	bic.w	r3, r3, #3
 8003d0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68fa      	ldr	r2, [r7, #12]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003d1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	021b      	lsls	r3, r3, #8
 8003d24:	697a      	ldr	r2, [r7, #20]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a21      	ldr	r2, [pc, #132]	@ (8003db4 <TIM_OC3_SetConfig+0xe0>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d003      	beq.n	8003d3a <TIM_OC3_SetConfig+0x66>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a20      	ldr	r2, [pc, #128]	@ (8003db8 <TIM_OC3_SetConfig+0xe4>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d10d      	bne.n	8003d56 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003d40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	021b      	lsls	r3, r3, #8
 8003d48:	697a      	ldr	r2, [r7, #20]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a16      	ldr	r2, [pc, #88]	@ (8003db4 <TIM_OC3_SetConfig+0xe0>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d003      	beq.n	8003d66 <TIM_OC3_SetConfig+0x92>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a15      	ldr	r2, [pc, #84]	@ (8003db8 <TIM_OC3_SetConfig+0xe4>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d113      	bne.n	8003d8e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003d6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003d74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	011b      	lsls	r3, r3, #4
 8003d7c:	693a      	ldr	r2, [r7, #16]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	011b      	lsls	r3, r3, #4
 8003d88:	693a      	ldr	r2, [r7, #16]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	693a      	ldr	r2, [r7, #16]
 8003d92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	685a      	ldr	r2, [r3, #4]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	621a      	str	r2, [r3, #32]
}
 8003da8:	bf00      	nop
 8003daa:	371c      	adds	r7, #28
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr
 8003db4:	40010000 	.word	0x40010000
 8003db8:	40010400 	.word	0x40010400

08003dbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b087      	sub	sp, #28
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a1b      	ldr	r3, [r3, #32]
 8003dca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a1b      	ldr	r3, [r3, #32]
 8003dd0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	69db      	ldr	r3, [r3, #28]
 8003de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003dea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003df2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	021b      	lsls	r3, r3, #8
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	031b      	lsls	r3, r3, #12
 8003e0e:	693a      	ldr	r2, [r7, #16]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a12      	ldr	r2, [pc, #72]	@ (8003e60 <TIM_OC4_SetConfig+0xa4>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d003      	beq.n	8003e24 <TIM_OC4_SetConfig+0x68>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a11      	ldr	r2, [pc, #68]	@ (8003e64 <TIM_OC4_SetConfig+0xa8>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d109      	bne.n	8003e38 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	695b      	ldr	r3, [r3, #20]
 8003e30:	019b      	lsls	r3, r3, #6
 8003e32:	697a      	ldr	r2, [r7, #20]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	697a      	ldr	r2, [r7, #20]
 8003e3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	685a      	ldr	r2, [r3, #4]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	621a      	str	r2, [r3, #32]
}
 8003e52:	bf00      	nop
 8003e54:	371c      	adds	r7, #28
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	40010000 	.word	0x40010000
 8003e64:	40010400 	.word	0x40010400

08003e68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b087      	sub	sp, #28
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6a1b      	ldr	r3, [r3, #32]
 8003e78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
 8003e7e:	f023 0201 	bic.w	r2, r3, #1
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	011b      	lsls	r3, r3, #4
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	f023 030a 	bic.w	r3, r3, #10
 8003ea4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ea6:	697a      	ldr	r2, [r7, #20]
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	693a      	ldr	r2, [r7, #16]
 8003eb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	697a      	ldr	r2, [r7, #20]
 8003eb8:	621a      	str	r2, [r3, #32]
}
 8003eba:	bf00      	nop
 8003ebc:	371c      	adds	r7, #28
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr

08003ec6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b087      	sub	sp, #28
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	60f8      	str	r0, [r7, #12]
 8003ece:	60b9      	str	r1, [r7, #8]
 8003ed0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
 8003ed6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6a1b      	ldr	r3, [r3, #32]
 8003edc:	f023 0210 	bic.w	r2, r3, #16
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	699b      	ldr	r3, [r3, #24]
 8003ee8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003ef0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	031b      	lsls	r3, r3, #12
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003f02:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	011b      	lsls	r3, r3, #4
 8003f08:	697a      	ldr	r2, [r7, #20]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	693a      	ldr	r2, [r7, #16]
 8003f12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	621a      	str	r2, [r3, #32]
}
 8003f1a:	bf00      	nop
 8003f1c:	371c      	adds	r7, #28
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr

08003f26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f26:	b480      	push	{r7}
 8003f28:	b085      	sub	sp, #20
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	6078      	str	r0, [r7, #4]
 8003f2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f3e:	683a      	ldr	r2, [r7, #0]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	f043 0307 	orr.w	r3, r3, #7
 8003f48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	68fa      	ldr	r2, [r7, #12]
 8003f4e:	609a      	str	r2, [r3, #8]
}
 8003f50:	bf00      	nop
 8003f52:	3714      	adds	r7, #20
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b087      	sub	sp, #28
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]
 8003f68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	021a      	lsls	r2, r3, #8
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	697a      	ldr	r2, [r7, #20]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	697a      	ldr	r2, [r7, #20]
 8003f8e:	609a      	str	r2, [r3, #8]
}
 8003f90:	bf00      	nop
 8003f92:	371c      	adds	r7, #28
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b087      	sub	sp, #28
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	f003 031f 	and.w	r3, r3, #31
 8003fae:	2201      	movs	r2, #1
 8003fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6a1a      	ldr	r2, [r3, #32]
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	43db      	mvns	r3, r3
 8003fbe:	401a      	ands	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6a1a      	ldr	r2, [r3, #32]
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	f003 031f 	and.w	r3, r3, #31
 8003fce:	6879      	ldr	r1, [r7, #4]
 8003fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8003fd4:	431a      	orrs	r2, r3
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	621a      	str	r2, [r3, #32]
}
 8003fda:	bf00      	nop
 8003fdc:	371c      	adds	r7, #28
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
	...

08003fe8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d101      	bne.n	8004000 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	e05a      	b.n	80040b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2202      	movs	r2, #2
 800400c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004026:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	4313      	orrs	r3, r2
 8004030:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a21      	ldr	r2, [pc, #132]	@ (80040c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d022      	beq.n	800408a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800404c:	d01d      	beq.n	800408a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a1d      	ldr	r2, [pc, #116]	@ (80040c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d018      	beq.n	800408a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a1b      	ldr	r2, [pc, #108]	@ (80040cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d013      	beq.n	800408a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a1a      	ldr	r2, [pc, #104]	@ (80040d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d00e      	beq.n	800408a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a18      	ldr	r2, [pc, #96]	@ (80040d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d009      	beq.n	800408a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a17      	ldr	r2, [pc, #92]	@ (80040d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d004      	beq.n	800408a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a15      	ldr	r2, [pc, #84]	@ (80040dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d10c      	bne.n	80040a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004090:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	68ba      	ldr	r2, [r7, #8]
 8004098:	4313      	orrs	r3, r2
 800409a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68ba      	ldr	r2, [r7, #8]
 80040a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3714      	adds	r7, #20
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	40010000 	.word	0x40010000
 80040c8:	40000400 	.word	0x40000400
 80040cc:	40000800 	.word	0x40000800
 80040d0:	40000c00 	.word	0x40000c00
 80040d4:	40010400 	.word	0x40010400
 80040d8:	40014000 	.word	0x40014000
 80040dc:	40001800 	.word	0x40001800

080040e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b085      	sub	sp, #20
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80040ea:	2300      	movs	r3, #0
 80040ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d101      	bne.n	80040fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80040f8:	2302      	movs	r3, #2
 80040fa:	e03d      	b.n	8004178 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	4313      	orrs	r3, r2
 8004110:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	4313      	orrs	r3, r2
 800411e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	4313      	orrs	r3, r2
 800412c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4313      	orrs	r3, r2
 800413a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	4313      	orrs	r3, r2
 8004148:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	695b      	ldr	r3, [r3, #20]
 8004154:	4313      	orrs	r3, r2
 8004156:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	69db      	ldr	r3, [r3, #28]
 8004162:	4313      	orrs	r3, r2
 8004164:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	3714      	adds	r7, #20
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <memset>:
 8004184:	4402      	add	r2, r0
 8004186:	4603      	mov	r3, r0
 8004188:	4293      	cmp	r3, r2
 800418a:	d100      	bne.n	800418e <memset+0xa>
 800418c:	4770      	bx	lr
 800418e:	f803 1b01 	strb.w	r1, [r3], #1
 8004192:	e7f9      	b.n	8004188 <memset+0x4>

08004194 <__libc_init_array>:
 8004194:	b570      	push	{r4, r5, r6, lr}
 8004196:	4d0d      	ldr	r5, [pc, #52]	@ (80041cc <__libc_init_array+0x38>)
 8004198:	4c0d      	ldr	r4, [pc, #52]	@ (80041d0 <__libc_init_array+0x3c>)
 800419a:	1b64      	subs	r4, r4, r5
 800419c:	10a4      	asrs	r4, r4, #2
 800419e:	2600      	movs	r6, #0
 80041a0:	42a6      	cmp	r6, r4
 80041a2:	d109      	bne.n	80041b8 <__libc_init_array+0x24>
 80041a4:	4d0b      	ldr	r5, [pc, #44]	@ (80041d4 <__libc_init_array+0x40>)
 80041a6:	4c0c      	ldr	r4, [pc, #48]	@ (80041d8 <__libc_init_array+0x44>)
 80041a8:	f001 f89e 	bl	80052e8 <_init>
 80041ac:	1b64      	subs	r4, r4, r5
 80041ae:	10a4      	asrs	r4, r4, #2
 80041b0:	2600      	movs	r6, #0
 80041b2:	42a6      	cmp	r6, r4
 80041b4:	d105      	bne.n	80041c2 <__libc_init_array+0x2e>
 80041b6:	bd70      	pop	{r4, r5, r6, pc}
 80041b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80041bc:	4798      	blx	r3
 80041be:	3601      	adds	r6, #1
 80041c0:	e7ee      	b.n	80041a0 <__libc_init_array+0xc>
 80041c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80041c6:	4798      	blx	r3
 80041c8:	3601      	adds	r6, #1
 80041ca:	e7f2      	b.n	80041b2 <__libc_init_array+0x1e>
 80041cc:	080054f8 	.word	0x080054f8
 80041d0:	080054f8 	.word	0x080054f8
 80041d4:	080054f8 	.word	0x080054f8
 80041d8:	080054fc 	.word	0x080054fc
 80041dc:	00000000 	.word	0x00000000

080041e0 <tan>:
 80041e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80041e2:	ec53 2b10 	vmov	r2, r3, d0
 80041e6:	4816      	ldr	r0, [pc, #88]	@ (8004240 <tan+0x60>)
 80041e8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80041ec:	4281      	cmp	r1, r0
 80041ee:	d807      	bhi.n	8004200 <tan+0x20>
 80041f0:	ed9f 1b11 	vldr	d1, [pc, #68]	@ 8004238 <tan+0x58>
 80041f4:	2001      	movs	r0, #1
 80041f6:	b005      	add	sp, #20
 80041f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80041fc:	f000 b824 	b.w	8004248 <__kernel_tan>
 8004200:	4810      	ldr	r0, [pc, #64]	@ (8004244 <tan+0x64>)
 8004202:	4281      	cmp	r1, r0
 8004204:	d908      	bls.n	8004218 <tan+0x38>
 8004206:	4610      	mov	r0, r2
 8004208:	4619      	mov	r1, r3
 800420a:	f7fb ffe1 	bl	80001d0 <__aeabi_dsub>
 800420e:	ec41 0b10 	vmov	d0, r0, r1
 8004212:	b005      	add	sp, #20
 8004214:	f85d fb04 	ldr.w	pc, [sp], #4
 8004218:	4668      	mov	r0, sp
 800421a:	f000 fa19 	bl	8004650 <__ieee754_rem_pio2>
 800421e:	0040      	lsls	r0, r0, #1
 8004220:	f000 0002 	and.w	r0, r0, #2
 8004224:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004228:	ed9d 0b00 	vldr	d0, [sp]
 800422c:	f1c0 0001 	rsb	r0, r0, #1
 8004230:	f000 f80a 	bl	8004248 <__kernel_tan>
 8004234:	e7ed      	b.n	8004212 <tan+0x32>
 8004236:	bf00      	nop
	...
 8004240:	3fe921fb 	.word	0x3fe921fb
 8004244:	7fefffff 	.word	0x7fefffff

08004248 <__kernel_tan>:
 8004248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800424c:	ec5b ab10 	vmov	sl, fp, d0
 8004250:	4bdb      	ldr	r3, [pc, #876]	@ (80045c0 <__kernel_tan+0x378>)
 8004252:	b089      	sub	sp, #36	@ 0x24
 8004254:	f02b 4700 	bic.w	r7, fp, #2147483648	@ 0x80000000
 8004258:	429f      	cmp	r7, r3
 800425a:	ec59 8b11 	vmov	r8, r9, d1
 800425e:	4606      	mov	r6, r0
 8004260:	f8cd b008 	str.w	fp, [sp, #8]
 8004264:	d85d      	bhi.n	8004322 <__kernel_tan+0xda>
 8004266:	4650      	mov	r0, sl
 8004268:	4659      	mov	r1, fp
 800426a:	f7fc fc03 	bl	8000a74 <__aeabi_d2iz>
 800426e:	4605      	mov	r5, r0
 8004270:	2800      	cmp	r0, #0
 8004272:	d17c      	bne.n	800436e <__kernel_tan+0x126>
 8004274:	1c73      	adds	r3, r6, #1
 8004276:	4652      	mov	r2, sl
 8004278:	4313      	orrs	r3, r2
 800427a:	433b      	orrs	r3, r7
 800427c:	d110      	bne.n	80042a0 <__kernel_tan+0x58>
 800427e:	ec4b ab10 	vmov	d0, sl, fp
 8004282:	f000 fbe1 	bl	8004a48 <fabs>
 8004286:	49cf      	ldr	r1, [pc, #828]	@ (80045c4 <__kernel_tan+0x37c>)
 8004288:	ec53 2b10 	vmov	r2, r3, d0
 800428c:	2000      	movs	r0, #0
 800428e:	f7fc fa81 	bl	8000794 <__aeabi_ddiv>
 8004292:	4682      	mov	sl, r0
 8004294:	468b      	mov	fp, r1
 8004296:	ec4b ab10 	vmov	d0, sl, fp
 800429a:	b009      	add	sp, #36	@ 0x24
 800429c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042a0:	2e01      	cmp	r6, #1
 80042a2:	d0f8      	beq.n	8004296 <__kernel_tan+0x4e>
 80042a4:	4642      	mov	r2, r8
 80042a6:	464b      	mov	r3, r9
 80042a8:	4650      	mov	r0, sl
 80042aa:	4659      	mov	r1, fp
 80042ac:	f7fb ff92 	bl	80001d4 <__adddf3>
 80042b0:	4602      	mov	r2, r0
 80042b2:	460b      	mov	r3, r1
 80042b4:	460f      	mov	r7, r1
 80042b6:	2000      	movs	r0, #0
 80042b8:	49c3      	ldr	r1, [pc, #780]	@ (80045c8 <__kernel_tan+0x380>)
 80042ba:	f7fc fa6b 	bl	8000794 <__aeabi_ddiv>
 80042be:	e9cd 0100 	strd	r0, r1, [sp]
 80042c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80042c6:	462e      	mov	r6, r5
 80042c8:	4652      	mov	r2, sl
 80042ca:	462c      	mov	r4, r5
 80042cc:	4630      	mov	r0, r6
 80042ce:	461d      	mov	r5, r3
 80042d0:	4639      	mov	r1, r7
 80042d2:	465b      	mov	r3, fp
 80042d4:	f7fb ff7c 	bl	80001d0 <__aeabi_dsub>
 80042d8:	4602      	mov	r2, r0
 80042da:	460b      	mov	r3, r1
 80042dc:	4640      	mov	r0, r8
 80042de:	4649      	mov	r1, r9
 80042e0:	f7fb ff76 	bl	80001d0 <__aeabi_dsub>
 80042e4:	4632      	mov	r2, r6
 80042e6:	462b      	mov	r3, r5
 80042e8:	f7fc f92a 	bl	8000540 <__aeabi_dmul>
 80042ec:	4632      	mov	r2, r6
 80042ee:	4682      	mov	sl, r0
 80042f0:	468b      	mov	fp, r1
 80042f2:	462b      	mov	r3, r5
 80042f4:	4630      	mov	r0, r6
 80042f6:	4639      	mov	r1, r7
 80042f8:	f7fc f922 	bl	8000540 <__aeabi_dmul>
 80042fc:	4bb1      	ldr	r3, [pc, #708]	@ (80045c4 <__kernel_tan+0x37c>)
 80042fe:	2200      	movs	r2, #0
 8004300:	f7fb ff68 	bl	80001d4 <__adddf3>
 8004304:	4602      	mov	r2, r0
 8004306:	460b      	mov	r3, r1
 8004308:	4650      	mov	r0, sl
 800430a:	4659      	mov	r1, fp
 800430c:	f7fb ff62 	bl	80001d4 <__adddf3>
 8004310:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004314:	f7fc f914 	bl	8000540 <__aeabi_dmul>
 8004318:	4622      	mov	r2, r4
 800431a:	462b      	mov	r3, r5
 800431c:	f7fb ff5a 	bl	80001d4 <__adddf3>
 8004320:	e7b7      	b.n	8004292 <__kernel_tan+0x4a>
 8004322:	4baa      	ldr	r3, [pc, #680]	@ (80045cc <__kernel_tan+0x384>)
 8004324:	429f      	cmp	r7, r3
 8004326:	d922      	bls.n	800436e <__kernel_tan+0x126>
 8004328:	9b02      	ldr	r3, [sp, #8]
 800432a:	2b00      	cmp	r3, #0
 800432c:	da05      	bge.n	800433a <__kernel_tan+0xf2>
 800432e:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8004332:	469b      	mov	fp, r3
 8004334:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8004338:	4699      	mov	r9, r3
 800433a:	4652      	mov	r2, sl
 800433c:	465b      	mov	r3, fp
 800433e:	a182      	add	r1, pc, #520	@ (adr r1, 8004548 <__kernel_tan+0x300>)
 8004340:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004344:	f7fb ff44 	bl	80001d0 <__aeabi_dsub>
 8004348:	4642      	mov	r2, r8
 800434a:	464b      	mov	r3, r9
 800434c:	4604      	mov	r4, r0
 800434e:	460d      	mov	r5, r1
 8004350:	a17f      	add	r1, pc, #508	@ (adr r1, 8004550 <__kernel_tan+0x308>)
 8004352:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004356:	f7fb ff3b 	bl	80001d0 <__aeabi_dsub>
 800435a:	4622      	mov	r2, r4
 800435c:	462b      	mov	r3, r5
 800435e:	f7fb ff39 	bl	80001d4 <__adddf3>
 8004362:	f04f 0800 	mov.w	r8, #0
 8004366:	4682      	mov	sl, r0
 8004368:	468b      	mov	fp, r1
 800436a:	f04f 0900 	mov.w	r9, #0
 800436e:	4652      	mov	r2, sl
 8004370:	465b      	mov	r3, fp
 8004372:	4650      	mov	r0, sl
 8004374:	4659      	mov	r1, fp
 8004376:	f7fc f8e3 	bl	8000540 <__aeabi_dmul>
 800437a:	4602      	mov	r2, r0
 800437c:	460b      	mov	r3, r1
 800437e:	e9cd 2300 	strd	r2, r3, [sp]
 8004382:	f7fc f8dd 	bl	8000540 <__aeabi_dmul>
 8004386:	e9dd 2300 	ldrd	r2, r3, [sp]
 800438a:	4604      	mov	r4, r0
 800438c:	460d      	mov	r5, r1
 800438e:	4650      	mov	r0, sl
 8004390:	4659      	mov	r1, fp
 8004392:	f7fc f8d5 	bl	8000540 <__aeabi_dmul>
 8004396:	a370      	add	r3, pc, #448	@ (adr r3, 8004558 <__kernel_tan+0x310>)
 8004398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800439c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80043a0:	4620      	mov	r0, r4
 80043a2:	4629      	mov	r1, r5
 80043a4:	f7fc f8cc 	bl	8000540 <__aeabi_dmul>
 80043a8:	a36d      	add	r3, pc, #436	@ (adr r3, 8004560 <__kernel_tan+0x318>)
 80043aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ae:	f7fb ff11 	bl	80001d4 <__adddf3>
 80043b2:	4622      	mov	r2, r4
 80043b4:	462b      	mov	r3, r5
 80043b6:	f7fc f8c3 	bl	8000540 <__aeabi_dmul>
 80043ba:	a36b      	add	r3, pc, #428	@ (adr r3, 8004568 <__kernel_tan+0x320>)
 80043bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c0:	f7fb ff08 	bl	80001d4 <__adddf3>
 80043c4:	4622      	mov	r2, r4
 80043c6:	462b      	mov	r3, r5
 80043c8:	f7fc f8ba 	bl	8000540 <__aeabi_dmul>
 80043cc:	a368      	add	r3, pc, #416	@ (adr r3, 8004570 <__kernel_tan+0x328>)
 80043ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d2:	f7fb feff 	bl	80001d4 <__adddf3>
 80043d6:	4622      	mov	r2, r4
 80043d8:	462b      	mov	r3, r5
 80043da:	f7fc f8b1 	bl	8000540 <__aeabi_dmul>
 80043de:	a366      	add	r3, pc, #408	@ (adr r3, 8004578 <__kernel_tan+0x330>)
 80043e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e4:	f7fb fef6 	bl	80001d4 <__adddf3>
 80043e8:	4622      	mov	r2, r4
 80043ea:	462b      	mov	r3, r5
 80043ec:	f7fc f8a8 	bl	8000540 <__aeabi_dmul>
 80043f0:	a363      	add	r3, pc, #396	@ (adr r3, 8004580 <__kernel_tan+0x338>)
 80043f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f6:	f7fb feed 	bl	80001d4 <__adddf3>
 80043fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80043fe:	f7fc f89f 	bl	8000540 <__aeabi_dmul>
 8004402:	a361      	add	r3, pc, #388	@ (adr r3, 8004588 <__kernel_tan+0x340>)
 8004404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004408:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800440c:	4620      	mov	r0, r4
 800440e:	4629      	mov	r1, r5
 8004410:	f7fc f896 	bl	8000540 <__aeabi_dmul>
 8004414:	a35e      	add	r3, pc, #376	@ (adr r3, 8004590 <__kernel_tan+0x348>)
 8004416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800441a:	f7fb fedb 	bl	80001d4 <__adddf3>
 800441e:	4622      	mov	r2, r4
 8004420:	462b      	mov	r3, r5
 8004422:	f7fc f88d 	bl	8000540 <__aeabi_dmul>
 8004426:	a35c      	add	r3, pc, #368	@ (adr r3, 8004598 <__kernel_tan+0x350>)
 8004428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800442c:	f7fb fed2 	bl	80001d4 <__adddf3>
 8004430:	4622      	mov	r2, r4
 8004432:	462b      	mov	r3, r5
 8004434:	f7fc f884 	bl	8000540 <__aeabi_dmul>
 8004438:	a359      	add	r3, pc, #356	@ (adr r3, 80045a0 <__kernel_tan+0x358>)
 800443a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800443e:	f7fb fec9 	bl	80001d4 <__adddf3>
 8004442:	4622      	mov	r2, r4
 8004444:	462b      	mov	r3, r5
 8004446:	f7fc f87b 	bl	8000540 <__aeabi_dmul>
 800444a:	a357      	add	r3, pc, #348	@ (adr r3, 80045a8 <__kernel_tan+0x360>)
 800444c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004450:	f7fb fec0 	bl	80001d4 <__adddf3>
 8004454:	4622      	mov	r2, r4
 8004456:	462b      	mov	r3, r5
 8004458:	f7fc f872 	bl	8000540 <__aeabi_dmul>
 800445c:	a354      	add	r3, pc, #336	@ (adr r3, 80045b0 <__kernel_tan+0x368>)
 800445e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004462:	f7fb feb7 	bl	80001d4 <__adddf3>
 8004466:	4602      	mov	r2, r0
 8004468:	460b      	mov	r3, r1
 800446a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800446e:	f7fb feb1 	bl	80001d4 <__adddf3>
 8004472:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004476:	f7fc f863 	bl	8000540 <__aeabi_dmul>
 800447a:	4642      	mov	r2, r8
 800447c:	464b      	mov	r3, r9
 800447e:	f7fb fea9 	bl	80001d4 <__adddf3>
 8004482:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004486:	f7fc f85b 	bl	8000540 <__aeabi_dmul>
 800448a:	4642      	mov	r2, r8
 800448c:	464b      	mov	r3, r9
 800448e:	f7fb fea1 	bl	80001d4 <__adddf3>
 8004492:	a349      	add	r3, pc, #292	@ (adr r3, 80045b8 <__kernel_tan+0x370>)
 8004494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004498:	4604      	mov	r4, r0
 800449a:	460d      	mov	r5, r1
 800449c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80044a0:	f7fc f84e 	bl	8000540 <__aeabi_dmul>
 80044a4:	4622      	mov	r2, r4
 80044a6:	462b      	mov	r3, r5
 80044a8:	f7fb fe94 	bl	80001d4 <__adddf3>
 80044ac:	e9cd 0100 	strd	r0, r1, [sp]
 80044b0:	460b      	mov	r3, r1
 80044b2:	4602      	mov	r2, r0
 80044b4:	4659      	mov	r1, fp
 80044b6:	4650      	mov	r0, sl
 80044b8:	f7fb fe8c 	bl	80001d4 <__adddf3>
 80044bc:	4b43      	ldr	r3, [pc, #268]	@ (80045cc <__kernel_tan+0x384>)
 80044be:	429f      	cmp	r7, r3
 80044c0:	4604      	mov	r4, r0
 80044c2:	460d      	mov	r5, r1
 80044c4:	f240 8084 	bls.w	80045d0 <__kernel_tan+0x388>
 80044c8:	4630      	mov	r0, r6
 80044ca:	f7fb ffcf 	bl	800046c <__aeabi_i2d>
 80044ce:	4622      	mov	r2, r4
 80044d0:	4680      	mov	r8, r0
 80044d2:	4689      	mov	r9, r1
 80044d4:	462b      	mov	r3, r5
 80044d6:	4620      	mov	r0, r4
 80044d8:	4629      	mov	r1, r5
 80044da:	f7fc f831 	bl	8000540 <__aeabi_dmul>
 80044de:	4642      	mov	r2, r8
 80044e0:	4606      	mov	r6, r0
 80044e2:	460f      	mov	r7, r1
 80044e4:	464b      	mov	r3, r9
 80044e6:	4620      	mov	r0, r4
 80044e8:	4629      	mov	r1, r5
 80044ea:	f7fb fe73 	bl	80001d4 <__adddf3>
 80044ee:	4602      	mov	r2, r0
 80044f0:	460b      	mov	r3, r1
 80044f2:	4630      	mov	r0, r6
 80044f4:	4639      	mov	r1, r7
 80044f6:	f7fc f94d 	bl	8000794 <__aeabi_ddiv>
 80044fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80044fe:	f7fb fe67 	bl	80001d0 <__aeabi_dsub>
 8004502:	4602      	mov	r2, r0
 8004504:	460b      	mov	r3, r1
 8004506:	4650      	mov	r0, sl
 8004508:	4659      	mov	r1, fp
 800450a:	f7fb fe61 	bl	80001d0 <__aeabi_dsub>
 800450e:	4602      	mov	r2, r0
 8004510:	460b      	mov	r3, r1
 8004512:	f7fb fe5f 	bl	80001d4 <__adddf3>
 8004516:	4602      	mov	r2, r0
 8004518:	460b      	mov	r3, r1
 800451a:	4640      	mov	r0, r8
 800451c:	4649      	mov	r1, r9
 800451e:	f7fb fe57 	bl	80001d0 <__aeabi_dsub>
 8004522:	9b02      	ldr	r3, [sp, #8]
 8004524:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 8004528:	f00a 0a02 	and.w	sl, sl, #2
 800452c:	4604      	mov	r4, r0
 800452e:	f1ca 0001 	rsb	r0, sl, #1
 8004532:	460d      	mov	r5, r1
 8004534:	f7fb ff9a 	bl	800046c <__aeabi_i2d>
 8004538:	4602      	mov	r2, r0
 800453a:	460b      	mov	r3, r1
 800453c:	4620      	mov	r0, r4
 800453e:	4629      	mov	r1, r5
 8004540:	f7fb fffe 	bl	8000540 <__aeabi_dmul>
 8004544:	e6a5      	b.n	8004292 <__kernel_tan+0x4a>
 8004546:	bf00      	nop
 8004548:	54442d18 	.word	0x54442d18
 800454c:	3fe921fb 	.word	0x3fe921fb
 8004550:	33145c07 	.word	0x33145c07
 8004554:	3c81a626 	.word	0x3c81a626
 8004558:	74bf7ad4 	.word	0x74bf7ad4
 800455c:	3efb2a70 	.word	0x3efb2a70
 8004560:	32f0a7e9 	.word	0x32f0a7e9
 8004564:	3f12b80f 	.word	0x3f12b80f
 8004568:	1a8d1068 	.word	0x1a8d1068
 800456c:	3f3026f7 	.word	0x3f3026f7
 8004570:	fee08315 	.word	0xfee08315
 8004574:	3f57dbc8 	.word	0x3f57dbc8
 8004578:	e96e8493 	.word	0xe96e8493
 800457c:	3f8226e3 	.word	0x3f8226e3
 8004580:	1bb341fe 	.word	0x1bb341fe
 8004584:	3faba1ba 	.word	0x3faba1ba
 8004588:	db605373 	.word	0xdb605373
 800458c:	bef375cb 	.word	0xbef375cb
 8004590:	a03792a6 	.word	0xa03792a6
 8004594:	3f147e88 	.word	0x3f147e88
 8004598:	f2f26501 	.word	0xf2f26501
 800459c:	3f4344d8 	.word	0x3f4344d8
 80045a0:	c9560328 	.word	0xc9560328
 80045a4:	3f6d6d22 	.word	0x3f6d6d22
 80045a8:	8406d637 	.word	0x8406d637
 80045ac:	3f9664f4 	.word	0x3f9664f4
 80045b0:	1110fe7a 	.word	0x1110fe7a
 80045b4:	3fc11111 	.word	0x3fc11111
 80045b8:	55555563 	.word	0x55555563
 80045bc:	3fd55555 	.word	0x3fd55555
 80045c0:	3e2fffff 	.word	0x3e2fffff
 80045c4:	3ff00000 	.word	0x3ff00000
 80045c8:	bff00000 	.word	0xbff00000
 80045cc:	3fe59427 	.word	0x3fe59427
 80045d0:	2e01      	cmp	r6, #1
 80045d2:	d033      	beq.n	800463c <__kernel_tan+0x3f4>
 80045d4:	f04f 0800 	mov.w	r8, #0
 80045d8:	4689      	mov	r9, r1
 80045da:	4602      	mov	r2, r0
 80045dc:	460b      	mov	r3, r1
 80045de:	2000      	movs	r0, #0
 80045e0:	4918      	ldr	r1, [pc, #96]	@ (8004644 <__kernel_tan+0x3fc>)
 80045e2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80045e6:	f7fc f8d5 	bl	8000794 <__aeabi_ddiv>
 80045ea:	4652      	mov	r2, sl
 80045ec:	460f      	mov	r7, r1
 80045ee:	465b      	mov	r3, fp
 80045f0:	4606      	mov	r6, r0
 80045f2:	460d      	mov	r5, r1
 80045f4:	4640      	mov	r0, r8
 80045f6:	4649      	mov	r1, r9
 80045f8:	f7fb fdea 	bl	80001d0 <__aeabi_dsub>
 80045fc:	4602      	mov	r2, r0
 80045fe:	460b      	mov	r3, r1
 8004600:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004604:	f7fb fde4 	bl	80001d0 <__aeabi_dsub>
 8004608:	4642      	mov	r2, r8
 800460a:	463b      	mov	r3, r7
 800460c:	f7fb ff98 	bl	8000540 <__aeabi_dmul>
 8004610:	4642      	mov	r2, r8
 8004612:	4682      	mov	sl, r0
 8004614:	468b      	mov	fp, r1
 8004616:	463b      	mov	r3, r7
 8004618:	4640      	mov	r0, r8
 800461a:	4649      	mov	r1, r9
 800461c:	f7fb ff90 	bl	8000540 <__aeabi_dmul>
 8004620:	4b09      	ldr	r3, [pc, #36]	@ (8004648 <__kernel_tan+0x400>)
 8004622:	2200      	movs	r2, #0
 8004624:	f7fb fdd6 	bl	80001d4 <__adddf3>
 8004628:	4602      	mov	r2, r0
 800462a:	460b      	mov	r3, r1
 800462c:	4650      	mov	r0, sl
 800462e:	4659      	mov	r1, fp
 8004630:	f7fb fdd0 	bl	80001d4 <__adddf3>
 8004634:	4644      	mov	r4, r8
 8004636:	4632      	mov	r2, r6
 8004638:	463b      	mov	r3, r7
 800463a:	e66b      	b.n	8004314 <__kernel_tan+0xcc>
 800463c:	4682      	mov	sl, r0
 800463e:	468b      	mov	fp, r1
 8004640:	e629      	b.n	8004296 <__kernel_tan+0x4e>
 8004642:	bf00      	nop
 8004644:	bff00000 	.word	0xbff00000
 8004648:	3ff00000 	.word	0x3ff00000
 800464c:	00000000 	.word	0x00000000

08004650 <__ieee754_rem_pio2>:
 8004650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004654:	ec57 6b10 	vmov	r6, r7, d0
 8004658:	4bc5      	ldr	r3, [pc, #788]	@ (8004970 <__ieee754_rem_pio2+0x320>)
 800465a:	b08d      	sub	sp, #52	@ 0x34
 800465c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8004660:	4598      	cmp	r8, r3
 8004662:	4604      	mov	r4, r0
 8004664:	9704      	str	r7, [sp, #16]
 8004666:	d807      	bhi.n	8004678 <__ieee754_rem_pio2+0x28>
 8004668:	2200      	movs	r2, #0
 800466a:	2300      	movs	r3, #0
 800466c:	ed80 0b00 	vstr	d0, [r0]
 8004670:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004674:	2500      	movs	r5, #0
 8004676:	e028      	b.n	80046ca <__ieee754_rem_pio2+0x7a>
 8004678:	4bbe      	ldr	r3, [pc, #760]	@ (8004974 <__ieee754_rem_pio2+0x324>)
 800467a:	4598      	cmp	r8, r3
 800467c:	d878      	bhi.n	8004770 <__ieee754_rem_pio2+0x120>
 800467e:	9b04      	ldr	r3, [sp, #16]
 8004680:	4dbd      	ldr	r5, [pc, #756]	@ (8004978 <__ieee754_rem_pio2+0x328>)
 8004682:	2b00      	cmp	r3, #0
 8004684:	4630      	mov	r0, r6
 8004686:	a3ac      	add	r3, pc, #688	@ (adr r3, 8004938 <__ieee754_rem_pio2+0x2e8>)
 8004688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800468c:	4639      	mov	r1, r7
 800468e:	dd38      	ble.n	8004702 <__ieee754_rem_pio2+0xb2>
 8004690:	f7fb fd9e 	bl	80001d0 <__aeabi_dsub>
 8004694:	45a8      	cmp	r8, r5
 8004696:	4606      	mov	r6, r0
 8004698:	460f      	mov	r7, r1
 800469a:	d01a      	beq.n	80046d2 <__ieee754_rem_pio2+0x82>
 800469c:	a3a8      	add	r3, pc, #672	@ (adr r3, 8004940 <__ieee754_rem_pio2+0x2f0>)
 800469e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a2:	f7fb fd95 	bl	80001d0 <__aeabi_dsub>
 80046a6:	4602      	mov	r2, r0
 80046a8:	460b      	mov	r3, r1
 80046aa:	4680      	mov	r8, r0
 80046ac:	4689      	mov	r9, r1
 80046ae:	4630      	mov	r0, r6
 80046b0:	4639      	mov	r1, r7
 80046b2:	f7fb fd8d 	bl	80001d0 <__aeabi_dsub>
 80046b6:	a3a2      	add	r3, pc, #648	@ (adr r3, 8004940 <__ieee754_rem_pio2+0x2f0>)
 80046b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046bc:	f7fb fd88 	bl	80001d0 <__aeabi_dsub>
 80046c0:	e9c4 8900 	strd	r8, r9, [r4]
 80046c4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80046c8:	2501      	movs	r5, #1
 80046ca:	4628      	mov	r0, r5
 80046cc:	b00d      	add	sp, #52	@ 0x34
 80046ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046d2:	a39d      	add	r3, pc, #628	@ (adr r3, 8004948 <__ieee754_rem_pio2+0x2f8>)
 80046d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d8:	f7fb fd7a 	bl	80001d0 <__aeabi_dsub>
 80046dc:	a39c      	add	r3, pc, #624	@ (adr r3, 8004950 <__ieee754_rem_pio2+0x300>)
 80046de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e2:	4606      	mov	r6, r0
 80046e4:	460f      	mov	r7, r1
 80046e6:	f7fb fd73 	bl	80001d0 <__aeabi_dsub>
 80046ea:	4602      	mov	r2, r0
 80046ec:	460b      	mov	r3, r1
 80046ee:	4680      	mov	r8, r0
 80046f0:	4689      	mov	r9, r1
 80046f2:	4630      	mov	r0, r6
 80046f4:	4639      	mov	r1, r7
 80046f6:	f7fb fd6b 	bl	80001d0 <__aeabi_dsub>
 80046fa:	a395      	add	r3, pc, #596	@ (adr r3, 8004950 <__ieee754_rem_pio2+0x300>)
 80046fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004700:	e7dc      	b.n	80046bc <__ieee754_rem_pio2+0x6c>
 8004702:	f7fb fd67 	bl	80001d4 <__adddf3>
 8004706:	45a8      	cmp	r8, r5
 8004708:	4606      	mov	r6, r0
 800470a:	460f      	mov	r7, r1
 800470c:	d018      	beq.n	8004740 <__ieee754_rem_pio2+0xf0>
 800470e:	a38c      	add	r3, pc, #560	@ (adr r3, 8004940 <__ieee754_rem_pio2+0x2f0>)
 8004710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004714:	f7fb fd5e 	bl	80001d4 <__adddf3>
 8004718:	4602      	mov	r2, r0
 800471a:	460b      	mov	r3, r1
 800471c:	4680      	mov	r8, r0
 800471e:	4689      	mov	r9, r1
 8004720:	4630      	mov	r0, r6
 8004722:	4639      	mov	r1, r7
 8004724:	f7fb fd54 	bl	80001d0 <__aeabi_dsub>
 8004728:	a385      	add	r3, pc, #532	@ (adr r3, 8004940 <__ieee754_rem_pio2+0x2f0>)
 800472a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800472e:	f7fb fd51 	bl	80001d4 <__adddf3>
 8004732:	f04f 35ff 	mov.w	r5, #4294967295
 8004736:	e9c4 8900 	strd	r8, r9, [r4]
 800473a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800473e:	e7c4      	b.n	80046ca <__ieee754_rem_pio2+0x7a>
 8004740:	a381      	add	r3, pc, #516	@ (adr r3, 8004948 <__ieee754_rem_pio2+0x2f8>)
 8004742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004746:	f7fb fd45 	bl	80001d4 <__adddf3>
 800474a:	a381      	add	r3, pc, #516	@ (adr r3, 8004950 <__ieee754_rem_pio2+0x300>)
 800474c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004750:	4606      	mov	r6, r0
 8004752:	460f      	mov	r7, r1
 8004754:	f7fb fd3e 	bl	80001d4 <__adddf3>
 8004758:	4602      	mov	r2, r0
 800475a:	460b      	mov	r3, r1
 800475c:	4680      	mov	r8, r0
 800475e:	4689      	mov	r9, r1
 8004760:	4630      	mov	r0, r6
 8004762:	4639      	mov	r1, r7
 8004764:	f7fb fd34 	bl	80001d0 <__aeabi_dsub>
 8004768:	a379      	add	r3, pc, #484	@ (adr r3, 8004950 <__ieee754_rem_pio2+0x300>)
 800476a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800476e:	e7de      	b.n	800472e <__ieee754_rem_pio2+0xde>
 8004770:	4b82      	ldr	r3, [pc, #520]	@ (800497c <__ieee754_rem_pio2+0x32c>)
 8004772:	4598      	cmp	r8, r3
 8004774:	f200 80d1 	bhi.w	800491a <__ieee754_rem_pio2+0x2ca>
 8004778:	f000 f966 	bl	8004a48 <fabs>
 800477c:	ec57 6b10 	vmov	r6, r7, d0
 8004780:	a375      	add	r3, pc, #468	@ (adr r3, 8004958 <__ieee754_rem_pio2+0x308>)
 8004782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004786:	4630      	mov	r0, r6
 8004788:	4639      	mov	r1, r7
 800478a:	f7fb fed9 	bl	8000540 <__aeabi_dmul>
 800478e:	4b7c      	ldr	r3, [pc, #496]	@ (8004980 <__ieee754_rem_pio2+0x330>)
 8004790:	2200      	movs	r2, #0
 8004792:	f7fb fd1f 	bl	80001d4 <__adddf3>
 8004796:	f7fc f96d 	bl	8000a74 <__aeabi_d2iz>
 800479a:	4605      	mov	r5, r0
 800479c:	f7fb fe66 	bl	800046c <__aeabi_i2d>
 80047a0:	4602      	mov	r2, r0
 80047a2:	460b      	mov	r3, r1
 80047a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80047a8:	a363      	add	r3, pc, #396	@ (adr r3, 8004938 <__ieee754_rem_pio2+0x2e8>)
 80047aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ae:	f7fb fec7 	bl	8000540 <__aeabi_dmul>
 80047b2:	4602      	mov	r2, r0
 80047b4:	460b      	mov	r3, r1
 80047b6:	4630      	mov	r0, r6
 80047b8:	4639      	mov	r1, r7
 80047ba:	f7fb fd09 	bl	80001d0 <__aeabi_dsub>
 80047be:	a360      	add	r3, pc, #384	@ (adr r3, 8004940 <__ieee754_rem_pio2+0x2f0>)
 80047c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c4:	4682      	mov	sl, r0
 80047c6:	468b      	mov	fp, r1
 80047c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80047cc:	f7fb feb8 	bl	8000540 <__aeabi_dmul>
 80047d0:	2d1f      	cmp	r5, #31
 80047d2:	4606      	mov	r6, r0
 80047d4:	460f      	mov	r7, r1
 80047d6:	dc0c      	bgt.n	80047f2 <__ieee754_rem_pio2+0x1a2>
 80047d8:	4b6a      	ldr	r3, [pc, #424]	@ (8004984 <__ieee754_rem_pio2+0x334>)
 80047da:	1e6a      	subs	r2, r5, #1
 80047dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047e0:	4543      	cmp	r3, r8
 80047e2:	d006      	beq.n	80047f2 <__ieee754_rem_pio2+0x1a2>
 80047e4:	4632      	mov	r2, r6
 80047e6:	463b      	mov	r3, r7
 80047e8:	4650      	mov	r0, sl
 80047ea:	4659      	mov	r1, fp
 80047ec:	f7fb fcf0 	bl	80001d0 <__aeabi_dsub>
 80047f0:	e00e      	b.n	8004810 <__ieee754_rem_pio2+0x1c0>
 80047f2:	463b      	mov	r3, r7
 80047f4:	4632      	mov	r2, r6
 80047f6:	4650      	mov	r0, sl
 80047f8:	4659      	mov	r1, fp
 80047fa:	f7fb fce9 	bl	80001d0 <__aeabi_dsub>
 80047fe:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004802:	9305      	str	r3, [sp, #20]
 8004804:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004808:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800480c:	2b10      	cmp	r3, #16
 800480e:	dc02      	bgt.n	8004816 <__ieee754_rem_pio2+0x1c6>
 8004810:	e9c4 0100 	strd	r0, r1, [r4]
 8004814:	e039      	b.n	800488a <__ieee754_rem_pio2+0x23a>
 8004816:	a34c      	add	r3, pc, #304	@ (adr r3, 8004948 <__ieee754_rem_pio2+0x2f8>)
 8004818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800481c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004820:	f7fb fe8e 	bl	8000540 <__aeabi_dmul>
 8004824:	4606      	mov	r6, r0
 8004826:	460f      	mov	r7, r1
 8004828:	4602      	mov	r2, r0
 800482a:	460b      	mov	r3, r1
 800482c:	4650      	mov	r0, sl
 800482e:	4659      	mov	r1, fp
 8004830:	f7fb fcce 	bl	80001d0 <__aeabi_dsub>
 8004834:	4602      	mov	r2, r0
 8004836:	460b      	mov	r3, r1
 8004838:	4680      	mov	r8, r0
 800483a:	4689      	mov	r9, r1
 800483c:	4650      	mov	r0, sl
 800483e:	4659      	mov	r1, fp
 8004840:	f7fb fcc6 	bl	80001d0 <__aeabi_dsub>
 8004844:	4632      	mov	r2, r6
 8004846:	463b      	mov	r3, r7
 8004848:	f7fb fcc2 	bl	80001d0 <__aeabi_dsub>
 800484c:	a340      	add	r3, pc, #256	@ (adr r3, 8004950 <__ieee754_rem_pio2+0x300>)
 800484e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004852:	4606      	mov	r6, r0
 8004854:	460f      	mov	r7, r1
 8004856:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800485a:	f7fb fe71 	bl	8000540 <__aeabi_dmul>
 800485e:	4632      	mov	r2, r6
 8004860:	463b      	mov	r3, r7
 8004862:	f7fb fcb5 	bl	80001d0 <__aeabi_dsub>
 8004866:	4602      	mov	r2, r0
 8004868:	460b      	mov	r3, r1
 800486a:	4606      	mov	r6, r0
 800486c:	460f      	mov	r7, r1
 800486e:	4640      	mov	r0, r8
 8004870:	4649      	mov	r1, r9
 8004872:	f7fb fcad 	bl	80001d0 <__aeabi_dsub>
 8004876:	9a05      	ldr	r2, [sp, #20]
 8004878:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	2b31      	cmp	r3, #49	@ 0x31
 8004880:	dc20      	bgt.n	80048c4 <__ieee754_rem_pio2+0x274>
 8004882:	e9c4 0100 	strd	r0, r1, [r4]
 8004886:	46c2      	mov	sl, r8
 8004888:	46cb      	mov	fp, r9
 800488a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800488e:	4650      	mov	r0, sl
 8004890:	4642      	mov	r2, r8
 8004892:	464b      	mov	r3, r9
 8004894:	4659      	mov	r1, fp
 8004896:	f7fb fc9b 	bl	80001d0 <__aeabi_dsub>
 800489a:	463b      	mov	r3, r7
 800489c:	4632      	mov	r2, r6
 800489e:	f7fb fc97 	bl	80001d0 <__aeabi_dsub>
 80048a2:	9b04      	ldr	r3, [sp, #16]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80048aa:	f6bf af0e 	bge.w	80046ca <__ieee754_rem_pio2+0x7a>
 80048ae:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80048b2:	6063      	str	r3, [r4, #4]
 80048b4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80048b8:	f8c4 8000 	str.w	r8, [r4]
 80048bc:	60a0      	str	r0, [r4, #8]
 80048be:	60e3      	str	r3, [r4, #12]
 80048c0:	426d      	negs	r5, r5
 80048c2:	e702      	b.n	80046ca <__ieee754_rem_pio2+0x7a>
 80048c4:	a326      	add	r3, pc, #152	@ (adr r3, 8004960 <__ieee754_rem_pio2+0x310>)
 80048c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80048ce:	f7fb fe37 	bl	8000540 <__aeabi_dmul>
 80048d2:	4606      	mov	r6, r0
 80048d4:	460f      	mov	r7, r1
 80048d6:	4602      	mov	r2, r0
 80048d8:	460b      	mov	r3, r1
 80048da:	4640      	mov	r0, r8
 80048dc:	4649      	mov	r1, r9
 80048de:	f7fb fc77 	bl	80001d0 <__aeabi_dsub>
 80048e2:	4602      	mov	r2, r0
 80048e4:	460b      	mov	r3, r1
 80048e6:	4682      	mov	sl, r0
 80048e8:	468b      	mov	fp, r1
 80048ea:	4640      	mov	r0, r8
 80048ec:	4649      	mov	r1, r9
 80048ee:	f7fb fc6f 	bl	80001d0 <__aeabi_dsub>
 80048f2:	4632      	mov	r2, r6
 80048f4:	463b      	mov	r3, r7
 80048f6:	f7fb fc6b 	bl	80001d0 <__aeabi_dsub>
 80048fa:	a31b      	add	r3, pc, #108	@ (adr r3, 8004968 <__ieee754_rem_pio2+0x318>)
 80048fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004900:	4606      	mov	r6, r0
 8004902:	460f      	mov	r7, r1
 8004904:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004908:	f7fb fe1a 	bl	8000540 <__aeabi_dmul>
 800490c:	4632      	mov	r2, r6
 800490e:	463b      	mov	r3, r7
 8004910:	f7fb fc5e 	bl	80001d0 <__aeabi_dsub>
 8004914:	4606      	mov	r6, r0
 8004916:	460f      	mov	r7, r1
 8004918:	e764      	b.n	80047e4 <__ieee754_rem_pio2+0x194>
 800491a:	4b1b      	ldr	r3, [pc, #108]	@ (8004988 <__ieee754_rem_pio2+0x338>)
 800491c:	4598      	cmp	r8, r3
 800491e:	d935      	bls.n	800498c <__ieee754_rem_pio2+0x33c>
 8004920:	4632      	mov	r2, r6
 8004922:	463b      	mov	r3, r7
 8004924:	4630      	mov	r0, r6
 8004926:	4639      	mov	r1, r7
 8004928:	f7fb fc52 	bl	80001d0 <__aeabi_dsub>
 800492c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004930:	e9c4 0100 	strd	r0, r1, [r4]
 8004934:	e69e      	b.n	8004674 <__ieee754_rem_pio2+0x24>
 8004936:	bf00      	nop
 8004938:	54400000 	.word	0x54400000
 800493c:	3ff921fb 	.word	0x3ff921fb
 8004940:	1a626331 	.word	0x1a626331
 8004944:	3dd0b461 	.word	0x3dd0b461
 8004948:	1a600000 	.word	0x1a600000
 800494c:	3dd0b461 	.word	0x3dd0b461
 8004950:	2e037073 	.word	0x2e037073
 8004954:	3ba3198a 	.word	0x3ba3198a
 8004958:	6dc9c883 	.word	0x6dc9c883
 800495c:	3fe45f30 	.word	0x3fe45f30
 8004960:	2e000000 	.word	0x2e000000
 8004964:	3ba3198a 	.word	0x3ba3198a
 8004968:	252049c1 	.word	0x252049c1
 800496c:	397b839a 	.word	0x397b839a
 8004970:	3fe921fb 	.word	0x3fe921fb
 8004974:	4002d97b 	.word	0x4002d97b
 8004978:	3ff921fb 	.word	0x3ff921fb
 800497c:	413921fb 	.word	0x413921fb
 8004980:	3fe00000 	.word	0x3fe00000
 8004984:	08005318 	.word	0x08005318
 8004988:	7fefffff 	.word	0x7fefffff
 800498c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8004990:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8004994:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8004998:	4630      	mov	r0, r6
 800499a:	460f      	mov	r7, r1
 800499c:	f7fc f86a 	bl	8000a74 <__aeabi_d2iz>
 80049a0:	f7fb fd64 	bl	800046c <__aeabi_i2d>
 80049a4:	4602      	mov	r2, r0
 80049a6:	460b      	mov	r3, r1
 80049a8:	4630      	mov	r0, r6
 80049aa:	4639      	mov	r1, r7
 80049ac:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80049b0:	f7fb fc0e 	bl	80001d0 <__aeabi_dsub>
 80049b4:	4b22      	ldr	r3, [pc, #136]	@ (8004a40 <__ieee754_rem_pio2+0x3f0>)
 80049b6:	2200      	movs	r2, #0
 80049b8:	f7fb fdc2 	bl	8000540 <__aeabi_dmul>
 80049bc:	460f      	mov	r7, r1
 80049be:	4606      	mov	r6, r0
 80049c0:	f7fc f858 	bl	8000a74 <__aeabi_d2iz>
 80049c4:	f7fb fd52 	bl	800046c <__aeabi_i2d>
 80049c8:	4602      	mov	r2, r0
 80049ca:	460b      	mov	r3, r1
 80049cc:	4630      	mov	r0, r6
 80049ce:	4639      	mov	r1, r7
 80049d0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80049d4:	f7fb fbfc 	bl	80001d0 <__aeabi_dsub>
 80049d8:	4b19      	ldr	r3, [pc, #100]	@ (8004a40 <__ieee754_rem_pio2+0x3f0>)
 80049da:	2200      	movs	r2, #0
 80049dc:	f7fb fdb0 	bl	8000540 <__aeabi_dmul>
 80049e0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 80049e4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 80049e8:	f04f 0803 	mov.w	r8, #3
 80049ec:	2600      	movs	r6, #0
 80049ee:	2700      	movs	r7, #0
 80049f0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80049f4:	4632      	mov	r2, r6
 80049f6:	463b      	mov	r3, r7
 80049f8:	46c2      	mov	sl, r8
 80049fa:	f108 38ff 	add.w	r8, r8, #4294967295
 80049fe:	f7fc f807 	bl	8000a10 <__aeabi_dcmpeq>
 8004a02:	2800      	cmp	r0, #0
 8004a04:	d1f4      	bne.n	80049f0 <__ieee754_rem_pio2+0x3a0>
 8004a06:	4b0f      	ldr	r3, [pc, #60]	@ (8004a44 <__ieee754_rem_pio2+0x3f4>)
 8004a08:	9301      	str	r3, [sp, #4]
 8004a0a:	2302      	movs	r3, #2
 8004a0c:	9300      	str	r3, [sp, #0]
 8004a0e:	462a      	mov	r2, r5
 8004a10:	4653      	mov	r3, sl
 8004a12:	4621      	mov	r1, r4
 8004a14:	a806      	add	r0, sp, #24
 8004a16:	f000 f81f 	bl	8004a58 <__kernel_rem_pio2>
 8004a1a:	9b04      	ldr	r3, [sp, #16]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	4605      	mov	r5, r0
 8004a20:	f6bf ae53 	bge.w	80046ca <__ieee754_rem_pio2+0x7a>
 8004a24:	e9d4 2100 	ldrd	r2, r1, [r4]
 8004a28:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004a2c:	e9c4 2300 	strd	r2, r3, [r4]
 8004a30:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8004a34:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004a38:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8004a3c:	e740      	b.n	80048c0 <__ieee754_rem_pio2+0x270>
 8004a3e:	bf00      	nop
 8004a40:	41700000 	.word	0x41700000
 8004a44:	08005398 	.word	0x08005398

08004a48 <fabs>:
 8004a48:	ec51 0b10 	vmov	r0, r1, d0
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8004a52:	ec43 2b10 	vmov	d0, r2, r3
 8004a56:	4770      	bx	lr

08004a58 <__kernel_rem_pio2>:
 8004a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a5c:	ed2d 8b02 	vpush	{d8}
 8004a60:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8004a64:	f112 0f14 	cmn.w	r2, #20
 8004a68:	9306      	str	r3, [sp, #24]
 8004a6a:	9104      	str	r1, [sp, #16]
 8004a6c:	4bc2      	ldr	r3, [pc, #776]	@ (8004d78 <__kernel_rem_pio2+0x320>)
 8004a6e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8004a70:	9008      	str	r0, [sp, #32]
 8004a72:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004a76:	9300      	str	r3, [sp, #0]
 8004a78:	9b06      	ldr	r3, [sp, #24]
 8004a7a:	f103 33ff 	add.w	r3, r3, #4294967295
 8004a7e:	bfa8      	it	ge
 8004a80:	1ed4      	subge	r4, r2, #3
 8004a82:	9305      	str	r3, [sp, #20]
 8004a84:	bfb2      	itee	lt
 8004a86:	2400      	movlt	r4, #0
 8004a88:	2318      	movge	r3, #24
 8004a8a:	fb94 f4f3 	sdivge	r4, r4, r3
 8004a8e:	f06f 0317 	mvn.w	r3, #23
 8004a92:	fb04 3303 	mla	r3, r4, r3, r3
 8004a96:	eb03 0b02 	add.w	fp, r3, r2
 8004a9a:	9b00      	ldr	r3, [sp, #0]
 8004a9c:	9a05      	ldr	r2, [sp, #20]
 8004a9e:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 8004d68 <__kernel_rem_pio2+0x310>
 8004aa2:	eb03 0802 	add.w	r8, r3, r2
 8004aa6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8004aa8:	1aa7      	subs	r7, r4, r2
 8004aaa:	ae20      	add	r6, sp, #128	@ 0x80
 8004aac:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004ab0:	2500      	movs	r5, #0
 8004ab2:	4545      	cmp	r5, r8
 8004ab4:	dd12      	ble.n	8004adc <__kernel_rem_pio2+0x84>
 8004ab6:	9b06      	ldr	r3, [sp, #24]
 8004ab8:	aa20      	add	r2, sp, #128	@ 0x80
 8004aba:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8004abe:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8004ac2:	2700      	movs	r7, #0
 8004ac4:	9b00      	ldr	r3, [sp, #0]
 8004ac6:	429f      	cmp	r7, r3
 8004ac8:	dc2e      	bgt.n	8004b28 <__kernel_rem_pio2+0xd0>
 8004aca:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 8004d68 <__kernel_rem_pio2+0x310>
 8004ace:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004ad2:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004ad6:	46a8      	mov	r8, r5
 8004ad8:	2600      	movs	r6, #0
 8004ada:	e01b      	b.n	8004b14 <__kernel_rem_pio2+0xbc>
 8004adc:	42ef      	cmn	r7, r5
 8004ade:	d407      	bmi.n	8004af0 <__kernel_rem_pio2+0x98>
 8004ae0:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8004ae4:	f7fb fcc2 	bl	800046c <__aeabi_i2d>
 8004ae8:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004aec:	3501      	adds	r5, #1
 8004aee:	e7e0      	b.n	8004ab2 <__kernel_rem_pio2+0x5a>
 8004af0:	ec51 0b18 	vmov	r0, r1, d8
 8004af4:	e7f8      	b.n	8004ae8 <__kernel_rem_pio2+0x90>
 8004af6:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 8004afa:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8004afe:	f7fb fd1f 	bl	8000540 <__aeabi_dmul>
 8004b02:	4602      	mov	r2, r0
 8004b04:	460b      	mov	r3, r1
 8004b06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b0a:	f7fb fb63 	bl	80001d4 <__adddf3>
 8004b0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b12:	3601      	adds	r6, #1
 8004b14:	9b05      	ldr	r3, [sp, #20]
 8004b16:	429e      	cmp	r6, r3
 8004b18:	dded      	ble.n	8004af6 <__kernel_rem_pio2+0x9e>
 8004b1a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004b1e:	3701      	adds	r7, #1
 8004b20:	ecaa 7b02 	vstmia	sl!, {d7}
 8004b24:	3508      	adds	r5, #8
 8004b26:	e7cd      	b.n	8004ac4 <__kernel_rem_pio2+0x6c>
 8004b28:	9b00      	ldr	r3, [sp, #0]
 8004b2a:	f8dd 8000 	ldr.w	r8, [sp]
 8004b2e:	aa0c      	add	r2, sp, #48	@ 0x30
 8004b30:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004b34:	930a      	str	r3, [sp, #40]	@ 0x28
 8004b36:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8004b38:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004b3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b3e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8004b42:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004b44:	ab98      	add	r3, sp, #608	@ 0x260
 8004b46:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004b4a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8004b4e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004b52:	ac0c      	add	r4, sp, #48	@ 0x30
 8004b54:	ab70      	add	r3, sp, #448	@ 0x1c0
 8004b56:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8004b5a:	46a1      	mov	r9, r4
 8004b5c:	46c2      	mov	sl, r8
 8004b5e:	f1ba 0f00 	cmp.w	sl, #0
 8004b62:	dc77      	bgt.n	8004c54 <__kernel_rem_pio2+0x1fc>
 8004b64:	4658      	mov	r0, fp
 8004b66:	ed9d 0b02 	vldr	d0, [sp, #8]
 8004b6a:	f000 fac5 	bl	80050f8 <scalbn>
 8004b6e:	ec57 6b10 	vmov	r6, r7, d0
 8004b72:	2200      	movs	r2, #0
 8004b74:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8004b78:	4630      	mov	r0, r6
 8004b7a:	4639      	mov	r1, r7
 8004b7c:	f7fb fce0 	bl	8000540 <__aeabi_dmul>
 8004b80:	ec41 0b10 	vmov	d0, r0, r1
 8004b84:	f000 fb34 	bl	80051f0 <floor>
 8004b88:	4b7c      	ldr	r3, [pc, #496]	@ (8004d7c <__kernel_rem_pio2+0x324>)
 8004b8a:	ec51 0b10 	vmov	r0, r1, d0
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f7fb fcd6 	bl	8000540 <__aeabi_dmul>
 8004b94:	4602      	mov	r2, r0
 8004b96:	460b      	mov	r3, r1
 8004b98:	4630      	mov	r0, r6
 8004b9a:	4639      	mov	r1, r7
 8004b9c:	f7fb fb18 	bl	80001d0 <__aeabi_dsub>
 8004ba0:	460f      	mov	r7, r1
 8004ba2:	4606      	mov	r6, r0
 8004ba4:	f7fb ff66 	bl	8000a74 <__aeabi_d2iz>
 8004ba8:	9002      	str	r0, [sp, #8]
 8004baa:	f7fb fc5f 	bl	800046c <__aeabi_i2d>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	4630      	mov	r0, r6
 8004bb4:	4639      	mov	r1, r7
 8004bb6:	f7fb fb0b 	bl	80001d0 <__aeabi_dsub>
 8004bba:	f1bb 0f00 	cmp.w	fp, #0
 8004bbe:	4606      	mov	r6, r0
 8004bc0:	460f      	mov	r7, r1
 8004bc2:	dd6c      	ble.n	8004c9e <__kernel_rem_pio2+0x246>
 8004bc4:	f108 31ff 	add.w	r1, r8, #4294967295
 8004bc8:	ab0c      	add	r3, sp, #48	@ 0x30
 8004bca:	9d02      	ldr	r5, [sp, #8]
 8004bcc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004bd0:	f1cb 0018 	rsb	r0, fp, #24
 8004bd4:	fa43 f200 	asr.w	r2, r3, r0
 8004bd8:	4415      	add	r5, r2
 8004bda:	4082      	lsls	r2, r0
 8004bdc:	1a9b      	subs	r3, r3, r2
 8004bde:	aa0c      	add	r2, sp, #48	@ 0x30
 8004be0:	9502      	str	r5, [sp, #8]
 8004be2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8004be6:	f1cb 0217 	rsb	r2, fp, #23
 8004bea:	fa43 f902 	asr.w	r9, r3, r2
 8004bee:	f1b9 0f00 	cmp.w	r9, #0
 8004bf2:	dd64      	ble.n	8004cbe <__kernel_rem_pio2+0x266>
 8004bf4:	9b02      	ldr	r3, [sp, #8]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	9302      	str	r3, [sp, #8]
 8004bfc:	4615      	mov	r5, r2
 8004bfe:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8004c02:	4590      	cmp	r8, r2
 8004c04:	f300 80a1 	bgt.w	8004d4a <__kernel_rem_pio2+0x2f2>
 8004c08:	f1bb 0f00 	cmp.w	fp, #0
 8004c0c:	dd07      	ble.n	8004c1e <__kernel_rem_pio2+0x1c6>
 8004c0e:	f1bb 0f01 	cmp.w	fp, #1
 8004c12:	f000 80c1 	beq.w	8004d98 <__kernel_rem_pio2+0x340>
 8004c16:	f1bb 0f02 	cmp.w	fp, #2
 8004c1a:	f000 80c8 	beq.w	8004dae <__kernel_rem_pio2+0x356>
 8004c1e:	f1b9 0f02 	cmp.w	r9, #2
 8004c22:	d14c      	bne.n	8004cbe <__kernel_rem_pio2+0x266>
 8004c24:	4632      	mov	r2, r6
 8004c26:	463b      	mov	r3, r7
 8004c28:	4955      	ldr	r1, [pc, #340]	@ (8004d80 <__kernel_rem_pio2+0x328>)
 8004c2a:	2000      	movs	r0, #0
 8004c2c:	f7fb fad0 	bl	80001d0 <__aeabi_dsub>
 8004c30:	4606      	mov	r6, r0
 8004c32:	460f      	mov	r7, r1
 8004c34:	2d00      	cmp	r5, #0
 8004c36:	d042      	beq.n	8004cbe <__kernel_rem_pio2+0x266>
 8004c38:	4658      	mov	r0, fp
 8004c3a:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 8004d70 <__kernel_rem_pio2+0x318>
 8004c3e:	f000 fa5b 	bl	80050f8 <scalbn>
 8004c42:	4630      	mov	r0, r6
 8004c44:	4639      	mov	r1, r7
 8004c46:	ec53 2b10 	vmov	r2, r3, d0
 8004c4a:	f7fb fac1 	bl	80001d0 <__aeabi_dsub>
 8004c4e:	4606      	mov	r6, r0
 8004c50:	460f      	mov	r7, r1
 8004c52:	e034      	b.n	8004cbe <__kernel_rem_pio2+0x266>
 8004c54:	4b4b      	ldr	r3, [pc, #300]	@ (8004d84 <__kernel_rem_pio2+0x32c>)
 8004c56:	2200      	movs	r2, #0
 8004c58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c5c:	f7fb fc70 	bl	8000540 <__aeabi_dmul>
 8004c60:	f7fb ff08 	bl	8000a74 <__aeabi_d2iz>
 8004c64:	f7fb fc02 	bl	800046c <__aeabi_i2d>
 8004c68:	4b47      	ldr	r3, [pc, #284]	@ (8004d88 <__kernel_rem_pio2+0x330>)
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	4606      	mov	r6, r0
 8004c6e:	460f      	mov	r7, r1
 8004c70:	f7fb fc66 	bl	8000540 <__aeabi_dmul>
 8004c74:	4602      	mov	r2, r0
 8004c76:	460b      	mov	r3, r1
 8004c78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c7c:	f7fb faa8 	bl	80001d0 <__aeabi_dsub>
 8004c80:	f7fb fef8 	bl	8000a74 <__aeabi_d2iz>
 8004c84:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8004c88:	f849 0b04 	str.w	r0, [r9], #4
 8004c8c:	4639      	mov	r1, r7
 8004c8e:	4630      	mov	r0, r6
 8004c90:	f7fb faa0 	bl	80001d4 <__adddf3>
 8004c94:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004c98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c9c:	e75f      	b.n	8004b5e <__kernel_rem_pio2+0x106>
 8004c9e:	d107      	bne.n	8004cb0 <__kernel_rem_pio2+0x258>
 8004ca0:	f108 33ff 	add.w	r3, r8, #4294967295
 8004ca4:	aa0c      	add	r2, sp, #48	@ 0x30
 8004ca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004caa:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8004cae:	e79e      	b.n	8004bee <__kernel_rem_pio2+0x196>
 8004cb0:	4b36      	ldr	r3, [pc, #216]	@ (8004d8c <__kernel_rem_pio2+0x334>)
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f7fb feca 	bl	8000a4c <__aeabi_dcmpge>
 8004cb8:	2800      	cmp	r0, #0
 8004cba:	d143      	bne.n	8004d44 <__kernel_rem_pio2+0x2ec>
 8004cbc:	4681      	mov	r9, r0
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	4630      	mov	r0, r6
 8004cc4:	4639      	mov	r1, r7
 8004cc6:	f7fb fea3 	bl	8000a10 <__aeabi_dcmpeq>
 8004cca:	2800      	cmp	r0, #0
 8004ccc:	f000 80c1 	beq.w	8004e52 <__kernel_rem_pio2+0x3fa>
 8004cd0:	f108 33ff 	add.w	r3, r8, #4294967295
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	9900      	ldr	r1, [sp, #0]
 8004cd8:	428b      	cmp	r3, r1
 8004cda:	da70      	bge.n	8004dbe <__kernel_rem_pio2+0x366>
 8004cdc:	2a00      	cmp	r2, #0
 8004cde:	f000 808b 	beq.w	8004df8 <__kernel_rem_pio2+0x3a0>
 8004ce2:	f108 38ff 	add.w	r8, r8, #4294967295
 8004ce6:	ab0c      	add	r3, sp, #48	@ 0x30
 8004ce8:	f1ab 0b18 	sub.w	fp, fp, #24
 8004cec:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d0f6      	beq.n	8004ce2 <__kernel_rem_pio2+0x28a>
 8004cf4:	4658      	mov	r0, fp
 8004cf6:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 8004d70 <__kernel_rem_pio2+0x318>
 8004cfa:	f000 f9fd 	bl	80050f8 <scalbn>
 8004cfe:	f108 0301 	add.w	r3, r8, #1
 8004d02:	00da      	lsls	r2, r3, #3
 8004d04:	9205      	str	r2, [sp, #20]
 8004d06:	ec55 4b10 	vmov	r4, r5, d0
 8004d0a:	aa70      	add	r2, sp, #448	@ 0x1c0
 8004d0c:	f8df b074 	ldr.w	fp, [pc, #116]	@ 8004d84 <__kernel_rem_pio2+0x32c>
 8004d10:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8004d14:	4646      	mov	r6, r8
 8004d16:	f04f 0a00 	mov.w	sl, #0
 8004d1a:	2e00      	cmp	r6, #0
 8004d1c:	f280 80d1 	bge.w	8004ec2 <__kernel_rem_pio2+0x46a>
 8004d20:	4644      	mov	r4, r8
 8004d22:	2c00      	cmp	r4, #0
 8004d24:	f2c0 80ff 	blt.w	8004f26 <__kernel_rem_pio2+0x4ce>
 8004d28:	4b19      	ldr	r3, [pc, #100]	@ (8004d90 <__kernel_rem_pio2+0x338>)
 8004d2a:	461f      	mov	r7, r3
 8004d2c:	ab70      	add	r3, sp, #448	@ 0x1c0
 8004d2e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004d32:	9306      	str	r3, [sp, #24]
 8004d34:	f04f 0a00 	mov.w	sl, #0
 8004d38:	f04f 0b00 	mov.w	fp, #0
 8004d3c:	2600      	movs	r6, #0
 8004d3e:	eba8 0504 	sub.w	r5, r8, r4
 8004d42:	e0e4      	b.n	8004f0e <__kernel_rem_pio2+0x4b6>
 8004d44:	f04f 0902 	mov.w	r9, #2
 8004d48:	e754      	b.n	8004bf4 <__kernel_rem_pio2+0x19c>
 8004d4a:	f854 3b04 	ldr.w	r3, [r4], #4
 8004d4e:	bb0d      	cbnz	r5, 8004d94 <__kernel_rem_pio2+0x33c>
 8004d50:	b123      	cbz	r3, 8004d5c <__kernel_rem_pio2+0x304>
 8004d52:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8004d56:	f844 3c04 	str.w	r3, [r4, #-4]
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	3201      	adds	r2, #1
 8004d5e:	461d      	mov	r5, r3
 8004d60:	e74f      	b.n	8004c02 <__kernel_rem_pio2+0x1aa>
 8004d62:	bf00      	nop
 8004d64:	f3af 8000 	nop.w
	...
 8004d74:	3ff00000 	.word	0x3ff00000
 8004d78:	080054e0 	.word	0x080054e0
 8004d7c:	40200000 	.word	0x40200000
 8004d80:	3ff00000 	.word	0x3ff00000
 8004d84:	3e700000 	.word	0x3e700000
 8004d88:	41700000 	.word	0x41700000
 8004d8c:	3fe00000 	.word	0x3fe00000
 8004d90:	080054a0 	.word	0x080054a0
 8004d94:	1acb      	subs	r3, r1, r3
 8004d96:	e7de      	b.n	8004d56 <__kernel_rem_pio2+0x2fe>
 8004d98:	f108 32ff 	add.w	r2, r8, #4294967295
 8004d9c:	ab0c      	add	r3, sp, #48	@ 0x30
 8004d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004da2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004da6:	a90c      	add	r1, sp, #48	@ 0x30
 8004da8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004dac:	e737      	b.n	8004c1e <__kernel_rem_pio2+0x1c6>
 8004dae:	f108 32ff 	add.w	r2, r8, #4294967295
 8004db2:	ab0c      	add	r3, sp, #48	@ 0x30
 8004db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004db8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004dbc:	e7f3      	b.n	8004da6 <__kernel_rem_pio2+0x34e>
 8004dbe:	a90c      	add	r1, sp, #48	@ 0x30
 8004dc0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	e785      	b.n	8004cd6 <__kernel_rem_pio2+0x27e>
 8004dca:	3401      	adds	r4, #1
 8004dcc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8004dd0:	2a00      	cmp	r2, #0
 8004dd2:	d0fa      	beq.n	8004dca <__kernel_rem_pio2+0x372>
 8004dd4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004dd6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004dda:	eb0d 0503 	add.w	r5, sp, r3
 8004dde:	9b06      	ldr	r3, [sp, #24]
 8004de0:	aa20      	add	r2, sp, #128	@ 0x80
 8004de2:	4443      	add	r3, r8
 8004de4:	f108 0701 	add.w	r7, r8, #1
 8004de8:	3d98      	subs	r5, #152	@ 0x98
 8004dea:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8004dee:	4444      	add	r4, r8
 8004df0:	42bc      	cmp	r4, r7
 8004df2:	da04      	bge.n	8004dfe <__kernel_rem_pio2+0x3a6>
 8004df4:	46a0      	mov	r8, r4
 8004df6:	e6a2      	b.n	8004b3e <__kernel_rem_pio2+0xe6>
 8004df8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004dfa:	2401      	movs	r4, #1
 8004dfc:	e7e6      	b.n	8004dcc <__kernel_rem_pio2+0x374>
 8004dfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e00:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8004e04:	f7fb fb32 	bl	800046c <__aeabi_i2d>
 8004e08:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 80050c8 <__kernel_rem_pio2+0x670>
 8004e0c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004e10:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004e14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004e18:	46b2      	mov	sl, r6
 8004e1a:	f04f 0800 	mov.w	r8, #0
 8004e1e:	9b05      	ldr	r3, [sp, #20]
 8004e20:	4598      	cmp	r8, r3
 8004e22:	dd05      	ble.n	8004e30 <__kernel_rem_pio2+0x3d8>
 8004e24:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004e28:	3701      	adds	r7, #1
 8004e2a:	eca5 7b02 	vstmia	r5!, {d7}
 8004e2e:	e7df      	b.n	8004df0 <__kernel_rem_pio2+0x398>
 8004e30:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8004e34:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8004e38:	f7fb fb82 	bl	8000540 <__aeabi_dmul>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	460b      	mov	r3, r1
 8004e40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e44:	f7fb f9c6 	bl	80001d4 <__adddf3>
 8004e48:	f108 0801 	add.w	r8, r8, #1
 8004e4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e50:	e7e5      	b.n	8004e1e <__kernel_rem_pio2+0x3c6>
 8004e52:	f1cb 0000 	rsb	r0, fp, #0
 8004e56:	ec47 6b10 	vmov	d0, r6, r7
 8004e5a:	f000 f94d 	bl	80050f8 <scalbn>
 8004e5e:	ec55 4b10 	vmov	r4, r5, d0
 8004e62:	4b9b      	ldr	r3, [pc, #620]	@ (80050d0 <__kernel_rem_pio2+0x678>)
 8004e64:	2200      	movs	r2, #0
 8004e66:	4620      	mov	r0, r4
 8004e68:	4629      	mov	r1, r5
 8004e6a:	f7fb fdef 	bl	8000a4c <__aeabi_dcmpge>
 8004e6e:	b300      	cbz	r0, 8004eb2 <__kernel_rem_pio2+0x45a>
 8004e70:	4b98      	ldr	r3, [pc, #608]	@ (80050d4 <__kernel_rem_pio2+0x67c>)
 8004e72:	2200      	movs	r2, #0
 8004e74:	4620      	mov	r0, r4
 8004e76:	4629      	mov	r1, r5
 8004e78:	f7fb fb62 	bl	8000540 <__aeabi_dmul>
 8004e7c:	f7fb fdfa 	bl	8000a74 <__aeabi_d2iz>
 8004e80:	4606      	mov	r6, r0
 8004e82:	f7fb faf3 	bl	800046c <__aeabi_i2d>
 8004e86:	4b92      	ldr	r3, [pc, #584]	@ (80050d0 <__kernel_rem_pio2+0x678>)
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f7fb fb59 	bl	8000540 <__aeabi_dmul>
 8004e8e:	460b      	mov	r3, r1
 8004e90:	4602      	mov	r2, r0
 8004e92:	4629      	mov	r1, r5
 8004e94:	4620      	mov	r0, r4
 8004e96:	f7fb f99b 	bl	80001d0 <__aeabi_dsub>
 8004e9a:	f7fb fdeb 	bl	8000a74 <__aeabi_d2iz>
 8004e9e:	ab0c      	add	r3, sp, #48	@ 0x30
 8004ea0:	f10b 0b18 	add.w	fp, fp, #24
 8004ea4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8004ea8:	f108 0801 	add.w	r8, r8, #1
 8004eac:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8004eb0:	e720      	b.n	8004cf4 <__kernel_rem_pio2+0x29c>
 8004eb2:	4620      	mov	r0, r4
 8004eb4:	4629      	mov	r1, r5
 8004eb6:	f7fb fddd 	bl	8000a74 <__aeabi_d2iz>
 8004eba:	ab0c      	add	r3, sp, #48	@ 0x30
 8004ebc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8004ec0:	e718      	b.n	8004cf4 <__kernel_rem_pio2+0x29c>
 8004ec2:	ab0c      	add	r3, sp, #48	@ 0x30
 8004ec4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004ec8:	f7fb fad0 	bl	800046c <__aeabi_i2d>
 8004ecc:	4622      	mov	r2, r4
 8004ece:	462b      	mov	r3, r5
 8004ed0:	f7fb fb36 	bl	8000540 <__aeabi_dmul>
 8004ed4:	4652      	mov	r2, sl
 8004ed6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8004eda:	465b      	mov	r3, fp
 8004edc:	4620      	mov	r0, r4
 8004ede:	4629      	mov	r1, r5
 8004ee0:	f7fb fb2e 	bl	8000540 <__aeabi_dmul>
 8004ee4:	3e01      	subs	r6, #1
 8004ee6:	4604      	mov	r4, r0
 8004ee8:	460d      	mov	r5, r1
 8004eea:	e716      	b.n	8004d1a <__kernel_rem_pio2+0x2c2>
 8004eec:	9906      	ldr	r1, [sp, #24]
 8004eee:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8004ef2:	9106      	str	r1, [sp, #24]
 8004ef4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8004ef8:	f7fb fb22 	bl	8000540 <__aeabi_dmul>
 8004efc:	4602      	mov	r2, r0
 8004efe:	460b      	mov	r3, r1
 8004f00:	4650      	mov	r0, sl
 8004f02:	4659      	mov	r1, fp
 8004f04:	f7fb f966 	bl	80001d4 <__adddf3>
 8004f08:	3601      	adds	r6, #1
 8004f0a:	4682      	mov	sl, r0
 8004f0c:	468b      	mov	fp, r1
 8004f0e:	9b00      	ldr	r3, [sp, #0]
 8004f10:	429e      	cmp	r6, r3
 8004f12:	dc01      	bgt.n	8004f18 <__kernel_rem_pio2+0x4c0>
 8004f14:	42ae      	cmp	r6, r5
 8004f16:	dde9      	ble.n	8004eec <__kernel_rem_pio2+0x494>
 8004f18:	ab48      	add	r3, sp, #288	@ 0x120
 8004f1a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004f1e:	e9c5 ab00 	strd	sl, fp, [r5]
 8004f22:	3c01      	subs	r4, #1
 8004f24:	e6fd      	b.n	8004d22 <__kernel_rem_pio2+0x2ca>
 8004f26:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	dc0b      	bgt.n	8004f44 <__kernel_rem_pio2+0x4ec>
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	dc35      	bgt.n	8004f9c <__kernel_rem_pio2+0x544>
 8004f30:	d059      	beq.n	8004fe6 <__kernel_rem_pio2+0x58e>
 8004f32:	9b02      	ldr	r3, [sp, #8]
 8004f34:	f003 0007 	and.w	r0, r3, #7
 8004f38:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8004f3c:	ecbd 8b02 	vpop	{d8}
 8004f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f44:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8004f46:	2b03      	cmp	r3, #3
 8004f48:	d1f3      	bne.n	8004f32 <__kernel_rem_pio2+0x4da>
 8004f4a:	9b05      	ldr	r3, [sp, #20]
 8004f4c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004f50:	eb0d 0403 	add.w	r4, sp, r3
 8004f54:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8004f58:	4625      	mov	r5, r4
 8004f5a:	46c2      	mov	sl, r8
 8004f5c:	f1ba 0f00 	cmp.w	sl, #0
 8004f60:	dc69      	bgt.n	8005036 <__kernel_rem_pio2+0x5de>
 8004f62:	4645      	mov	r5, r8
 8004f64:	2d01      	cmp	r5, #1
 8004f66:	f300 8087 	bgt.w	8005078 <__kernel_rem_pio2+0x620>
 8004f6a:	9c05      	ldr	r4, [sp, #20]
 8004f6c:	ab48      	add	r3, sp, #288	@ 0x120
 8004f6e:	441c      	add	r4, r3
 8004f70:	2000      	movs	r0, #0
 8004f72:	2100      	movs	r1, #0
 8004f74:	f1b8 0f01 	cmp.w	r8, #1
 8004f78:	f300 809c 	bgt.w	80050b4 <__kernel_rem_pio2+0x65c>
 8004f7c:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 8004f80:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 8004f84:	f1b9 0f00 	cmp.w	r9, #0
 8004f88:	f040 80a6 	bne.w	80050d8 <__kernel_rem_pio2+0x680>
 8004f8c:	9b04      	ldr	r3, [sp, #16]
 8004f8e:	e9c3 5600 	strd	r5, r6, [r3]
 8004f92:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8004f96:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8004f9a:	e7ca      	b.n	8004f32 <__kernel_rem_pio2+0x4da>
 8004f9c:	9d05      	ldr	r5, [sp, #20]
 8004f9e:	ab48      	add	r3, sp, #288	@ 0x120
 8004fa0:	441d      	add	r5, r3
 8004fa2:	4644      	mov	r4, r8
 8004fa4:	2000      	movs	r0, #0
 8004fa6:	2100      	movs	r1, #0
 8004fa8:	2c00      	cmp	r4, #0
 8004faa:	da35      	bge.n	8005018 <__kernel_rem_pio2+0x5c0>
 8004fac:	f1b9 0f00 	cmp.w	r9, #0
 8004fb0:	d038      	beq.n	8005024 <__kernel_rem_pio2+0x5cc>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004fb8:	9c04      	ldr	r4, [sp, #16]
 8004fba:	e9c4 2300 	strd	r2, r3, [r4]
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8004fc6:	f7fb f903 	bl	80001d0 <__aeabi_dsub>
 8004fca:	ad4a      	add	r5, sp, #296	@ 0x128
 8004fcc:	2401      	movs	r4, #1
 8004fce:	45a0      	cmp	r8, r4
 8004fd0:	da2b      	bge.n	800502a <__kernel_rem_pio2+0x5d2>
 8004fd2:	f1b9 0f00 	cmp.w	r9, #0
 8004fd6:	d002      	beq.n	8004fde <__kernel_rem_pio2+0x586>
 8004fd8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004fdc:	4619      	mov	r1, r3
 8004fde:	9b04      	ldr	r3, [sp, #16]
 8004fe0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8004fe4:	e7a5      	b.n	8004f32 <__kernel_rem_pio2+0x4da>
 8004fe6:	9c05      	ldr	r4, [sp, #20]
 8004fe8:	ab48      	add	r3, sp, #288	@ 0x120
 8004fea:	441c      	add	r4, r3
 8004fec:	2000      	movs	r0, #0
 8004fee:	2100      	movs	r1, #0
 8004ff0:	f1b8 0f00 	cmp.w	r8, #0
 8004ff4:	da09      	bge.n	800500a <__kernel_rem_pio2+0x5b2>
 8004ff6:	f1b9 0f00 	cmp.w	r9, #0
 8004ffa:	d002      	beq.n	8005002 <__kernel_rem_pio2+0x5aa>
 8004ffc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005000:	4619      	mov	r1, r3
 8005002:	9b04      	ldr	r3, [sp, #16]
 8005004:	e9c3 0100 	strd	r0, r1, [r3]
 8005008:	e793      	b.n	8004f32 <__kernel_rem_pio2+0x4da>
 800500a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800500e:	f7fb f8e1 	bl	80001d4 <__adddf3>
 8005012:	f108 38ff 	add.w	r8, r8, #4294967295
 8005016:	e7eb      	b.n	8004ff0 <__kernel_rem_pio2+0x598>
 8005018:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800501c:	f7fb f8da 	bl	80001d4 <__adddf3>
 8005020:	3c01      	subs	r4, #1
 8005022:	e7c1      	b.n	8004fa8 <__kernel_rem_pio2+0x550>
 8005024:	4602      	mov	r2, r0
 8005026:	460b      	mov	r3, r1
 8005028:	e7c6      	b.n	8004fb8 <__kernel_rem_pio2+0x560>
 800502a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800502e:	f7fb f8d1 	bl	80001d4 <__adddf3>
 8005032:	3401      	adds	r4, #1
 8005034:	e7cb      	b.n	8004fce <__kernel_rem_pio2+0x576>
 8005036:	ed35 7b02 	vldmdb	r5!, {d7}
 800503a:	ed8d 7b00 	vstr	d7, [sp]
 800503e:	ed95 7b02 	vldr	d7, [r5, #8]
 8005042:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005046:	ec53 2b17 	vmov	r2, r3, d7
 800504a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800504e:	f7fb f8c1 	bl	80001d4 <__adddf3>
 8005052:	4602      	mov	r2, r0
 8005054:	460b      	mov	r3, r1
 8005056:	4606      	mov	r6, r0
 8005058:	460f      	mov	r7, r1
 800505a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800505e:	f7fb f8b7 	bl	80001d0 <__aeabi_dsub>
 8005062:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005066:	f7fb f8b5 	bl	80001d4 <__adddf3>
 800506a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800506e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8005072:	e9c5 6700 	strd	r6, r7, [r5]
 8005076:	e771      	b.n	8004f5c <__kernel_rem_pio2+0x504>
 8005078:	ed34 7b02 	vldmdb	r4!, {d7}
 800507c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8005080:	ec51 0b17 	vmov	r0, r1, d7
 8005084:	4652      	mov	r2, sl
 8005086:	465b      	mov	r3, fp
 8005088:	ed8d 7b00 	vstr	d7, [sp]
 800508c:	f7fb f8a2 	bl	80001d4 <__adddf3>
 8005090:	4602      	mov	r2, r0
 8005092:	460b      	mov	r3, r1
 8005094:	4606      	mov	r6, r0
 8005096:	460f      	mov	r7, r1
 8005098:	e9dd 0100 	ldrd	r0, r1, [sp]
 800509c:	f7fb f898 	bl	80001d0 <__aeabi_dsub>
 80050a0:	4652      	mov	r2, sl
 80050a2:	465b      	mov	r3, fp
 80050a4:	f7fb f896 	bl	80001d4 <__adddf3>
 80050a8:	3d01      	subs	r5, #1
 80050aa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80050ae:	e9c4 6700 	strd	r6, r7, [r4]
 80050b2:	e757      	b.n	8004f64 <__kernel_rem_pio2+0x50c>
 80050b4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80050b8:	f7fb f88c 	bl	80001d4 <__adddf3>
 80050bc:	f108 38ff 	add.w	r8, r8, #4294967295
 80050c0:	e758      	b.n	8004f74 <__kernel_rem_pio2+0x51c>
 80050c2:	bf00      	nop
 80050c4:	f3af 8000 	nop.w
	...
 80050d0:	41700000 	.word	0x41700000
 80050d4:	3e700000 	.word	0x3e700000
 80050d8:	9b04      	ldr	r3, [sp, #16]
 80050da:	9a04      	ldr	r2, [sp, #16]
 80050dc:	601d      	str	r5, [r3, #0]
 80050de:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 80050e2:	605c      	str	r4, [r3, #4]
 80050e4:	609f      	str	r7, [r3, #8]
 80050e6:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 80050ea:	60d3      	str	r3, [r2, #12]
 80050ec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80050f0:	6110      	str	r0, [r2, #16]
 80050f2:	6153      	str	r3, [r2, #20]
 80050f4:	e71d      	b.n	8004f32 <__kernel_rem_pio2+0x4da>
 80050f6:	bf00      	nop

080050f8 <scalbn>:
 80050f8:	b570      	push	{r4, r5, r6, lr}
 80050fa:	ec55 4b10 	vmov	r4, r5, d0
 80050fe:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8005102:	4606      	mov	r6, r0
 8005104:	462b      	mov	r3, r5
 8005106:	b991      	cbnz	r1, 800512e <scalbn+0x36>
 8005108:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800510c:	4323      	orrs	r3, r4
 800510e:	d03b      	beq.n	8005188 <scalbn+0x90>
 8005110:	4b33      	ldr	r3, [pc, #204]	@ (80051e0 <scalbn+0xe8>)
 8005112:	4620      	mov	r0, r4
 8005114:	4629      	mov	r1, r5
 8005116:	2200      	movs	r2, #0
 8005118:	f7fb fa12 	bl	8000540 <__aeabi_dmul>
 800511c:	4b31      	ldr	r3, [pc, #196]	@ (80051e4 <scalbn+0xec>)
 800511e:	429e      	cmp	r6, r3
 8005120:	4604      	mov	r4, r0
 8005122:	460d      	mov	r5, r1
 8005124:	da0f      	bge.n	8005146 <scalbn+0x4e>
 8005126:	a326      	add	r3, pc, #152	@ (adr r3, 80051c0 <scalbn+0xc8>)
 8005128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800512c:	e01e      	b.n	800516c <scalbn+0x74>
 800512e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8005132:	4291      	cmp	r1, r2
 8005134:	d10b      	bne.n	800514e <scalbn+0x56>
 8005136:	4622      	mov	r2, r4
 8005138:	4620      	mov	r0, r4
 800513a:	4629      	mov	r1, r5
 800513c:	f7fb f84a 	bl	80001d4 <__adddf3>
 8005140:	4604      	mov	r4, r0
 8005142:	460d      	mov	r5, r1
 8005144:	e020      	b.n	8005188 <scalbn+0x90>
 8005146:	460b      	mov	r3, r1
 8005148:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800514c:	3936      	subs	r1, #54	@ 0x36
 800514e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8005152:	4296      	cmp	r6, r2
 8005154:	dd0d      	ble.n	8005172 <scalbn+0x7a>
 8005156:	2d00      	cmp	r5, #0
 8005158:	a11b      	add	r1, pc, #108	@ (adr r1, 80051c8 <scalbn+0xd0>)
 800515a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800515e:	da02      	bge.n	8005166 <scalbn+0x6e>
 8005160:	a11b      	add	r1, pc, #108	@ (adr r1, 80051d0 <scalbn+0xd8>)
 8005162:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005166:	a318      	add	r3, pc, #96	@ (adr r3, 80051c8 <scalbn+0xd0>)
 8005168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800516c:	f7fb f9e8 	bl	8000540 <__aeabi_dmul>
 8005170:	e7e6      	b.n	8005140 <scalbn+0x48>
 8005172:	1872      	adds	r2, r6, r1
 8005174:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8005178:	428a      	cmp	r2, r1
 800517a:	dcec      	bgt.n	8005156 <scalbn+0x5e>
 800517c:	2a00      	cmp	r2, #0
 800517e:	dd06      	ble.n	800518e <scalbn+0x96>
 8005180:	f36f 531e 	bfc	r3, #20, #11
 8005184:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005188:	ec45 4b10 	vmov	d0, r4, r5
 800518c:	bd70      	pop	{r4, r5, r6, pc}
 800518e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8005192:	da08      	bge.n	80051a6 <scalbn+0xae>
 8005194:	2d00      	cmp	r5, #0
 8005196:	a10a      	add	r1, pc, #40	@ (adr r1, 80051c0 <scalbn+0xc8>)
 8005198:	e9d1 0100 	ldrd	r0, r1, [r1]
 800519c:	dac3      	bge.n	8005126 <scalbn+0x2e>
 800519e:	a10e      	add	r1, pc, #56	@ (adr r1, 80051d8 <scalbn+0xe0>)
 80051a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80051a4:	e7bf      	b.n	8005126 <scalbn+0x2e>
 80051a6:	3236      	adds	r2, #54	@ 0x36
 80051a8:	f36f 531e 	bfc	r3, #20, #11
 80051ac:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80051b0:	4620      	mov	r0, r4
 80051b2:	4b0d      	ldr	r3, [pc, #52]	@ (80051e8 <scalbn+0xf0>)
 80051b4:	4629      	mov	r1, r5
 80051b6:	2200      	movs	r2, #0
 80051b8:	e7d8      	b.n	800516c <scalbn+0x74>
 80051ba:	bf00      	nop
 80051bc:	f3af 8000 	nop.w
 80051c0:	c2f8f359 	.word	0xc2f8f359
 80051c4:	01a56e1f 	.word	0x01a56e1f
 80051c8:	8800759c 	.word	0x8800759c
 80051cc:	7e37e43c 	.word	0x7e37e43c
 80051d0:	8800759c 	.word	0x8800759c
 80051d4:	fe37e43c 	.word	0xfe37e43c
 80051d8:	c2f8f359 	.word	0xc2f8f359
 80051dc:	81a56e1f 	.word	0x81a56e1f
 80051e0:	43500000 	.word	0x43500000
 80051e4:	ffff3cb0 	.word	0xffff3cb0
 80051e8:	3c900000 	.word	0x3c900000
 80051ec:	00000000 	.word	0x00000000

080051f0 <floor>:
 80051f0:	ec51 0b10 	vmov	r0, r1, d0
 80051f4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80051f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051fc:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8005200:	2e13      	cmp	r6, #19
 8005202:	460c      	mov	r4, r1
 8005204:	4605      	mov	r5, r0
 8005206:	4680      	mov	r8, r0
 8005208:	dc34      	bgt.n	8005274 <floor+0x84>
 800520a:	2e00      	cmp	r6, #0
 800520c:	da17      	bge.n	800523e <floor+0x4e>
 800520e:	a332      	add	r3, pc, #200	@ (adr r3, 80052d8 <floor+0xe8>)
 8005210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005214:	f7fa ffde 	bl	80001d4 <__adddf3>
 8005218:	2200      	movs	r2, #0
 800521a:	2300      	movs	r3, #0
 800521c:	f7fb fc20 	bl	8000a60 <__aeabi_dcmpgt>
 8005220:	b150      	cbz	r0, 8005238 <floor+0x48>
 8005222:	2c00      	cmp	r4, #0
 8005224:	da55      	bge.n	80052d2 <floor+0xe2>
 8005226:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800522a:	432c      	orrs	r4, r5
 800522c:	2500      	movs	r5, #0
 800522e:	42ac      	cmp	r4, r5
 8005230:	4c2b      	ldr	r4, [pc, #172]	@ (80052e0 <floor+0xf0>)
 8005232:	bf08      	it	eq
 8005234:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8005238:	4621      	mov	r1, r4
 800523a:	4628      	mov	r0, r5
 800523c:	e023      	b.n	8005286 <floor+0x96>
 800523e:	4f29      	ldr	r7, [pc, #164]	@ (80052e4 <floor+0xf4>)
 8005240:	4137      	asrs	r7, r6
 8005242:	ea01 0307 	and.w	r3, r1, r7
 8005246:	4303      	orrs	r3, r0
 8005248:	d01d      	beq.n	8005286 <floor+0x96>
 800524a:	a323      	add	r3, pc, #140	@ (adr r3, 80052d8 <floor+0xe8>)
 800524c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005250:	f7fa ffc0 	bl	80001d4 <__adddf3>
 8005254:	2200      	movs	r2, #0
 8005256:	2300      	movs	r3, #0
 8005258:	f7fb fc02 	bl	8000a60 <__aeabi_dcmpgt>
 800525c:	2800      	cmp	r0, #0
 800525e:	d0eb      	beq.n	8005238 <floor+0x48>
 8005260:	2c00      	cmp	r4, #0
 8005262:	bfbe      	ittt	lt
 8005264:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8005268:	4133      	asrlt	r3, r6
 800526a:	18e4      	addlt	r4, r4, r3
 800526c:	ea24 0407 	bic.w	r4, r4, r7
 8005270:	2500      	movs	r5, #0
 8005272:	e7e1      	b.n	8005238 <floor+0x48>
 8005274:	2e33      	cmp	r6, #51	@ 0x33
 8005276:	dd0a      	ble.n	800528e <floor+0x9e>
 8005278:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800527c:	d103      	bne.n	8005286 <floor+0x96>
 800527e:	4602      	mov	r2, r0
 8005280:	460b      	mov	r3, r1
 8005282:	f7fa ffa7 	bl	80001d4 <__adddf3>
 8005286:	ec41 0b10 	vmov	d0, r0, r1
 800528a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800528e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8005292:	f04f 37ff 	mov.w	r7, #4294967295
 8005296:	40df      	lsrs	r7, r3
 8005298:	4207      	tst	r7, r0
 800529a:	d0f4      	beq.n	8005286 <floor+0x96>
 800529c:	a30e      	add	r3, pc, #56	@ (adr r3, 80052d8 <floor+0xe8>)
 800529e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a2:	f7fa ff97 	bl	80001d4 <__adddf3>
 80052a6:	2200      	movs	r2, #0
 80052a8:	2300      	movs	r3, #0
 80052aa:	f7fb fbd9 	bl	8000a60 <__aeabi_dcmpgt>
 80052ae:	2800      	cmp	r0, #0
 80052b0:	d0c2      	beq.n	8005238 <floor+0x48>
 80052b2:	2c00      	cmp	r4, #0
 80052b4:	da0a      	bge.n	80052cc <floor+0xdc>
 80052b6:	2e14      	cmp	r6, #20
 80052b8:	d101      	bne.n	80052be <floor+0xce>
 80052ba:	3401      	adds	r4, #1
 80052bc:	e006      	b.n	80052cc <floor+0xdc>
 80052be:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80052c2:	2301      	movs	r3, #1
 80052c4:	40b3      	lsls	r3, r6
 80052c6:	441d      	add	r5, r3
 80052c8:	4545      	cmp	r5, r8
 80052ca:	d3f6      	bcc.n	80052ba <floor+0xca>
 80052cc:	ea25 0507 	bic.w	r5, r5, r7
 80052d0:	e7b2      	b.n	8005238 <floor+0x48>
 80052d2:	2500      	movs	r5, #0
 80052d4:	462c      	mov	r4, r5
 80052d6:	e7af      	b.n	8005238 <floor+0x48>
 80052d8:	8800759c 	.word	0x8800759c
 80052dc:	7e37e43c 	.word	0x7e37e43c
 80052e0:	bff00000 	.word	0xbff00000
 80052e4:	000fffff 	.word	0x000fffff

080052e8 <_init>:
 80052e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ea:	bf00      	nop
 80052ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052ee:	bc08      	pop	{r3}
 80052f0:	469e      	mov	lr, r3
 80052f2:	4770      	bx	lr

080052f4 <_fini>:
 80052f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052f6:	bf00      	nop
 80052f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052fa:	bc08      	pop	{r3}
 80052fc:	469e      	mov	lr, r3
 80052fe:	4770      	bx	lr
