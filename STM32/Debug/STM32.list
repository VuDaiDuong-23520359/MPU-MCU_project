
STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a08  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004b90  08004b90  00005b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bb0  08004bb0  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004bb0  08004bb0  00005bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004bb8  08004bb8  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bb8  08004bb8  00005bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004bbc  08004bbc  00005bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004bc0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006068  2**0
                  CONTENTS
 10 .bss          00000efc  20000068  20000068  00006068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000f64  20000f64  00006068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bebb  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ed2  00000000  00000000  00011f53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c50  00000000  00000000  00013e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000975  00000000  00000000  00014a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022f6a  00000000  00000000  000153ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dcb9  00000000  00000000  00038357  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d818f  00000000  00000000  00046010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011e19f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000039a0  00000000  00000000  0011e1e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000042  00000000  00000000  00121b84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000068 	.word	0x20000068
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004b78 	.word	0x08004b78

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	08004b78 	.word	0x08004b78

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <ITM_Init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void ITM_Init(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
    // 1) Enable trace and debug blocks:
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80004f8:	4b12      	ldr	r3, [pc, #72]	@ (8000544 <ITM_Init+0x50>)
 80004fa:	68db      	ldr	r3, [r3, #12]
 80004fc:	4a11      	ldr	r2, [pc, #68]	@ (8000544 <ITM_Init+0x50>)
 80004fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000502:	60d3      	str	r3, [r2, #12]

    // 2) (Optional) Enable DWT cycle counter if you ever want cycle‐count tracing
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000504:	4b10      	ldr	r3, [pc, #64]	@ (8000548 <ITM_Init+0x54>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a0f      	ldr	r2, [pc, #60]	@ (8000548 <ITM_Init+0x54>)
 800050a:	f043 0301 	orr.w	r3, r3, #1
 800050e:	6013      	str	r3, [r2, #0]

    // 3) Unlock ITM (write access key):
    ITM->LAR = 0xC5ACCE55;
 8000510:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000514:	4a0d      	ldr	r2, [pc, #52]	@ (800054c <ITM_Init+0x58>)
 8000516:	f8c3 2fb0 	str.w	r2, [r3, #4016]	@ 0xfb0

    // 4) Enable ITM itself, sync packets, and set TraceBusID = 1:
    ITM->TCR = ITM_TCR_ITMENA_Msk
 800051a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800051e:	4a0c      	ldr	r2, [pc, #48]	@ (8000550 <ITM_Init+0x5c>)
 8000520:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
             | ITM_TCR_SYNCENA_Msk
             | (1UL << ITM_TCR_TraceBusID_Pos);

    // 5) Enable stimulus port 0 (we’ll write to ITM->PORT[0]):
    ITM->TER |= (1UL << 0);
 8000524:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000528:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800052c:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000530:	f043 0301 	orr.w	r3, r3, #1
 8000534:	f8c2 3e00 	str.w	r3, [r2, #3584]	@ 0xe00
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	e000edf0 	.word	0xe000edf0
 8000548:	e0001000 	.word	0xe0001000
 800054c:	c5acce55 	.word	0xc5acce55
 8000550:	00010005 	.word	0x00010005

08000554 <HAL_TIM_PWM_PulseFinishedCallback>:
    // Linearly interpolate [threshold…MAX_AMP] → [0…NORMAL_BRIGHTNESS]
    uint16_t adj = amp - threshold;
    return (uint8_t)((adj * NORMAL_BRIGHTNESS) / (MAX_AMP - threshold));
}

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
    if (htim == &htim1) {
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	4a07      	ldr	r2, [pc, #28]	@ (800057c <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 8000560:	4293      	cmp	r3, r2
 8000562:	d106      	bne.n	8000572 <HAL_TIM_PWM_PulseFinishedCallback+0x1e>
        HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8000564:	2100      	movs	r1, #0
 8000566:	4805      	ldr	r0, [pc, #20]	@ (800057c <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 8000568:	f002 ff36 	bl	80033d8 <HAL_TIM_PWM_Stop_DMA>
        datasentflag = 1;
 800056c:	4b04      	ldr	r3, [pc, #16]	@ (8000580 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>)
 800056e:	2201      	movs	r2, #1
 8000570:	601a      	str	r2, [r3, #0]
    }
}
 8000572:	bf00      	nop
 8000574:	3708      	adds	r7, #8
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	2000012c 	.word	0x2000012c
 8000580:	20000388 	.word	0x20000388

08000584 <Set_LED>:


void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 8000584:	b480      	push	{r7}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	60f8      	str	r0, [r7, #12]
 800058c:	60b9      	str	r1, [r7, #8]
 800058e:	607a      	str	r2, [r7, #4]
 8000590:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	b2d9      	uxtb	r1, r3
 8000596:	4a11      	ldr	r2, [pc, #68]	@ (80005dc <Set_LED+0x58>)
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	b2d9      	uxtb	r1, r3
 80005a2:	4a0e      	ldr	r2, [pc, #56]	@ (80005dc <Set_LED+0x58>)
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	009b      	lsls	r3, r3, #2
 80005a8:	4413      	add	r3, r2
 80005aa:	460a      	mov	r2, r1
 80005ac:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 80005ae:	68bb      	ldr	r3, [r7, #8]
 80005b0:	b2d9      	uxtb	r1, r3
 80005b2:	4a0a      	ldr	r2, [pc, #40]	@ (80005dc <Set_LED+0x58>)
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	009b      	lsls	r3, r3, #2
 80005b8:	4413      	add	r3, r2
 80005ba:	460a      	mov	r2, r1
 80005bc:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	b2d9      	uxtb	r1, r3
 80005c2:	4a06      	ldr	r2, [pc, #24]	@ (80005dc <Set_LED+0x58>)
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	009b      	lsls	r3, r3, #2
 80005c8:	4413      	add	r3, r2
 80005ca:	460a      	mov	r2, r1
 80005cc:	70da      	strb	r2, [r3, #3]
}
 80005ce:	bf00      	nop
 80005d0:	3714      	adds	r7, #20
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	200001d8 	.word	0x200001d8

080005e0 <Set_Brightness>:

void Set_Brightness (int brightness)  // 0–NORMAL_BRIGHTNESS
{
 80005e0:	b480      	push	{r7}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS
    if (brightness > NORMAL_BRIGHTNESS) brightness = NORMAL_BRIGHTNESS;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	2b14      	cmp	r3, #20
 80005ec:	dd01      	ble.n	80005f2 <Set_Brightness+0x12>
 80005ee:	2314      	movs	r3, #20
 80005f0:	607b      	str	r3, [r7, #4]
    float scale = brightness / (float)NORMAL_BRIGHTNESS;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	ee07 3a90 	vmov	s15, r3
 80005f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80005fc:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 8000600:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000604:	edc7 7a02 	vstr	s15, [r7, #8]

    for (int i = 0; i < MAX_LED; i++)
 8000608:	2300      	movs	r3, #0
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	e055      	b.n	80006ba <Set_Brightness+0xda>
    {
        // preserve the “LED number” byte
        LED_Mod[i][0] = LED_Data[i][0];
 800060e:	4a30      	ldr	r2, [pc, #192]	@ (80006d0 <Set_Brightness+0xf0>)
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 8000616:	4a2f      	ldr	r2, [pc, #188]	@ (80006d4 <Set_Brightness+0xf4>)
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
        // scale each color channel linearly
        LED_Mod[i][1] = (uint8_t)(LED_Data[i][1] * scale);
 800061e:	4a2c      	ldr	r2, [pc, #176]	@ (80006d0 <Set_Brightness+0xf0>)
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	009b      	lsls	r3, r3, #2
 8000624:	4413      	add	r3, r2
 8000626:	785b      	ldrb	r3, [r3, #1]
 8000628:	ee07 3a90 	vmov	s15, r3
 800062c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000630:	edd7 7a02 	vldr	s15, [r7, #8]
 8000634:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000638:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800063c:	edc7 7a00 	vstr	s15, [r7]
 8000640:	783b      	ldrb	r3, [r7, #0]
 8000642:	b2d9      	uxtb	r1, r3
 8000644:	4a23      	ldr	r2, [pc, #140]	@ (80006d4 <Set_Brightness+0xf4>)
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	009b      	lsls	r3, r3, #2
 800064a:	4413      	add	r3, r2
 800064c:	460a      	mov	r2, r1
 800064e:	705a      	strb	r2, [r3, #1]
        LED_Mod[i][2] = (uint8_t)(LED_Data[i][2] * scale);
 8000650:	4a1f      	ldr	r2, [pc, #124]	@ (80006d0 <Set_Brightness+0xf0>)
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	009b      	lsls	r3, r3, #2
 8000656:	4413      	add	r3, r2
 8000658:	789b      	ldrb	r3, [r3, #2]
 800065a:	ee07 3a90 	vmov	s15, r3
 800065e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000662:	edd7 7a02 	vldr	s15, [r7, #8]
 8000666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800066a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800066e:	edc7 7a00 	vstr	s15, [r7]
 8000672:	783b      	ldrb	r3, [r7, #0]
 8000674:	b2d9      	uxtb	r1, r3
 8000676:	4a17      	ldr	r2, [pc, #92]	@ (80006d4 <Set_Brightness+0xf4>)
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	009b      	lsls	r3, r3, #2
 800067c:	4413      	add	r3, r2
 800067e:	460a      	mov	r2, r1
 8000680:	709a      	strb	r2, [r3, #2]
        LED_Mod[i][3] = (uint8_t)(LED_Data[i][3] * scale);
 8000682:	4a13      	ldr	r2, [pc, #76]	@ (80006d0 <Set_Brightness+0xf0>)
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	009b      	lsls	r3, r3, #2
 8000688:	4413      	add	r3, r2
 800068a:	78db      	ldrb	r3, [r3, #3]
 800068c:	ee07 3a90 	vmov	s15, r3
 8000690:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000694:	edd7 7a02 	vldr	s15, [r7, #8]
 8000698:	ee67 7a27 	vmul.f32	s15, s14, s15
 800069c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006a0:	edc7 7a00 	vstr	s15, [r7]
 80006a4:	783b      	ldrb	r3, [r7, #0]
 80006a6:	b2d9      	uxtb	r1, r3
 80006a8:	4a0a      	ldr	r2, [pc, #40]	@ (80006d4 <Set_Brightness+0xf4>)
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	009b      	lsls	r3, r3, #2
 80006ae:	4413      	add	r3, r2
 80006b0:	460a      	mov	r2, r1
 80006b2:	70da      	strb	r2, [r3, #3]
    for (int i = 0; i < MAX_LED; i++)
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	3301      	adds	r3, #1
 80006b8:	60fb      	str	r3, [r7, #12]
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	2b35      	cmp	r3, #53	@ 0x35
 80006be:	dda6      	ble.n	800060e <Set_Brightness+0x2e>
    }
#endif
}
 80006c0:	bf00      	nop
 80006c2:	bf00      	nop
 80006c4:	3714      	adds	r7, #20
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	200001d8 	.word	0x200001d8
 80006d4:	200002b0 	.word	0x200002b0

080006d8 <WS2812_Send>:

void WS2812_Send (void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b086      	sub	sp, #24
 80006dc:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 80006de:	2300      	movs	r3, #0
 80006e0:	617b      	str	r3, [r7, #20]
	uint32_t color;


	for (int i= 0; i<MAX_LED; i++)
 80006e2:	2300      	movs	r3, #0
 80006e4:	613b      	str	r3, [r7, #16]
 80006e6:	e036      	b.n	8000756 <WS2812_Send+0x7e>
	{
#if USE_BRIGHTNESS
		color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
 80006e8:	4a2e      	ldr	r2, [pc, #184]	@ (80007a4 <WS2812_Send+0xcc>)
 80006ea:	693b      	ldr	r3, [r7, #16]
 80006ec:	009b      	lsls	r3, r3, #2
 80006ee:	4413      	add	r3, r2
 80006f0:	785b      	ldrb	r3, [r3, #1]
 80006f2:	041a      	lsls	r2, r3, #16
 80006f4:	492b      	ldr	r1, [pc, #172]	@ (80007a4 <WS2812_Send+0xcc>)
 80006f6:	693b      	ldr	r3, [r7, #16]
 80006f8:	009b      	lsls	r3, r3, #2
 80006fa:	440b      	add	r3, r1
 80006fc:	789b      	ldrb	r3, [r3, #2]
 80006fe:	021b      	lsls	r3, r3, #8
 8000700:	431a      	orrs	r2, r3
 8000702:	4928      	ldr	r1, [pc, #160]	@ (80007a4 <WS2812_Send+0xcc>)
 8000704:	693b      	ldr	r3, [r7, #16]
 8000706:	009b      	lsls	r3, r3, #2
 8000708:	440b      	add	r3, r1
 800070a:	78db      	ldrb	r3, [r3, #3]
 800070c:	4313      	orrs	r3, r2
 800070e:	607b      	str	r3, [r7, #4]
#else
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
#endif

		for (int i=23; i>=0; i--)
 8000710:	2317      	movs	r3, #23
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	e019      	b.n	800074a <WS2812_Send+0x72>
		{
			if (color&(1<<i))
 8000716:	2201      	movs	r2, #1
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	fa02 f303 	lsl.w	r3, r2, r3
 800071e:	461a      	mov	r2, r3
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	4013      	ands	r3, r2
 8000724:	2b00      	cmp	r3, #0
 8000726:	d005      	beq.n	8000734 <WS2812_Send+0x5c>
			{
				pwmData[indx] = 60;  // 2/3 of 90
 8000728:	4a1f      	ldr	r2, [pc, #124]	@ (80007a8 <WS2812_Send+0xd0>)
 800072a:	697b      	ldr	r3, [r7, #20]
 800072c:	213c      	movs	r1, #60	@ 0x3c
 800072e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000732:	e004      	b.n	800073e <WS2812_Send+0x66>
			}

			else pwmData[indx] = 30;  // 1/3 of 90
 8000734:	4a1c      	ldr	r2, [pc, #112]	@ (80007a8 <WS2812_Send+0xd0>)
 8000736:	697b      	ldr	r3, [r7, #20]
 8000738:	211e      	movs	r1, #30
 800073a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			indx++;
 800073e:	697b      	ldr	r3, [r7, #20]
 8000740:	3301      	adds	r3, #1
 8000742:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	3b01      	subs	r3, #1
 8000748:	60fb      	str	r3, [r7, #12]
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	2b00      	cmp	r3, #0
 800074e:	dae2      	bge.n	8000716 <WS2812_Send+0x3e>
	for (int i= 0; i<MAX_LED; i++)
 8000750:	693b      	ldr	r3, [r7, #16]
 8000752:	3301      	adds	r3, #1
 8000754:	613b      	str	r3, [r7, #16]
 8000756:	693b      	ldr	r3, [r7, #16]
 8000758:	2b35      	cmp	r3, #53	@ 0x35
 800075a:	ddc5      	ble.n	80006e8 <WS2812_Send+0x10>
		}

	}

	for (int i=0; i<50; i++)
 800075c:	2300      	movs	r3, #0
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	e00a      	b.n	8000778 <WS2812_Send+0xa0>
	{
		pwmData[indx] = 0;
 8000762:	4a11      	ldr	r2, [pc, #68]	@ (80007a8 <WS2812_Send+0xd0>)
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	2100      	movs	r1, #0
 8000768:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 800076c:	697b      	ldr	r3, [r7, #20]
 800076e:	3301      	adds	r3, #1
 8000770:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 8000772:	68bb      	ldr	r3, [r7, #8]
 8000774:	3301      	adds	r3, #1
 8000776:	60bb      	str	r3, [r7, #8]
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	2b31      	cmp	r3, #49	@ 0x31
 800077c:	ddf1      	ble.n	8000762 <WS2812_Send+0x8a>
	}

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 800077e:	697b      	ldr	r3, [r7, #20]
 8000780:	b29b      	uxth	r3, r3
 8000782:	4a09      	ldr	r2, [pc, #36]	@ (80007a8 <WS2812_Send+0xd0>)
 8000784:	2100      	movs	r1, #0
 8000786:	4809      	ldr	r0, [pc, #36]	@ (80007ac <WS2812_Send+0xd4>)
 8000788:	f002 fc5e 	bl	8003048 <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag){};
 800078c:	bf00      	nop
 800078e:	4b08      	ldr	r3, [pc, #32]	@ (80007b0 <WS2812_Send+0xd8>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d0fb      	beq.n	800078e <WS2812_Send+0xb6>
	datasentflag = 0;
 8000796:	4b06      	ldr	r3, [pc, #24]	@ (80007b0 <WS2812_Send+0xd8>)
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
}
 800079c:	bf00      	nop
 800079e:	3718      	adds	r7, #24
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	200002b0 	.word	0x200002b0
 80007a8:	2000038c 	.word	0x2000038c
 80007ac:	2000012c 	.word	0x2000012c
 80007b0:	20000388 	.word	0x20000388

080007b4 <Set_LEDs_color_at_once>:
    uint16_t amp = get_audio_amplitude();
    return (amp > SOUND_THRESHOLD) ? amp : 0;
}

//effect
void Set_LEDs_color_at_once(int start, int end, int step, int r, int g, int b){
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b086      	sub	sp, #24
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	60f8      	str	r0, [r7, #12]
 80007bc:	60b9      	str	r1, [r7, #8]
 80007be:	607a      	str	r2, [r7, #4]
 80007c0:	603b      	str	r3, [r7, #0]
	for (int pos = start; pos < end; pos += step){
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	617b      	str	r3, [r7, #20]
 80007c6:	e009      	b.n	80007dc <Set_LEDs_color_at_once+0x28>
		Set_LED(pos, r, g, b);		// purple
 80007c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007ca:	6a3a      	ldr	r2, [r7, #32]
 80007cc:	6839      	ldr	r1, [r7, #0]
 80007ce:	6978      	ldr	r0, [r7, #20]
 80007d0:	f7ff fed8 	bl	8000584 <Set_LED>
	for (int pos = start; pos < end; pos += step){
 80007d4:	697a      	ldr	r2, [r7, #20]
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4413      	add	r3, r2
 80007da:	617b      	str	r3, [r7, #20]
 80007dc:	697a      	ldr	r2, [r7, #20]
 80007de:	68bb      	ldr	r3, [r7, #8]
 80007e0:	429a      	cmp	r2, r3
 80007e2:	dbf1      	blt.n	80007c8 <Set_LEDs_color_at_once+0x14>
	}
}
 80007e4:	bf00      	nop
 80007e6:	bf00      	nop
 80007e8:	3718      	adds	r7, #24
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}

080007ee <Turn_on_all_at_once>:

void Turn_on_all_at_once(int r, int g, int b){
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b086      	sub	sp, #24
 80007f2:	af02      	add	r7, sp, #8
 80007f4:	60f8      	str	r0, [r7, #12]
 80007f6:	60b9      	str	r1, [r7, #8]
 80007f8:	607a      	str	r2, [r7, #4]
	Set_LEDs_color_at_once(0, MAX_LED, 1, r, g, b);
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	9301      	str	r3, [sp, #4]
 80007fe:	68bb      	ldr	r3, [r7, #8]
 8000800:	9300      	str	r3, [sp, #0]
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	2201      	movs	r2, #1
 8000806:	2136      	movs	r1, #54	@ 0x36
 8000808:	2000      	movs	r0, #0
 800080a:	f7ff ffd3 	bl	80007b4 <Set_LEDs_color_at_once>
	Set_Brightness(NORMAL_BRIGHTNESS);
 800080e:	2014      	movs	r0, #20
 8000810:	f7ff fee6 	bl	80005e0 <Set_Brightness>
	WS2812_Send();
 8000814:	f7ff ff60 	bl	80006d8 <WS2812_Send>
}
 8000818:	bf00      	nop
 800081a:	3710      	adds	r7, #16
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}

08000820 <Turn_off_all_at_once>:

void Turn_off_all_at_once(void){
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af02      	add	r7, sp, #8
	Set_LEDs_color_at_once(0, MAX_LED, 1, 0, 0, 0);
 8000826:	2300      	movs	r3, #0
 8000828:	9301      	str	r3, [sp, #4]
 800082a:	2300      	movs	r3, #0
 800082c:	9300      	str	r3, [sp, #0]
 800082e:	2300      	movs	r3, #0
 8000830:	2201      	movs	r2, #1
 8000832:	2136      	movs	r1, #54	@ 0x36
 8000834:	2000      	movs	r0, #0
 8000836:	f7ff ffbd 	bl	80007b4 <Set_LEDs_color_at_once>
	Set_Brightness(NORMAL_BRIGHTNESS);
 800083a:	2014      	movs	r0, #20
 800083c:	f7ff fed0 	bl	80005e0 <Set_Brightness>
	WS2812_Send();
 8000840:	f7ff ff4a 	bl	80006d8 <WS2812_Send>
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
	...

0800084c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000850:	f000 fc4c 	bl	80010ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000854:	f000 f832 	bl	80008bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000858:	f000 f9b4 	bl	8000bc4 <MX_GPIO_Init>
  MX_DMA_Init();
 800085c:	f000 f98a 	bl	8000b74 <MX_DMA_Init>
  MX_TIM1_Init();
 8000860:	f000 f8e8 	bl	8000a34 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000864:	f000 f894 	bl	8000990 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  ITM_Init();
 8000868:	f7ff fe44 	bl	80004f4 <ITM_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start(&hadc1);
 800086c:	4810      	ldr	r0, [pc, #64]	@ (80008b0 <main+0x64>)
 800086e:	f000 fd17 	bl	80012a0 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 20);
 8000872:	2114      	movs	r1, #20
 8000874:	480e      	ldr	r0, [pc, #56]	@ (80008b0 <main+0x64>)
 8000876:	f000 fde5 	bl	8001444 <HAL_ADC_PollForConversion>
	  amp = HAL_ADC_GetValue(&hadc1);
 800087a:	480d      	ldr	r0, [pc, #52]	@ (80008b0 <main+0x64>)
 800087c:	f000 fe6d 	bl	800155a <HAL_ADC_GetValue>
 8000880:	4603      	mov	r3, r0
 8000882:	b29a      	uxth	r2, r3
 8000884:	4b0b      	ldr	r3, [pc, #44]	@ (80008b4 <main+0x68>)
 8000886:	801a      	strh	r2, [r3, #0]
//	  printf("amp = %d\n", amp);
	  printf("hello\n");
 8000888:	480b      	ldr	r0, [pc, #44]	@ (80008b8 <main+0x6c>)
 800088a:	f003 fde1 	bl	8004450 <puts>

	  if (amp > SOUND_THRESHOLD)
 800088e:	4b09      	ldr	r3, [pc, #36]	@ (80008b4 <main+0x68>)
 8000890:	881b      	ldrh	r3, [r3, #0]
 8000892:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8000896:	d905      	bls.n	80008a4 <main+0x58>
	  Turn_on_all_at_once(180, 0, 180);
 8000898:	22b4      	movs	r2, #180	@ 0xb4
 800089a:	2100      	movs	r1, #0
 800089c:	20b4      	movs	r0, #180	@ 0xb4
 800089e:	f7ff ffa6 	bl	80007ee <Turn_on_all_at_once>
 80008a2:	e001      	b.n	80008a8 <main+0x5c>
	  else
	  Turn_off_all_at_once();
 80008a4:	f7ff ffbc 	bl	8000820 <Turn_off_all_at_once>
	  HAL_Delay(5);
 80008a8:	2005      	movs	r0, #5
 80008aa:	f000 fc91 	bl	80011d0 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 80008ae:	e7dd      	b.n	800086c <main+0x20>
 80008b0:	20000084 	.word	0x20000084
 80008b4:	200001d4 	.word	0x200001d4
 80008b8:	08004b90 	.word	0x08004b90

080008bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b094      	sub	sp, #80	@ 0x50
 80008c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008c2:	f107 0320 	add.w	r3, r7, #32
 80008c6:	2230      	movs	r2, #48	@ 0x30
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f003 fea0 	bl	8004610 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d0:	f107 030c 	add.w	r3, r7, #12
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
 80008dc:	60da      	str	r2, [r3, #12]
 80008de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e0:	2300      	movs	r3, #0
 80008e2:	60bb      	str	r3, [r7, #8]
 80008e4:	4b28      	ldr	r3, [pc, #160]	@ (8000988 <SystemClock_Config+0xcc>)
 80008e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e8:	4a27      	ldr	r2, [pc, #156]	@ (8000988 <SystemClock_Config+0xcc>)
 80008ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80008f0:	4b25      	ldr	r3, [pc, #148]	@ (8000988 <SystemClock_Config+0xcc>)
 80008f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008f8:	60bb      	str	r3, [r7, #8]
 80008fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008fc:	2300      	movs	r3, #0
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	4b22      	ldr	r3, [pc, #136]	@ (800098c <SystemClock_Config+0xd0>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a21      	ldr	r2, [pc, #132]	@ (800098c <SystemClock_Config+0xd0>)
 8000906:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800090a:	6013      	str	r3, [r2, #0]
 800090c:	4b1f      	ldr	r3, [pc, #124]	@ (800098c <SystemClock_Config+0xd0>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000918:	2302      	movs	r3, #2
 800091a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800091c:	2301      	movs	r3, #1
 800091e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000920:	2310      	movs	r3, #16
 8000922:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000924:	2302      	movs	r3, #2
 8000926:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000928:	2300      	movs	r3, #0
 800092a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800092c:	2308      	movs	r3, #8
 800092e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000930:	2348      	movs	r3, #72	@ 0x48
 8000932:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000934:	2302      	movs	r3, #2
 8000936:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000938:	2304      	movs	r3, #4
 800093a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800093c:	f107 0320 	add.w	r3, r7, #32
 8000940:	4618      	mov	r0, r3
 8000942:	f001 fe75 	bl	8002630 <HAL_RCC_OscConfig>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800094c:	f000 f976 	bl	8000c3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000950:	230f      	movs	r3, #15
 8000952:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000954:	2302      	movs	r3, #2
 8000956:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000958:	2300      	movs	r3, #0
 800095a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800095c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000960:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000962:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000966:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000968:	f107 030c 	add.w	r3, r7, #12
 800096c:	2102      	movs	r1, #2
 800096e:	4618      	mov	r0, r3
 8000970:	f002 f8d6 	bl	8002b20 <HAL_RCC_ClockConfig>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800097a:	f000 f95f 	bl	8000c3c <Error_Handler>
  }
}
 800097e:	bf00      	nop
 8000980:	3750      	adds	r7, #80	@ 0x50
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40023800 	.word	0x40023800
 800098c:	40007000 	.word	0x40007000

08000990 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000996:	463b      	mov	r3, r7
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009a2:	4b21      	ldr	r3, [pc, #132]	@ (8000a28 <MX_ADC1_Init+0x98>)
 80009a4:	4a21      	ldr	r2, [pc, #132]	@ (8000a2c <MX_ADC1_Init+0x9c>)
 80009a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80009a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000a28 <MX_ADC1_Init+0x98>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009ae:	4b1e      	ldr	r3, [pc, #120]	@ (8000a28 <MX_ADC1_Init+0x98>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80009b4:	4b1c      	ldr	r3, [pc, #112]	@ (8000a28 <MX_ADC1_Init+0x98>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009ba:	4b1b      	ldr	r3, [pc, #108]	@ (8000a28 <MX_ADC1_Init+0x98>)
 80009bc:	2200      	movs	r2, #0
 80009be:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009c0:	4b19      	ldr	r3, [pc, #100]	@ (8000a28 <MX_ADC1_Init+0x98>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009c8:	4b17      	ldr	r3, [pc, #92]	@ (8000a28 <MX_ADC1_Init+0x98>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009ce:	4b16      	ldr	r3, [pc, #88]	@ (8000a28 <MX_ADC1_Init+0x98>)
 80009d0:	4a17      	ldr	r2, [pc, #92]	@ (8000a30 <MX_ADC1_Init+0xa0>)
 80009d2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009d4:	4b14      	ldr	r3, [pc, #80]	@ (8000a28 <MX_ADC1_Init+0x98>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80009da:	4b13      	ldr	r3, [pc, #76]	@ (8000a28 <MX_ADC1_Init+0x98>)
 80009dc:	2201      	movs	r2, #1
 80009de:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80009e0:	4b11      	ldr	r3, [pc, #68]	@ (8000a28 <MX_ADC1_Init+0x98>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000a28 <MX_ADC1_Init+0x98>)
 80009ea:	2201      	movs	r2, #1
 80009ec:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009ee:	480e      	ldr	r0, [pc, #56]	@ (8000a28 <MX_ADC1_Init+0x98>)
 80009f0:	f000 fc12 	bl	8001218 <HAL_ADC_Init>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80009fa:	f000 f91f 	bl	8000c3c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a02:	2301      	movs	r3, #1
 8000a04:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a06:	2300      	movs	r3, #0
 8000a08:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a0a:	463b      	mov	r3, r7
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4806      	ldr	r0, [pc, #24]	@ (8000a28 <MX_ADC1_Init+0x98>)
 8000a10:	f000 fdb0 	bl	8001574 <HAL_ADC_ConfigChannel>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000a1a:	f000 f90f 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a1e:	bf00      	nop
 8000a20:	3710      	adds	r7, #16
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000084 	.word	0x20000084
 8000a2c:	40012000 	.word	0x40012000
 8000a30:	0f000001 	.word	0x0f000001

08000a34 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b096      	sub	sp, #88	@ 0x58
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a3a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
 8000a44:	609a      	str	r2, [r3, #8]
 8000a46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a48:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]
 8000a60:	611a      	str	r2, [r3, #16]
 8000a62:	615a      	str	r2, [r3, #20]
 8000a64:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a66:	1d3b      	adds	r3, r7, #4
 8000a68:	2220      	movs	r2, #32
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f003 fdcf 	bl	8004610 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a72:	4b3e      	ldr	r3, [pc, #248]	@ (8000b6c <MX_TIM1_Init+0x138>)
 8000a74:	4a3e      	ldr	r2, [pc, #248]	@ (8000b70 <MX_TIM1_Init+0x13c>)
 8000a76:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a78:	4b3c      	ldr	r3, [pc, #240]	@ (8000b6c <MX_TIM1_Init+0x138>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a7e:	4b3b      	ldr	r3, [pc, #236]	@ (8000b6c <MX_TIM1_Init+0x138>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90 - 1;
 8000a84:	4b39      	ldr	r3, [pc, #228]	@ (8000b6c <MX_TIM1_Init+0x138>)
 8000a86:	2259      	movs	r2, #89	@ 0x59
 8000a88:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a8a:	4b38      	ldr	r3, [pc, #224]	@ (8000b6c <MX_TIM1_Init+0x138>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a90:	4b36      	ldr	r3, [pc, #216]	@ (8000b6c <MX_TIM1_Init+0x138>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a96:	4b35      	ldr	r3, [pc, #212]	@ (8000b6c <MX_TIM1_Init+0x138>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a9c:	4833      	ldr	r0, [pc, #204]	@ (8000b6c <MX_TIM1_Init+0x138>)
 8000a9e:	f002 fa2b 	bl	8002ef8 <HAL_TIM_Base_Init>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000aa8:	f000 f8c8 	bl	8000c3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ab0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ab2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	482c      	ldr	r0, [pc, #176]	@ (8000b6c <MX_TIM1_Init+0x138>)
 8000aba:	f002 fe21 	bl	8003700 <HAL_TIM_ConfigClockSource>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000ac4:	f000 f8ba 	bl	8000c3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ac8:	4828      	ldr	r0, [pc, #160]	@ (8000b6c <MX_TIM1_Init+0x138>)
 8000aca:	f002 fa64 	bl	8002f96 <HAL_TIM_PWM_Init>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000ad4:	f000 f8b2 	bl	8000c3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000adc:	2300      	movs	r3, #0
 8000ade:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ae0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4821      	ldr	r0, [pc, #132]	@ (8000b6c <MX_TIM1_Init+0x138>)
 8000ae8:	f003 facc 	bl	8004084 <HAL_TIMEx_MasterConfigSynchronization>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000af2:	f000 f8a3 	bl	8000c3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000af6:	2360      	movs	r3, #96	@ 0x60
 8000af8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000afe:	2300      	movs	r3, #0
 8000b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b02:	2300      	movs	r3, #0
 8000b04:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b06:	2300      	movs	r3, #0
 8000b08:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b16:	2200      	movs	r2, #0
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4814      	ldr	r0, [pc, #80]	@ (8000b6c <MX_TIM1_Init+0x138>)
 8000b1c:	f002 fd2e 	bl	800357c <HAL_TIM_PWM_ConfigChannel>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000b26:	f000 f889 	bl	8000c3c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b32:	2300      	movs	r3, #0
 8000b34:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b36:	2300      	movs	r3, #0
 8000b38:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b3e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b42:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b44:	2300      	movs	r3, #0
 8000b46:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b48:	1d3b      	adds	r3, r7, #4
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4807      	ldr	r0, [pc, #28]	@ (8000b6c <MX_TIM1_Init+0x138>)
 8000b4e:	f003 fb15 	bl	800417c <HAL_TIMEx_ConfigBreakDeadTime>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000b58:	f000 f870 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b5c:	4803      	ldr	r0, [pc, #12]	@ (8000b6c <MX_TIM1_Init+0x138>)
 8000b5e:	f000 f967 	bl	8000e30 <HAL_TIM_MspPostInit>

}
 8000b62:	bf00      	nop
 8000b64:	3758      	adds	r7, #88	@ 0x58
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	2000012c 	.word	0x2000012c
 8000b70:	40010000 	.word	0x40010000

08000b74 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	607b      	str	r3, [r7, #4]
 8000b7e:	4b10      	ldr	r3, [pc, #64]	@ (8000bc0 <MX_DMA_Init+0x4c>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b82:	4a0f      	ldr	r2, [pc, #60]	@ (8000bc0 <MX_DMA_Init+0x4c>)
 8000b84:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8000bc0 <MX_DMA_Init+0x4c>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b92:	607b      	str	r3, [r7, #4]
 8000b94:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000b96:	2200      	movs	r2, #0
 8000b98:	2100      	movs	r1, #0
 8000b9a:	2038      	movs	r0, #56	@ 0x38
 8000b9c:	f000 ffe3 	bl	8001b66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000ba0:	2038      	movs	r0, #56	@ 0x38
 8000ba2:	f000 fffc 	bl	8001b9e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2105      	movs	r1, #5
 8000baa:	2039      	movs	r0, #57	@ 0x39
 8000bac:	f000 ffdb 	bl	8001b66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000bb0:	2039      	movs	r0, #57	@ 0x39
 8000bb2:	f000 fff4 	bl	8001b9e <HAL_NVIC_EnableIRQ>

}
 8000bb6:	bf00      	nop
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40023800 	.word	0x40023800

08000bc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b088      	sub	sp, #32
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60bb      	str	r3, [r7, #8]
 8000bce:	4b19      	ldr	r3, [pc, #100]	@ (8000c34 <MX_GPIO_Init+0x70>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd2:	4a18      	ldr	r2, [pc, #96]	@ (8000c34 <MX_GPIO_Init+0x70>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bda:	4b16      	ldr	r3, [pc, #88]	@ (8000c34 <MX_GPIO_Init+0x70>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	60bb      	str	r3, [r7, #8]
 8000be4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	607b      	str	r3, [r7, #4]
 8000bea:	4b12      	ldr	r3, [pc, #72]	@ (8000c34 <MX_GPIO_Init+0x70>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bee:	4a11      	ldr	r2, [pc, #68]	@ (8000c34 <MX_GPIO_Init+0x70>)
 8000bf0:	f043 0310 	orr.w	r3, r3, #16
 8000bf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bf6:	4b0f      	ldr	r3, [pc, #60]	@ (8000c34 <MX_GPIO_Init+0x70>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfa:	f003 0310 	and.w	r3, r3, #16
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c02:	f107 030c 	add.w	r3, r7, #12
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	605a      	str	r2, [r3, #4]
 8000c0c:	609a      	str	r2, [r3, #8]
 8000c0e:	60da      	str	r2, [r3, #12]
 8000c10:	611a      	str	r2, [r3, #16]
     GPIO_InitStruct.Pin  = GPIO_PIN_0;
 8000c12:	2301      	movs	r3, #1
 8000c14:	60fb      	str	r3, [r7, #12]
     GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c16:	2303      	movs	r3, #3
 8000c18:	613b      	str	r3, [r7, #16]
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	617b      	str	r3, [r7, #20]
     HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1e:	f107 030c 	add.w	r3, r7, #12
 8000c22:	4619      	mov	r1, r3
 8000c24:	4804      	ldr	r0, [pc, #16]	@ (8000c38 <MX_GPIO_Init+0x74>)
 8000c26:	f001 fb67 	bl	80022f8 <HAL_GPIO_Init>
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c2a:	bf00      	nop
 8000c2c:	3720      	adds	r7, #32
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40023800 	.word	0x40023800
 8000c38:	40020000 	.word	0x40020000

08000c3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c40:	b672      	cpsid	i
}
 8000c42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c44:	bf00      	nop
 8000c46:	e7fd      	b.n	8000c44 <Error_Handler+0x8>

08000c48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	607b      	str	r3, [r7, #4]
 8000c52:	4b10      	ldr	r3, [pc, #64]	@ (8000c94 <HAL_MspInit+0x4c>)
 8000c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c56:	4a0f      	ldr	r2, [pc, #60]	@ (8000c94 <HAL_MspInit+0x4c>)
 8000c58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8000c94 <HAL_MspInit+0x4c>)
 8000c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c66:	607b      	str	r3, [r7, #4]
 8000c68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	603b      	str	r3, [r7, #0]
 8000c6e:	4b09      	ldr	r3, [pc, #36]	@ (8000c94 <HAL_MspInit+0x4c>)
 8000c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c72:	4a08      	ldr	r2, [pc, #32]	@ (8000c94 <HAL_MspInit+0x4c>)
 8000c74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c78:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c7a:	4b06      	ldr	r3, [pc, #24]	@ (8000c94 <HAL_MspInit+0x4c>)
 8000c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c82:	603b      	str	r3, [r7, #0]
 8000c84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c86:	bf00      	nop
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	40023800 	.word	0x40023800

08000c98 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08a      	sub	sp, #40	@ 0x28
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
 8000cae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a2f      	ldr	r2, [pc, #188]	@ (8000d74 <HAL_ADC_MspInit+0xdc>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d158      	bne.n	8000d6c <HAL_ADC_MspInit+0xd4>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	613b      	str	r3, [r7, #16]
 8000cbe:	4b2e      	ldr	r3, [pc, #184]	@ (8000d78 <HAL_ADC_MspInit+0xe0>)
 8000cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cc2:	4a2d      	ldr	r2, [pc, #180]	@ (8000d78 <HAL_ADC_MspInit+0xe0>)
 8000cc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cca:	4b2b      	ldr	r3, [pc, #172]	@ (8000d78 <HAL_ADC_MspInit+0xe0>)
 8000ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000cd2:	613b      	str	r3, [r7, #16]
 8000cd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	4b27      	ldr	r3, [pc, #156]	@ (8000d78 <HAL_ADC_MspInit+0xe0>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cde:	4a26      	ldr	r2, [pc, #152]	@ (8000d78 <HAL_ADC_MspInit+0xe0>)
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ce6:	4b24      	ldr	r3, [pc, #144]	@ (8000d78 <HAL_ADC_MspInit+0xe0>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfe:	f107 0314 	add.w	r3, r7, #20
 8000d02:	4619      	mov	r1, r3
 8000d04:	481d      	ldr	r0, [pc, #116]	@ (8000d7c <HAL_ADC_MspInit+0xe4>)
 8000d06:	f001 faf7 	bl	80022f8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000d0a:	4b1d      	ldr	r3, [pc, #116]	@ (8000d80 <HAL_ADC_MspInit+0xe8>)
 8000d0c:	4a1d      	ldr	r2, [pc, #116]	@ (8000d84 <HAL_ADC_MspInit+0xec>)
 8000d0e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000d10:	4b1b      	ldr	r3, [pc, #108]	@ (8000d80 <HAL_ADC_MspInit+0xe8>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d16:	4b1a      	ldr	r3, [pc, #104]	@ (8000d80 <HAL_ADC_MspInit+0xe8>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d1c:	4b18      	ldr	r3, [pc, #96]	@ (8000d80 <HAL_ADC_MspInit+0xe8>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d22:	4b17      	ldr	r3, [pc, #92]	@ (8000d80 <HAL_ADC_MspInit+0xe8>)
 8000d24:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d28:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d2a:	4b15      	ldr	r3, [pc, #84]	@ (8000d80 <HAL_ADC_MspInit+0xe8>)
 8000d2c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000d30:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d32:	4b13      	ldr	r3, [pc, #76]	@ (8000d80 <HAL_ADC_MspInit+0xe8>)
 8000d34:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d38:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d3a:	4b11      	ldr	r3, [pc, #68]	@ (8000d80 <HAL_ADC_MspInit+0xe8>)
 8000d3c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d40:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000d42:	4b0f      	ldr	r3, [pc, #60]	@ (8000d80 <HAL_ADC_MspInit+0xe8>)
 8000d44:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000d48:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8000d80 <HAL_ADC_MspInit+0xe8>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d50:	480b      	ldr	r0, [pc, #44]	@ (8000d80 <HAL_ADC_MspInit+0xe8>)
 8000d52:	f000 ff3f 	bl	8001bd4 <HAL_DMA_Init>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8000d5c:	f7ff ff6e 	bl	8000c3c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4a07      	ldr	r2, [pc, #28]	@ (8000d80 <HAL_ADC_MspInit+0xe8>)
 8000d64:	639a      	str	r2, [r3, #56]	@ 0x38
 8000d66:	4a06      	ldr	r2, [pc, #24]	@ (8000d80 <HAL_ADC_MspInit+0xe8>)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000d6c:	bf00      	nop
 8000d6e:	3728      	adds	r7, #40	@ 0x28
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40012000 	.word	0x40012000
 8000d78:	40023800 	.word	0x40023800
 8000d7c:	40020000 	.word	0x40020000
 8000d80:	200000cc 	.word	0x200000cc
 8000d84:	40026410 	.word	0x40026410

08000d88 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a22      	ldr	r2, [pc, #136]	@ (8000e20 <HAL_TIM_Base_MspInit+0x98>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d13e      	bne.n	8000e18 <HAL_TIM_Base_MspInit+0x90>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	4b21      	ldr	r3, [pc, #132]	@ (8000e24 <HAL_TIM_Base_MspInit+0x9c>)
 8000da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000da2:	4a20      	ldr	r2, [pc, #128]	@ (8000e24 <HAL_TIM_Base_MspInit+0x9c>)
 8000da4:	f043 0301 	orr.w	r3, r3, #1
 8000da8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000daa:	4b1e      	ldr	r3, [pc, #120]	@ (8000e24 <HAL_TIM_Base_MspInit+0x9c>)
 8000dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dae:	f003 0301 	and.w	r3, r3, #1
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8000db6:	4b1c      	ldr	r3, [pc, #112]	@ (8000e28 <HAL_TIM_Base_MspInit+0xa0>)
 8000db8:	4a1c      	ldr	r2, [pc, #112]	@ (8000e2c <HAL_TIM_Base_MspInit+0xa4>)
 8000dba:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8000dbc:	4b1a      	ldr	r3, [pc, #104]	@ (8000e28 <HAL_TIM_Base_MspInit+0xa0>)
 8000dbe:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8000dc2:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000dc4:	4b18      	ldr	r3, [pc, #96]	@ (8000e28 <HAL_TIM_Base_MspInit+0xa0>)
 8000dc6:	2240      	movs	r2, #64	@ 0x40
 8000dc8:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dca:	4b17      	ldr	r3, [pc, #92]	@ (8000e28 <HAL_TIM_Base_MspInit+0xa0>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000dd0:	4b15      	ldr	r3, [pc, #84]	@ (8000e28 <HAL_TIM_Base_MspInit+0xa0>)
 8000dd2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000dd6:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000dd8:	4b13      	ldr	r3, [pc, #76]	@ (8000e28 <HAL_TIM_Base_MspInit+0xa0>)
 8000dda:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000dde:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000de0:	4b11      	ldr	r3, [pc, #68]	@ (8000e28 <HAL_TIM_Base_MspInit+0xa0>)
 8000de2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000de6:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8000de8:	4b0f      	ldr	r3, [pc, #60]	@ (8000e28 <HAL_TIM_Base_MspInit+0xa0>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8000dee:	4b0e      	ldr	r3, [pc, #56]	@ (8000e28 <HAL_TIM_Base_MspInit+0xa0>)
 8000df0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000df4:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000df6:	4b0c      	ldr	r3, [pc, #48]	@ (8000e28 <HAL_TIM_Base_MspInit+0xa0>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000dfc:	480a      	ldr	r0, [pc, #40]	@ (8000e28 <HAL_TIM_Base_MspInit+0xa0>)
 8000dfe:	f000 fee9 	bl	8001bd4 <HAL_DMA_Init>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8000e08:	f7ff ff18 	bl	8000c3c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	4a06      	ldr	r2, [pc, #24]	@ (8000e28 <HAL_TIM_Base_MspInit+0xa0>)
 8000e10:	625a      	str	r2, [r3, #36]	@ 0x24
 8000e12:	4a05      	ldr	r2, [pc, #20]	@ (8000e28 <HAL_TIM_Base_MspInit+0xa0>)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000e18:	bf00      	nop
 8000e1a:	3710      	adds	r7, #16
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40010000 	.word	0x40010000
 8000e24:	40023800 	.word	0x40023800
 8000e28:	20000174 	.word	0x20000174
 8000e2c:	40026428 	.word	0x40026428

08000e30 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b088      	sub	sp, #32
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e38:	f107 030c 	add.w	r3, r7, #12
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a12      	ldr	r2, [pc, #72]	@ (8000e98 <HAL_TIM_MspPostInit+0x68>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d11e      	bne.n	8000e90 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	60bb      	str	r3, [r7, #8]
 8000e56:	4b11      	ldr	r3, [pc, #68]	@ (8000e9c <HAL_TIM_MspPostInit+0x6c>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5a:	4a10      	ldr	r2, [pc, #64]	@ (8000e9c <HAL_TIM_MspPostInit+0x6c>)
 8000e5c:	f043 0310 	orr.w	r3, r3, #16
 8000e60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e62:	4b0e      	ldr	r3, [pc, #56]	@ (8000e9c <HAL_TIM_MspPostInit+0x6c>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e66:	f003 0310 	and.w	r3, r3, #16
 8000e6a:	60bb      	str	r3, [r7, #8]
 8000e6c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = RGB_LED_Pin;
 8000e6e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e72:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e74:	2302      	movs	r3, #2
 8000e76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e80:	2301      	movs	r3, #1
 8000e82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(RGB_LED_GPIO_Port, &GPIO_InitStruct);
 8000e84:	f107 030c 	add.w	r3, r7, #12
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4805      	ldr	r0, [pc, #20]	@ (8000ea0 <HAL_TIM_MspPostInit+0x70>)
 8000e8c:	f001 fa34 	bl	80022f8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000e90:	bf00      	nop
 8000e92:	3720      	adds	r7, #32
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40010000 	.word	0x40010000
 8000e9c:	40023800 	.word	0x40023800
 8000ea0:	40021000 	.word	0x40021000

08000ea4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ea8:	bf00      	nop
 8000eaa:	e7fd      	b.n	8000ea8 <NMI_Handler+0x4>

08000eac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eb0:	bf00      	nop
 8000eb2:	e7fd      	b.n	8000eb0 <HardFault_Handler+0x4>

08000eb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb8:	bf00      	nop
 8000eba:	e7fd      	b.n	8000eb8 <MemManage_Handler+0x4>

08000ebc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ec0:	bf00      	nop
 8000ec2:	e7fd      	b.n	8000ec0 <BusFault_Handler+0x4>

08000ec4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec8:	bf00      	nop
 8000eca:	e7fd      	b.n	8000ec8 <UsageFault_Handler+0x4>

08000ecc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr

08000eda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000efa:	f000 f949 	bl	8001190 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
	...

08000f04 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000f08:	4802      	ldr	r0, [pc, #8]	@ (8000f14 <DMA2_Stream0_IRQHandler+0x10>)
 8000f0a:	f000 ff8b 	bl	8001e24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	200000cc 	.word	0x200000cc

08000f18 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000f1c:	4802      	ldr	r0, [pc, #8]	@ (8000f28 <DMA2_Stream1_IRQHandler+0x10>)
 8000f1e:	f000 ff81 	bl	8001e24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000174 	.word	0x20000174

08000f2c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f38:	2300      	movs	r3, #0
 8000f3a:	617b      	str	r3, [r7, #20]
 8000f3c:	e00a      	b.n	8000f54 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f3e:	f3af 8000 	nop.w
 8000f42:	4601      	mov	r1, r0
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	1c5a      	adds	r2, r3, #1
 8000f48:	60ba      	str	r2, [r7, #8]
 8000f4a:	b2ca      	uxtb	r2, r1
 8000f4c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	3301      	adds	r3, #1
 8000f52:	617b      	str	r3, [r7, #20]
 8000f54:	697a      	ldr	r2, [r7, #20]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	dbf0      	blt.n	8000f3e <_read+0x12>
  }

  return len;
 8000f5c:	687b      	ldr	r3, [r7, #4]
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3718      	adds	r7, #24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b086      	sub	sp, #24
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	60f8      	str	r0, [r7, #12]
 8000f6e:	60b9      	str	r1, [r7, #8]
 8000f70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f72:	2300      	movs	r3, #0
 8000f74:	617b      	str	r3, [r7, #20]
 8000f76:	e009      	b.n	8000f8c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	1c5a      	adds	r2, r3, #1
 8000f7c:	60ba      	str	r2, [r7, #8]
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	617b      	str	r3, [r7, #20]
 8000f8c:	697a      	ldr	r2, [r7, #20]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	dbf1      	blt.n	8000f78 <_write+0x12>
  }
  return len;
 8000f94:	687b      	ldr	r3, [r7, #4]
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3718      	adds	r7, #24
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <_close>:

int _close(int file)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	b083      	sub	sp, #12
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fa6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	b083      	sub	sp, #12
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
 8000fbe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000fc6:	605a      	str	r2, [r3, #4]
  return 0;
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr

08000fd6 <_isatty>:

int _isatty(int file)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	b083      	sub	sp, #12
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fde:	2301      	movs	r3, #1
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3714      	adds	r7, #20
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
	...

08001008 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001010:	4a14      	ldr	r2, [pc, #80]	@ (8001064 <_sbrk+0x5c>)
 8001012:	4b15      	ldr	r3, [pc, #84]	@ (8001068 <_sbrk+0x60>)
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800101c:	4b13      	ldr	r3, [pc, #76]	@ (800106c <_sbrk+0x64>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d102      	bne.n	800102a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001024:	4b11      	ldr	r3, [pc, #68]	@ (800106c <_sbrk+0x64>)
 8001026:	4a12      	ldr	r2, [pc, #72]	@ (8001070 <_sbrk+0x68>)
 8001028:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800102a:	4b10      	ldr	r3, [pc, #64]	@ (800106c <_sbrk+0x64>)
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4413      	add	r3, r2
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	429a      	cmp	r2, r3
 8001036:	d207      	bcs.n	8001048 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001038:	f003 fb38 	bl	80046ac <__errno>
 800103c:	4603      	mov	r3, r0
 800103e:	220c      	movs	r2, #12
 8001040:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001042:	f04f 33ff 	mov.w	r3, #4294967295
 8001046:	e009      	b.n	800105c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001048:	4b08      	ldr	r3, [pc, #32]	@ (800106c <_sbrk+0x64>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800104e:	4b07      	ldr	r3, [pc, #28]	@ (800106c <_sbrk+0x64>)
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4413      	add	r3, r2
 8001056:	4a05      	ldr	r2, [pc, #20]	@ (800106c <_sbrk+0x64>)
 8001058:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800105a:	68fb      	ldr	r3, [r7, #12]
}
 800105c:	4618      	mov	r0, r3
 800105e:	3718      	adds	r7, #24
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20020000 	.word	0x20020000
 8001068:	00000400 	.word	0x00000400
 800106c:	20000e10 	.word	0x20000e10
 8001070:	20000f68 	.word	0x20000f68

08001074 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001078:	4b06      	ldr	r3, [pc, #24]	@ (8001094 <SystemInit+0x20>)
 800107a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800107e:	4a05      	ldr	r2, [pc, #20]	@ (8001094 <SystemInit+0x20>)
 8001080:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001084:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001098:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010d0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800109c:	f7ff ffea 	bl	8001074 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010a0:	480c      	ldr	r0, [pc, #48]	@ (80010d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010a2:	490d      	ldr	r1, [pc, #52]	@ (80010d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010a4:	4a0d      	ldr	r2, [pc, #52]	@ (80010dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010a8:	e002      	b.n	80010b0 <LoopCopyDataInit>

080010aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ae:	3304      	adds	r3, #4

080010b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010b4:	d3f9      	bcc.n	80010aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010b6:	4a0a      	ldr	r2, [pc, #40]	@ (80010e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010b8:	4c0a      	ldr	r4, [pc, #40]	@ (80010e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010bc:	e001      	b.n	80010c2 <LoopFillZerobss>

080010be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010c0:	3204      	adds	r2, #4

080010c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010c4:	d3fb      	bcc.n	80010be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010c6:	f003 faf7 	bl	80046b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ca:	f7ff fbbf 	bl	800084c <main>
  bx  lr    
 80010ce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010d8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80010dc:	08004bc0 	.word	0x08004bc0
  ldr r2, =_sbss
 80010e0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80010e4:	20000f64 	.word	0x20000f64

080010e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010e8:	e7fe      	b.n	80010e8 <ADC_IRQHandler>
	...

080010ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010f0:	4b0e      	ldr	r3, [pc, #56]	@ (800112c <HAL_Init+0x40>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a0d      	ldr	r2, [pc, #52]	@ (800112c <HAL_Init+0x40>)
 80010f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010fc:	4b0b      	ldr	r3, [pc, #44]	@ (800112c <HAL_Init+0x40>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a0a      	ldr	r2, [pc, #40]	@ (800112c <HAL_Init+0x40>)
 8001102:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001106:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001108:	4b08      	ldr	r3, [pc, #32]	@ (800112c <HAL_Init+0x40>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a07      	ldr	r2, [pc, #28]	@ (800112c <HAL_Init+0x40>)
 800110e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001112:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001114:	2003      	movs	r0, #3
 8001116:	f000 fd1b 	bl	8001b50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800111a:	200f      	movs	r0, #15
 800111c:	f000 f808 	bl	8001130 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001120:	f7ff fd92 	bl	8000c48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001124:	2300      	movs	r3, #0
}
 8001126:	4618      	mov	r0, r3
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40023c00 	.word	0x40023c00

08001130 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001138:	4b12      	ldr	r3, [pc, #72]	@ (8001184 <HAL_InitTick+0x54>)
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	4b12      	ldr	r3, [pc, #72]	@ (8001188 <HAL_InitTick+0x58>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	4619      	mov	r1, r3
 8001142:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001146:	fbb3 f3f1 	udiv	r3, r3, r1
 800114a:	fbb2 f3f3 	udiv	r3, r2, r3
 800114e:	4618      	mov	r0, r3
 8001150:	f000 fd33 	bl	8001bba <HAL_SYSTICK_Config>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e00e      	b.n	800117c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2b0f      	cmp	r3, #15
 8001162:	d80a      	bhi.n	800117a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001164:	2200      	movs	r2, #0
 8001166:	6879      	ldr	r1, [r7, #4]
 8001168:	f04f 30ff 	mov.w	r0, #4294967295
 800116c:	f000 fcfb 	bl	8001b66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001170:	4a06      	ldr	r2, [pc, #24]	@ (800118c <HAL_InitTick+0x5c>)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001176:	2300      	movs	r3, #0
 8001178:	e000      	b.n	800117c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
}
 800117c:	4618      	mov	r0, r3
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20000000 	.word	0x20000000
 8001188:	20000008 	.word	0x20000008
 800118c:	20000004 	.word	0x20000004

08001190 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001194:	4b06      	ldr	r3, [pc, #24]	@ (80011b0 <HAL_IncTick+0x20>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	461a      	mov	r2, r3
 800119a:	4b06      	ldr	r3, [pc, #24]	@ (80011b4 <HAL_IncTick+0x24>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4413      	add	r3, r2
 80011a0:	4a04      	ldr	r2, [pc, #16]	@ (80011b4 <HAL_IncTick+0x24>)
 80011a2:	6013      	str	r3, [r2, #0]
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	20000008 	.word	0x20000008
 80011b4:	20000e14 	.word	0x20000e14

080011b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  return uwTick;
 80011bc:	4b03      	ldr	r3, [pc, #12]	@ (80011cc <HAL_GetTick+0x14>)
 80011be:	681b      	ldr	r3, [r3, #0]
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	20000e14 	.word	0x20000e14

080011d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011d8:	f7ff ffee 	bl	80011b8 <HAL_GetTick>
 80011dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011e8:	d005      	beq.n	80011f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001214 <HAL_Delay+0x44>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	461a      	mov	r2, r3
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	4413      	add	r3, r2
 80011f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011f6:	bf00      	nop
 80011f8:	f7ff ffde 	bl	80011b8 <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	68fa      	ldr	r2, [r7, #12]
 8001204:	429a      	cmp	r2, r3
 8001206:	d8f7      	bhi.n	80011f8 <HAL_Delay+0x28>
  {
  }
}
 8001208:	bf00      	nop
 800120a:	bf00      	nop
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000008 	.word	0x20000008

08001218 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001220:	2300      	movs	r3, #0
 8001222:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d101      	bne.n	800122e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e033      	b.n	8001296 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001232:	2b00      	cmp	r3, #0
 8001234:	d109      	bne.n	800124a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f7ff fd2e 	bl	8000c98 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2200      	movs	r2, #0
 8001240:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2200      	movs	r2, #0
 8001246:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800124e:	f003 0310 	and.w	r3, r3, #16
 8001252:	2b00      	cmp	r3, #0
 8001254:	d118      	bne.n	8001288 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800125a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800125e:	f023 0302 	bic.w	r3, r3, #2
 8001262:	f043 0202 	orr.w	r2, r3, #2
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f000 faa4 	bl	80017b8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2200      	movs	r2, #0
 8001274:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800127a:	f023 0303 	bic.w	r3, r3, #3
 800127e:	f043 0201 	orr.w	r2, r3, #1
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	641a      	str	r2, [r3, #64]	@ 0x40
 8001286:	e001      	b.n	800128c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001288:	2301      	movs	r3, #1
 800128a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2200      	movs	r2, #0
 8001290:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001294:	7bfb      	ldrb	r3, [r7, #15]
}
 8001296:	4618      	mov	r0, r3
 8001298:	3710      	adds	r7, #16
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
	...

080012a0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80012a8:	2300      	movs	r3, #0
 80012aa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d101      	bne.n	80012ba <HAL_ADC_Start+0x1a>
 80012b6:	2302      	movs	r3, #2
 80012b8:	e0b2      	b.n	8001420 <HAL_ADC_Start+0x180>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2201      	movs	r2, #1
 80012be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	f003 0301 	and.w	r3, r3, #1
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d018      	beq.n	8001302 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	689a      	ldr	r2, [r3, #8]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f042 0201 	orr.w	r2, r2, #1
 80012de:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80012e0:	4b52      	ldr	r3, [pc, #328]	@ (800142c <HAL_ADC_Start+0x18c>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a52      	ldr	r2, [pc, #328]	@ (8001430 <HAL_ADC_Start+0x190>)
 80012e6:	fba2 2303 	umull	r2, r3, r2, r3
 80012ea:	0c9a      	lsrs	r2, r3, #18
 80012ec:	4613      	mov	r3, r2
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	4413      	add	r3, r2
 80012f2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80012f4:	e002      	b.n	80012fc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	3b01      	subs	r3, #1
 80012fa:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d1f9      	bne.n	80012f6 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	f003 0301 	and.w	r3, r3, #1
 800130c:	2b01      	cmp	r3, #1
 800130e:	d17a      	bne.n	8001406 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001314:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001318:	f023 0301 	bic.w	r3, r3, #1
 800131c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800132e:	2b00      	cmp	r3, #0
 8001330:	d007      	beq.n	8001342 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001336:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800133a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001346:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800134a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800134e:	d106      	bne.n	800135e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001354:	f023 0206 	bic.w	r2, r3, #6
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	645a      	str	r2, [r3, #68]	@ 0x44
 800135c:	e002      	b.n	8001364 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2200      	movs	r2, #0
 8001368:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800136c:	4b31      	ldr	r3, [pc, #196]	@ (8001434 <HAL_ADC_Start+0x194>)
 800136e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001378:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f003 031f 	and.w	r3, r3, #31
 8001382:	2b00      	cmp	r3, #0
 8001384:	d12a      	bne.n	80013dc <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a2b      	ldr	r2, [pc, #172]	@ (8001438 <HAL_ADC_Start+0x198>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d015      	beq.n	80013bc <HAL_ADC_Start+0x11c>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a29      	ldr	r2, [pc, #164]	@ (800143c <HAL_ADC_Start+0x19c>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d105      	bne.n	80013a6 <HAL_ADC_Start+0x106>
 800139a:	4b26      	ldr	r3, [pc, #152]	@ (8001434 <HAL_ADC_Start+0x194>)
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f003 031f 	and.w	r3, r3, #31
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d00a      	beq.n	80013bc <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a25      	ldr	r2, [pc, #148]	@ (8001440 <HAL_ADC_Start+0x1a0>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d136      	bne.n	800141e <HAL_ADC_Start+0x17e>
 80013b0:	4b20      	ldr	r3, [pc, #128]	@ (8001434 <HAL_ADC_Start+0x194>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f003 0310 	and.w	r3, r3, #16
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d130      	bne.n	800141e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d129      	bne.n	800141e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	689a      	ldr	r2, [r3, #8]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80013d8:	609a      	str	r2, [r3, #8]
 80013da:	e020      	b.n	800141e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a15      	ldr	r2, [pc, #84]	@ (8001438 <HAL_ADC_Start+0x198>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d11b      	bne.n	800141e <HAL_ADC_Start+0x17e>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d114      	bne.n	800141e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	689a      	ldr	r2, [r3, #8]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	e00b      	b.n	800141e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800140a:	f043 0210 	orr.w	r2, r3, #16
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001416:	f043 0201 	orr.w	r2, r3, #1
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800141e:	2300      	movs	r3, #0
}
 8001420:	4618      	mov	r0, r3
 8001422:	3714      	adds	r7, #20
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	20000000 	.word	0x20000000
 8001430:	431bde83 	.word	0x431bde83
 8001434:	40012300 	.word	0x40012300
 8001438:	40012000 	.word	0x40012000
 800143c:	40012100 	.word	0x40012100
 8001440:	40012200 	.word	0x40012200

08001444 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800144e:	2300      	movs	r3, #0
 8001450:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800145c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001460:	d113      	bne.n	800148a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800146c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001470:	d10b      	bne.n	800148a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001476:	f043 0220 	orr.w	r2, r3, #32
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2200      	movs	r2, #0
 8001482:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e063      	b.n	8001552 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800148a:	f7ff fe95 	bl	80011b8 <HAL_GetTick>
 800148e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001490:	e021      	b.n	80014d6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001498:	d01d      	beq.n	80014d6 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d007      	beq.n	80014b0 <HAL_ADC_PollForConversion+0x6c>
 80014a0:	f7ff fe8a 	bl	80011b8 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	683a      	ldr	r2, [r7, #0]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d212      	bcs.n	80014d6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d00b      	beq.n	80014d6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c2:	f043 0204 	orr.w	r2, r3, #4
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2200      	movs	r2, #0
 80014ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e03d      	b.n	8001552 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0302 	and.w	r3, r3, #2
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d1d6      	bne.n	8001492 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f06f 0212 	mvn.w	r2, #18
 80014ec:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d123      	bne.n	8001550 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800150c:	2b00      	cmp	r3, #0
 800150e:	d11f      	bne.n	8001550 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001516:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800151a:	2b00      	cmp	r3, #0
 800151c:	d006      	beq.n	800152c <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001528:	2b00      	cmp	r3, #0
 800152a:	d111      	bne.n	8001550 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001530:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800153c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d105      	bne.n	8001550 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001548:	f043 0201 	orr.w	r2, r3, #1
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800155a:	b480      	push	{r7}
 800155c:	b083      	sub	sp, #12
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001568:	4618      	mov	r0, r3
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800157e:	2300      	movs	r3, #0
 8001580:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001588:	2b01      	cmp	r3, #1
 800158a:	d101      	bne.n	8001590 <HAL_ADC_ConfigChannel+0x1c>
 800158c:	2302      	movs	r3, #2
 800158e:	e105      	b.n	800179c <HAL_ADC_ConfigChannel+0x228>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2201      	movs	r2, #1
 8001594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2b09      	cmp	r3, #9
 800159e:	d925      	bls.n	80015ec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	68d9      	ldr	r1, [r3, #12]
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	461a      	mov	r2, r3
 80015ae:	4613      	mov	r3, r2
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	4413      	add	r3, r2
 80015b4:	3b1e      	subs	r3, #30
 80015b6:	2207      	movs	r2, #7
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	43da      	mvns	r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	400a      	ands	r2, r1
 80015c4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	68d9      	ldr	r1, [r3, #12]
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	689a      	ldr	r2, [r3, #8]
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	4618      	mov	r0, r3
 80015d8:	4603      	mov	r3, r0
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	4403      	add	r3, r0
 80015de:	3b1e      	subs	r3, #30
 80015e0:	409a      	lsls	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	430a      	orrs	r2, r1
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	e022      	b.n	8001632 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	6919      	ldr	r1, [r3, #16]
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	461a      	mov	r2, r3
 80015fa:	4613      	mov	r3, r2
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	4413      	add	r3, r2
 8001600:	2207      	movs	r2, #7
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	43da      	mvns	r2, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	400a      	ands	r2, r1
 800160e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	6919      	ldr	r1, [r3, #16]
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	689a      	ldr	r2, [r3, #8]
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	b29b      	uxth	r3, r3
 8001620:	4618      	mov	r0, r3
 8001622:	4603      	mov	r3, r0
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	4403      	add	r3, r0
 8001628:	409a      	lsls	r2, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	430a      	orrs	r2, r1
 8001630:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	2b06      	cmp	r3, #6
 8001638:	d824      	bhi.n	8001684 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685a      	ldr	r2, [r3, #4]
 8001644:	4613      	mov	r3, r2
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	4413      	add	r3, r2
 800164a:	3b05      	subs	r3, #5
 800164c:	221f      	movs	r2, #31
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	43da      	mvns	r2, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	400a      	ands	r2, r1
 800165a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	b29b      	uxth	r3, r3
 8001668:	4618      	mov	r0, r3
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685a      	ldr	r2, [r3, #4]
 800166e:	4613      	mov	r3, r2
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	4413      	add	r3, r2
 8001674:	3b05      	subs	r3, #5
 8001676:	fa00 f203 	lsl.w	r2, r0, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	430a      	orrs	r2, r1
 8001680:	635a      	str	r2, [r3, #52]	@ 0x34
 8001682:	e04c      	b.n	800171e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	2b0c      	cmp	r3, #12
 800168a:	d824      	bhi.n	80016d6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685a      	ldr	r2, [r3, #4]
 8001696:	4613      	mov	r3, r2
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	4413      	add	r3, r2
 800169c:	3b23      	subs	r3, #35	@ 0x23
 800169e:	221f      	movs	r2, #31
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	43da      	mvns	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	400a      	ands	r2, r1
 80016ac:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	4618      	mov	r0, r3
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685a      	ldr	r2, [r3, #4]
 80016c0:	4613      	mov	r3, r2
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	4413      	add	r3, r2
 80016c6:	3b23      	subs	r3, #35	@ 0x23
 80016c8:	fa00 f203 	lsl.w	r2, r0, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	430a      	orrs	r2, r1
 80016d2:	631a      	str	r2, [r3, #48]	@ 0x30
 80016d4:	e023      	b.n	800171e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685a      	ldr	r2, [r3, #4]
 80016e0:	4613      	mov	r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	4413      	add	r3, r2
 80016e6:	3b41      	subs	r3, #65	@ 0x41
 80016e8:	221f      	movs	r2, #31
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	43da      	mvns	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	400a      	ands	r2, r1
 80016f6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	b29b      	uxth	r3, r3
 8001704:	4618      	mov	r0, r3
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685a      	ldr	r2, [r3, #4]
 800170a:	4613      	mov	r3, r2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	4413      	add	r3, r2
 8001710:	3b41      	subs	r3, #65	@ 0x41
 8001712:	fa00 f203 	lsl.w	r2, r0, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	430a      	orrs	r2, r1
 800171c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800171e:	4b22      	ldr	r3, [pc, #136]	@ (80017a8 <HAL_ADC_ConfigChannel+0x234>)
 8001720:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a21      	ldr	r2, [pc, #132]	@ (80017ac <HAL_ADC_ConfigChannel+0x238>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d109      	bne.n	8001740 <HAL_ADC_ConfigChannel+0x1cc>
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2b12      	cmp	r3, #18
 8001732:	d105      	bne.n	8001740 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a19      	ldr	r2, [pc, #100]	@ (80017ac <HAL_ADC_ConfigChannel+0x238>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d123      	bne.n	8001792 <HAL_ADC_ConfigChannel+0x21e>
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	2b10      	cmp	r3, #16
 8001750:	d003      	beq.n	800175a <HAL_ADC_ConfigChannel+0x1e6>
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2b11      	cmp	r3, #17
 8001758:	d11b      	bne.n	8001792 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2b10      	cmp	r3, #16
 800176c:	d111      	bne.n	8001792 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800176e:	4b10      	ldr	r3, [pc, #64]	@ (80017b0 <HAL_ADC_ConfigChannel+0x23c>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a10      	ldr	r2, [pc, #64]	@ (80017b4 <HAL_ADC_ConfigChannel+0x240>)
 8001774:	fba2 2303 	umull	r2, r3, r2, r3
 8001778:	0c9a      	lsrs	r2, r3, #18
 800177a:	4613      	mov	r3, r2
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	4413      	add	r3, r2
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001784:	e002      	b.n	800178c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	3b01      	subs	r3, #1
 800178a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d1f9      	bne.n	8001786 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800179a:	2300      	movs	r3, #0
}
 800179c:	4618      	mov	r0, r3
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	40012300 	.word	0x40012300
 80017ac:	40012000 	.word	0x40012000
 80017b0:	20000000 	.word	0x20000000
 80017b4:	431bde83 	.word	0x431bde83

080017b8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017c0:	4b79      	ldr	r3, [pc, #484]	@ (80019a8 <ADC_Init+0x1f0>)
 80017c2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	685a      	ldr	r2, [r3, #4]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	431a      	orrs	r2, r3
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	685a      	ldr	r2, [r3, #4]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80017ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	6859      	ldr	r1, [r3, #4]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	691b      	ldr	r3, [r3, #16]
 80017f8:	021a      	lsls	r2, r3, #8
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	430a      	orrs	r2, r1
 8001800:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	685a      	ldr	r2, [r3, #4]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001810:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	6859      	ldr	r1, [r3, #4]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689a      	ldr	r2, [r3, #8]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	430a      	orrs	r2, r1
 8001822:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	689a      	ldr	r2, [r3, #8]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001832:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	6899      	ldr	r1, [r3, #8]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	68da      	ldr	r2, [r3, #12]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	430a      	orrs	r2, r1
 8001844:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800184a:	4a58      	ldr	r2, [pc, #352]	@ (80019ac <ADC_Init+0x1f4>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d022      	beq.n	8001896 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	689a      	ldr	r2, [r3, #8]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800185e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6899      	ldr	r1, [r3, #8]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	430a      	orrs	r2, r1
 8001870:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	689a      	ldr	r2, [r3, #8]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001880:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	6899      	ldr	r1, [r3, #8]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	430a      	orrs	r2, r1
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	e00f      	b.n	80018b6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	689a      	ldr	r2, [r3, #8]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80018a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	689a      	ldr	r2, [r3, #8]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80018b4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	689a      	ldr	r2, [r3, #8]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f022 0202 	bic.w	r2, r2, #2
 80018c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	6899      	ldr	r1, [r3, #8]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	7e1b      	ldrb	r3, [r3, #24]
 80018d0:	005a      	lsls	r2, r3, #1
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	430a      	orrs	r2, r1
 80018d8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d01b      	beq.n	800191c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	685a      	ldr	r2, [r3, #4]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80018f2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	685a      	ldr	r2, [r3, #4]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001902:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	6859      	ldr	r1, [r3, #4]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800190e:	3b01      	subs	r3, #1
 8001910:	035a      	lsls	r2, r3, #13
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	430a      	orrs	r2, r1
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	e007      	b.n	800192c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	685a      	ldr	r2, [r3, #4]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800192a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800193a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	69db      	ldr	r3, [r3, #28]
 8001946:	3b01      	subs	r3, #1
 8001948:	051a      	lsls	r2, r3, #20
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	430a      	orrs	r2, r1
 8001950:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	689a      	ldr	r2, [r3, #8]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001960:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	6899      	ldr	r1, [r3, #8]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800196e:	025a      	lsls	r2, r3, #9
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	430a      	orrs	r2, r1
 8001976:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	689a      	ldr	r2, [r3, #8]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001986:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	6899      	ldr	r1, [r3, #8]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	695b      	ldr	r3, [r3, #20]
 8001992:	029a      	lsls	r2, r3, #10
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	430a      	orrs	r2, r1
 800199a:	609a      	str	r2, [r3, #8]
}
 800199c:	bf00      	nop
 800199e:	3714      	adds	r7, #20
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	40012300 	.word	0x40012300
 80019ac:	0f000001 	.word	0x0f000001

080019b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f003 0307 	and.w	r3, r3, #7
 80019be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019c0:	4b0c      	ldr	r3, [pc, #48]	@ (80019f4 <__NVIC_SetPriorityGrouping+0x44>)
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019c6:	68ba      	ldr	r2, [r7, #8]
 80019c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019cc:	4013      	ands	r3, r2
 80019ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019e2:	4a04      	ldr	r2, [pc, #16]	@ (80019f4 <__NVIC_SetPriorityGrouping+0x44>)
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	60d3      	str	r3, [r2, #12]
}
 80019e8:	bf00      	nop
 80019ea:	3714      	adds	r7, #20
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	e000ed00 	.word	0xe000ed00

080019f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019fc:	4b04      	ldr	r3, [pc, #16]	@ (8001a10 <__NVIC_GetPriorityGrouping+0x18>)
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	0a1b      	lsrs	r3, r3, #8
 8001a02:	f003 0307 	and.w	r3, r3, #7
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	e000ed00 	.word	0xe000ed00

08001a14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	db0b      	blt.n	8001a3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a26:	79fb      	ldrb	r3, [r7, #7]
 8001a28:	f003 021f 	and.w	r2, r3, #31
 8001a2c:	4907      	ldr	r1, [pc, #28]	@ (8001a4c <__NVIC_EnableIRQ+0x38>)
 8001a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a32:	095b      	lsrs	r3, r3, #5
 8001a34:	2001      	movs	r0, #1
 8001a36:	fa00 f202 	lsl.w	r2, r0, r2
 8001a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a3e:	bf00      	nop
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	e000e100 	.word	0xe000e100

08001a50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	6039      	str	r1, [r7, #0]
 8001a5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	db0a      	blt.n	8001a7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	b2da      	uxtb	r2, r3
 8001a68:	490c      	ldr	r1, [pc, #48]	@ (8001a9c <__NVIC_SetPriority+0x4c>)
 8001a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6e:	0112      	lsls	r2, r2, #4
 8001a70:	b2d2      	uxtb	r2, r2
 8001a72:	440b      	add	r3, r1
 8001a74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a78:	e00a      	b.n	8001a90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	b2da      	uxtb	r2, r3
 8001a7e:	4908      	ldr	r1, [pc, #32]	@ (8001aa0 <__NVIC_SetPriority+0x50>)
 8001a80:	79fb      	ldrb	r3, [r7, #7]
 8001a82:	f003 030f 	and.w	r3, r3, #15
 8001a86:	3b04      	subs	r3, #4
 8001a88:	0112      	lsls	r2, r2, #4
 8001a8a:	b2d2      	uxtb	r2, r2
 8001a8c:	440b      	add	r3, r1
 8001a8e:	761a      	strb	r2, [r3, #24]
}
 8001a90:	bf00      	nop
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	e000e100 	.word	0xe000e100
 8001aa0:	e000ed00 	.word	0xe000ed00

08001aa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b089      	sub	sp, #36	@ 0x24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	60b9      	str	r1, [r7, #8]
 8001aae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f003 0307 	and.w	r3, r3, #7
 8001ab6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	f1c3 0307 	rsb	r3, r3, #7
 8001abe:	2b04      	cmp	r3, #4
 8001ac0:	bf28      	it	cs
 8001ac2:	2304      	movcs	r3, #4
 8001ac4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	3304      	adds	r3, #4
 8001aca:	2b06      	cmp	r3, #6
 8001acc:	d902      	bls.n	8001ad4 <NVIC_EncodePriority+0x30>
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	3b03      	subs	r3, #3
 8001ad2:	e000      	b.n	8001ad6 <NVIC_EncodePriority+0x32>
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	43da      	mvns	r2, r3
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	401a      	ands	r2, r3
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aec:	f04f 31ff 	mov.w	r1, #4294967295
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	fa01 f303 	lsl.w	r3, r1, r3
 8001af6:	43d9      	mvns	r1, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001afc:	4313      	orrs	r3, r2
         );
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3724      	adds	r7, #36	@ 0x24
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
	...

08001b0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3b01      	subs	r3, #1
 8001b18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b1c:	d301      	bcc.n	8001b22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e00f      	b.n	8001b42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b22:	4a0a      	ldr	r2, [pc, #40]	@ (8001b4c <SysTick_Config+0x40>)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3b01      	subs	r3, #1
 8001b28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b2a:	210f      	movs	r1, #15
 8001b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b30:	f7ff ff8e 	bl	8001a50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b34:	4b05      	ldr	r3, [pc, #20]	@ (8001b4c <SysTick_Config+0x40>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b3a:	4b04      	ldr	r3, [pc, #16]	@ (8001b4c <SysTick_Config+0x40>)
 8001b3c:	2207      	movs	r2, #7
 8001b3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	e000e010 	.word	0xe000e010

08001b50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f7ff ff29 	bl	80019b0 <__NVIC_SetPriorityGrouping>
}
 8001b5e:	bf00      	nop
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b086      	sub	sp, #24
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	60b9      	str	r1, [r7, #8]
 8001b70:	607a      	str	r2, [r7, #4]
 8001b72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b74:	2300      	movs	r3, #0
 8001b76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b78:	f7ff ff3e 	bl	80019f8 <__NVIC_GetPriorityGrouping>
 8001b7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	68b9      	ldr	r1, [r7, #8]
 8001b82:	6978      	ldr	r0, [r7, #20]
 8001b84:	f7ff ff8e 	bl	8001aa4 <NVIC_EncodePriority>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b8e:	4611      	mov	r1, r2
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff ff5d 	bl	8001a50 <__NVIC_SetPriority>
}
 8001b96:	bf00      	nop
 8001b98:	3718      	adds	r7, #24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b082      	sub	sp, #8
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff ff31 	bl	8001a14 <__NVIC_EnableIRQ>
}
 8001bb2:	bf00      	nop
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b082      	sub	sp, #8
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f7ff ffa2 	bl	8001b0c <SysTick_Config>
 8001bc8:	4603      	mov	r3, r0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
	...

08001bd4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001be0:	f7ff faea 	bl	80011b8 <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d101      	bne.n	8001bf0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e099      	b.n	8001d24 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2202      	movs	r2, #2
 8001bf4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f022 0201 	bic.w	r2, r2, #1
 8001c0e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c10:	e00f      	b.n	8001c32 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c12:	f7ff fad1 	bl	80011b8 <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	2b05      	cmp	r3, #5
 8001c1e:	d908      	bls.n	8001c32 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2220      	movs	r2, #32
 8001c24:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2203      	movs	r2, #3
 8001c2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e078      	b.n	8001d24 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0301 	and.w	r3, r3, #1
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d1e8      	bne.n	8001c12 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c48:	697a      	ldr	r2, [r7, #20]
 8001c4a:	4b38      	ldr	r3, [pc, #224]	@ (8001d2c <HAL_DMA_Init+0x158>)
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685a      	ldr	r2, [r3, #4]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	691b      	ldr	r3, [r3, #16]
 8001c64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a1b      	ldr	r3, [r3, #32]
 8001c7c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c7e:	697a      	ldr	r2, [r7, #20]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c88:	2b04      	cmp	r3, #4
 8001c8a:	d107      	bne.n	8001c9c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c94:	4313      	orrs	r3, r2
 8001c96:	697a      	ldr	r2, [r7, #20]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	697a      	ldr	r2, [r7, #20]
 8001ca2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	695b      	ldr	r3, [r3, #20]
 8001caa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	f023 0307 	bic.w	r3, r3, #7
 8001cb2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb8:	697a      	ldr	r2, [r7, #20]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc2:	2b04      	cmp	r3, #4
 8001cc4:	d117      	bne.n	8001cf6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cca:	697a      	ldr	r2, [r7, #20]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d00e      	beq.n	8001cf6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f000 fa91 	bl	8002200 <DMA_CheckFifoParam>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d008      	beq.n	8001cf6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2240      	movs	r2, #64	@ 0x40
 8001ce8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2201      	movs	r2, #1
 8001cee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e016      	b.n	8001d24 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	697a      	ldr	r2, [r7, #20]
 8001cfc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 fa48 	bl	8002194 <DMA_CalcBaseAndBitshift>
 8001d04:	4603      	mov	r3, r0
 8001d06:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d0c:	223f      	movs	r2, #63	@ 0x3f
 8001d0e:	409a      	lsls	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001d22:	2300      	movs	r3, #0
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3718      	adds	r7, #24
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	f010803f 	.word	0xf010803f

08001d30 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
 8001d3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d46:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d101      	bne.n	8001d56 <HAL_DMA_Start_IT+0x26>
 8001d52:	2302      	movs	r3, #2
 8001d54:	e040      	b.n	8001dd8 <HAL_DMA_Start_IT+0xa8>
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2201      	movs	r2, #1
 8001d5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d12f      	bne.n	8001dca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2202      	movs	r2, #2
 8001d6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2200      	movs	r2, #0
 8001d76:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	68b9      	ldr	r1, [r7, #8]
 8001d7e:	68f8      	ldr	r0, [r7, #12]
 8001d80:	f000 f9da 	bl	8002138 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d88:	223f      	movs	r2, #63	@ 0x3f
 8001d8a:	409a      	lsls	r2, r3
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f042 0216 	orr.w	r2, r2, #22
 8001d9e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d007      	beq.n	8001db8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f042 0208 	orr.w	r2, r2, #8
 8001db6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f042 0201 	orr.w	r2, r2, #1
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	e005      	b.n	8001dd6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001dd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3718      	adds	r7, #24
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d004      	beq.n	8001dfe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2280      	movs	r2, #128	@ 0x80
 8001df8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e00c      	b.n	8001e18 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2205      	movs	r2, #5
 8001e02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f022 0201 	bic.w	r2, r2, #1
 8001e14:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001e30:	4b8e      	ldr	r3, [pc, #568]	@ (800206c <HAL_DMA_IRQHandler+0x248>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a8e      	ldr	r2, [pc, #568]	@ (8002070 <HAL_DMA_IRQHandler+0x24c>)
 8001e36:	fba2 2303 	umull	r2, r3, r2, r3
 8001e3a:	0a9b      	lsrs	r3, r3, #10
 8001e3c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e42:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e4e:	2208      	movs	r2, #8
 8001e50:	409a      	lsls	r2, r3
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	4013      	ands	r3, r2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d01a      	beq.n	8001e90 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0304 	and.w	r3, r3, #4
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d013      	beq.n	8001e90 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f022 0204 	bic.w	r2, r2, #4
 8001e76:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e7c:	2208      	movs	r2, #8
 8001e7e:	409a      	lsls	r2, r3
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e88:	f043 0201 	orr.w	r2, r3, #1
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e94:	2201      	movs	r2, #1
 8001e96:	409a      	lsls	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d012      	beq.n	8001ec6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	695b      	ldr	r3, [r3, #20]
 8001ea6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d00b      	beq.n	8001ec6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	409a      	lsls	r2, r3
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ebe:	f043 0202 	orr.w	r2, r3, #2
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eca:	2204      	movs	r2, #4
 8001ecc:	409a      	lsls	r2, r3
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d012      	beq.n	8001efc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0302 	and.w	r3, r3, #2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d00b      	beq.n	8001efc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ee8:	2204      	movs	r2, #4
 8001eea:	409a      	lsls	r2, r3
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ef4:	f043 0204 	orr.w	r2, r3, #4
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f00:	2210      	movs	r2, #16
 8001f02:	409a      	lsls	r2, r3
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	4013      	ands	r3, r2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d043      	beq.n	8001f94 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0308 	and.w	r3, r3, #8
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d03c      	beq.n	8001f94 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f1e:	2210      	movs	r2, #16
 8001f20:	409a      	lsls	r2, r3
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d018      	beq.n	8001f66 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d108      	bne.n	8001f54 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d024      	beq.n	8001f94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	4798      	blx	r3
 8001f52:	e01f      	b.n	8001f94 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d01b      	beq.n	8001f94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	4798      	blx	r3
 8001f64:	e016      	b.n	8001f94 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d107      	bne.n	8001f84 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f022 0208 	bic.w	r2, r2, #8
 8001f82:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d003      	beq.n	8001f94 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f98:	2220      	movs	r2, #32
 8001f9a:	409a      	lsls	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	f000 808f 	beq.w	80020c4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0310 	and.w	r3, r3, #16
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	f000 8087 	beq.w	80020c4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fba:	2220      	movs	r2, #32
 8001fbc:	409a      	lsls	r2, r3
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b05      	cmp	r3, #5
 8001fcc:	d136      	bne.n	800203c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f022 0216 	bic.w	r2, r2, #22
 8001fdc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	695a      	ldr	r2, [r3, #20]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001fec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d103      	bne.n	8001ffe <HAL_DMA_IRQHandler+0x1da>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d007      	beq.n	800200e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f022 0208 	bic.w	r2, r2, #8
 800200c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002012:	223f      	movs	r2, #63	@ 0x3f
 8002014:	409a      	lsls	r2, r3
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2201      	movs	r2, #1
 800201e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800202e:	2b00      	cmp	r3, #0
 8002030:	d07e      	beq.n	8002130 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	4798      	blx	r3
        }
        return;
 800203a:	e079      	b.n	8002130 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d01d      	beq.n	8002086 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d10d      	bne.n	8002074 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800205c:	2b00      	cmp	r3, #0
 800205e:	d031      	beq.n	80020c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	4798      	blx	r3
 8002068:	e02c      	b.n	80020c4 <HAL_DMA_IRQHandler+0x2a0>
 800206a:	bf00      	nop
 800206c:	20000000 	.word	0x20000000
 8002070:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002078:	2b00      	cmp	r3, #0
 800207a:	d023      	beq.n	80020c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	4798      	blx	r3
 8002084:	e01e      	b.n	80020c4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002090:	2b00      	cmp	r3, #0
 8002092:	d10f      	bne.n	80020b4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f022 0210 	bic.w	r2, r2, #16
 80020a2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2201      	movs	r2, #1
 80020a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d003      	beq.n	80020c4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d032      	beq.n	8002132 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020d0:	f003 0301 	and.w	r3, r3, #1
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d022      	beq.n	800211e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2205      	movs	r2, #5
 80020dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f022 0201 	bic.w	r2, r2, #1
 80020ee:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	3301      	adds	r3, #1
 80020f4:	60bb      	str	r3, [r7, #8]
 80020f6:	697a      	ldr	r2, [r7, #20]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d307      	bcc.n	800210c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b00      	cmp	r3, #0
 8002108:	d1f2      	bne.n	80020f0 <HAL_DMA_IRQHandler+0x2cc>
 800210a:	e000      	b.n	800210e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800210c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2201      	movs	r2, #1
 8002112:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002122:	2b00      	cmp	r3, #0
 8002124:	d005      	beq.n	8002132 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	4798      	blx	r3
 800212e:	e000      	b.n	8002132 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002130:	bf00      	nop
    }
  }
}
 8002132:	3718      	adds	r7, #24
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002138:	b480      	push	{r7}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	607a      	str	r2, [r7, #4]
 8002144:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002154:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	683a      	ldr	r2, [r7, #0]
 800215c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	2b40      	cmp	r3, #64	@ 0x40
 8002164:	d108      	bne.n	8002178 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68ba      	ldr	r2, [r7, #8]
 8002174:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002176:	e007      	b.n	8002188 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	68ba      	ldr	r2, [r7, #8]
 800217e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	60da      	str	r2, [r3, #12]
}
 8002188:	bf00      	nop
 800218a:	3714      	adds	r7, #20
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	3b10      	subs	r3, #16
 80021a4:	4a14      	ldr	r2, [pc, #80]	@ (80021f8 <DMA_CalcBaseAndBitshift+0x64>)
 80021a6:	fba2 2303 	umull	r2, r3, r2, r3
 80021aa:	091b      	lsrs	r3, r3, #4
 80021ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80021ae:	4a13      	ldr	r2, [pc, #76]	@ (80021fc <DMA_CalcBaseAndBitshift+0x68>)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	4413      	add	r3, r2
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	461a      	mov	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2b03      	cmp	r3, #3
 80021c0:	d909      	bls.n	80021d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80021ca:	f023 0303 	bic.w	r3, r3, #3
 80021ce:	1d1a      	adds	r2, r3, #4
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	659a      	str	r2, [r3, #88]	@ 0x58
 80021d4:	e007      	b.n	80021e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80021de:	f023 0303 	bic.w	r3, r3, #3
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3714      	adds	r7, #20
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	aaaaaaab 	.word	0xaaaaaaab
 80021fc:	08004ba8 	.word	0x08004ba8

08002200 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002208:	2300      	movs	r3, #0
 800220a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002210:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d11f      	bne.n	800225a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	2b03      	cmp	r3, #3
 800221e:	d856      	bhi.n	80022ce <DMA_CheckFifoParam+0xce>
 8002220:	a201      	add	r2, pc, #4	@ (adr r2, 8002228 <DMA_CheckFifoParam+0x28>)
 8002222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002226:	bf00      	nop
 8002228:	08002239 	.word	0x08002239
 800222c:	0800224b 	.word	0x0800224b
 8002230:	08002239 	.word	0x08002239
 8002234:	080022cf 	.word	0x080022cf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800223c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d046      	beq.n	80022d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002248:	e043      	b.n	80022d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800224e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002252:	d140      	bne.n	80022d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002258:	e03d      	b.n	80022d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002262:	d121      	bne.n	80022a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	2b03      	cmp	r3, #3
 8002268:	d837      	bhi.n	80022da <DMA_CheckFifoParam+0xda>
 800226a:	a201      	add	r2, pc, #4	@ (adr r2, 8002270 <DMA_CheckFifoParam+0x70>)
 800226c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002270:	08002281 	.word	0x08002281
 8002274:	08002287 	.word	0x08002287
 8002278:	08002281 	.word	0x08002281
 800227c:	08002299 	.word	0x08002299
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	73fb      	strb	r3, [r7, #15]
      break;
 8002284:	e030      	b.n	80022e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800228a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d025      	beq.n	80022de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002296:	e022      	b.n	80022de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800229c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80022a0:	d11f      	bne.n	80022e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80022a6:	e01c      	b.n	80022e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d903      	bls.n	80022b6 <DMA_CheckFifoParam+0xb6>
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	2b03      	cmp	r3, #3
 80022b2:	d003      	beq.n	80022bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80022b4:	e018      	b.n	80022e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	73fb      	strb	r3, [r7, #15]
      break;
 80022ba:	e015      	b.n	80022e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d00e      	beq.n	80022e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	73fb      	strb	r3, [r7, #15]
      break;
 80022cc:	e00b      	b.n	80022e6 <DMA_CheckFifoParam+0xe6>
      break;
 80022ce:	bf00      	nop
 80022d0:	e00a      	b.n	80022e8 <DMA_CheckFifoParam+0xe8>
      break;
 80022d2:	bf00      	nop
 80022d4:	e008      	b.n	80022e8 <DMA_CheckFifoParam+0xe8>
      break;
 80022d6:	bf00      	nop
 80022d8:	e006      	b.n	80022e8 <DMA_CheckFifoParam+0xe8>
      break;
 80022da:	bf00      	nop
 80022dc:	e004      	b.n	80022e8 <DMA_CheckFifoParam+0xe8>
      break;
 80022de:	bf00      	nop
 80022e0:	e002      	b.n	80022e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80022e2:	bf00      	nop
 80022e4:	e000      	b.n	80022e8 <DMA_CheckFifoParam+0xe8>
      break;
 80022e6:	bf00      	nop
    }
  } 
  
  return status; 
 80022e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3714      	adds	r7, #20
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop

080022f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b089      	sub	sp, #36	@ 0x24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002302:	2300      	movs	r3, #0
 8002304:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002306:	2300      	movs	r3, #0
 8002308:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800230a:	2300      	movs	r3, #0
 800230c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800230e:	2300      	movs	r3, #0
 8002310:	61fb      	str	r3, [r7, #28]
 8002312:	e16b      	b.n	80025ec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002314:	2201      	movs	r2, #1
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	697a      	ldr	r2, [r7, #20]
 8002324:	4013      	ands	r3, r2
 8002326:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	429a      	cmp	r2, r3
 800232e:	f040 815a 	bne.w	80025e6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f003 0303 	and.w	r3, r3, #3
 800233a:	2b01      	cmp	r3, #1
 800233c:	d005      	beq.n	800234a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002346:	2b02      	cmp	r3, #2
 8002348:	d130      	bne.n	80023ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	2203      	movs	r2, #3
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43db      	mvns	r3, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4013      	ands	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	68da      	ldr	r2, [r3, #12]
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4313      	orrs	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002380:	2201      	movs	r2, #1
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	43db      	mvns	r3, r3
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	4013      	ands	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	091b      	lsrs	r3, r3, #4
 8002396:	f003 0201 	and.w	r2, r3, #1
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f003 0303 	and.w	r3, r3, #3
 80023b4:	2b03      	cmp	r3, #3
 80023b6:	d017      	beq.n	80023e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	2203      	movs	r2, #3
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	43db      	mvns	r3, r3
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4013      	ands	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	689a      	ldr	r2, [r3, #8]
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	4313      	orrs	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f003 0303 	and.w	r3, r3, #3
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d123      	bne.n	800243c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	08da      	lsrs	r2, r3, #3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3208      	adds	r2, #8
 80023fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002400:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	f003 0307 	and.w	r3, r3, #7
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	220f      	movs	r2, #15
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	43db      	mvns	r3, r3
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	4013      	ands	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	691a      	ldr	r2, [r3, #16]
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	f003 0307 	and.w	r3, r3, #7
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	4313      	orrs	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	08da      	lsrs	r2, r3, #3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	3208      	adds	r2, #8
 8002436:	69b9      	ldr	r1, [r7, #24]
 8002438:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	2203      	movs	r2, #3
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	43db      	mvns	r3, r3
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	4013      	ands	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f003 0203 	and.w	r2, r3, #3
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	4313      	orrs	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002478:	2b00      	cmp	r3, #0
 800247a:	f000 80b4 	beq.w	80025e6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800247e:	2300      	movs	r3, #0
 8002480:	60fb      	str	r3, [r7, #12]
 8002482:	4b60      	ldr	r3, [pc, #384]	@ (8002604 <HAL_GPIO_Init+0x30c>)
 8002484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002486:	4a5f      	ldr	r2, [pc, #380]	@ (8002604 <HAL_GPIO_Init+0x30c>)
 8002488:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800248c:	6453      	str	r3, [r2, #68]	@ 0x44
 800248e:	4b5d      	ldr	r3, [pc, #372]	@ (8002604 <HAL_GPIO_Init+0x30c>)
 8002490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002492:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002496:	60fb      	str	r3, [r7, #12]
 8002498:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800249a:	4a5b      	ldr	r2, [pc, #364]	@ (8002608 <HAL_GPIO_Init+0x310>)
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	089b      	lsrs	r3, r3, #2
 80024a0:	3302      	adds	r3, #2
 80024a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	f003 0303 	and.w	r3, r3, #3
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	220f      	movs	r2, #15
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	43db      	mvns	r3, r3
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	4013      	ands	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a52      	ldr	r2, [pc, #328]	@ (800260c <HAL_GPIO_Init+0x314>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d02b      	beq.n	800251e <HAL_GPIO_Init+0x226>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a51      	ldr	r2, [pc, #324]	@ (8002610 <HAL_GPIO_Init+0x318>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d025      	beq.n	800251a <HAL_GPIO_Init+0x222>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a50      	ldr	r2, [pc, #320]	@ (8002614 <HAL_GPIO_Init+0x31c>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d01f      	beq.n	8002516 <HAL_GPIO_Init+0x21e>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a4f      	ldr	r2, [pc, #316]	@ (8002618 <HAL_GPIO_Init+0x320>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d019      	beq.n	8002512 <HAL_GPIO_Init+0x21a>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a4e      	ldr	r2, [pc, #312]	@ (800261c <HAL_GPIO_Init+0x324>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d013      	beq.n	800250e <HAL_GPIO_Init+0x216>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a4d      	ldr	r2, [pc, #308]	@ (8002620 <HAL_GPIO_Init+0x328>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d00d      	beq.n	800250a <HAL_GPIO_Init+0x212>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a4c      	ldr	r2, [pc, #304]	@ (8002624 <HAL_GPIO_Init+0x32c>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d007      	beq.n	8002506 <HAL_GPIO_Init+0x20e>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a4b      	ldr	r2, [pc, #300]	@ (8002628 <HAL_GPIO_Init+0x330>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d101      	bne.n	8002502 <HAL_GPIO_Init+0x20a>
 80024fe:	2307      	movs	r3, #7
 8002500:	e00e      	b.n	8002520 <HAL_GPIO_Init+0x228>
 8002502:	2308      	movs	r3, #8
 8002504:	e00c      	b.n	8002520 <HAL_GPIO_Init+0x228>
 8002506:	2306      	movs	r3, #6
 8002508:	e00a      	b.n	8002520 <HAL_GPIO_Init+0x228>
 800250a:	2305      	movs	r3, #5
 800250c:	e008      	b.n	8002520 <HAL_GPIO_Init+0x228>
 800250e:	2304      	movs	r3, #4
 8002510:	e006      	b.n	8002520 <HAL_GPIO_Init+0x228>
 8002512:	2303      	movs	r3, #3
 8002514:	e004      	b.n	8002520 <HAL_GPIO_Init+0x228>
 8002516:	2302      	movs	r3, #2
 8002518:	e002      	b.n	8002520 <HAL_GPIO_Init+0x228>
 800251a:	2301      	movs	r3, #1
 800251c:	e000      	b.n	8002520 <HAL_GPIO_Init+0x228>
 800251e:	2300      	movs	r3, #0
 8002520:	69fa      	ldr	r2, [r7, #28]
 8002522:	f002 0203 	and.w	r2, r2, #3
 8002526:	0092      	lsls	r2, r2, #2
 8002528:	4093      	lsls	r3, r2
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	4313      	orrs	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002530:	4935      	ldr	r1, [pc, #212]	@ (8002608 <HAL_GPIO_Init+0x310>)
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	089b      	lsrs	r3, r3, #2
 8002536:	3302      	adds	r3, #2
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800253e:	4b3b      	ldr	r3, [pc, #236]	@ (800262c <HAL_GPIO_Init+0x334>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	43db      	mvns	r3, r3
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	4013      	ands	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d003      	beq.n	8002562 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	4313      	orrs	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002562:	4a32      	ldr	r2, [pc, #200]	@ (800262c <HAL_GPIO_Init+0x334>)
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002568:	4b30      	ldr	r3, [pc, #192]	@ (800262c <HAL_GPIO_Init+0x334>)
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	43db      	mvns	r3, r3
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	4013      	ands	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d003      	beq.n	800258c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	4313      	orrs	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800258c:	4a27      	ldr	r2, [pc, #156]	@ (800262c <HAL_GPIO_Init+0x334>)
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002592:	4b26      	ldr	r3, [pc, #152]	@ (800262c <HAL_GPIO_Init+0x334>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	43db      	mvns	r3, r3
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	4013      	ands	r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d003      	beq.n	80025b6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025b6:	4a1d      	ldr	r2, [pc, #116]	@ (800262c <HAL_GPIO_Init+0x334>)
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025bc:	4b1b      	ldr	r3, [pc, #108]	@ (800262c <HAL_GPIO_Init+0x334>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	43db      	mvns	r3, r3
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	4013      	ands	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d003      	beq.n	80025e0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	4313      	orrs	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025e0:	4a12      	ldr	r2, [pc, #72]	@ (800262c <HAL_GPIO_Init+0x334>)
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	3301      	adds	r3, #1
 80025ea:	61fb      	str	r3, [r7, #28]
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	2b0f      	cmp	r3, #15
 80025f0:	f67f ae90 	bls.w	8002314 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025f4:	bf00      	nop
 80025f6:	bf00      	nop
 80025f8:	3724      	adds	r7, #36	@ 0x24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	40023800 	.word	0x40023800
 8002608:	40013800 	.word	0x40013800
 800260c:	40020000 	.word	0x40020000
 8002610:	40020400 	.word	0x40020400
 8002614:	40020800 	.word	0x40020800
 8002618:	40020c00 	.word	0x40020c00
 800261c:	40021000 	.word	0x40021000
 8002620:	40021400 	.word	0x40021400
 8002624:	40021800 	.word	0x40021800
 8002628:	40021c00 	.word	0x40021c00
 800262c:	40013c00 	.word	0x40013c00

08002630 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b086      	sub	sp, #24
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e267      	b.n	8002b12 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	2b00      	cmp	r3, #0
 800264c:	d075      	beq.n	800273a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800264e:	4b88      	ldr	r3, [pc, #544]	@ (8002870 <HAL_RCC_OscConfig+0x240>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f003 030c 	and.w	r3, r3, #12
 8002656:	2b04      	cmp	r3, #4
 8002658:	d00c      	beq.n	8002674 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800265a:	4b85      	ldr	r3, [pc, #532]	@ (8002870 <HAL_RCC_OscConfig+0x240>)
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002662:	2b08      	cmp	r3, #8
 8002664:	d112      	bne.n	800268c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002666:	4b82      	ldr	r3, [pc, #520]	@ (8002870 <HAL_RCC_OscConfig+0x240>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800266e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002672:	d10b      	bne.n	800268c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002674:	4b7e      	ldr	r3, [pc, #504]	@ (8002870 <HAL_RCC_OscConfig+0x240>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d05b      	beq.n	8002738 <HAL_RCC_OscConfig+0x108>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d157      	bne.n	8002738 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e242      	b.n	8002b12 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002694:	d106      	bne.n	80026a4 <HAL_RCC_OscConfig+0x74>
 8002696:	4b76      	ldr	r3, [pc, #472]	@ (8002870 <HAL_RCC_OscConfig+0x240>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a75      	ldr	r2, [pc, #468]	@ (8002870 <HAL_RCC_OscConfig+0x240>)
 800269c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026a0:	6013      	str	r3, [r2, #0]
 80026a2:	e01d      	b.n	80026e0 <HAL_RCC_OscConfig+0xb0>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026ac:	d10c      	bne.n	80026c8 <HAL_RCC_OscConfig+0x98>
 80026ae:	4b70      	ldr	r3, [pc, #448]	@ (8002870 <HAL_RCC_OscConfig+0x240>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a6f      	ldr	r2, [pc, #444]	@ (8002870 <HAL_RCC_OscConfig+0x240>)
 80026b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026b8:	6013      	str	r3, [r2, #0]
 80026ba:	4b6d      	ldr	r3, [pc, #436]	@ (8002870 <HAL_RCC_OscConfig+0x240>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a6c      	ldr	r2, [pc, #432]	@ (8002870 <HAL_RCC_OscConfig+0x240>)
 80026c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026c4:	6013      	str	r3, [r2, #0]
 80026c6:	e00b      	b.n	80026e0 <HAL_RCC_OscConfig+0xb0>
 80026c8:	4b69      	ldr	r3, [pc, #420]	@ (8002870 <HAL_RCC_OscConfig+0x240>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a68      	ldr	r2, [pc, #416]	@ (8002870 <HAL_RCC_OscConfig+0x240>)
 80026ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026d2:	6013      	str	r3, [r2, #0]
 80026d4:	4b66      	ldr	r3, [pc, #408]	@ (8002870 <HAL_RCC_OscConfig+0x240>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a65      	ldr	r2, [pc, #404]	@ (8002870 <HAL_RCC_OscConfig+0x240>)
 80026da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d013      	beq.n	8002710 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e8:	f7fe fd66 	bl	80011b8 <HAL_GetTick>
 80026ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ee:	e008      	b.n	8002702 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026f0:	f7fe fd62 	bl	80011b8 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b64      	cmp	r3, #100	@ 0x64
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e207      	b.n	8002b12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002702:	4b5b      	ldr	r3, [pc, #364]	@ (8002870 <HAL_RCC_OscConfig+0x240>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d0f0      	beq.n	80026f0 <HAL_RCC_OscConfig+0xc0>
 800270e:	e014      	b.n	800273a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002710:	f7fe fd52 	bl	80011b8 <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002718:	f7fe fd4e 	bl	80011b8 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b64      	cmp	r3, #100	@ 0x64
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e1f3      	b.n	8002b12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800272a:	4b51      	ldr	r3, [pc, #324]	@ (8002870 <HAL_RCC_OscConfig+0x240>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1f0      	bne.n	8002718 <HAL_RCC_OscConfig+0xe8>
 8002736:	e000      	b.n	800273a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002738:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d063      	beq.n	800280e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002746:	4b4a      	ldr	r3, [pc, #296]	@ (8002870 <HAL_RCC_OscConfig+0x240>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f003 030c 	and.w	r3, r3, #12
 800274e:	2b00      	cmp	r3, #0
 8002750:	d00b      	beq.n	800276a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002752:	4b47      	ldr	r3, [pc, #284]	@ (8002870 <HAL_RCC_OscConfig+0x240>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800275a:	2b08      	cmp	r3, #8
 800275c:	d11c      	bne.n	8002798 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800275e:	4b44      	ldr	r3, [pc, #272]	@ (8002870 <HAL_RCC_OscConfig+0x240>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d116      	bne.n	8002798 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800276a:	4b41      	ldr	r3, [pc, #260]	@ (8002870 <HAL_RCC_OscConfig+0x240>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d005      	beq.n	8002782 <HAL_RCC_OscConfig+0x152>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d001      	beq.n	8002782 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e1c7      	b.n	8002b12 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002782:	4b3b      	ldr	r3, [pc, #236]	@ (8002870 <HAL_RCC_OscConfig+0x240>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	4937      	ldr	r1, [pc, #220]	@ (8002870 <HAL_RCC_OscConfig+0x240>)
 8002792:	4313      	orrs	r3, r2
 8002794:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002796:	e03a      	b.n	800280e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d020      	beq.n	80027e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027a0:	4b34      	ldr	r3, [pc, #208]	@ (8002874 <HAL_RCC_OscConfig+0x244>)
 80027a2:	2201      	movs	r2, #1
 80027a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a6:	f7fe fd07 	bl	80011b8 <HAL_GetTick>
 80027aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ac:	e008      	b.n	80027c0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ae:	f7fe fd03 	bl	80011b8 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d901      	bls.n	80027c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e1a8      	b.n	8002b12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027c0:	4b2b      	ldr	r3, [pc, #172]	@ (8002870 <HAL_RCC_OscConfig+0x240>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d0f0      	beq.n	80027ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027cc:	4b28      	ldr	r3, [pc, #160]	@ (8002870 <HAL_RCC_OscConfig+0x240>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	4925      	ldr	r1, [pc, #148]	@ (8002870 <HAL_RCC_OscConfig+0x240>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	600b      	str	r3, [r1, #0]
 80027e0:	e015      	b.n	800280e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027e2:	4b24      	ldr	r3, [pc, #144]	@ (8002874 <HAL_RCC_OscConfig+0x244>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e8:	f7fe fce6 	bl	80011b8 <HAL_GetTick>
 80027ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027f0:	f7fe fce2 	bl	80011b8 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e187      	b.n	8002b12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002802:	4b1b      	ldr	r3, [pc, #108]	@ (8002870 <HAL_RCC_OscConfig+0x240>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1f0      	bne.n	80027f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0308 	and.w	r3, r3, #8
 8002816:	2b00      	cmp	r3, #0
 8002818:	d036      	beq.n	8002888 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d016      	beq.n	8002850 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002822:	4b15      	ldr	r3, [pc, #84]	@ (8002878 <HAL_RCC_OscConfig+0x248>)
 8002824:	2201      	movs	r2, #1
 8002826:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002828:	f7fe fcc6 	bl	80011b8 <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002830:	f7fe fcc2 	bl	80011b8 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e167      	b.n	8002b12 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002842:	4b0b      	ldr	r3, [pc, #44]	@ (8002870 <HAL_RCC_OscConfig+0x240>)
 8002844:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d0f0      	beq.n	8002830 <HAL_RCC_OscConfig+0x200>
 800284e:	e01b      	b.n	8002888 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002850:	4b09      	ldr	r3, [pc, #36]	@ (8002878 <HAL_RCC_OscConfig+0x248>)
 8002852:	2200      	movs	r2, #0
 8002854:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002856:	f7fe fcaf 	bl	80011b8 <HAL_GetTick>
 800285a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800285c:	e00e      	b.n	800287c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800285e:	f7fe fcab 	bl	80011b8 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d907      	bls.n	800287c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e150      	b.n	8002b12 <HAL_RCC_OscConfig+0x4e2>
 8002870:	40023800 	.word	0x40023800
 8002874:	42470000 	.word	0x42470000
 8002878:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800287c:	4b88      	ldr	r3, [pc, #544]	@ (8002aa0 <HAL_RCC_OscConfig+0x470>)
 800287e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1ea      	bne.n	800285e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0304 	and.w	r3, r3, #4
 8002890:	2b00      	cmp	r3, #0
 8002892:	f000 8097 	beq.w	80029c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002896:	2300      	movs	r3, #0
 8002898:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800289a:	4b81      	ldr	r3, [pc, #516]	@ (8002aa0 <HAL_RCC_OscConfig+0x470>)
 800289c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10f      	bne.n	80028c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028a6:	2300      	movs	r3, #0
 80028a8:	60bb      	str	r3, [r7, #8]
 80028aa:	4b7d      	ldr	r3, [pc, #500]	@ (8002aa0 <HAL_RCC_OscConfig+0x470>)
 80028ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ae:	4a7c      	ldr	r2, [pc, #496]	@ (8002aa0 <HAL_RCC_OscConfig+0x470>)
 80028b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80028b6:	4b7a      	ldr	r3, [pc, #488]	@ (8002aa0 <HAL_RCC_OscConfig+0x470>)
 80028b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028be:	60bb      	str	r3, [r7, #8]
 80028c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028c2:	2301      	movs	r3, #1
 80028c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c6:	4b77      	ldr	r3, [pc, #476]	@ (8002aa4 <HAL_RCC_OscConfig+0x474>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d118      	bne.n	8002904 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028d2:	4b74      	ldr	r3, [pc, #464]	@ (8002aa4 <HAL_RCC_OscConfig+0x474>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a73      	ldr	r2, [pc, #460]	@ (8002aa4 <HAL_RCC_OscConfig+0x474>)
 80028d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028de:	f7fe fc6b 	bl	80011b8 <HAL_GetTick>
 80028e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e4:	e008      	b.n	80028f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028e6:	f7fe fc67 	bl	80011b8 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e10c      	b.n	8002b12 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f8:	4b6a      	ldr	r3, [pc, #424]	@ (8002aa4 <HAL_RCC_OscConfig+0x474>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002900:	2b00      	cmp	r3, #0
 8002902:	d0f0      	beq.n	80028e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	2b01      	cmp	r3, #1
 800290a:	d106      	bne.n	800291a <HAL_RCC_OscConfig+0x2ea>
 800290c:	4b64      	ldr	r3, [pc, #400]	@ (8002aa0 <HAL_RCC_OscConfig+0x470>)
 800290e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002910:	4a63      	ldr	r2, [pc, #396]	@ (8002aa0 <HAL_RCC_OscConfig+0x470>)
 8002912:	f043 0301 	orr.w	r3, r3, #1
 8002916:	6713      	str	r3, [r2, #112]	@ 0x70
 8002918:	e01c      	b.n	8002954 <HAL_RCC_OscConfig+0x324>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	2b05      	cmp	r3, #5
 8002920:	d10c      	bne.n	800293c <HAL_RCC_OscConfig+0x30c>
 8002922:	4b5f      	ldr	r3, [pc, #380]	@ (8002aa0 <HAL_RCC_OscConfig+0x470>)
 8002924:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002926:	4a5e      	ldr	r2, [pc, #376]	@ (8002aa0 <HAL_RCC_OscConfig+0x470>)
 8002928:	f043 0304 	orr.w	r3, r3, #4
 800292c:	6713      	str	r3, [r2, #112]	@ 0x70
 800292e:	4b5c      	ldr	r3, [pc, #368]	@ (8002aa0 <HAL_RCC_OscConfig+0x470>)
 8002930:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002932:	4a5b      	ldr	r2, [pc, #364]	@ (8002aa0 <HAL_RCC_OscConfig+0x470>)
 8002934:	f043 0301 	orr.w	r3, r3, #1
 8002938:	6713      	str	r3, [r2, #112]	@ 0x70
 800293a:	e00b      	b.n	8002954 <HAL_RCC_OscConfig+0x324>
 800293c:	4b58      	ldr	r3, [pc, #352]	@ (8002aa0 <HAL_RCC_OscConfig+0x470>)
 800293e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002940:	4a57      	ldr	r2, [pc, #348]	@ (8002aa0 <HAL_RCC_OscConfig+0x470>)
 8002942:	f023 0301 	bic.w	r3, r3, #1
 8002946:	6713      	str	r3, [r2, #112]	@ 0x70
 8002948:	4b55      	ldr	r3, [pc, #340]	@ (8002aa0 <HAL_RCC_OscConfig+0x470>)
 800294a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800294c:	4a54      	ldr	r2, [pc, #336]	@ (8002aa0 <HAL_RCC_OscConfig+0x470>)
 800294e:	f023 0304 	bic.w	r3, r3, #4
 8002952:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d015      	beq.n	8002988 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800295c:	f7fe fc2c 	bl	80011b8 <HAL_GetTick>
 8002960:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002962:	e00a      	b.n	800297a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002964:	f7fe fc28 	bl	80011b8 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002972:	4293      	cmp	r3, r2
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e0cb      	b.n	8002b12 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800297a:	4b49      	ldr	r3, [pc, #292]	@ (8002aa0 <HAL_RCC_OscConfig+0x470>)
 800297c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d0ee      	beq.n	8002964 <HAL_RCC_OscConfig+0x334>
 8002986:	e014      	b.n	80029b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002988:	f7fe fc16 	bl	80011b8 <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800298e:	e00a      	b.n	80029a6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002990:	f7fe fc12 	bl	80011b8 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800299e:	4293      	cmp	r3, r2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e0b5      	b.n	8002b12 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029a6:	4b3e      	ldr	r3, [pc, #248]	@ (8002aa0 <HAL_RCC_OscConfig+0x470>)
 80029a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1ee      	bne.n	8002990 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80029b2:	7dfb      	ldrb	r3, [r7, #23]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d105      	bne.n	80029c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029b8:	4b39      	ldr	r3, [pc, #228]	@ (8002aa0 <HAL_RCC_OscConfig+0x470>)
 80029ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029bc:	4a38      	ldr	r2, [pc, #224]	@ (8002aa0 <HAL_RCC_OscConfig+0x470>)
 80029be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029c2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	f000 80a1 	beq.w	8002b10 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029ce:	4b34      	ldr	r3, [pc, #208]	@ (8002aa0 <HAL_RCC_OscConfig+0x470>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f003 030c 	and.w	r3, r3, #12
 80029d6:	2b08      	cmp	r3, #8
 80029d8:	d05c      	beq.n	8002a94 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d141      	bne.n	8002a66 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029e2:	4b31      	ldr	r3, [pc, #196]	@ (8002aa8 <HAL_RCC_OscConfig+0x478>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e8:	f7fe fbe6 	bl	80011b8 <HAL_GetTick>
 80029ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029f0:	f7fe fbe2 	bl	80011b8 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e087      	b.n	8002b12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a02:	4b27      	ldr	r3, [pc, #156]	@ (8002aa0 <HAL_RCC_OscConfig+0x470>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1f0      	bne.n	80029f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	69da      	ldr	r2, [r3, #28]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a1b      	ldr	r3, [r3, #32]
 8002a16:	431a      	orrs	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a1c:	019b      	lsls	r3, r3, #6
 8002a1e:	431a      	orrs	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a24:	085b      	lsrs	r3, r3, #1
 8002a26:	3b01      	subs	r3, #1
 8002a28:	041b      	lsls	r3, r3, #16
 8002a2a:	431a      	orrs	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a30:	061b      	lsls	r3, r3, #24
 8002a32:	491b      	ldr	r1, [pc, #108]	@ (8002aa0 <HAL_RCC_OscConfig+0x470>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a38:	4b1b      	ldr	r3, [pc, #108]	@ (8002aa8 <HAL_RCC_OscConfig+0x478>)
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a3e:	f7fe fbbb 	bl	80011b8 <HAL_GetTick>
 8002a42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a44:	e008      	b.n	8002a58 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a46:	f7fe fbb7 	bl	80011b8 <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d901      	bls.n	8002a58 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e05c      	b.n	8002b12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a58:	4b11      	ldr	r3, [pc, #68]	@ (8002aa0 <HAL_RCC_OscConfig+0x470>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d0f0      	beq.n	8002a46 <HAL_RCC_OscConfig+0x416>
 8002a64:	e054      	b.n	8002b10 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a66:	4b10      	ldr	r3, [pc, #64]	@ (8002aa8 <HAL_RCC_OscConfig+0x478>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6c:	f7fe fba4 	bl	80011b8 <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a72:	e008      	b.n	8002a86 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a74:	f7fe fba0 	bl	80011b8 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e045      	b.n	8002b12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a86:	4b06      	ldr	r3, [pc, #24]	@ (8002aa0 <HAL_RCC_OscConfig+0x470>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1f0      	bne.n	8002a74 <HAL_RCC_OscConfig+0x444>
 8002a92:	e03d      	b.n	8002b10 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d107      	bne.n	8002aac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e038      	b.n	8002b12 <HAL_RCC_OscConfig+0x4e2>
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	40007000 	.word	0x40007000
 8002aa8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002aac:	4b1b      	ldr	r3, [pc, #108]	@ (8002b1c <HAL_RCC_OscConfig+0x4ec>)
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d028      	beq.n	8002b0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d121      	bne.n	8002b0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d11a      	bne.n	8002b0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ad6:	68fa      	ldr	r2, [r7, #12]
 8002ad8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002adc:	4013      	ands	r3, r2
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002ae2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d111      	bne.n	8002b0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002af2:	085b      	lsrs	r3, r3, #1
 8002af4:	3b01      	subs	r3, #1
 8002af6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d107      	bne.n	8002b0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b06:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d001      	beq.n	8002b10 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e000      	b.n	8002b12 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3718      	adds	r7, #24
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	40023800 	.word	0x40023800

08002b20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d101      	bne.n	8002b34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e0cc      	b.n	8002cce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b34:	4b68      	ldr	r3, [pc, #416]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0307 	and.w	r3, r3, #7
 8002b3c:	683a      	ldr	r2, [r7, #0]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d90c      	bls.n	8002b5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b42:	4b65      	ldr	r3, [pc, #404]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b44:	683a      	ldr	r2, [r7, #0]
 8002b46:	b2d2      	uxtb	r2, r2
 8002b48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b4a:	4b63      	ldr	r3, [pc, #396]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0307 	and.w	r3, r3, #7
 8002b52:	683a      	ldr	r2, [r7, #0]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d001      	beq.n	8002b5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e0b8      	b.n	8002cce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0302 	and.w	r3, r3, #2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d020      	beq.n	8002baa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0304 	and.w	r3, r3, #4
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d005      	beq.n	8002b80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b74:	4b59      	ldr	r3, [pc, #356]	@ (8002cdc <HAL_RCC_ClockConfig+0x1bc>)
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	4a58      	ldr	r2, [pc, #352]	@ (8002cdc <HAL_RCC_ClockConfig+0x1bc>)
 8002b7a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002b7e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0308 	and.w	r3, r3, #8
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d005      	beq.n	8002b98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b8c:	4b53      	ldr	r3, [pc, #332]	@ (8002cdc <HAL_RCC_ClockConfig+0x1bc>)
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	4a52      	ldr	r2, [pc, #328]	@ (8002cdc <HAL_RCC_ClockConfig+0x1bc>)
 8002b92:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002b96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b98:	4b50      	ldr	r3, [pc, #320]	@ (8002cdc <HAL_RCC_ClockConfig+0x1bc>)
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	494d      	ldr	r1, [pc, #308]	@ (8002cdc <HAL_RCC_ClockConfig+0x1bc>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d044      	beq.n	8002c40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d107      	bne.n	8002bce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bbe:	4b47      	ldr	r3, [pc, #284]	@ (8002cdc <HAL_RCC_ClockConfig+0x1bc>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d119      	bne.n	8002bfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e07f      	b.n	8002cce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d003      	beq.n	8002bde <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bda:	2b03      	cmp	r3, #3
 8002bdc:	d107      	bne.n	8002bee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bde:	4b3f      	ldr	r3, [pc, #252]	@ (8002cdc <HAL_RCC_ClockConfig+0x1bc>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d109      	bne.n	8002bfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e06f      	b.n	8002cce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bee:	4b3b      	ldr	r3, [pc, #236]	@ (8002cdc <HAL_RCC_ClockConfig+0x1bc>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0302 	and.w	r3, r3, #2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d101      	bne.n	8002bfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e067      	b.n	8002cce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bfe:	4b37      	ldr	r3, [pc, #220]	@ (8002cdc <HAL_RCC_ClockConfig+0x1bc>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f023 0203 	bic.w	r2, r3, #3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	4934      	ldr	r1, [pc, #208]	@ (8002cdc <HAL_RCC_ClockConfig+0x1bc>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c10:	f7fe fad2 	bl	80011b8 <HAL_GetTick>
 8002c14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c16:	e00a      	b.n	8002c2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c18:	f7fe face 	bl	80011b8 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e04f      	b.n	8002cce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c2e:	4b2b      	ldr	r3, [pc, #172]	@ (8002cdc <HAL_RCC_ClockConfig+0x1bc>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f003 020c 	and.w	r2, r3, #12
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d1eb      	bne.n	8002c18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c40:	4b25      	ldr	r3, [pc, #148]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0307 	and.w	r3, r3, #7
 8002c48:	683a      	ldr	r2, [r7, #0]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d20c      	bcs.n	8002c68 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c4e:	4b22      	ldr	r3, [pc, #136]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c50:	683a      	ldr	r2, [r7, #0]
 8002c52:	b2d2      	uxtb	r2, r2
 8002c54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c56:	4b20      	ldr	r3, [pc, #128]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0307 	and.w	r3, r3, #7
 8002c5e:	683a      	ldr	r2, [r7, #0]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d001      	beq.n	8002c68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e032      	b.n	8002cce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0304 	and.w	r3, r3, #4
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d008      	beq.n	8002c86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c74:	4b19      	ldr	r3, [pc, #100]	@ (8002cdc <HAL_RCC_ClockConfig+0x1bc>)
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	4916      	ldr	r1, [pc, #88]	@ (8002cdc <HAL_RCC_ClockConfig+0x1bc>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0308 	and.w	r3, r3, #8
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d009      	beq.n	8002ca6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c92:	4b12      	ldr	r3, [pc, #72]	@ (8002cdc <HAL_RCC_ClockConfig+0x1bc>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	00db      	lsls	r3, r3, #3
 8002ca0:	490e      	ldr	r1, [pc, #56]	@ (8002cdc <HAL_RCC_ClockConfig+0x1bc>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ca6:	f000 f821 	bl	8002cec <HAL_RCC_GetSysClockFreq>
 8002caa:	4602      	mov	r2, r0
 8002cac:	4b0b      	ldr	r3, [pc, #44]	@ (8002cdc <HAL_RCC_ClockConfig+0x1bc>)
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	091b      	lsrs	r3, r3, #4
 8002cb2:	f003 030f 	and.w	r3, r3, #15
 8002cb6:	490a      	ldr	r1, [pc, #40]	@ (8002ce0 <HAL_RCC_ClockConfig+0x1c0>)
 8002cb8:	5ccb      	ldrb	r3, [r1, r3]
 8002cba:	fa22 f303 	lsr.w	r3, r2, r3
 8002cbe:	4a09      	ldr	r2, [pc, #36]	@ (8002ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002cc2:	4b09      	ldr	r3, [pc, #36]	@ (8002ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7fe fa32 	bl	8001130 <HAL_InitTick>

  return HAL_OK;
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3710      	adds	r7, #16
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	40023c00 	.word	0x40023c00
 8002cdc:	40023800 	.word	0x40023800
 8002ce0:	08004b98 	.word	0x08004b98
 8002ce4:	20000000 	.word	0x20000000
 8002ce8:	20000004 	.word	0x20000004

08002cec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cf0:	b094      	sub	sp, #80	@ 0x50
 8002cf2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002d00:	2300      	movs	r3, #0
 8002d02:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d04:	4b79      	ldr	r3, [pc, #484]	@ (8002eec <HAL_RCC_GetSysClockFreq+0x200>)
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	f003 030c 	and.w	r3, r3, #12
 8002d0c:	2b08      	cmp	r3, #8
 8002d0e:	d00d      	beq.n	8002d2c <HAL_RCC_GetSysClockFreq+0x40>
 8002d10:	2b08      	cmp	r3, #8
 8002d12:	f200 80e1 	bhi.w	8002ed8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d002      	beq.n	8002d20 <HAL_RCC_GetSysClockFreq+0x34>
 8002d1a:	2b04      	cmp	r3, #4
 8002d1c:	d003      	beq.n	8002d26 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d1e:	e0db      	b.n	8002ed8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d20:	4b73      	ldr	r3, [pc, #460]	@ (8002ef0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d22:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d24:	e0db      	b.n	8002ede <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d26:	4b73      	ldr	r3, [pc, #460]	@ (8002ef4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002d28:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d2a:	e0d8      	b.n	8002ede <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d2c:	4b6f      	ldr	r3, [pc, #444]	@ (8002eec <HAL_RCC_GetSysClockFreq+0x200>)
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d34:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d36:	4b6d      	ldr	r3, [pc, #436]	@ (8002eec <HAL_RCC_GetSysClockFreq+0x200>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d063      	beq.n	8002e0a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d42:	4b6a      	ldr	r3, [pc, #424]	@ (8002eec <HAL_RCC_GetSysClockFreq+0x200>)
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	099b      	lsrs	r3, r3, #6
 8002d48:	2200      	movs	r2, #0
 8002d4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002d4c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002d4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d54:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d56:	2300      	movs	r3, #0
 8002d58:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d5a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002d5e:	4622      	mov	r2, r4
 8002d60:	462b      	mov	r3, r5
 8002d62:	f04f 0000 	mov.w	r0, #0
 8002d66:	f04f 0100 	mov.w	r1, #0
 8002d6a:	0159      	lsls	r1, r3, #5
 8002d6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d70:	0150      	lsls	r0, r2, #5
 8002d72:	4602      	mov	r2, r0
 8002d74:	460b      	mov	r3, r1
 8002d76:	4621      	mov	r1, r4
 8002d78:	1a51      	subs	r1, r2, r1
 8002d7a:	6139      	str	r1, [r7, #16]
 8002d7c:	4629      	mov	r1, r5
 8002d7e:	eb63 0301 	sbc.w	r3, r3, r1
 8002d82:	617b      	str	r3, [r7, #20]
 8002d84:	f04f 0200 	mov.w	r2, #0
 8002d88:	f04f 0300 	mov.w	r3, #0
 8002d8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d90:	4659      	mov	r1, fp
 8002d92:	018b      	lsls	r3, r1, #6
 8002d94:	4651      	mov	r1, sl
 8002d96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d9a:	4651      	mov	r1, sl
 8002d9c:	018a      	lsls	r2, r1, #6
 8002d9e:	4651      	mov	r1, sl
 8002da0:	ebb2 0801 	subs.w	r8, r2, r1
 8002da4:	4659      	mov	r1, fp
 8002da6:	eb63 0901 	sbc.w	r9, r3, r1
 8002daa:	f04f 0200 	mov.w	r2, #0
 8002dae:	f04f 0300 	mov.w	r3, #0
 8002db2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002db6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002dba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002dbe:	4690      	mov	r8, r2
 8002dc0:	4699      	mov	r9, r3
 8002dc2:	4623      	mov	r3, r4
 8002dc4:	eb18 0303 	adds.w	r3, r8, r3
 8002dc8:	60bb      	str	r3, [r7, #8]
 8002dca:	462b      	mov	r3, r5
 8002dcc:	eb49 0303 	adc.w	r3, r9, r3
 8002dd0:	60fb      	str	r3, [r7, #12]
 8002dd2:	f04f 0200 	mov.w	r2, #0
 8002dd6:	f04f 0300 	mov.w	r3, #0
 8002dda:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002dde:	4629      	mov	r1, r5
 8002de0:	024b      	lsls	r3, r1, #9
 8002de2:	4621      	mov	r1, r4
 8002de4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002de8:	4621      	mov	r1, r4
 8002dea:	024a      	lsls	r2, r1, #9
 8002dec:	4610      	mov	r0, r2
 8002dee:	4619      	mov	r1, r3
 8002df0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002df2:	2200      	movs	r2, #0
 8002df4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002df6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002df8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002dfc:	f7fd f9e4 	bl	80001c8 <__aeabi_uldivmod>
 8002e00:	4602      	mov	r2, r0
 8002e02:	460b      	mov	r3, r1
 8002e04:	4613      	mov	r3, r2
 8002e06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e08:	e058      	b.n	8002ebc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e0a:	4b38      	ldr	r3, [pc, #224]	@ (8002eec <HAL_RCC_GetSysClockFreq+0x200>)
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	099b      	lsrs	r3, r3, #6
 8002e10:	2200      	movs	r2, #0
 8002e12:	4618      	mov	r0, r3
 8002e14:	4611      	mov	r1, r2
 8002e16:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e1a:	623b      	str	r3, [r7, #32]
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e20:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e24:	4642      	mov	r2, r8
 8002e26:	464b      	mov	r3, r9
 8002e28:	f04f 0000 	mov.w	r0, #0
 8002e2c:	f04f 0100 	mov.w	r1, #0
 8002e30:	0159      	lsls	r1, r3, #5
 8002e32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e36:	0150      	lsls	r0, r2, #5
 8002e38:	4602      	mov	r2, r0
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	4641      	mov	r1, r8
 8002e3e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e42:	4649      	mov	r1, r9
 8002e44:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e48:	f04f 0200 	mov.w	r2, #0
 8002e4c:	f04f 0300 	mov.w	r3, #0
 8002e50:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e54:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e58:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e5c:	ebb2 040a 	subs.w	r4, r2, sl
 8002e60:	eb63 050b 	sbc.w	r5, r3, fp
 8002e64:	f04f 0200 	mov.w	r2, #0
 8002e68:	f04f 0300 	mov.w	r3, #0
 8002e6c:	00eb      	lsls	r3, r5, #3
 8002e6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e72:	00e2      	lsls	r2, r4, #3
 8002e74:	4614      	mov	r4, r2
 8002e76:	461d      	mov	r5, r3
 8002e78:	4643      	mov	r3, r8
 8002e7a:	18e3      	adds	r3, r4, r3
 8002e7c:	603b      	str	r3, [r7, #0]
 8002e7e:	464b      	mov	r3, r9
 8002e80:	eb45 0303 	adc.w	r3, r5, r3
 8002e84:	607b      	str	r3, [r7, #4]
 8002e86:	f04f 0200 	mov.w	r2, #0
 8002e8a:	f04f 0300 	mov.w	r3, #0
 8002e8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e92:	4629      	mov	r1, r5
 8002e94:	028b      	lsls	r3, r1, #10
 8002e96:	4621      	mov	r1, r4
 8002e98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e9c:	4621      	mov	r1, r4
 8002e9e:	028a      	lsls	r2, r1, #10
 8002ea0:	4610      	mov	r0, r2
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	61bb      	str	r3, [r7, #24]
 8002eaa:	61fa      	str	r2, [r7, #28]
 8002eac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002eb0:	f7fd f98a 	bl	80001c8 <__aeabi_uldivmod>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	4613      	mov	r3, r2
 8002eba:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8002eec <HAL_RCC_GetSysClockFreq+0x200>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	0c1b      	lsrs	r3, r3, #16
 8002ec2:	f003 0303 	and.w	r3, r3, #3
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002ecc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002ece:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ed4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ed6:	e002      	b.n	8002ede <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ed8:	4b05      	ldr	r3, [pc, #20]	@ (8002ef0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002eda:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002edc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ede:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3750      	adds	r7, #80	@ 0x50
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002eea:	bf00      	nop
 8002eec:	40023800 	.word	0x40023800
 8002ef0:	00f42400 	.word	0x00f42400
 8002ef4:	007a1200 	.word	0x007a1200

08002ef8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d101      	bne.n	8002f0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e041      	b.n	8002f8e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d106      	bne.n	8002f24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f7fd ff32 	bl	8000d88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2202      	movs	r2, #2
 8002f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	3304      	adds	r3, #4
 8002f34:	4619      	mov	r1, r3
 8002f36:	4610      	mov	r0, r2
 8002f38:	f000 fd8e 	bl	8003a58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3708      	adds	r7, #8
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b082      	sub	sp, #8
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d101      	bne.n	8002fa8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e041      	b.n	800302c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d106      	bne.n	8002fc2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f000 f839 	bl	8003034 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2202      	movs	r2, #2
 8002fc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	3304      	adds	r3, #4
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	4610      	mov	r0, r2
 8002fd6:	f000 fd3f 	bl	8003a58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2201      	movs	r2, #1
 8002fde:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2201      	movs	r2, #1
 8002fee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2201      	movs	r2, #1
 8003006:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2201      	movs	r2, #1
 800300e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2201      	movs	r2, #1
 8003016:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2201      	movs	r2, #1
 800301e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3708      	adds	r7, #8
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b086      	sub	sp, #24
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]
 8003054:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003056:	2300      	movs	r3, #0
 8003058:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d109      	bne.n	8003074 <HAL_TIM_PWM_Start_DMA+0x2c>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003066:	b2db      	uxtb	r3, r3
 8003068:	2b02      	cmp	r3, #2
 800306a:	bf0c      	ite	eq
 800306c:	2301      	moveq	r3, #1
 800306e:	2300      	movne	r3, #0
 8003070:	b2db      	uxtb	r3, r3
 8003072:	e022      	b.n	80030ba <HAL_TIM_PWM_Start_DMA+0x72>
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	2b04      	cmp	r3, #4
 8003078:	d109      	bne.n	800308e <HAL_TIM_PWM_Start_DMA+0x46>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b02      	cmp	r3, #2
 8003084:	bf0c      	ite	eq
 8003086:	2301      	moveq	r3, #1
 8003088:	2300      	movne	r3, #0
 800308a:	b2db      	uxtb	r3, r3
 800308c:	e015      	b.n	80030ba <HAL_TIM_PWM_Start_DMA+0x72>
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	2b08      	cmp	r3, #8
 8003092:	d109      	bne.n	80030a8 <HAL_TIM_PWM_Start_DMA+0x60>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800309a:	b2db      	uxtb	r3, r3
 800309c:	2b02      	cmp	r3, #2
 800309e:	bf0c      	ite	eq
 80030a0:	2301      	moveq	r3, #1
 80030a2:	2300      	movne	r3, #0
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	e008      	b.n	80030ba <HAL_TIM_PWM_Start_DMA+0x72>
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	bf0c      	ite	eq
 80030b4:	2301      	moveq	r3, #1
 80030b6:	2300      	movne	r3, #0
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80030be:	2302      	movs	r3, #2
 80030c0:	e171      	b.n	80033a6 <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d109      	bne.n	80030dc <HAL_TIM_PWM_Start_DMA+0x94>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	bf0c      	ite	eq
 80030d4:	2301      	moveq	r3, #1
 80030d6:	2300      	movne	r3, #0
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	e022      	b.n	8003122 <HAL_TIM_PWM_Start_DMA+0xda>
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	2b04      	cmp	r3, #4
 80030e0:	d109      	bne.n	80030f6 <HAL_TIM_PWM_Start_DMA+0xae>
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	bf0c      	ite	eq
 80030ee:	2301      	moveq	r3, #1
 80030f0:	2300      	movne	r3, #0
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	e015      	b.n	8003122 <HAL_TIM_PWM_Start_DMA+0xda>
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	2b08      	cmp	r3, #8
 80030fa:	d109      	bne.n	8003110 <HAL_TIM_PWM_Start_DMA+0xc8>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003102:	b2db      	uxtb	r3, r3
 8003104:	2b01      	cmp	r3, #1
 8003106:	bf0c      	ite	eq
 8003108:	2301      	moveq	r3, #1
 800310a:	2300      	movne	r3, #0
 800310c:	b2db      	uxtb	r3, r3
 800310e:	e008      	b.n	8003122 <HAL_TIM_PWM_Start_DMA+0xda>
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003116:	b2db      	uxtb	r3, r3
 8003118:	2b01      	cmp	r3, #1
 800311a:	bf0c      	ite	eq
 800311c:	2301      	moveq	r3, #1
 800311e:	2300      	movne	r3, #0
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d024      	beq.n	8003170 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d002      	beq.n	8003132 <HAL_TIM_PWM_Start_DMA+0xea>
 800312c:	887b      	ldrh	r3, [r7, #2]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d101      	bne.n	8003136 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e137      	b.n	80033a6 <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d104      	bne.n	8003146 <HAL_TIM_PWM_Start_DMA+0xfe>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2202      	movs	r2, #2
 8003140:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003144:	e016      	b.n	8003174 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	2b04      	cmp	r3, #4
 800314a:	d104      	bne.n	8003156 <HAL_TIM_PWM_Start_DMA+0x10e>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2202      	movs	r2, #2
 8003150:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003154:	e00e      	b.n	8003174 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	2b08      	cmp	r3, #8
 800315a:	d104      	bne.n	8003166 <HAL_TIM_PWM_Start_DMA+0x11e>
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2202      	movs	r2, #2
 8003160:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003164:	e006      	b.n	8003174 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2202      	movs	r2, #2
 800316a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800316e:	e001      	b.n	8003174 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e118      	b.n	80033a6 <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	2b0c      	cmp	r3, #12
 8003178:	f200 80ae 	bhi.w	80032d8 <HAL_TIM_PWM_Start_DMA+0x290>
 800317c:	a201      	add	r2, pc, #4	@ (adr r2, 8003184 <HAL_TIM_PWM_Start_DMA+0x13c>)
 800317e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003182:	bf00      	nop
 8003184:	080031b9 	.word	0x080031b9
 8003188:	080032d9 	.word	0x080032d9
 800318c:	080032d9 	.word	0x080032d9
 8003190:	080032d9 	.word	0x080032d9
 8003194:	08003201 	.word	0x08003201
 8003198:	080032d9 	.word	0x080032d9
 800319c:	080032d9 	.word	0x080032d9
 80031a0:	080032d9 	.word	0x080032d9
 80031a4:	08003249 	.word	0x08003249
 80031a8:	080032d9 	.word	0x080032d9
 80031ac:	080032d9 	.word	0x080032d9
 80031b0:	080032d9 	.word	0x080032d9
 80031b4:	08003291 	.word	0x08003291
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031bc:	4a7c      	ldr	r2, [pc, #496]	@ (80033b0 <HAL_TIM_PWM_Start_DMA+0x368>)
 80031be:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c4:	4a7b      	ldr	r2, [pc, #492]	@ (80033b4 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80031c6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031cc:	4a7a      	ldr	r2, [pc, #488]	@ (80033b8 <HAL_TIM_PWM_Start_DMA+0x370>)
 80031ce:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80031d4:	6879      	ldr	r1, [r7, #4]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	3334      	adds	r3, #52	@ 0x34
 80031dc:	461a      	mov	r2, r3
 80031de:	887b      	ldrh	r3, [r7, #2]
 80031e0:	f7fe fda6 	bl	8001d30 <HAL_DMA_Start_IT>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d001      	beq.n	80031ee <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e0db      	b.n	80033a6 <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68da      	ldr	r2, [r3, #12]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031fc:	60da      	str	r2, [r3, #12]
      break;
 80031fe:	e06e      	b.n	80032de <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003204:	4a6a      	ldr	r2, [pc, #424]	@ (80033b0 <HAL_TIM_PWM_Start_DMA+0x368>)
 8003206:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800320c:	4a69      	ldr	r2, [pc, #420]	@ (80033b4 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800320e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003214:	4a68      	ldr	r2, [pc, #416]	@ (80033b8 <HAL_TIM_PWM_Start_DMA+0x370>)
 8003216:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800321c:	6879      	ldr	r1, [r7, #4]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	3338      	adds	r3, #56	@ 0x38
 8003224:	461a      	mov	r2, r3
 8003226:	887b      	ldrh	r3, [r7, #2]
 8003228:	f7fe fd82 	bl	8001d30 <HAL_DMA_Start_IT>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d001      	beq.n	8003236 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e0b7      	b.n	80033a6 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68da      	ldr	r2, [r3, #12]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003244:	60da      	str	r2, [r3, #12]
      break;
 8003246:	e04a      	b.n	80032de <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800324c:	4a58      	ldr	r2, [pc, #352]	@ (80033b0 <HAL_TIM_PWM_Start_DMA+0x368>)
 800324e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003254:	4a57      	ldr	r2, [pc, #348]	@ (80033b4 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003256:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800325c:	4a56      	ldr	r2, [pc, #344]	@ (80033b8 <HAL_TIM_PWM_Start_DMA+0x370>)
 800325e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8003264:	6879      	ldr	r1, [r7, #4]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	333c      	adds	r3, #60	@ 0x3c
 800326c:	461a      	mov	r2, r3
 800326e:	887b      	ldrh	r3, [r7, #2]
 8003270:	f7fe fd5e 	bl	8001d30 <HAL_DMA_Start_IT>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d001      	beq.n	800327e <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e093      	b.n	80033a6 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68da      	ldr	r2, [r3, #12]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800328c:	60da      	str	r2, [r3, #12]
      break;
 800328e:	e026      	b.n	80032de <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003294:	4a46      	ldr	r2, [pc, #280]	@ (80033b0 <HAL_TIM_PWM_Start_DMA+0x368>)
 8003296:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800329c:	4a45      	ldr	r2, [pc, #276]	@ (80033b4 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800329e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a4:	4a44      	ldr	r2, [pc, #272]	@ (80033b8 <HAL_TIM_PWM_Start_DMA+0x370>)
 80032a6:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80032ac:	6879      	ldr	r1, [r7, #4]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	3340      	adds	r3, #64	@ 0x40
 80032b4:	461a      	mov	r2, r3
 80032b6:	887b      	ldrh	r3, [r7, #2]
 80032b8:	f7fe fd3a 	bl	8001d30 <HAL_DMA_Start_IT>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e06f      	b.n	80033a6 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68da      	ldr	r2, [r3, #12]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80032d4:	60da      	str	r2, [r3, #12]
      break;
 80032d6:	e002      	b.n	80032de <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	75fb      	strb	r3, [r7, #23]
      break;
 80032dc:	bf00      	nop
  }

  if (status == HAL_OK)
 80032de:	7dfb      	ldrb	r3, [r7, #23]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d15f      	bne.n	80033a4 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2201      	movs	r2, #1
 80032ea:	68b9      	ldr	r1, [r7, #8]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f000 fea3 	bl	8004038 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a31      	ldr	r2, [pc, #196]	@ (80033bc <HAL_TIM_PWM_Start_DMA+0x374>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d004      	beq.n	8003306 <HAL_TIM_PWM_Start_DMA+0x2be>
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a2f      	ldr	r2, [pc, #188]	@ (80033c0 <HAL_TIM_PWM_Start_DMA+0x378>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d101      	bne.n	800330a <HAL_TIM_PWM_Start_DMA+0x2c2>
 8003306:	2301      	movs	r3, #1
 8003308:	e000      	b.n	800330c <HAL_TIM_PWM_Start_DMA+0x2c4>
 800330a:	2300      	movs	r3, #0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d007      	beq.n	8003320 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800331e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a25      	ldr	r2, [pc, #148]	@ (80033bc <HAL_TIM_PWM_Start_DMA+0x374>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d022      	beq.n	8003370 <HAL_TIM_PWM_Start_DMA+0x328>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003332:	d01d      	beq.n	8003370 <HAL_TIM_PWM_Start_DMA+0x328>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a22      	ldr	r2, [pc, #136]	@ (80033c4 <HAL_TIM_PWM_Start_DMA+0x37c>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d018      	beq.n	8003370 <HAL_TIM_PWM_Start_DMA+0x328>
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a21      	ldr	r2, [pc, #132]	@ (80033c8 <HAL_TIM_PWM_Start_DMA+0x380>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d013      	beq.n	8003370 <HAL_TIM_PWM_Start_DMA+0x328>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a1f      	ldr	r2, [pc, #124]	@ (80033cc <HAL_TIM_PWM_Start_DMA+0x384>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d00e      	beq.n	8003370 <HAL_TIM_PWM_Start_DMA+0x328>
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a1a      	ldr	r2, [pc, #104]	@ (80033c0 <HAL_TIM_PWM_Start_DMA+0x378>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d009      	beq.n	8003370 <HAL_TIM_PWM_Start_DMA+0x328>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a1b      	ldr	r2, [pc, #108]	@ (80033d0 <HAL_TIM_PWM_Start_DMA+0x388>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d004      	beq.n	8003370 <HAL_TIM_PWM_Start_DMA+0x328>
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a1a      	ldr	r2, [pc, #104]	@ (80033d4 <HAL_TIM_PWM_Start_DMA+0x38c>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d111      	bne.n	8003394 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f003 0307 	and.w	r3, r3, #7
 800337a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	2b06      	cmp	r3, #6
 8003380:	d010      	beq.n	80033a4 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f042 0201 	orr.w	r2, r2, #1
 8003390:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003392:	e007      	b.n	80033a4 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f042 0201 	orr.w	r2, r2, #1
 80033a2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80033a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3718      	adds	r7, #24
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	08003949 	.word	0x08003949
 80033b4:	080039f1 	.word	0x080039f1
 80033b8:	080038b7 	.word	0x080038b7
 80033bc:	40010000 	.word	0x40010000
 80033c0:	40010400 	.word	0x40010400
 80033c4:	40000400 	.word	0x40000400
 80033c8:	40000800 	.word	0x40000800
 80033cc:	40000c00 	.word	0x40000c00
 80033d0:	40014000 	.word	0x40014000
 80033d4:	40001800 	.word	0x40001800

080033d8 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033e2:	2300      	movs	r3, #0
 80033e4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	2b0c      	cmp	r3, #12
 80033ea:	d855      	bhi.n	8003498 <HAL_TIM_PWM_Stop_DMA+0xc0>
 80033ec:	a201      	add	r2, pc, #4	@ (adr r2, 80033f4 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80033ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f2:	bf00      	nop
 80033f4:	08003429 	.word	0x08003429
 80033f8:	08003499 	.word	0x08003499
 80033fc:	08003499 	.word	0x08003499
 8003400:	08003499 	.word	0x08003499
 8003404:	08003445 	.word	0x08003445
 8003408:	08003499 	.word	0x08003499
 800340c:	08003499 	.word	0x08003499
 8003410:	08003499 	.word	0x08003499
 8003414:	08003461 	.word	0x08003461
 8003418:	08003499 	.word	0x08003499
 800341c:	08003499 	.word	0x08003499
 8003420:	08003499 	.word	0x08003499
 8003424:	0800347d 	.word	0x0800347d
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68da      	ldr	r2, [r3, #12]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003436:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800343c:	4618      	mov	r0, r3
 800343e:	f7fe fccf 	bl	8001de0 <HAL_DMA_Abort_IT>
      break;
 8003442:	e02c      	b.n	800349e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68da      	ldr	r2, [r3, #12]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003452:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003458:	4618      	mov	r0, r3
 800345a:	f7fe fcc1 	bl	8001de0 <HAL_DMA_Abort_IT>
      break;
 800345e:	e01e      	b.n	800349e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68da      	ldr	r2, [r3, #12]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800346e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003474:	4618      	mov	r0, r3
 8003476:	f7fe fcb3 	bl	8001de0 <HAL_DMA_Abort_IT>
      break;
 800347a:	e010      	b.n	800349e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68da      	ldr	r2, [r3, #12]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800348a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003490:	4618      	mov	r0, r3
 8003492:	f7fe fca5 	bl	8001de0 <HAL_DMA_Abort_IT>
      break;
 8003496:	e002      	b.n	800349e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	73fb      	strb	r3, [r7, #15]
      break;
 800349c:	bf00      	nop
  }

  if (status == HAL_OK)
 800349e:	7bfb      	ldrb	r3, [r7, #15]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d161      	bne.n	8003568 <HAL_TIM_PWM_Stop_DMA+0x190>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2200      	movs	r2, #0
 80034aa:	6839      	ldr	r1, [r7, #0]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f000 fdc3 	bl	8004038 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a2f      	ldr	r2, [pc, #188]	@ (8003574 <HAL_TIM_PWM_Stop_DMA+0x19c>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d004      	beq.n	80034c6 <HAL_TIM_PWM_Stop_DMA+0xee>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a2d      	ldr	r2, [pc, #180]	@ (8003578 <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d101      	bne.n	80034ca <HAL_TIM_PWM_Stop_DMA+0xf2>
 80034c6:	2301      	movs	r3, #1
 80034c8:	e000      	b.n	80034cc <HAL_TIM_PWM_Stop_DMA+0xf4>
 80034ca:	2300      	movs	r3, #0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d017      	beq.n	8003500 <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6a1a      	ldr	r2, [r3, #32]
 80034d6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80034da:	4013      	ands	r3, r2
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d10f      	bne.n	8003500 <HAL_TIM_PWM_Stop_DMA+0x128>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	6a1a      	ldr	r2, [r3, #32]
 80034e6:	f240 4344 	movw	r3, #1092	@ 0x444
 80034ea:	4013      	ands	r3, r2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d107      	bne.n	8003500 <HAL_TIM_PWM_Stop_DMA+0x128>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80034fe:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	6a1a      	ldr	r2, [r3, #32]
 8003506:	f241 1311 	movw	r3, #4369	@ 0x1111
 800350a:	4013      	ands	r3, r2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d10f      	bne.n	8003530 <HAL_TIM_PWM_Stop_DMA+0x158>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	6a1a      	ldr	r2, [r3, #32]
 8003516:	f240 4344 	movw	r3, #1092	@ 0x444
 800351a:	4013      	ands	r3, r2
 800351c:	2b00      	cmp	r3, #0
 800351e:	d107      	bne.n	8003530 <HAL_TIM_PWM_Stop_DMA+0x158>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f022 0201 	bic.w	r2, r2, #1
 800352e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d104      	bne.n	8003540 <HAL_TIM_PWM_Stop_DMA+0x168>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2201      	movs	r2, #1
 800353a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800353e:	e013      	b.n	8003568 <HAL_TIM_PWM_Stop_DMA+0x190>
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	2b04      	cmp	r3, #4
 8003544:	d104      	bne.n	8003550 <HAL_TIM_PWM_Stop_DMA+0x178>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2201      	movs	r2, #1
 800354a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800354e:	e00b      	b.n	8003568 <HAL_TIM_PWM_Stop_DMA+0x190>
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	2b08      	cmp	r3, #8
 8003554:	d104      	bne.n	8003560 <HAL_TIM_PWM_Stop_DMA+0x188>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2201      	movs	r2, #1
 800355a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800355e:	e003      	b.n	8003568 <HAL_TIM_PWM_Stop_DMA+0x190>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8003568:	7bfb      	ldrb	r3, [r7, #15]
}
 800356a:	4618      	mov	r0, r3
 800356c:	3710      	adds	r7, #16
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	40010000 	.word	0x40010000
 8003578:	40010400 	.word	0x40010400

0800357c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003588:	2300      	movs	r3, #0
 800358a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003592:	2b01      	cmp	r3, #1
 8003594:	d101      	bne.n	800359a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003596:	2302      	movs	r3, #2
 8003598:	e0ae      	b.n	80036f8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2201      	movs	r2, #1
 800359e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2b0c      	cmp	r3, #12
 80035a6:	f200 809f 	bhi.w	80036e8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80035aa:	a201      	add	r2, pc, #4	@ (adr r2, 80035b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80035ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035b0:	080035e5 	.word	0x080035e5
 80035b4:	080036e9 	.word	0x080036e9
 80035b8:	080036e9 	.word	0x080036e9
 80035bc:	080036e9 	.word	0x080036e9
 80035c0:	08003625 	.word	0x08003625
 80035c4:	080036e9 	.word	0x080036e9
 80035c8:	080036e9 	.word	0x080036e9
 80035cc:	080036e9 	.word	0x080036e9
 80035d0:	08003667 	.word	0x08003667
 80035d4:	080036e9 	.word	0x080036e9
 80035d8:	080036e9 	.word	0x080036e9
 80035dc:	080036e9 	.word	0x080036e9
 80035e0:	080036a7 	.word	0x080036a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68b9      	ldr	r1, [r7, #8]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f000 fada 	bl	8003ba4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	699a      	ldr	r2, [r3, #24]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f042 0208 	orr.w	r2, r2, #8
 80035fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	699a      	ldr	r2, [r3, #24]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f022 0204 	bic.w	r2, r2, #4
 800360e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	6999      	ldr	r1, [r3, #24]
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	691a      	ldr	r2, [r3, #16]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	430a      	orrs	r2, r1
 8003620:	619a      	str	r2, [r3, #24]
      break;
 8003622:	e064      	b.n	80036ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68b9      	ldr	r1, [r7, #8]
 800362a:	4618      	mov	r0, r3
 800362c:	f000 fb2a 	bl	8003c84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	699a      	ldr	r2, [r3, #24]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800363e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	699a      	ldr	r2, [r3, #24]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800364e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	6999      	ldr	r1, [r3, #24]
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	021a      	lsls	r2, r3, #8
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	430a      	orrs	r2, r1
 8003662:	619a      	str	r2, [r3, #24]
      break;
 8003664:	e043      	b.n	80036ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68b9      	ldr	r1, [r7, #8]
 800366c:	4618      	mov	r0, r3
 800366e:	f000 fb7f 	bl	8003d70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	69da      	ldr	r2, [r3, #28]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f042 0208 	orr.w	r2, r2, #8
 8003680:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	69da      	ldr	r2, [r3, #28]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f022 0204 	bic.w	r2, r2, #4
 8003690:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	69d9      	ldr	r1, [r3, #28]
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	691a      	ldr	r2, [r3, #16]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	430a      	orrs	r2, r1
 80036a2:	61da      	str	r2, [r3, #28]
      break;
 80036a4:	e023      	b.n	80036ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68b9      	ldr	r1, [r7, #8]
 80036ac:	4618      	mov	r0, r3
 80036ae:	f000 fbd3 	bl	8003e58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	69da      	ldr	r2, [r3, #28]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	69da      	ldr	r2, [r3, #28]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	69d9      	ldr	r1, [r3, #28]
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	021a      	lsls	r2, r3, #8
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	430a      	orrs	r2, r1
 80036e4:	61da      	str	r2, [r3, #28]
      break;
 80036e6:	e002      	b.n	80036ee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	75fb      	strb	r3, [r7, #23]
      break;
 80036ec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80036f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3718      	adds	r7, #24
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800370a:	2300      	movs	r3, #0
 800370c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003714:	2b01      	cmp	r3, #1
 8003716:	d101      	bne.n	800371c <HAL_TIM_ConfigClockSource+0x1c>
 8003718:	2302      	movs	r3, #2
 800371a:	e0b4      	b.n	8003886 <HAL_TIM_ConfigClockSource+0x186>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2202      	movs	r2, #2
 8003728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800373a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003742:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68ba      	ldr	r2, [r7, #8]
 800374a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003754:	d03e      	beq.n	80037d4 <HAL_TIM_ConfigClockSource+0xd4>
 8003756:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800375a:	f200 8087 	bhi.w	800386c <HAL_TIM_ConfigClockSource+0x16c>
 800375e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003762:	f000 8086 	beq.w	8003872 <HAL_TIM_ConfigClockSource+0x172>
 8003766:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800376a:	d87f      	bhi.n	800386c <HAL_TIM_ConfigClockSource+0x16c>
 800376c:	2b70      	cmp	r3, #112	@ 0x70
 800376e:	d01a      	beq.n	80037a6 <HAL_TIM_ConfigClockSource+0xa6>
 8003770:	2b70      	cmp	r3, #112	@ 0x70
 8003772:	d87b      	bhi.n	800386c <HAL_TIM_ConfigClockSource+0x16c>
 8003774:	2b60      	cmp	r3, #96	@ 0x60
 8003776:	d050      	beq.n	800381a <HAL_TIM_ConfigClockSource+0x11a>
 8003778:	2b60      	cmp	r3, #96	@ 0x60
 800377a:	d877      	bhi.n	800386c <HAL_TIM_ConfigClockSource+0x16c>
 800377c:	2b50      	cmp	r3, #80	@ 0x50
 800377e:	d03c      	beq.n	80037fa <HAL_TIM_ConfigClockSource+0xfa>
 8003780:	2b50      	cmp	r3, #80	@ 0x50
 8003782:	d873      	bhi.n	800386c <HAL_TIM_ConfigClockSource+0x16c>
 8003784:	2b40      	cmp	r3, #64	@ 0x40
 8003786:	d058      	beq.n	800383a <HAL_TIM_ConfigClockSource+0x13a>
 8003788:	2b40      	cmp	r3, #64	@ 0x40
 800378a:	d86f      	bhi.n	800386c <HAL_TIM_ConfigClockSource+0x16c>
 800378c:	2b30      	cmp	r3, #48	@ 0x30
 800378e:	d064      	beq.n	800385a <HAL_TIM_ConfigClockSource+0x15a>
 8003790:	2b30      	cmp	r3, #48	@ 0x30
 8003792:	d86b      	bhi.n	800386c <HAL_TIM_ConfigClockSource+0x16c>
 8003794:	2b20      	cmp	r3, #32
 8003796:	d060      	beq.n	800385a <HAL_TIM_ConfigClockSource+0x15a>
 8003798:	2b20      	cmp	r3, #32
 800379a:	d867      	bhi.n	800386c <HAL_TIM_ConfigClockSource+0x16c>
 800379c:	2b00      	cmp	r3, #0
 800379e:	d05c      	beq.n	800385a <HAL_TIM_ConfigClockSource+0x15a>
 80037a0:	2b10      	cmp	r3, #16
 80037a2:	d05a      	beq.n	800385a <HAL_TIM_ConfigClockSource+0x15a>
 80037a4:	e062      	b.n	800386c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80037b6:	f000 fc1f 	bl	8003ff8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80037c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68ba      	ldr	r2, [r7, #8]
 80037d0:	609a      	str	r2, [r3, #8]
      break;
 80037d2:	e04f      	b.n	8003874 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80037e4:	f000 fc08 	bl	8003ff8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	689a      	ldr	r2, [r3, #8]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80037f6:	609a      	str	r2, [r3, #8]
      break;
 80037f8:	e03c      	b.n	8003874 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003806:	461a      	mov	r2, r3
 8003808:	f000 fb7c 	bl	8003f04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2150      	movs	r1, #80	@ 0x50
 8003812:	4618      	mov	r0, r3
 8003814:	f000 fbd5 	bl	8003fc2 <TIM_ITRx_SetConfig>
      break;
 8003818:	e02c      	b.n	8003874 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003826:	461a      	mov	r2, r3
 8003828:	f000 fb9b 	bl	8003f62 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2160      	movs	r1, #96	@ 0x60
 8003832:	4618      	mov	r0, r3
 8003834:	f000 fbc5 	bl	8003fc2 <TIM_ITRx_SetConfig>
      break;
 8003838:	e01c      	b.n	8003874 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003846:	461a      	mov	r2, r3
 8003848:	f000 fb5c 	bl	8003f04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2140      	movs	r1, #64	@ 0x40
 8003852:	4618      	mov	r0, r3
 8003854:	f000 fbb5 	bl	8003fc2 <TIM_ITRx_SetConfig>
      break;
 8003858:	e00c      	b.n	8003874 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4619      	mov	r1, r3
 8003864:	4610      	mov	r0, r2
 8003866:	f000 fbac 	bl	8003fc2 <TIM_ITRx_SetConfig>
      break;
 800386a:	e003      	b.n	8003874 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	73fb      	strb	r3, [r7, #15]
      break;
 8003870:	e000      	b.n	8003874 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003872:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003884:	7bfb      	ldrb	r3, [r7, #15]
}
 8003886:	4618      	mov	r0, r3
 8003888:	3710      	adds	r7, #16
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}

0800388e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800388e:	b480      	push	{r7}
 8003890:	b083      	sub	sp, #12
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003896:	bf00      	nop
 8003898:	370c      	adds	r7, #12
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr

080038a2 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80038a2:	b480      	push	{r7}
 80038a4:	b083      	sub	sp, #12
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80038aa:	bf00      	nop
 80038ac:	370c      	adds	r7, #12
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr

080038b6 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80038b6:	b580      	push	{r7, lr}
 80038b8:	b084      	sub	sp, #16
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038c2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d107      	bne.n	80038de <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2201      	movs	r2, #1
 80038d2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80038dc:	e02a      	b.n	8003934 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d107      	bne.n	80038f8 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2202      	movs	r2, #2
 80038ec:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80038f6:	e01d      	b.n	8003934 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d107      	bne.n	8003912 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2204      	movs	r2, #4
 8003906:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003910:	e010      	b.n	8003934 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	429a      	cmp	r2, r3
 800391a:	d107      	bne.n	800392c <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2208      	movs	r2, #8
 8003920:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2201      	movs	r2, #1
 8003926:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800392a:	e003      	b.n	8003934 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003934:	68f8      	ldr	r0, [r7, #12]
 8003936:	f7ff ffb4 	bl	80038a2 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	771a      	strb	r2, [r3, #28]
}
 8003940:	bf00      	nop
 8003942:	3710      	adds	r7, #16
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003954:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	429a      	cmp	r2, r3
 800395e:	d10b      	bne.n	8003978 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2201      	movs	r2, #1
 8003964:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	69db      	ldr	r3, [r3, #28]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d136      	bne.n	80039dc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2201      	movs	r2, #1
 8003972:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003976:	e031      	b.n	80039dc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	429a      	cmp	r2, r3
 8003980:	d10b      	bne.n	800399a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2202      	movs	r2, #2
 8003986:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	69db      	ldr	r3, [r3, #28]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d125      	bne.n	80039dc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003998:	e020      	b.n	80039dc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d10b      	bne.n	80039bc <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2204      	movs	r2, #4
 80039a8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	69db      	ldr	r3, [r3, #28]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d114      	bne.n	80039dc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2201      	movs	r2, #1
 80039b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039ba:	e00f      	b.n	80039dc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d10a      	bne.n	80039dc <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2208      	movs	r2, #8
 80039ca:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	69db      	ldr	r3, [r3, #28]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d103      	bne.n	80039dc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039dc:	68f8      	ldr	r0, [r7, #12]
 80039de:	f7fc fdb9 	bl	8000554 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	771a      	strb	r2, [r3, #28]
}
 80039e8:	bf00      	nop
 80039ea:	3710      	adds	r7, #16
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039fc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d103      	bne.n	8003a10 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	771a      	strb	r2, [r3, #28]
 8003a0e:	e019      	b.n	8003a44 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d103      	bne.n	8003a22 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2202      	movs	r2, #2
 8003a1e:	771a      	strb	r2, [r3, #28]
 8003a20:	e010      	b.n	8003a44 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d103      	bne.n	8003a34 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2204      	movs	r2, #4
 8003a30:	771a      	strb	r2, [r3, #28]
 8003a32:	e007      	b.n	8003a44 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d102      	bne.n	8003a44 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2208      	movs	r2, #8
 8003a42:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003a44:	68f8      	ldr	r0, [r7, #12]
 8003a46:	f7ff ff22 	bl	800388e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	771a      	strb	r2, [r3, #28]
}
 8003a50:	bf00      	nop
 8003a52:	3710      	adds	r7, #16
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b085      	sub	sp, #20
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4a43      	ldr	r2, [pc, #268]	@ (8003b78 <TIM_Base_SetConfig+0x120>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d013      	beq.n	8003a98 <TIM_Base_SetConfig+0x40>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a76:	d00f      	beq.n	8003a98 <TIM_Base_SetConfig+0x40>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a40      	ldr	r2, [pc, #256]	@ (8003b7c <TIM_Base_SetConfig+0x124>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d00b      	beq.n	8003a98 <TIM_Base_SetConfig+0x40>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4a3f      	ldr	r2, [pc, #252]	@ (8003b80 <TIM_Base_SetConfig+0x128>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d007      	beq.n	8003a98 <TIM_Base_SetConfig+0x40>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a3e      	ldr	r2, [pc, #248]	@ (8003b84 <TIM_Base_SetConfig+0x12c>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d003      	beq.n	8003a98 <TIM_Base_SetConfig+0x40>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a3d      	ldr	r2, [pc, #244]	@ (8003b88 <TIM_Base_SetConfig+0x130>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d108      	bne.n	8003aaa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a32      	ldr	r2, [pc, #200]	@ (8003b78 <TIM_Base_SetConfig+0x120>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d02b      	beq.n	8003b0a <TIM_Base_SetConfig+0xb2>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ab8:	d027      	beq.n	8003b0a <TIM_Base_SetConfig+0xb2>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a2f      	ldr	r2, [pc, #188]	@ (8003b7c <TIM_Base_SetConfig+0x124>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d023      	beq.n	8003b0a <TIM_Base_SetConfig+0xb2>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a2e      	ldr	r2, [pc, #184]	@ (8003b80 <TIM_Base_SetConfig+0x128>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d01f      	beq.n	8003b0a <TIM_Base_SetConfig+0xb2>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a2d      	ldr	r2, [pc, #180]	@ (8003b84 <TIM_Base_SetConfig+0x12c>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d01b      	beq.n	8003b0a <TIM_Base_SetConfig+0xb2>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a2c      	ldr	r2, [pc, #176]	@ (8003b88 <TIM_Base_SetConfig+0x130>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d017      	beq.n	8003b0a <TIM_Base_SetConfig+0xb2>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a2b      	ldr	r2, [pc, #172]	@ (8003b8c <TIM_Base_SetConfig+0x134>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d013      	beq.n	8003b0a <TIM_Base_SetConfig+0xb2>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a2a      	ldr	r2, [pc, #168]	@ (8003b90 <TIM_Base_SetConfig+0x138>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d00f      	beq.n	8003b0a <TIM_Base_SetConfig+0xb2>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a29      	ldr	r2, [pc, #164]	@ (8003b94 <TIM_Base_SetConfig+0x13c>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d00b      	beq.n	8003b0a <TIM_Base_SetConfig+0xb2>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a28      	ldr	r2, [pc, #160]	@ (8003b98 <TIM_Base_SetConfig+0x140>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d007      	beq.n	8003b0a <TIM_Base_SetConfig+0xb2>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a27      	ldr	r2, [pc, #156]	@ (8003b9c <TIM_Base_SetConfig+0x144>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d003      	beq.n	8003b0a <TIM_Base_SetConfig+0xb2>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a26      	ldr	r2, [pc, #152]	@ (8003ba0 <TIM_Base_SetConfig+0x148>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d108      	bne.n	8003b1c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	689a      	ldr	r2, [r3, #8]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a0e      	ldr	r2, [pc, #56]	@ (8003b78 <TIM_Base_SetConfig+0x120>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d003      	beq.n	8003b4a <TIM_Base_SetConfig+0xf2>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a10      	ldr	r2, [pc, #64]	@ (8003b88 <TIM_Base_SetConfig+0x130>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d103      	bne.n	8003b52 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	691a      	ldr	r2, [r3, #16]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f043 0204 	orr.w	r2, r3, #4
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2201      	movs	r2, #1
 8003b62:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	601a      	str	r2, [r3, #0]
}
 8003b6a:	bf00      	nop
 8003b6c:	3714      	adds	r7, #20
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	40010000 	.word	0x40010000
 8003b7c:	40000400 	.word	0x40000400
 8003b80:	40000800 	.word	0x40000800
 8003b84:	40000c00 	.word	0x40000c00
 8003b88:	40010400 	.word	0x40010400
 8003b8c:	40014000 	.word	0x40014000
 8003b90:	40014400 	.word	0x40014400
 8003b94:	40014800 	.word	0x40014800
 8003b98:	40001800 	.word	0x40001800
 8003b9c:	40001c00 	.word	0x40001c00
 8003ba0:	40002000 	.word	0x40002000

08003ba4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b087      	sub	sp, #28
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a1b      	ldr	r3, [r3, #32]
 8003bb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a1b      	ldr	r3, [r3, #32]
 8003bb8:	f023 0201 	bic.w	r2, r3, #1
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f023 0303 	bic.w	r3, r3, #3
 8003bda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	f023 0302 	bic.w	r3, r3, #2
 8003bec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a20      	ldr	r2, [pc, #128]	@ (8003c7c <TIM_OC1_SetConfig+0xd8>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d003      	beq.n	8003c08 <TIM_OC1_SetConfig+0x64>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a1f      	ldr	r2, [pc, #124]	@ (8003c80 <TIM_OC1_SetConfig+0xdc>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d10c      	bne.n	8003c22 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	f023 0308 	bic.w	r3, r3, #8
 8003c0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	697a      	ldr	r2, [r7, #20]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	f023 0304 	bic.w	r3, r3, #4
 8003c20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a15      	ldr	r2, [pc, #84]	@ (8003c7c <TIM_OC1_SetConfig+0xd8>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d003      	beq.n	8003c32 <TIM_OC1_SetConfig+0x8e>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a14      	ldr	r2, [pc, #80]	@ (8003c80 <TIM_OC1_SetConfig+0xdc>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d111      	bne.n	8003c56 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003c40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	699b      	ldr	r3, [r3, #24]
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	685a      	ldr	r2, [r3, #4]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	697a      	ldr	r2, [r7, #20]
 8003c6e:	621a      	str	r2, [r3, #32]
}
 8003c70:	bf00      	nop
 8003c72:	371c      	adds	r7, #28
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr
 8003c7c:	40010000 	.word	0x40010000
 8003c80:	40010400 	.word	0x40010400

08003c84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b087      	sub	sp, #28
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a1b      	ldr	r3, [r3, #32]
 8003c98:	f023 0210 	bic.w	r2, r3, #16
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003cb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	021b      	lsls	r3, r3, #8
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	f023 0320 	bic.w	r3, r3, #32
 8003cce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	011b      	lsls	r3, r3, #4
 8003cd6:	697a      	ldr	r2, [r7, #20]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4a22      	ldr	r2, [pc, #136]	@ (8003d68 <TIM_OC2_SetConfig+0xe4>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d003      	beq.n	8003cec <TIM_OC2_SetConfig+0x68>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a21      	ldr	r2, [pc, #132]	@ (8003d6c <TIM_OC2_SetConfig+0xe8>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d10d      	bne.n	8003d08 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003cf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	011b      	lsls	r3, r3, #4
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d06:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4a17      	ldr	r2, [pc, #92]	@ (8003d68 <TIM_OC2_SetConfig+0xe4>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d003      	beq.n	8003d18 <TIM_OC2_SetConfig+0x94>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a16      	ldr	r2, [pc, #88]	@ (8003d6c <TIM_OC2_SetConfig+0xe8>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d113      	bne.n	8003d40 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003d26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	695b      	ldr	r3, [r3, #20]
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	685a      	ldr	r2, [r3, #4]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	697a      	ldr	r2, [r7, #20]
 8003d58:	621a      	str	r2, [r3, #32]
}
 8003d5a:	bf00      	nop
 8003d5c:	371c      	adds	r7, #28
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	40010000 	.word	0x40010000
 8003d6c:	40010400 	.word	0x40010400

08003d70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b087      	sub	sp, #28
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a1b      	ldr	r3, [r3, #32]
 8003d84:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	69db      	ldr	r3, [r3, #28]
 8003d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f023 0303 	bic.w	r3, r3, #3
 8003da6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003db8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	021b      	lsls	r3, r3, #8
 8003dc0:	697a      	ldr	r2, [r7, #20]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a21      	ldr	r2, [pc, #132]	@ (8003e50 <TIM_OC3_SetConfig+0xe0>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d003      	beq.n	8003dd6 <TIM_OC3_SetConfig+0x66>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a20      	ldr	r2, [pc, #128]	@ (8003e54 <TIM_OC3_SetConfig+0xe4>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d10d      	bne.n	8003df2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003ddc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	021b      	lsls	r3, r3, #8
 8003de4:	697a      	ldr	r2, [r7, #20]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003df0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a16      	ldr	r2, [pc, #88]	@ (8003e50 <TIM_OC3_SetConfig+0xe0>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d003      	beq.n	8003e02 <TIM_OC3_SetConfig+0x92>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a15      	ldr	r2, [pc, #84]	@ (8003e54 <TIM_OC3_SetConfig+0xe4>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d113      	bne.n	8003e2a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003e08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	011b      	lsls	r3, r3, #4
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	011b      	lsls	r3, r3, #4
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	685a      	ldr	r2, [r3, #4]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	697a      	ldr	r2, [r7, #20]
 8003e42:	621a      	str	r2, [r3, #32]
}
 8003e44:	bf00      	nop
 8003e46:	371c      	adds	r7, #28
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr
 8003e50:	40010000 	.word	0x40010000
 8003e54:	40010400 	.word	0x40010400

08003e58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b087      	sub	sp, #28
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a1b      	ldr	r3, [r3, #32]
 8003e66:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a1b      	ldr	r3, [r3, #32]
 8003e6c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	69db      	ldr	r3, [r3, #28]
 8003e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	021b      	lsls	r3, r3, #8
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003ea2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	031b      	lsls	r3, r3, #12
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a12      	ldr	r2, [pc, #72]	@ (8003efc <TIM_OC4_SetConfig+0xa4>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d003      	beq.n	8003ec0 <TIM_OC4_SetConfig+0x68>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a11      	ldr	r2, [pc, #68]	@ (8003f00 <TIM_OC4_SetConfig+0xa8>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d109      	bne.n	8003ed4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ec6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	695b      	ldr	r3, [r3, #20]
 8003ecc:	019b      	lsls	r3, r3, #6
 8003ece:	697a      	ldr	r2, [r7, #20]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	697a      	ldr	r2, [r7, #20]
 8003ed8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	685a      	ldr	r2, [r3, #4]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	693a      	ldr	r2, [r7, #16]
 8003eec:	621a      	str	r2, [r3, #32]
}
 8003eee:	bf00      	nop
 8003ef0:	371c      	adds	r7, #28
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	40010000 	.word	0x40010000
 8003f00:	40010400 	.word	0x40010400

08003f04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b087      	sub	sp, #28
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6a1b      	ldr	r3, [r3, #32]
 8003f14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6a1b      	ldr	r3, [r3, #32]
 8003f1a:	f023 0201 	bic.w	r2, r3, #1
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	011b      	lsls	r3, r3, #4
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	f023 030a 	bic.w	r3, r3, #10
 8003f40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f42:	697a      	ldr	r2, [r7, #20]
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	697a      	ldr	r2, [r7, #20]
 8003f54:	621a      	str	r2, [r3, #32]
}
 8003f56:	bf00      	nop
 8003f58:	371c      	adds	r7, #28
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr

08003f62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f62:	b480      	push	{r7}
 8003f64:	b087      	sub	sp, #28
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	60f8      	str	r0, [r7, #12]
 8003f6a:	60b9      	str	r1, [r7, #8]
 8003f6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6a1b      	ldr	r3, [r3, #32]
 8003f78:	f023 0210 	bic.w	r2, r3, #16
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003f8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	031b      	lsls	r3, r3, #12
 8003f92:	693a      	ldr	r2, [r7, #16]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003f9e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	011b      	lsls	r3, r3, #4
 8003fa4:	697a      	ldr	r2, [r7, #20]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	693a      	ldr	r2, [r7, #16]
 8003fae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	621a      	str	r2, [r3, #32]
}
 8003fb6:	bf00      	nop
 8003fb8:	371c      	adds	r7, #28
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr

08003fc2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003fc2:	b480      	push	{r7}
 8003fc4:	b085      	sub	sp, #20
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
 8003fca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fd8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003fda:	683a      	ldr	r2, [r7, #0]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	f043 0307 	orr.w	r3, r3, #7
 8003fe4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	68fa      	ldr	r2, [r7, #12]
 8003fea:	609a      	str	r2, [r3, #8]
}
 8003fec:	bf00      	nop
 8003fee:	3714      	adds	r7, #20
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b087      	sub	sp, #28
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	607a      	str	r2, [r7, #4]
 8004004:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004012:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	021a      	lsls	r2, r3, #8
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	431a      	orrs	r2, r3
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	4313      	orrs	r3, r2
 8004020:	697a      	ldr	r2, [r7, #20]
 8004022:	4313      	orrs	r3, r2
 8004024:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	697a      	ldr	r2, [r7, #20]
 800402a:	609a      	str	r2, [r3, #8]
}
 800402c:	bf00      	nop
 800402e:	371c      	adds	r7, #28
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004038:	b480      	push	{r7}
 800403a:	b087      	sub	sp, #28
 800403c:	af00      	add	r7, sp, #0
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	f003 031f 	and.w	r3, r3, #31
 800404a:	2201      	movs	r2, #1
 800404c:	fa02 f303 	lsl.w	r3, r2, r3
 8004050:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6a1a      	ldr	r2, [r3, #32]
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	43db      	mvns	r3, r3
 800405a:	401a      	ands	r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6a1a      	ldr	r2, [r3, #32]
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	f003 031f 	and.w	r3, r3, #31
 800406a:	6879      	ldr	r1, [r7, #4]
 800406c:	fa01 f303 	lsl.w	r3, r1, r3
 8004070:	431a      	orrs	r2, r3
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	621a      	str	r2, [r3, #32]
}
 8004076:	bf00      	nop
 8004078:	371c      	adds	r7, #28
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
	...

08004084 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004084:	b480      	push	{r7}
 8004086:	b085      	sub	sp, #20
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004094:	2b01      	cmp	r3, #1
 8004096:	d101      	bne.n	800409c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004098:	2302      	movs	r3, #2
 800409a:	e05a      	b.n	8004152 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2202      	movs	r2, #2
 80040a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	68fa      	ldr	r2, [r7, #12]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a21      	ldr	r2, [pc, #132]	@ (8004160 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d022      	beq.n	8004126 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040e8:	d01d      	beq.n	8004126 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a1d      	ldr	r2, [pc, #116]	@ (8004164 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d018      	beq.n	8004126 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a1b      	ldr	r2, [pc, #108]	@ (8004168 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d013      	beq.n	8004126 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a1a      	ldr	r2, [pc, #104]	@ (800416c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d00e      	beq.n	8004126 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a18      	ldr	r2, [pc, #96]	@ (8004170 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d009      	beq.n	8004126 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a17      	ldr	r2, [pc, #92]	@ (8004174 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d004      	beq.n	8004126 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a15      	ldr	r2, [pc, #84]	@ (8004178 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d10c      	bne.n	8004140 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800412c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	68ba      	ldr	r2, [r7, #8]
 8004134:	4313      	orrs	r3, r2
 8004136:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68ba      	ldr	r2, [r7, #8]
 800413e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3714      	adds	r7, #20
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	40010000 	.word	0x40010000
 8004164:	40000400 	.word	0x40000400
 8004168:	40000800 	.word	0x40000800
 800416c:	40000c00 	.word	0x40000c00
 8004170:	40010400 	.word	0x40010400
 8004174:	40014000 	.word	0x40014000
 8004178:	40001800 	.word	0x40001800

0800417c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800417c:	b480      	push	{r7}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004186:	2300      	movs	r3, #0
 8004188:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004190:	2b01      	cmp	r3, #1
 8004192:	d101      	bne.n	8004198 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004194:	2302      	movs	r3, #2
 8004196:	e03d      	b.n	8004214 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	695b      	ldr	r3, [r3, #20]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	69db      	ldr	r3, [r3, #28]
 80041fe:	4313      	orrs	r3, r2
 8004200:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004212:	2300      	movs	r3, #0
}
 8004214:	4618      	mov	r0, r3
 8004216:	3714      	adds	r7, #20
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <std>:
 8004220:	2300      	movs	r3, #0
 8004222:	b510      	push	{r4, lr}
 8004224:	4604      	mov	r4, r0
 8004226:	e9c0 3300 	strd	r3, r3, [r0]
 800422a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800422e:	6083      	str	r3, [r0, #8]
 8004230:	8181      	strh	r1, [r0, #12]
 8004232:	6643      	str	r3, [r0, #100]	@ 0x64
 8004234:	81c2      	strh	r2, [r0, #14]
 8004236:	6183      	str	r3, [r0, #24]
 8004238:	4619      	mov	r1, r3
 800423a:	2208      	movs	r2, #8
 800423c:	305c      	adds	r0, #92	@ 0x5c
 800423e:	f000 f9e7 	bl	8004610 <memset>
 8004242:	4b0d      	ldr	r3, [pc, #52]	@ (8004278 <std+0x58>)
 8004244:	6263      	str	r3, [r4, #36]	@ 0x24
 8004246:	4b0d      	ldr	r3, [pc, #52]	@ (800427c <std+0x5c>)
 8004248:	62a3      	str	r3, [r4, #40]	@ 0x28
 800424a:	4b0d      	ldr	r3, [pc, #52]	@ (8004280 <std+0x60>)
 800424c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800424e:	4b0d      	ldr	r3, [pc, #52]	@ (8004284 <std+0x64>)
 8004250:	6323      	str	r3, [r4, #48]	@ 0x30
 8004252:	4b0d      	ldr	r3, [pc, #52]	@ (8004288 <std+0x68>)
 8004254:	6224      	str	r4, [r4, #32]
 8004256:	429c      	cmp	r4, r3
 8004258:	d006      	beq.n	8004268 <std+0x48>
 800425a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800425e:	4294      	cmp	r4, r2
 8004260:	d002      	beq.n	8004268 <std+0x48>
 8004262:	33d0      	adds	r3, #208	@ 0xd0
 8004264:	429c      	cmp	r4, r3
 8004266:	d105      	bne.n	8004274 <std+0x54>
 8004268:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800426c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004270:	f000 ba46 	b.w	8004700 <__retarget_lock_init_recursive>
 8004274:	bd10      	pop	{r4, pc}
 8004276:	bf00      	nop
 8004278:	08004461 	.word	0x08004461
 800427c:	08004483 	.word	0x08004483
 8004280:	080044bb 	.word	0x080044bb
 8004284:	080044df 	.word	0x080044df
 8004288:	20000e18 	.word	0x20000e18

0800428c <stdio_exit_handler>:
 800428c:	4a02      	ldr	r2, [pc, #8]	@ (8004298 <stdio_exit_handler+0xc>)
 800428e:	4903      	ldr	r1, [pc, #12]	@ (800429c <stdio_exit_handler+0x10>)
 8004290:	4803      	ldr	r0, [pc, #12]	@ (80042a0 <stdio_exit_handler+0x14>)
 8004292:	f000 b869 	b.w	8004368 <_fwalk_sglue>
 8004296:	bf00      	nop
 8004298:	2000000c 	.word	0x2000000c
 800429c:	08004a01 	.word	0x08004a01
 80042a0:	2000001c 	.word	0x2000001c

080042a4 <cleanup_stdio>:
 80042a4:	6841      	ldr	r1, [r0, #4]
 80042a6:	4b0c      	ldr	r3, [pc, #48]	@ (80042d8 <cleanup_stdio+0x34>)
 80042a8:	4299      	cmp	r1, r3
 80042aa:	b510      	push	{r4, lr}
 80042ac:	4604      	mov	r4, r0
 80042ae:	d001      	beq.n	80042b4 <cleanup_stdio+0x10>
 80042b0:	f000 fba6 	bl	8004a00 <_fflush_r>
 80042b4:	68a1      	ldr	r1, [r4, #8]
 80042b6:	4b09      	ldr	r3, [pc, #36]	@ (80042dc <cleanup_stdio+0x38>)
 80042b8:	4299      	cmp	r1, r3
 80042ba:	d002      	beq.n	80042c2 <cleanup_stdio+0x1e>
 80042bc:	4620      	mov	r0, r4
 80042be:	f000 fb9f 	bl	8004a00 <_fflush_r>
 80042c2:	68e1      	ldr	r1, [r4, #12]
 80042c4:	4b06      	ldr	r3, [pc, #24]	@ (80042e0 <cleanup_stdio+0x3c>)
 80042c6:	4299      	cmp	r1, r3
 80042c8:	d004      	beq.n	80042d4 <cleanup_stdio+0x30>
 80042ca:	4620      	mov	r0, r4
 80042cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042d0:	f000 bb96 	b.w	8004a00 <_fflush_r>
 80042d4:	bd10      	pop	{r4, pc}
 80042d6:	bf00      	nop
 80042d8:	20000e18 	.word	0x20000e18
 80042dc:	20000e80 	.word	0x20000e80
 80042e0:	20000ee8 	.word	0x20000ee8

080042e4 <global_stdio_init.part.0>:
 80042e4:	b510      	push	{r4, lr}
 80042e6:	4b0b      	ldr	r3, [pc, #44]	@ (8004314 <global_stdio_init.part.0+0x30>)
 80042e8:	4c0b      	ldr	r4, [pc, #44]	@ (8004318 <global_stdio_init.part.0+0x34>)
 80042ea:	4a0c      	ldr	r2, [pc, #48]	@ (800431c <global_stdio_init.part.0+0x38>)
 80042ec:	601a      	str	r2, [r3, #0]
 80042ee:	4620      	mov	r0, r4
 80042f0:	2200      	movs	r2, #0
 80042f2:	2104      	movs	r1, #4
 80042f4:	f7ff ff94 	bl	8004220 <std>
 80042f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80042fc:	2201      	movs	r2, #1
 80042fe:	2109      	movs	r1, #9
 8004300:	f7ff ff8e 	bl	8004220 <std>
 8004304:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004308:	2202      	movs	r2, #2
 800430a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800430e:	2112      	movs	r1, #18
 8004310:	f7ff bf86 	b.w	8004220 <std>
 8004314:	20000f50 	.word	0x20000f50
 8004318:	20000e18 	.word	0x20000e18
 800431c:	0800428d 	.word	0x0800428d

08004320 <__sfp_lock_acquire>:
 8004320:	4801      	ldr	r0, [pc, #4]	@ (8004328 <__sfp_lock_acquire+0x8>)
 8004322:	f000 b9ee 	b.w	8004702 <__retarget_lock_acquire_recursive>
 8004326:	bf00      	nop
 8004328:	20000f59 	.word	0x20000f59

0800432c <__sfp_lock_release>:
 800432c:	4801      	ldr	r0, [pc, #4]	@ (8004334 <__sfp_lock_release+0x8>)
 800432e:	f000 b9e9 	b.w	8004704 <__retarget_lock_release_recursive>
 8004332:	bf00      	nop
 8004334:	20000f59 	.word	0x20000f59

08004338 <__sinit>:
 8004338:	b510      	push	{r4, lr}
 800433a:	4604      	mov	r4, r0
 800433c:	f7ff fff0 	bl	8004320 <__sfp_lock_acquire>
 8004340:	6a23      	ldr	r3, [r4, #32]
 8004342:	b11b      	cbz	r3, 800434c <__sinit+0x14>
 8004344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004348:	f7ff bff0 	b.w	800432c <__sfp_lock_release>
 800434c:	4b04      	ldr	r3, [pc, #16]	@ (8004360 <__sinit+0x28>)
 800434e:	6223      	str	r3, [r4, #32]
 8004350:	4b04      	ldr	r3, [pc, #16]	@ (8004364 <__sinit+0x2c>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d1f5      	bne.n	8004344 <__sinit+0xc>
 8004358:	f7ff ffc4 	bl	80042e4 <global_stdio_init.part.0>
 800435c:	e7f2      	b.n	8004344 <__sinit+0xc>
 800435e:	bf00      	nop
 8004360:	080042a5 	.word	0x080042a5
 8004364:	20000f50 	.word	0x20000f50

08004368 <_fwalk_sglue>:
 8004368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800436c:	4607      	mov	r7, r0
 800436e:	4688      	mov	r8, r1
 8004370:	4614      	mov	r4, r2
 8004372:	2600      	movs	r6, #0
 8004374:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004378:	f1b9 0901 	subs.w	r9, r9, #1
 800437c:	d505      	bpl.n	800438a <_fwalk_sglue+0x22>
 800437e:	6824      	ldr	r4, [r4, #0]
 8004380:	2c00      	cmp	r4, #0
 8004382:	d1f7      	bne.n	8004374 <_fwalk_sglue+0xc>
 8004384:	4630      	mov	r0, r6
 8004386:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800438a:	89ab      	ldrh	r3, [r5, #12]
 800438c:	2b01      	cmp	r3, #1
 800438e:	d907      	bls.n	80043a0 <_fwalk_sglue+0x38>
 8004390:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004394:	3301      	adds	r3, #1
 8004396:	d003      	beq.n	80043a0 <_fwalk_sglue+0x38>
 8004398:	4629      	mov	r1, r5
 800439a:	4638      	mov	r0, r7
 800439c:	47c0      	blx	r8
 800439e:	4306      	orrs	r6, r0
 80043a0:	3568      	adds	r5, #104	@ 0x68
 80043a2:	e7e9      	b.n	8004378 <_fwalk_sglue+0x10>

080043a4 <_puts_r>:
 80043a4:	6a03      	ldr	r3, [r0, #32]
 80043a6:	b570      	push	{r4, r5, r6, lr}
 80043a8:	6884      	ldr	r4, [r0, #8]
 80043aa:	4605      	mov	r5, r0
 80043ac:	460e      	mov	r6, r1
 80043ae:	b90b      	cbnz	r3, 80043b4 <_puts_r+0x10>
 80043b0:	f7ff ffc2 	bl	8004338 <__sinit>
 80043b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80043b6:	07db      	lsls	r3, r3, #31
 80043b8:	d405      	bmi.n	80043c6 <_puts_r+0x22>
 80043ba:	89a3      	ldrh	r3, [r4, #12]
 80043bc:	0598      	lsls	r0, r3, #22
 80043be:	d402      	bmi.n	80043c6 <_puts_r+0x22>
 80043c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80043c2:	f000 f99e 	bl	8004702 <__retarget_lock_acquire_recursive>
 80043c6:	89a3      	ldrh	r3, [r4, #12]
 80043c8:	0719      	lsls	r1, r3, #28
 80043ca:	d502      	bpl.n	80043d2 <_puts_r+0x2e>
 80043cc:	6923      	ldr	r3, [r4, #16]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d135      	bne.n	800443e <_puts_r+0x9a>
 80043d2:	4621      	mov	r1, r4
 80043d4:	4628      	mov	r0, r5
 80043d6:	f000 f8c5 	bl	8004564 <__swsetup_r>
 80043da:	b380      	cbz	r0, 800443e <_puts_r+0x9a>
 80043dc:	f04f 35ff 	mov.w	r5, #4294967295
 80043e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80043e2:	07da      	lsls	r2, r3, #31
 80043e4:	d405      	bmi.n	80043f2 <_puts_r+0x4e>
 80043e6:	89a3      	ldrh	r3, [r4, #12]
 80043e8:	059b      	lsls	r3, r3, #22
 80043ea:	d402      	bmi.n	80043f2 <_puts_r+0x4e>
 80043ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80043ee:	f000 f989 	bl	8004704 <__retarget_lock_release_recursive>
 80043f2:	4628      	mov	r0, r5
 80043f4:	bd70      	pop	{r4, r5, r6, pc}
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	da04      	bge.n	8004404 <_puts_r+0x60>
 80043fa:	69a2      	ldr	r2, [r4, #24]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	dc17      	bgt.n	8004430 <_puts_r+0x8c>
 8004400:	290a      	cmp	r1, #10
 8004402:	d015      	beq.n	8004430 <_puts_r+0x8c>
 8004404:	6823      	ldr	r3, [r4, #0]
 8004406:	1c5a      	adds	r2, r3, #1
 8004408:	6022      	str	r2, [r4, #0]
 800440a:	7019      	strb	r1, [r3, #0]
 800440c:	68a3      	ldr	r3, [r4, #8]
 800440e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004412:	3b01      	subs	r3, #1
 8004414:	60a3      	str	r3, [r4, #8]
 8004416:	2900      	cmp	r1, #0
 8004418:	d1ed      	bne.n	80043f6 <_puts_r+0x52>
 800441a:	2b00      	cmp	r3, #0
 800441c:	da11      	bge.n	8004442 <_puts_r+0x9e>
 800441e:	4622      	mov	r2, r4
 8004420:	210a      	movs	r1, #10
 8004422:	4628      	mov	r0, r5
 8004424:	f000 f85f 	bl	80044e6 <__swbuf_r>
 8004428:	3001      	adds	r0, #1
 800442a:	d0d7      	beq.n	80043dc <_puts_r+0x38>
 800442c:	250a      	movs	r5, #10
 800442e:	e7d7      	b.n	80043e0 <_puts_r+0x3c>
 8004430:	4622      	mov	r2, r4
 8004432:	4628      	mov	r0, r5
 8004434:	f000 f857 	bl	80044e6 <__swbuf_r>
 8004438:	3001      	adds	r0, #1
 800443a:	d1e7      	bne.n	800440c <_puts_r+0x68>
 800443c:	e7ce      	b.n	80043dc <_puts_r+0x38>
 800443e:	3e01      	subs	r6, #1
 8004440:	e7e4      	b.n	800440c <_puts_r+0x68>
 8004442:	6823      	ldr	r3, [r4, #0]
 8004444:	1c5a      	adds	r2, r3, #1
 8004446:	6022      	str	r2, [r4, #0]
 8004448:	220a      	movs	r2, #10
 800444a:	701a      	strb	r2, [r3, #0]
 800444c:	e7ee      	b.n	800442c <_puts_r+0x88>
	...

08004450 <puts>:
 8004450:	4b02      	ldr	r3, [pc, #8]	@ (800445c <puts+0xc>)
 8004452:	4601      	mov	r1, r0
 8004454:	6818      	ldr	r0, [r3, #0]
 8004456:	f7ff bfa5 	b.w	80043a4 <_puts_r>
 800445a:	bf00      	nop
 800445c:	20000018 	.word	0x20000018

08004460 <__sread>:
 8004460:	b510      	push	{r4, lr}
 8004462:	460c      	mov	r4, r1
 8004464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004468:	f000 f8fc 	bl	8004664 <_read_r>
 800446c:	2800      	cmp	r0, #0
 800446e:	bfab      	itete	ge
 8004470:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004472:	89a3      	ldrhlt	r3, [r4, #12]
 8004474:	181b      	addge	r3, r3, r0
 8004476:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800447a:	bfac      	ite	ge
 800447c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800447e:	81a3      	strhlt	r3, [r4, #12]
 8004480:	bd10      	pop	{r4, pc}

08004482 <__swrite>:
 8004482:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004486:	461f      	mov	r7, r3
 8004488:	898b      	ldrh	r3, [r1, #12]
 800448a:	05db      	lsls	r3, r3, #23
 800448c:	4605      	mov	r5, r0
 800448e:	460c      	mov	r4, r1
 8004490:	4616      	mov	r6, r2
 8004492:	d505      	bpl.n	80044a0 <__swrite+0x1e>
 8004494:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004498:	2302      	movs	r3, #2
 800449a:	2200      	movs	r2, #0
 800449c:	f000 f8d0 	bl	8004640 <_lseek_r>
 80044a0:	89a3      	ldrh	r3, [r4, #12]
 80044a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80044a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80044aa:	81a3      	strh	r3, [r4, #12]
 80044ac:	4632      	mov	r2, r6
 80044ae:	463b      	mov	r3, r7
 80044b0:	4628      	mov	r0, r5
 80044b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80044b6:	f000 b8e7 	b.w	8004688 <_write_r>

080044ba <__sseek>:
 80044ba:	b510      	push	{r4, lr}
 80044bc:	460c      	mov	r4, r1
 80044be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044c2:	f000 f8bd 	bl	8004640 <_lseek_r>
 80044c6:	1c43      	adds	r3, r0, #1
 80044c8:	89a3      	ldrh	r3, [r4, #12]
 80044ca:	bf15      	itete	ne
 80044cc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80044ce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80044d2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80044d6:	81a3      	strheq	r3, [r4, #12]
 80044d8:	bf18      	it	ne
 80044da:	81a3      	strhne	r3, [r4, #12]
 80044dc:	bd10      	pop	{r4, pc}

080044de <__sclose>:
 80044de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044e2:	f000 b89d 	b.w	8004620 <_close_r>

080044e6 <__swbuf_r>:
 80044e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044e8:	460e      	mov	r6, r1
 80044ea:	4614      	mov	r4, r2
 80044ec:	4605      	mov	r5, r0
 80044ee:	b118      	cbz	r0, 80044f8 <__swbuf_r+0x12>
 80044f0:	6a03      	ldr	r3, [r0, #32]
 80044f2:	b90b      	cbnz	r3, 80044f8 <__swbuf_r+0x12>
 80044f4:	f7ff ff20 	bl	8004338 <__sinit>
 80044f8:	69a3      	ldr	r3, [r4, #24]
 80044fa:	60a3      	str	r3, [r4, #8]
 80044fc:	89a3      	ldrh	r3, [r4, #12]
 80044fe:	071a      	lsls	r2, r3, #28
 8004500:	d501      	bpl.n	8004506 <__swbuf_r+0x20>
 8004502:	6923      	ldr	r3, [r4, #16]
 8004504:	b943      	cbnz	r3, 8004518 <__swbuf_r+0x32>
 8004506:	4621      	mov	r1, r4
 8004508:	4628      	mov	r0, r5
 800450a:	f000 f82b 	bl	8004564 <__swsetup_r>
 800450e:	b118      	cbz	r0, 8004518 <__swbuf_r+0x32>
 8004510:	f04f 37ff 	mov.w	r7, #4294967295
 8004514:	4638      	mov	r0, r7
 8004516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004518:	6823      	ldr	r3, [r4, #0]
 800451a:	6922      	ldr	r2, [r4, #16]
 800451c:	1a98      	subs	r0, r3, r2
 800451e:	6963      	ldr	r3, [r4, #20]
 8004520:	b2f6      	uxtb	r6, r6
 8004522:	4283      	cmp	r3, r0
 8004524:	4637      	mov	r7, r6
 8004526:	dc05      	bgt.n	8004534 <__swbuf_r+0x4e>
 8004528:	4621      	mov	r1, r4
 800452a:	4628      	mov	r0, r5
 800452c:	f000 fa68 	bl	8004a00 <_fflush_r>
 8004530:	2800      	cmp	r0, #0
 8004532:	d1ed      	bne.n	8004510 <__swbuf_r+0x2a>
 8004534:	68a3      	ldr	r3, [r4, #8]
 8004536:	3b01      	subs	r3, #1
 8004538:	60a3      	str	r3, [r4, #8]
 800453a:	6823      	ldr	r3, [r4, #0]
 800453c:	1c5a      	adds	r2, r3, #1
 800453e:	6022      	str	r2, [r4, #0]
 8004540:	701e      	strb	r6, [r3, #0]
 8004542:	6962      	ldr	r2, [r4, #20]
 8004544:	1c43      	adds	r3, r0, #1
 8004546:	429a      	cmp	r2, r3
 8004548:	d004      	beq.n	8004554 <__swbuf_r+0x6e>
 800454a:	89a3      	ldrh	r3, [r4, #12]
 800454c:	07db      	lsls	r3, r3, #31
 800454e:	d5e1      	bpl.n	8004514 <__swbuf_r+0x2e>
 8004550:	2e0a      	cmp	r6, #10
 8004552:	d1df      	bne.n	8004514 <__swbuf_r+0x2e>
 8004554:	4621      	mov	r1, r4
 8004556:	4628      	mov	r0, r5
 8004558:	f000 fa52 	bl	8004a00 <_fflush_r>
 800455c:	2800      	cmp	r0, #0
 800455e:	d0d9      	beq.n	8004514 <__swbuf_r+0x2e>
 8004560:	e7d6      	b.n	8004510 <__swbuf_r+0x2a>
	...

08004564 <__swsetup_r>:
 8004564:	b538      	push	{r3, r4, r5, lr}
 8004566:	4b29      	ldr	r3, [pc, #164]	@ (800460c <__swsetup_r+0xa8>)
 8004568:	4605      	mov	r5, r0
 800456a:	6818      	ldr	r0, [r3, #0]
 800456c:	460c      	mov	r4, r1
 800456e:	b118      	cbz	r0, 8004578 <__swsetup_r+0x14>
 8004570:	6a03      	ldr	r3, [r0, #32]
 8004572:	b90b      	cbnz	r3, 8004578 <__swsetup_r+0x14>
 8004574:	f7ff fee0 	bl	8004338 <__sinit>
 8004578:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800457c:	0719      	lsls	r1, r3, #28
 800457e:	d422      	bmi.n	80045c6 <__swsetup_r+0x62>
 8004580:	06da      	lsls	r2, r3, #27
 8004582:	d407      	bmi.n	8004594 <__swsetup_r+0x30>
 8004584:	2209      	movs	r2, #9
 8004586:	602a      	str	r2, [r5, #0]
 8004588:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800458c:	81a3      	strh	r3, [r4, #12]
 800458e:	f04f 30ff 	mov.w	r0, #4294967295
 8004592:	e033      	b.n	80045fc <__swsetup_r+0x98>
 8004594:	0758      	lsls	r0, r3, #29
 8004596:	d512      	bpl.n	80045be <__swsetup_r+0x5a>
 8004598:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800459a:	b141      	cbz	r1, 80045ae <__swsetup_r+0x4a>
 800459c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80045a0:	4299      	cmp	r1, r3
 80045a2:	d002      	beq.n	80045aa <__swsetup_r+0x46>
 80045a4:	4628      	mov	r0, r5
 80045a6:	f000 f8af 	bl	8004708 <_free_r>
 80045aa:	2300      	movs	r3, #0
 80045ac:	6363      	str	r3, [r4, #52]	@ 0x34
 80045ae:	89a3      	ldrh	r3, [r4, #12]
 80045b0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80045b4:	81a3      	strh	r3, [r4, #12]
 80045b6:	2300      	movs	r3, #0
 80045b8:	6063      	str	r3, [r4, #4]
 80045ba:	6923      	ldr	r3, [r4, #16]
 80045bc:	6023      	str	r3, [r4, #0]
 80045be:	89a3      	ldrh	r3, [r4, #12]
 80045c0:	f043 0308 	orr.w	r3, r3, #8
 80045c4:	81a3      	strh	r3, [r4, #12]
 80045c6:	6923      	ldr	r3, [r4, #16]
 80045c8:	b94b      	cbnz	r3, 80045de <__swsetup_r+0x7a>
 80045ca:	89a3      	ldrh	r3, [r4, #12]
 80045cc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80045d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045d4:	d003      	beq.n	80045de <__swsetup_r+0x7a>
 80045d6:	4621      	mov	r1, r4
 80045d8:	4628      	mov	r0, r5
 80045da:	f000 fa5f 	bl	8004a9c <__smakebuf_r>
 80045de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045e2:	f013 0201 	ands.w	r2, r3, #1
 80045e6:	d00a      	beq.n	80045fe <__swsetup_r+0x9a>
 80045e8:	2200      	movs	r2, #0
 80045ea:	60a2      	str	r2, [r4, #8]
 80045ec:	6962      	ldr	r2, [r4, #20]
 80045ee:	4252      	negs	r2, r2
 80045f0:	61a2      	str	r2, [r4, #24]
 80045f2:	6922      	ldr	r2, [r4, #16]
 80045f4:	b942      	cbnz	r2, 8004608 <__swsetup_r+0xa4>
 80045f6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80045fa:	d1c5      	bne.n	8004588 <__swsetup_r+0x24>
 80045fc:	bd38      	pop	{r3, r4, r5, pc}
 80045fe:	0799      	lsls	r1, r3, #30
 8004600:	bf58      	it	pl
 8004602:	6962      	ldrpl	r2, [r4, #20]
 8004604:	60a2      	str	r2, [r4, #8]
 8004606:	e7f4      	b.n	80045f2 <__swsetup_r+0x8e>
 8004608:	2000      	movs	r0, #0
 800460a:	e7f7      	b.n	80045fc <__swsetup_r+0x98>
 800460c:	20000018 	.word	0x20000018

08004610 <memset>:
 8004610:	4402      	add	r2, r0
 8004612:	4603      	mov	r3, r0
 8004614:	4293      	cmp	r3, r2
 8004616:	d100      	bne.n	800461a <memset+0xa>
 8004618:	4770      	bx	lr
 800461a:	f803 1b01 	strb.w	r1, [r3], #1
 800461e:	e7f9      	b.n	8004614 <memset+0x4>

08004620 <_close_r>:
 8004620:	b538      	push	{r3, r4, r5, lr}
 8004622:	4d06      	ldr	r5, [pc, #24]	@ (800463c <_close_r+0x1c>)
 8004624:	2300      	movs	r3, #0
 8004626:	4604      	mov	r4, r0
 8004628:	4608      	mov	r0, r1
 800462a:	602b      	str	r3, [r5, #0]
 800462c:	f7fc fcb7 	bl	8000f9e <_close>
 8004630:	1c43      	adds	r3, r0, #1
 8004632:	d102      	bne.n	800463a <_close_r+0x1a>
 8004634:	682b      	ldr	r3, [r5, #0]
 8004636:	b103      	cbz	r3, 800463a <_close_r+0x1a>
 8004638:	6023      	str	r3, [r4, #0]
 800463a:	bd38      	pop	{r3, r4, r5, pc}
 800463c:	20000f54 	.word	0x20000f54

08004640 <_lseek_r>:
 8004640:	b538      	push	{r3, r4, r5, lr}
 8004642:	4d07      	ldr	r5, [pc, #28]	@ (8004660 <_lseek_r+0x20>)
 8004644:	4604      	mov	r4, r0
 8004646:	4608      	mov	r0, r1
 8004648:	4611      	mov	r1, r2
 800464a:	2200      	movs	r2, #0
 800464c:	602a      	str	r2, [r5, #0]
 800464e:	461a      	mov	r2, r3
 8004650:	f7fc fccc 	bl	8000fec <_lseek>
 8004654:	1c43      	adds	r3, r0, #1
 8004656:	d102      	bne.n	800465e <_lseek_r+0x1e>
 8004658:	682b      	ldr	r3, [r5, #0]
 800465a:	b103      	cbz	r3, 800465e <_lseek_r+0x1e>
 800465c:	6023      	str	r3, [r4, #0]
 800465e:	bd38      	pop	{r3, r4, r5, pc}
 8004660:	20000f54 	.word	0x20000f54

08004664 <_read_r>:
 8004664:	b538      	push	{r3, r4, r5, lr}
 8004666:	4d07      	ldr	r5, [pc, #28]	@ (8004684 <_read_r+0x20>)
 8004668:	4604      	mov	r4, r0
 800466a:	4608      	mov	r0, r1
 800466c:	4611      	mov	r1, r2
 800466e:	2200      	movs	r2, #0
 8004670:	602a      	str	r2, [r5, #0]
 8004672:	461a      	mov	r2, r3
 8004674:	f7fc fc5a 	bl	8000f2c <_read>
 8004678:	1c43      	adds	r3, r0, #1
 800467a:	d102      	bne.n	8004682 <_read_r+0x1e>
 800467c:	682b      	ldr	r3, [r5, #0]
 800467e:	b103      	cbz	r3, 8004682 <_read_r+0x1e>
 8004680:	6023      	str	r3, [r4, #0]
 8004682:	bd38      	pop	{r3, r4, r5, pc}
 8004684:	20000f54 	.word	0x20000f54

08004688 <_write_r>:
 8004688:	b538      	push	{r3, r4, r5, lr}
 800468a:	4d07      	ldr	r5, [pc, #28]	@ (80046a8 <_write_r+0x20>)
 800468c:	4604      	mov	r4, r0
 800468e:	4608      	mov	r0, r1
 8004690:	4611      	mov	r1, r2
 8004692:	2200      	movs	r2, #0
 8004694:	602a      	str	r2, [r5, #0]
 8004696:	461a      	mov	r2, r3
 8004698:	f7fc fc65 	bl	8000f66 <_write>
 800469c:	1c43      	adds	r3, r0, #1
 800469e:	d102      	bne.n	80046a6 <_write_r+0x1e>
 80046a0:	682b      	ldr	r3, [r5, #0]
 80046a2:	b103      	cbz	r3, 80046a6 <_write_r+0x1e>
 80046a4:	6023      	str	r3, [r4, #0]
 80046a6:	bd38      	pop	{r3, r4, r5, pc}
 80046a8:	20000f54 	.word	0x20000f54

080046ac <__errno>:
 80046ac:	4b01      	ldr	r3, [pc, #4]	@ (80046b4 <__errno+0x8>)
 80046ae:	6818      	ldr	r0, [r3, #0]
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	20000018 	.word	0x20000018

080046b8 <__libc_init_array>:
 80046b8:	b570      	push	{r4, r5, r6, lr}
 80046ba:	4d0d      	ldr	r5, [pc, #52]	@ (80046f0 <__libc_init_array+0x38>)
 80046bc:	4c0d      	ldr	r4, [pc, #52]	@ (80046f4 <__libc_init_array+0x3c>)
 80046be:	1b64      	subs	r4, r4, r5
 80046c0:	10a4      	asrs	r4, r4, #2
 80046c2:	2600      	movs	r6, #0
 80046c4:	42a6      	cmp	r6, r4
 80046c6:	d109      	bne.n	80046dc <__libc_init_array+0x24>
 80046c8:	4d0b      	ldr	r5, [pc, #44]	@ (80046f8 <__libc_init_array+0x40>)
 80046ca:	4c0c      	ldr	r4, [pc, #48]	@ (80046fc <__libc_init_array+0x44>)
 80046cc:	f000 fa54 	bl	8004b78 <_init>
 80046d0:	1b64      	subs	r4, r4, r5
 80046d2:	10a4      	asrs	r4, r4, #2
 80046d4:	2600      	movs	r6, #0
 80046d6:	42a6      	cmp	r6, r4
 80046d8:	d105      	bne.n	80046e6 <__libc_init_array+0x2e>
 80046da:	bd70      	pop	{r4, r5, r6, pc}
 80046dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80046e0:	4798      	blx	r3
 80046e2:	3601      	adds	r6, #1
 80046e4:	e7ee      	b.n	80046c4 <__libc_init_array+0xc>
 80046e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80046ea:	4798      	blx	r3
 80046ec:	3601      	adds	r6, #1
 80046ee:	e7f2      	b.n	80046d6 <__libc_init_array+0x1e>
 80046f0:	08004bb8 	.word	0x08004bb8
 80046f4:	08004bb8 	.word	0x08004bb8
 80046f8:	08004bb8 	.word	0x08004bb8
 80046fc:	08004bbc 	.word	0x08004bbc

08004700 <__retarget_lock_init_recursive>:
 8004700:	4770      	bx	lr

08004702 <__retarget_lock_acquire_recursive>:
 8004702:	4770      	bx	lr

08004704 <__retarget_lock_release_recursive>:
 8004704:	4770      	bx	lr
	...

08004708 <_free_r>:
 8004708:	b538      	push	{r3, r4, r5, lr}
 800470a:	4605      	mov	r5, r0
 800470c:	2900      	cmp	r1, #0
 800470e:	d041      	beq.n	8004794 <_free_r+0x8c>
 8004710:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004714:	1f0c      	subs	r4, r1, #4
 8004716:	2b00      	cmp	r3, #0
 8004718:	bfb8      	it	lt
 800471a:	18e4      	addlt	r4, r4, r3
 800471c:	f000 f8e0 	bl	80048e0 <__malloc_lock>
 8004720:	4a1d      	ldr	r2, [pc, #116]	@ (8004798 <_free_r+0x90>)
 8004722:	6813      	ldr	r3, [r2, #0]
 8004724:	b933      	cbnz	r3, 8004734 <_free_r+0x2c>
 8004726:	6063      	str	r3, [r4, #4]
 8004728:	6014      	str	r4, [r2, #0]
 800472a:	4628      	mov	r0, r5
 800472c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004730:	f000 b8dc 	b.w	80048ec <__malloc_unlock>
 8004734:	42a3      	cmp	r3, r4
 8004736:	d908      	bls.n	800474a <_free_r+0x42>
 8004738:	6820      	ldr	r0, [r4, #0]
 800473a:	1821      	adds	r1, r4, r0
 800473c:	428b      	cmp	r3, r1
 800473e:	bf01      	itttt	eq
 8004740:	6819      	ldreq	r1, [r3, #0]
 8004742:	685b      	ldreq	r3, [r3, #4]
 8004744:	1809      	addeq	r1, r1, r0
 8004746:	6021      	streq	r1, [r4, #0]
 8004748:	e7ed      	b.n	8004726 <_free_r+0x1e>
 800474a:	461a      	mov	r2, r3
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	b10b      	cbz	r3, 8004754 <_free_r+0x4c>
 8004750:	42a3      	cmp	r3, r4
 8004752:	d9fa      	bls.n	800474a <_free_r+0x42>
 8004754:	6811      	ldr	r1, [r2, #0]
 8004756:	1850      	adds	r0, r2, r1
 8004758:	42a0      	cmp	r0, r4
 800475a:	d10b      	bne.n	8004774 <_free_r+0x6c>
 800475c:	6820      	ldr	r0, [r4, #0]
 800475e:	4401      	add	r1, r0
 8004760:	1850      	adds	r0, r2, r1
 8004762:	4283      	cmp	r3, r0
 8004764:	6011      	str	r1, [r2, #0]
 8004766:	d1e0      	bne.n	800472a <_free_r+0x22>
 8004768:	6818      	ldr	r0, [r3, #0]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	6053      	str	r3, [r2, #4]
 800476e:	4408      	add	r0, r1
 8004770:	6010      	str	r0, [r2, #0]
 8004772:	e7da      	b.n	800472a <_free_r+0x22>
 8004774:	d902      	bls.n	800477c <_free_r+0x74>
 8004776:	230c      	movs	r3, #12
 8004778:	602b      	str	r3, [r5, #0]
 800477a:	e7d6      	b.n	800472a <_free_r+0x22>
 800477c:	6820      	ldr	r0, [r4, #0]
 800477e:	1821      	adds	r1, r4, r0
 8004780:	428b      	cmp	r3, r1
 8004782:	bf04      	itt	eq
 8004784:	6819      	ldreq	r1, [r3, #0]
 8004786:	685b      	ldreq	r3, [r3, #4]
 8004788:	6063      	str	r3, [r4, #4]
 800478a:	bf04      	itt	eq
 800478c:	1809      	addeq	r1, r1, r0
 800478e:	6021      	streq	r1, [r4, #0]
 8004790:	6054      	str	r4, [r2, #4]
 8004792:	e7ca      	b.n	800472a <_free_r+0x22>
 8004794:	bd38      	pop	{r3, r4, r5, pc}
 8004796:	bf00      	nop
 8004798:	20000f60 	.word	0x20000f60

0800479c <sbrk_aligned>:
 800479c:	b570      	push	{r4, r5, r6, lr}
 800479e:	4e0f      	ldr	r6, [pc, #60]	@ (80047dc <sbrk_aligned+0x40>)
 80047a0:	460c      	mov	r4, r1
 80047a2:	6831      	ldr	r1, [r6, #0]
 80047a4:	4605      	mov	r5, r0
 80047a6:	b911      	cbnz	r1, 80047ae <sbrk_aligned+0x12>
 80047a8:	f000 f9d6 	bl	8004b58 <_sbrk_r>
 80047ac:	6030      	str	r0, [r6, #0]
 80047ae:	4621      	mov	r1, r4
 80047b0:	4628      	mov	r0, r5
 80047b2:	f000 f9d1 	bl	8004b58 <_sbrk_r>
 80047b6:	1c43      	adds	r3, r0, #1
 80047b8:	d103      	bne.n	80047c2 <sbrk_aligned+0x26>
 80047ba:	f04f 34ff 	mov.w	r4, #4294967295
 80047be:	4620      	mov	r0, r4
 80047c0:	bd70      	pop	{r4, r5, r6, pc}
 80047c2:	1cc4      	adds	r4, r0, #3
 80047c4:	f024 0403 	bic.w	r4, r4, #3
 80047c8:	42a0      	cmp	r0, r4
 80047ca:	d0f8      	beq.n	80047be <sbrk_aligned+0x22>
 80047cc:	1a21      	subs	r1, r4, r0
 80047ce:	4628      	mov	r0, r5
 80047d0:	f000 f9c2 	bl	8004b58 <_sbrk_r>
 80047d4:	3001      	adds	r0, #1
 80047d6:	d1f2      	bne.n	80047be <sbrk_aligned+0x22>
 80047d8:	e7ef      	b.n	80047ba <sbrk_aligned+0x1e>
 80047da:	bf00      	nop
 80047dc:	20000f5c 	.word	0x20000f5c

080047e0 <_malloc_r>:
 80047e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047e4:	1ccd      	adds	r5, r1, #3
 80047e6:	f025 0503 	bic.w	r5, r5, #3
 80047ea:	3508      	adds	r5, #8
 80047ec:	2d0c      	cmp	r5, #12
 80047ee:	bf38      	it	cc
 80047f0:	250c      	movcc	r5, #12
 80047f2:	2d00      	cmp	r5, #0
 80047f4:	4606      	mov	r6, r0
 80047f6:	db01      	blt.n	80047fc <_malloc_r+0x1c>
 80047f8:	42a9      	cmp	r1, r5
 80047fa:	d904      	bls.n	8004806 <_malloc_r+0x26>
 80047fc:	230c      	movs	r3, #12
 80047fe:	6033      	str	r3, [r6, #0]
 8004800:	2000      	movs	r0, #0
 8004802:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004806:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80048dc <_malloc_r+0xfc>
 800480a:	f000 f869 	bl	80048e0 <__malloc_lock>
 800480e:	f8d8 3000 	ldr.w	r3, [r8]
 8004812:	461c      	mov	r4, r3
 8004814:	bb44      	cbnz	r4, 8004868 <_malloc_r+0x88>
 8004816:	4629      	mov	r1, r5
 8004818:	4630      	mov	r0, r6
 800481a:	f7ff ffbf 	bl	800479c <sbrk_aligned>
 800481e:	1c43      	adds	r3, r0, #1
 8004820:	4604      	mov	r4, r0
 8004822:	d158      	bne.n	80048d6 <_malloc_r+0xf6>
 8004824:	f8d8 4000 	ldr.w	r4, [r8]
 8004828:	4627      	mov	r7, r4
 800482a:	2f00      	cmp	r7, #0
 800482c:	d143      	bne.n	80048b6 <_malloc_r+0xd6>
 800482e:	2c00      	cmp	r4, #0
 8004830:	d04b      	beq.n	80048ca <_malloc_r+0xea>
 8004832:	6823      	ldr	r3, [r4, #0]
 8004834:	4639      	mov	r1, r7
 8004836:	4630      	mov	r0, r6
 8004838:	eb04 0903 	add.w	r9, r4, r3
 800483c:	f000 f98c 	bl	8004b58 <_sbrk_r>
 8004840:	4581      	cmp	r9, r0
 8004842:	d142      	bne.n	80048ca <_malloc_r+0xea>
 8004844:	6821      	ldr	r1, [r4, #0]
 8004846:	1a6d      	subs	r5, r5, r1
 8004848:	4629      	mov	r1, r5
 800484a:	4630      	mov	r0, r6
 800484c:	f7ff ffa6 	bl	800479c <sbrk_aligned>
 8004850:	3001      	adds	r0, #1
 8004852:	d03a      	beq.n	80048ca <_malloc_r+0xea>
 8004854:	6823      	ldr	r3, [r4, #0]
 8004856:	442b      	add	r3, r5
 8004858:	6023      	str	r3, [r4, #0]
 800485a:	f8d8 3000 	ldr.w	r3, [r8]
 800485e:	685a      	ldr	r2, [r3, #4]
 8004860:	bb62      	cbnz	r2, 80048bc <_malloc_r+0xdc>
 8004862:	f8c8 7000 	str.w	r7, [r8]
 8004866:	e00f      	b.n	8004888 <_malloc_r+0xa8>
 8004868:	6822      	ldr	r2, [r4, #0]
 800486a:	1b52      	subs	r2, r2, r5
 800486c:	d420      	bmi.n	80048b0 <_malloc_r+0xd0>
 800486e:	2a0b      	cmp	r2, #11
 8004870:	d917      	bls.n	80048a2 <_malloc_r+0xc2>
 8004872:	1961      	adds	r1, r4, r5
 8004874:	42a3      	cmp	r3, r4
 8004876:	6025      	str	r5, [r4, #0]
 8004878:	bf18      	it	ne
 800487a:	6059      	strne	r1, [r3, #4]
 800487c:	6863      	ldr	r3, [r4, #4]
 800487e:	bf08      	it	eq
 8004880:	f8c8 1000 	streq.w	r1, [r8]
 8004884:	5162      	str	r2, [r4, r5]
 8004886:	604b      	str	r3, [r1, #4]
 8004888:	4630      	mov	r0, r6
 800488a:	f000 f82f 	bl	80048ec <__malloc_unlock>
 800488e:	f104 000b 	add.w	r0, r4, #11
 8004892:	1d23      	adds	r3, r4, #4
 8004894:	f020 0007 	bic.w	r0, r0, #7
 8004898:	1ac2      	subs	r2, r0, r3
 800489a:	bf1c      	itt	ne
 800489c:	1a1b      	subne	r3, r3, r0
 800489e:	50a3      	strne	r3, [r4, r2]
 80048a0:	e7af      	b.n	8004802 <_malloc_r+0x22>
 80048a2:	6862      	ldr	r2, [r4, #4]
 80048a4:	42a3      	cmp	r3, r4
 80048a6:	bf0c      	ite	eq
 80048a8:	f8c8 2000 	streq.w	r2, [r8]
 80048ac:	605a      	strne	r2, [r3, #4]
 80048ae:	e7eb      	b.n	8004888 <_malloc_r+0xa8>
 80048b0:	4623      	mov	r3, r4
 80048b2:	6864      	ldr	r4, [r4, #4]
 80048b4:	e7ae      	b.n	8004814 <_malloc_r+0x34>
 80048b6:	463c      	mov	r4, r7
 80048b8:	687f      	ldr	r7, [r7, #4]
 80048ba:	e7b6      	b.n	800482a <_malloc_r+0x4a>
 80048bc:	461a      	mov	r2, r3
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	42a3      	cmp	r3, r4
 80048c2:	d1fb      	bne.n	80048bc <_malloc_r+0xdc>
 80048c4:	2300      	movs	r3, #0
 80048c6:	6053      	str	r3, [r2, #4]
 80048c8:	e7de      	b.n	8004888 <_malloc_r+0xa8>
 80048ca:	230c      	movs	r3, #12
 80048cc:	6033      	str	r3, [r6, #0]
 80048ce:	4630      	mov	r0, r6
 80048d0:	f000 f80c 	bl	80048ec <__malloc_unlock>
 80048d4:	e794      	b.n	8004800 <_malloc_r+0x20>
 80048d6:	6005      	str	r5, [r0, #0]
 80048d8:	e7d6      	b.n	8004888 <_malloc_r+0xa8>
 80048da:	bf00      	nop
 80048dc:	20000f60 	.word	0x20000f60

080048e0 <__malloc_lock>:
 80048e0:	4801      	ldr	r0, [pc, #4]	@ (80048e8 <__malloc_lock+0x8>)
 80048e2:	f7ff bf0e 	b.w	8004702 <__retarget_lock_acquire_recursive>
 80048e6:	bf00      	nop
 80048e8:	20000f58 	.word	0x20000f58

080048ec <__malloc_unlock>:
 80048ec:	4801      	ldr	r0, [pc, #4]	@ (80048f4 <__malloc_unlock+0x8>)
 80048ee:	f7ff bf09 	b.w	8004704 <__retarget_lock_release_recursive>
 80048f2:	bf00      	nop
 80048f4:	20000f58 	.word	0x20000f58

080048f8 <__sflush_r>:
 80048f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80048fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004900:	0716      	lsls	r6, r2, #28
 8004902:	4605      	mov	r5, r0
 8004904:	460c      	mov	r4, r1
 8004906:	d454      	bmi.n	80049b2 <__sflush_r+0xba>
 8004908:	684b      	ldr	r3, [r1, #4]
 800490a:	2b00      	cmp	r3, #0
 800490c:	dc02      	bgt.n	8004914 <__sflush_r+0x1c>
 800490e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004910:	2b00      	cmp	r3, #0
 8004912:	dd48      	ble.n	80049a6 <__sflush_r+0xae>
 8004914:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004916:	2e00      	cmp	r6, #0
 8004918:	d045      	beq.n	80049a6 <__sflush_r+0xae>
 800491a:	2300      	movs	r3, #0
 800491c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004920:	682f      	ldr	r7, [r5, #0]
 8004922:	6a21      	ldr	r1, [r4, #32]
 8004924:	602b      	str	r3, [r5, #0]
 8004926:	d030      	beq.n	800498a <__sflush_r+0x92>
 8004928:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800492a:	89a3      	ldrh	r3, [r4, #12]
 800492c:	0759      	lsls	r1, r3, #29
 800492e:	d505      	bpl.n	800493c <__sflush_r+0x44>
 8004930:	6863      	ldr	r3, [r4, #4]
 8004932:	1ad2      	subs	r2, r2, r3
 8004934:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004936:	b10b      	cbz	r3, 800493c <__sflush_r+0x44>
 8004938:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800493a:	1ad2      	subs	r2, r2, r3
 800493c:	2300      	movs	r3, #0
 800493e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004940:	6a21      	ldr	r1, [r4, #32]
 8004942:	4628      	mov	r0, r5
 8004944:	47b0      	blx	r6
 8004946:	1c43      	adds	r3, r0, #1
 8004948:	89a3      	ldrh	r3, [r4, #12]
 800494a:	d106      	bne.n	800495a <__sflush_r+0x62>
 800494c:	6829      	ldr	r1, [r5, #0]
 800494e:	291d      	cmp	r1, #29
 8004950:	d82b      	bhi.n	80049aa <__sflush_r+0xb2>
 8004952:	4a2a      	ldr	r2, [pc, #168]	@ (80049fc <__sflush_r+0x104>)
 8004954:	40ca      	lsrs	r2, r1
 8004956:	07d6      	lsls	r6, r2, #31
 8004958:	d527      	bpl.n	80049aa <__sflush_r+0xb2>
 800495a:	2200      	movs	r2, #0
 800495c:	6062      	str	r2, [r4, #4]
 800495e:	04d9      	lsls	r1, r3, #19
 8004960:	6922      	ldr	r2, [r4, #16]
 8004962:	6022      	str	r2, [r4, #0]
 8004964:	d504      	bpl.n	8004970 <__sflush_r+0x78>
 8004966:	1c42      	adds	r2, r0, #1
 8004968:	d101      	bne.n	800496e <__sflush_r+0x76>
 800496a:	682b      	ldr	r3, [r5, #0]
 800496c:	b903      	cbnz	r3, 8004970 <__sflush_r+0x78>
 800496e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004970:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004972:	602f      	str	r7, [r5, #0]
 8004974:	b1b9      	cbz	r1, 80049a6 <__sflush_r+0xae>
 8004976:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800497a:	4299      	cmp	r1, r3
 800497c:	d002      	beq.n	8004984 <__sflush_r+0x8c>
 800497e:	4628      	mov	r0, r5
 8004980:	f7ff fec2 	bl	8004708 <_free_r>
 8004984:	2300      	movs	r3, #0
 8004986:	6363      	str	r3, [r4, #52]	@ 0x34
 8004988:	e00d      	b.n	80049a6 <__sflush_r+0xae>
 800498a:	2301      	movs	r3, #1
 800498c:	4628      	mov	r0, r5
 800498e:	47b0      	blx	r6
 8004990:	4602      	mov	r2, r0
 8004992:	1c50      	adds	r0, r2, #1
 8004994:	d1c9      	bne.n	800492a <__sflush_r+0x32>
 8004996:	682b      	ldr	r3, [r5, #0]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d0c6      	beq.n	800492a <__sflush_r+0x32>
 800499c:	2b1d      	cmp	r3, #29
 800499e:	d001      	beq.n	80049a4 <__sflush_r+0xac>
 80049a0:	2b16      	cmp	r3, #22
 80049a2:	d11e      	bne.n	80049e2 <__sflush_r+0xea>
 80049a4:	602f      	str	r7, [r5, #0]
 80049a6:	2000      	movs	r0, #0
 80049a8:	e022      	b.n	80049f0 <__sflush_r+0xf8>
 80049aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049ae:	b21b      	sxth	r3, r3
 80049b0:	e01b      	b.n	80049ea <__sflush_r+0xf2>
 80049b2:	690f      	ldr	r7, [r1, #16]
 80049b4:	2f00      	cmp	r7, #0
 80049b6:	d0f6      	beq.n	80049a6 <__sflush_r+0xae>
 80049b8:	0793      	lsls	r3, r2, #30
 80049ba:	680e      	ldr	r6, [r1, #0]
 80049bc:	bf08      	it	eq
 80049be:	694b      	ldreq	r3, [r1, #20]
 80049c0:	600f      	str	r7, [r1, #0]
 80049c2:	bf18      	it	ne
 80049c4:	2300      	movne	r3, #0
 80049c6:	eba6 0807 	sub.w	r8, r6, r7
 80049ca:	608b      	str	r3, [r1, #8]
 80049cc:	f1b8 0f00 	cmp.w	r8, #0
 80049d0:	dde9      	ble.n	80049a6 <__sflush_r+0xae>
 80049d2:	6a21      	ldr	r1, [r4, #32]
 80049d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80049d6:	4643      	mov	r3, r8
 80049d8:	463a      	mov	r2, r7
 80049da:	4628      	mov	r0, r5
 80049dc:	47b0      	blx	r6
 80049de:	2800      	cmp	r0, #0
 80049e0:	dc08      	bgt.n	80049f4 <__sflush_r+0xfc>
 80049e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049ea:	81a3      	strh	r3, [r4, #12]
 80049ec:	f04f 30ff 	mov.w	r0, #4294967295
 80049f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049f4:	4407      	add	r7, r0
 80049f6:	eba8 0800 	sub.w	r8, r8, r0
 80049fa:	e7e7      	b.n	80049cc <__sflush_r+0xd4>
 80049fc:	20400001 	.word	0x20400001

08004a00 <_fflush_r>:
 8004a00:	b538      	push	{r3, r4, r5, lr}
 8004a02:	690b      	ldr	r3, [r1, #16]
 8004a04:	4605      	mov	r5, r0
 8004a06:	460c      	mov	r4, r1
 8004a08:	b913      	cbnz	r3, 8004a10 <_fflush_r+0x10>
 8004a0a:	2500      	movs	r5, #0
 8004a0c:	4628      	mov	r0, r5
 8004a0e:	bd38      	pop	{r3, r4, r5, pc}
 8004a10:	b118      	cbz	r0, 8004a1a <_fflush_r+0x1a>
 8004a12:	6a03      	ldr	r3, [r0, #32]
 8004a14:	b90b      	cbnz	r3, 8004a1a <_fflush_r+0x1a>
 8004a16:	f7ff fc8f 	bl	8004338 <__sinit>
 8004a1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d0f3      	beq.n	8004a0a <_fflush_r+0xa>
 8004a22:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004a24:	07d0      	lsls	r0, r2, #31
 8004a26:	d404      	bmi.n	8004a32 <_fflush_r+0x32>
 8004a28:	0599      	lsls	r1, r3, #22
 8004a2a:	d402      	bmi.n	8004a32 <_fflush_r+0x32>
 8004a2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a2e:	f7ff fe68 	bl	8004702 <__retarget_lock_acquire_recursive>
 8004a32:	4628      	mov	r0, r5
 8004a34:	4621      	mov	r1, r4
 8004a36:	f7ff ff5f 	bl	80048f8 <__sflush_r>
 8004a3a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004a3c:	07da      	lsls	r2, r3, #31
 8004a3e:	4605      	mov	r5, r0
 8004a40:	d4e4      	bmi.n	8004a0c <_fflush_r+0xc>
 8004a42:	89a3      	ldrh	r3, [r4, #12]
 8004a44:	059b      	lsls	r3, r3, #22
 8004a46:	d4e1      	bmi.n	8004a0c <_fflush_r+0xc>
 8004a48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a4a:	f7ff fe5b 	bl	8004704 <__retarget_lock_release_recursive>
 8004a4e:	e7dd      	b.n	8004a0c <_fflush_r+0xc>

08004a50 <__swhatbuf_r>:
 8004a50:	b570      	push	{r4, r5, r6, lr}
 8004a52:	460c      	mov	r4, r1
 8004a54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a58:	2900      	cmp	r1, #0
 8004a5a:	b096      	sub	sp, #88	@ 0x58
 8004a5c:	4615      	mov	r5, r2
 8004a5e:	461e      	mov	r6, r3
 8004a60:	da0d      	bge.n	8004a7e <__swhatbuf_r+0x2e>
 8004a62:	89a3      	ldrh	r3, [r4, #12]
 8004a64:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004a68:	f04f 0100 	mov.w	r1, #0
 8004a6c:	bf14      	ite	ne
 8004a6e:	2340      	movne	r3, #64	@ 0x40
 8004a70:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004a74:	2000      	movs	r0, #0
 8004a76:	6031      	str	r1, [r6, #0]
 8004a78:	602b      	str	r3, [r5, #0]
 8004a7a:	b016      	add	sp, #88	@ 0x58
 8004a7c:	bd70      	pop	{r4, r5, r6, pc}
 8004a7e:	466a      	mov	r2, sp
 8004a80:	f000 f848 	bl	8004b14 <_fstat_r>
 8004a84:	2800      	cmp	r0, #0
 8004a86:	dbec      	blt.n	8004a62 <__swhatbuf_r+0x12>
 8004a88:	9901      	ldr	r1, [sp, #4]
 8004a8a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004a8e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004a92:	4259      	negs	r1, r3
 8004a94:	4159      	adcs	r1, r3
 8004a96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004a9a:	e7eb      	b.n	8004a74 <__swhatbuf_r+0x24>

08004a9c <__smakebuf_r>:
 8004a9c:	898b      	ldrh	r3, [r1, #12]
 8004a9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004aa0:	079d      	lsls	r5, r3, #30
 8004aa2:	4606      	mov	r6, r0
 8004aa4:	460c      	mov	r4, r1
 8004aa6:	d507      	bpl.n	8004ab8 <__smakebuf_r+0x1c>
 8004aa8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004aac:	6023      	str	r3, [r4, #0]
 8004aae:	6123      	str	r3, [r4, #16]
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	6163      	str	r3, [r4, #20]
 8004ab4:	b003      	add	sp, #12
 8004ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ab8:	ab01      	add	r3, sp, #4
 8004aba:	466a      	mov	r2, sp
 8004abc:	f7ff ffc8 	bl	8004a50 <__swhatbuf_r>
 8004ac0:	9f00      	ldr	r7, [sp, #0]
 8004ac2:	4605      	mov	r5, r0
 8004ac4:	4639      	mov	r1, r7
 8004ac6:	4630      	mov	r0, r6
 8004ac8:	f7ff fe8a 	bl	80047e0 <_malloc_r>
 8004acc:	b948      	cbnz	r0, 8004ae2 <__smakebuf_r+0x46>
 8004ace:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ad2:	059a      	lsls	r2, r3, #22
 8004ad4:	d4ee      	bmi.n	8004ab4 <__smakebuf_r+0x18>
 8004ad6:	f023 0303 	bic.w	r3, r3, #3
 8004ada:	f043 0302 	orr.w	r3, r3, #2
 8004ade:	81a3      	strh	r3, [r4, #12]
 8004ae0:	e7e2      	b.n	8004aa8 <__smakebuf_r+0xc>
 8004ae2:	89a3      	ldrh	r3, [r4, #12]
 8004ae4:	6020      	str	r0, [r4, #0]
 8004ae6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004aea:	81a3      	strh	r3, [r4, #12]
 8004aec:	9b01      	ldr	r3, [sp, #4]
 8004aee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004af2:	b15b      	cbz	r3, 8004b0c <__smakebuf_r+0x70>
 8004af4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004af8:	4630      	mov	r0, r6
 8004afa:	f000 f81d 	bl	8004b38 <_isatty_r>
 8004afe:	b128      	cbz	r0, 8004b0c <__smakebuf_r+0x70>
 8004b00:	89a3      	ldrh	r3, [r4, #12]
 8004b02:	f023 0303 	bic.w	r3, r3, #3
 8004b06:	f043 0301 	orr.w	r3, r3, #1
 8004b0a:	81a3      	strh	r3, [r4, #12]
 8004b0c:	89a3      	ldrh	r3, [r4, #12]
 8004b0e:	431d      	orrs	r5, r3
 8004b10:	81a5      	strh	r5, [r4, #12]
 8004b12:	e7cf      	b.n	8004ab4 <__smakebuf_r+0x18>

08004b14 <_fstat_r>:
 8004b14:	b538      	push	{r3, r4, r5, lr}
 8004b16:	4d07      	ldr	r5, [pc, #28]	@ (8004b34 <_fstat_r+0x20>)
 8004b18:	2300      	movs	r3, #0
 8004b1a:	4604      	mov	r4, r0
 8004b1c:	4608      	mov	r0, r1
 8004b1e:	4611      	mov	r1, r2
 8004b20:	602b      	str	r3, [r5, #0]
 8004b22:	f7fc fa48 	bl	8000fb6 <_fstat>
 8004b26:	1c43      	adds	r3, r0, #1
 8004b28:	d102      	bne.n	8004b30 <_fstat_r+0x1c>
 8004b2a:	682b      	ldr	r3, [r5, #0]
 8004b2c:	b103      	cbz	r3, 8004b30 <_fstat_r+0x1c>
 8004b2e:	6023      	str	r3, [r4, #0]
 8004b30:	bd38      	pop	{r3, r4, r5, pc}
 8004b32:	bf00      	nop
 8004b34:	20000f54 	.word	0x20000f54

08004b38 <_isatty_r>:
 8004b38:	b538      	push	{r3, r4, r5, lr}
 8004b3a:	4d06      	ldr	r5, [pc, #24]	@ (8004b54 <_isatty_r+0x1c>)
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	4604      	mov	r4, r0
 8004b40:	4608      	mov	r0, r1
 8004b42:	602b      	str	r3, [r5, #0]
 8004b44:	f7fc fa47 	bl	8000fd6 <_isatty>
 8004b48:	1c43      	adds	r3, r0, #1
 8004b4a:	d102      	bne.n	8004b52 <_isatty_r+0x1a>
 8004b4c:	682b      	ldr	r3, [r5, #0]
 8004b4e:	b103      	cbz	r3, 8004b52 <_isatty_r+0x1a>
 8004b50:	6023      	str	r3, [r4, #0]
 8004b52:	bd38      	pop	{r3, r4, r5, pc}
 8004b54:	20000f54 	.word	0x20000f54

08004b58 <_sbrk_r>:
 8004b58:	b538      	push	{r3, r4, r5, lr}
 8004b5a:	4d06      	ldr	r5, [pc, #24]	@ (8004b74 <_sbrk_r+0x1c>)
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	4604      	mov	r4, r0
 8004b60:	4608      	mov	r0, r1
 8004b62:	602b      	str	r3, [r5, #0]
 8004b64:	f7fc fa50 	bl	8001008 <_sbrk>
 8004b68:	1c43      	adds	r3, r0, #1
 8004b6a:	d102      	bne.n	8004b72 <_sbrk_r+0x1a>
 8004b6c:	682b      	ldr	r3, [r5, #0]
 8004b6e:	b103      	cbz	r3, 8004b72 <_sbrk_r+0x1a>
 8004b70:	6023      	str	r3, [r4, #0]
 8004b72:	bd38      	pop	{r3, r4, r5, pc}
 8004b74:	20000f54 	.word	0x20000f54

08004b78 <_init>:
 8004b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b7a:	bf00      	nop
 8004b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b7e:	bc08      	pop	{r3}
 8004b80:	469e      	mov	lr, r3
 8004b82:	4770      	bx	lr

08004b84 <_fini>:
 8004b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b86:	bf00      	nop
 8004b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b8a:	bc08      	pop	{r3}
 8004b8c:	469e      	mov	lr, r3
 8004b8e:	4770      	bx	lr
