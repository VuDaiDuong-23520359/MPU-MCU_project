
STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050f8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013470  08005280  08005280  00006280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080186f0  080186f0  0001a05c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080186f0  080186f0  000196f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080186f8  080186f8  0001a05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080186f8  080186f8  000196f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080186fc  080186fc  000196fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08018700  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001a05c  2**0
                  CONTENTS
 10 .bss          000042bc  2000005c  2000005c  0001a05c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004318  20004318  0001a05c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001a05c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e6d2  00000000  00000000  0001a08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023ca  00000000  00000000  0002875e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d08  00000000  00000000  0002ab28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000983  00000000  00000000  0002b830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000225b7  00000000  00000000  0002c1b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f530  00000000  00000000  0004e76a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7b28  00000000  00000000  0005dc9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000b3  00000000  00000000  001357c2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003724  00000000  00000000  00135878  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000042  00000000  00000000  00138f9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00002a79  00000000  00000000  00138fde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00000060  00000000  00000000  0013ba57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000005c 	.word	0x2000005c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005268 	.word	0x08005268

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000060 	.word	0x20000060
 80001c4:	08005268 	.word	0x08005268

080001c8 <arm_bitreversal_32>:
 80001c8:	1c4b      	adds	r3, r1, #1
 80001ca:	2b01      	cmp	r3, #1
 80001cc:	bf98      	it	ls
 80001ce:	4770      	bxls	lr
 80001d0:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001d4:	1c91      	adds	r1, r2, #2
 80001d6:	089b      	lsrs	r3, r3, #2

080001d8 <arm_bitreversal_32_0>:
 80001d8:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001dc:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001e0:	880a      	ldrh	r2, [r1, #0]
 80001e2:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001e6:	4480      	add	r8, r0
 80001e8:	4481      	add	r9, r0
 80001ea:	4402      	add	r2, r0
 80001ec:	4484      	add	ip, r0
 80001ee:	f8d9 7000 	ldr.w	r7, [r9]
 80001f2:	f8d8 6000 	ldr.w	r6, [r8]
 80001f6:	6815      	ldr	r5, [r2, #0]
 80001f8:	f8dc 4000 	ldr.w	r4, [ip]
 80001fc:	f8c9 6000 	str.w	r6, [r9]
 8000200:	f8c8 7000 	str.w	r7, [r8]
 8000204:	f8cc 5000 	str.w	r5, [ip]
 8000208:	6014      	str	r4, [r2, #0]
 800020a:	f8d9 7004 	ldr.w	r7, [r9, #4]
 800020e:	f8d8 6004 	ldr.w	r6, [r8, #4]
 8000212:	6855      	ldr	r5, [r2, #4]
 8000214:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000218:	f8c9 6004 	str.w	r6, [r9, #4]
 800021c:	f8c8 7004 	str.w	r7, [r8, #4]
 8000220:	f8cc 5004 	str.w	r5, [ip, #4]
 8000224:	6054      	str	r4, [r2, #4]
 8000226:	3108      	adds	r1, #8
 8000228:	3b01      	subs	r3, #1
 800022a:	d1d5      	bne.n	80001d8 <arm_bitreversal_32_0>
 800022c:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000230:	4770      	bx	lr

08000232 <arm_bitreversal_16>:
 8000232:	1c4b      	adds	r3, r1, #1
 8000234:	2b01      	cmp	r3, #1
 8000236:	bf98      	it	ls
 8000238:	4770      	bxls	lr
 800023a:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800023e:	1c91      	adds	r1, r2, #2
 8000240:	089b      	lsrs	r3, r3, #2

08000242 <arm_bitreversal_16_0>:
 8000242:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000246:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 800024a:	880a      	ldrh	r2, [r1, #0]
 800024c:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000250:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 8000254:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000258:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 800025c:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000260:	f8d9 7000 	ldr.w	r7, [r9]
 8000264:	f8d8 6000 	ldr.w	r6, [r8]
 8000268:	6815      	ldr	r5, [r2, #0]
 800026a:	f8dc 4000 	ldr.w	r4, [ip]
 800026e:	f8c9 6000 	str.w	r6, [r9]
 8000272:	f8c8 7000 	str.w	r7, [r8]
 8000276:	f8cc 5000 	str.w	r5, [ip]
 800027a:	6014      	str	r4, [r2, #0]
 800027c:	3108      	adds	r1, #8
 800027e:	3b01      	subs	r3, #1
 8000280:	d1df      	bne.n	8000242 <arm_bitreversal_16_0>
 8000282:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000286:	4770      	bx	lr

08000288 <__aeabi_uldivmod>:
 8000288:	b953      	cbnz	r3, 80002a0 <__aeabi_uldivmod+0x18>
 800028a:	b94a      	cbnz	r2, 80002a0 <__aeabi_uldivmod+0x18>
 800028c:	2900      	cmp	r1, #0
 800028e:	bf08      	it	eq
 8000290:	2800      	cmpeq	r0, #0
 8000292:	bf1c      	itt	ne
 8000294:	f04f 31ff 	movne.w	r1, #4294967295
 8000298:	f04f 30ff 	movne.w	r0, #4294967295
 800029c:	f000 b988 	b.w	80005b0 <__aeabi_idiv0>
 80002a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a8:	f000 f806 	bl	80002b8 <__udivmoddi4>
 80002ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b4:	b004      	add	sp, #16
 80002b6:	4770      	bx	lr

080002b8 <__udivmoddi4>:
 80002b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002bc:	9d08      	ldr	r5, [sp, #32]
 80002be:	468e      	mov	lr, r1
 80002c0:	4604      	mov	r4, r0
 80002c2:	4688      	mov	r8, r1
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d14a      	bne.n	800035e <__udivmoddi4+0xa6>
 80002c8:	428a      	cmp	r2, r1
 80002ca:	4617      	mov	r7, r2
 80002cc:	d962      	bls.n	8000394 <__udivmoddi4+0xdc>
 80002ce:	fab2 f682 	clz	r6, r2
 80002d2:	b14e      	cbz	r6, 80002e8 <__udivmoddi4+0x30>
 80002d4:	f1c6 0320 	rsb	r3, r6, #32
 80002d8:	fa01 f806 	lsl.w	r8, r1, r6
 80002dc:	fa20 f303 	lsr.w	r3, r0, r3
 80002e0:	40b7      	lsls	r7, r6
 80002e2:	ea43 0808 	orr.w	r8, r3, r8
 80002e6:	40b4      	lsls	r4, r6
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	fa1f fc87 	uxth.w	ip, r7
 80002f0:	fbb8 f1fe 	udiv	r1, r8, lr
 80002f4:	0c23      	lsrs	r3, r4, #16
 80002f6:	fb0e 8811 	mls	r8, lr, r1, r8
 80002fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002fe:	fb01 f20c 	mul.w	r2, r1, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d909      	bls.n	800031a <__udivmoddi4+0x62>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f101 30ff 	add.w	r0, r1, #4294967295
 800030c:	f080 80ea 	bcs.w	80004e4 <__udivmoddi4+0x22c>
 8000310:	429a      	cmp	r2, r3
 8000312:	f240 80e7 	bls.w	80004e4 <__udivmoddi4+0x22c>
 8000316:	3902      	subs	r1, #2
 8000318:	443b      	add	r3, r7
 800031a:	1a9a      	subs	r2, r3, r2
 800031c:	b2a3      	uxth	r3, r4
 800031e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000322:	fb0e 2210 	mls	r2, lr, r0, r2
 8000326:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800032a:	fb00 fc0c 	mul.w	ip, r0, ip
 800032e:	459c      	cmp	ip, r3
 8000330:	d909      	bls.n	8000346 <__udivmoddi4+0x8e>
 8000332:	18fb      	adds	r3, r7, r3
 8000334:	f100 32ff 	add.w	r2, r0, #4294967295
 8000338:	f080 80d6 	bcs.w	80004e8 <__udivmoddi4+0x230>
 800033c:	459c      	cmp	ip, r3
 800033e:	f240 80d3 	bls.w	80004e8 <__udivmoddi4+0x230>
 8000342:	443b      	add	r3, r7
 8000344:	3802      	subs	r0, #2
 8000346:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800034a:	eba3 030c 	sub.w	r3, r3, ip
 800034e:	2100      	movs	r1, #0
 8000350:	b11d      	cbz	r5, 800035a <__udivmoddi4+0xa2>
 8000352:	40f3      	lsrs	r3, r6
 8000354:	2200      	movs	r2, #0
 8000356:	e9c5 3200 	strd	r3, r2, [r5]
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	428b      	cmp	r3, r1
 8000360:	d905      	bls.n	800036e <__udivmoddi4+0xb6>
 8000362:	b10d      	cbz	r5, 8000368 <__udivmoddi4+0xb0>
 8000364:	e9c5 0100 	strd	r0, r1, [r5]
 8000368:	2100      	movs	r1, #0
 800036a:	4608      	mov	r0, r1
 800036c:	e7f5      	b.n	800035a <__udivmoddi4+0xa2>
 800036e:	fab3 f183 	clz	r1, r3
 8000372:	2900      	cmp	r1, #0
 8000374:	d146      	bne.n	8000404 <__udivmoddi4+0x14c>
 8000376:	4573      	cmp	r3, lr
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xc8>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 8105 	bhi.w	800058a <__udivmoddi4+0x2d2>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb6e 0203 	sbc.w	r2, lr, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4690      	mov	r8, r2
 800038a:	2d00      	cmp	r5, #0
 800038c:	d0e5      	beq.n	800035a <__udivmoddi4+0xa2>
 800038e:	e9c5 4800 	strd	r4, r8, [r5]
 8000392:	e7e2      	b.n	800035a <__udivmoddi4+0xa2>
 8000394:	2a00      	cmp	r2, #0
 8000396:	f000 8090 	beq.w	80004ba <__udivmoddi4+0x202>
 800039a:	fab2 f682 	clz	r6, r2
 800039e:	2e00      	cmp	r6, #0
 80003a0:	f040 80a4 	bne.w	80004ec <__udivmoddi4+0x234>
 80003a4:	1a8a      	subs	r2, r1, r2
 80003a6:	0c03      	lsrs	r3, r0, #16
 80003a8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ac:	b280      	uxth	r0, r0
 80003ae:	b2bc      	uxth	r4, r7
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb2 fcfe 	udiv	ip, r2, lr
 80003b6:	fb0e 221c 	mls	r2, lr, ip, r2
 80003ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003be:	fb04 f20c 	mul.w	r2, r4, ip
 80003c2:	429a      	cmp	r2, r3
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x11e>
 80003c6:	18fb      	adds	r3, r7, r3
 80003c8:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003cc:	d202      	bcs.n	80003d4 <__udivmoddi4+0x11c>
 80003ce:	429a      	cmp	r2, r3
 80003d0:	f200 80e0 	bhi.w	8000594 <__udivmoddi4+0x2dc>
 80003d4:	46c4      	mov	ip, r8
 80003d6:	1a9b      	subs	r3, r3, r2
 80003d8:	fbb3 f2fe 	udiv	r2, r3, lr
 80003dc:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003e4:	fb02 f404 	mul.w	r4, r2, r4
 80003e8:	429c      	cmp	r4, r3
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x144>
 80003ec:	18fb      	adds	r3, r7, r3
 80003ee:	f102 30ff 	add.w	r0, r2, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x142>
 80003f4:	429c      	cmp	r4, r3
 80003f6:	f200 80ca 	bhi.w	800058e <__udivmoddi4+0x2d6>
 80003fa:	4602      	mov	r2, r0
 80003fc:	1b1b      	subs	r3, r3, r4
 80003fe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0x98>
 8000404:	f1c1 0620 	rsb	r6, r1, #32
 8000408:	408b      	lsls	r3, r1
 800040a:	fa22 f706 	lsr.w	r7, r2, r6
 800040e:	431f      	orrs	r7, r3
 8000410:	fa0e f401 	lsl.w	r4, lr, r1
 8000414:	fa20 f306 	lsr.w	r3, r0, r6
 8000418:	fa2e fe06 	lsr.w	lr, lr, r6
 800041c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000420:	4323      	orrs	r3, r4
 8000422:	fa00 f801 	lsl.w	r8, r0, r1
 8000426:	fa1f fc87 	uxth.w	ip, r7
 800042a:	fbbe f0f9 	udiv	r0, lr, r9
 800042e:	0c1c      	lsrs	r4, r3, #16
 8000430:	fb09 ee10 	mls	lr, r9, r0, lr
 8000434:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000438:	fb00 fe0c 	mul.w	lr, r0, ip
 800043c:	45a6      	cmp	lr, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	d909      	bls.n	8000458 <__udivmoddi4+0x1a0>
 8000444:	193c      	adds	r4, r7, r4
 8000446:	f100 3aff 	add.w	sl, r0, #4294967295
 800044a:	f080 809c 	bcs.w	8000586 <__udivmoddi4+0x2ce>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f240 8099 	bls.w	8000586 <__udivmoddi4+0x2ce>
 8000454:	3802      	subs	r0, #2
 8000456:	443c      	add	r4, r7
 8000458:	eba4 040e 	sub.w	r4, r4, lr
 800045c:	fa1f fe83 	uxth.w	lr, r3
 8000460:	fbb4 f3f9 	udiv	r3, r4, r9
 8000464:	fb09 4413 	mls	r4, r9, r3, r4
 8000468:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800046c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000470:	45a4      	cmp	ip, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x1ce>
 8000474:	193c      	adds	r4, r7, r4
 8000476:	f103 3eff 	add.w	lr, r3, #4294967295
 800047a:	f080 8082 	bcs.w	8000582 <__udivmoddi4+0x2ca>
 800047e:	45a4      	cmp	ip, r4
 8000480:	d97f      	bls.n	8000582 <__udivmoddi4+0x2ca>
 8000482:	3b02      	subs	r3, #2
 8000484:	443c      	add	r4, r7
 8000486:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000492:	4564      	cmp	r4, ip
 8000494:	4673      	mov	r3, lr
 8000496:	46e1      	mov	r9, ip
 8000498:	d362      	bcc.n	8000560 <__udivmoddi4+0x2a8>
 800049a:	d05f      	beq.n	800055c <__udivmoddi4+0x2a4>
 800049c:	b15d      	cbz	r5, 80004b6 <__udivmoddi4+0x1fe>
 800049e:	ebb8 0203 	subs.w	r2, r8, r3
 80004a2:	eb64 0409 	sbc.w	r4, r4, r9
 80004a6:	fa04 f606 	lsl.w	r6, r4, r6
 80004aa:	fa22 f301 	lsr.w	r3, r2, r1
 80004ae:	431e      	orrs	r6, r3
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	e9c5 6400 	strd	r6, r4, [r5]
 80004b6:	2100      	movs	r1, #0
 80004b8:	e74f      	b.n	800035a <__udivmoddi4+0xa2>
 80004ba:	fbb1 fcf2 	udiv	ip, r1, r2
 80004be:	0c01      	lsrs	r1, r0, #16
 80004c0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004c4:	b280      	uxth	r0, r0
 80004c6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004ca:	463b      	mov	r3, r7
 80004cc:	4638      	mov	r0, r7
 80004ce:	463c      	mov	r4, r7
 80004d0:	46b8      	mov	r8, r7
 80004d2:	46be      	mov	lr, r7
 80004d4:	2620      	movs	r6, #32
 80004d6:	fbb1 f1f7 	udiv	r1, r1, r7
 80004da:	eba2 0208 	sub.w	r2, r2, r8
 80004de:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004e2:	e766      	b.n	80003b2 <__udivmoddi4+0xfa>
 80004e4:	4601      	mov	r1, r0
 80004e6:	e718      	b.n	800031a <__udivmoddi4+0x62>
 80004e8:	4610      	mov	r0, r2
 80004ea:	e72c      	b.n	8000346 <__udivmoddi4+0x8e>
 80004ec:	f1c6 0220 	rsb	r2, r6, #32
 80004f0:	fa2e f302 	lsr.w	r3, lr, r2
 80004f4:	40b7      	lsls	r7, r6
 80004f6:	40b1      	lsls	r1, r6
 80004f8:	fa20 f202 	lsr.w	r2, r0, r2
 80004fc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000500:	430a      	orrs	r2, r1
 8000502:	fbb3 f8fe 	udiv	r8, r3, lr
 8000506:	b2bc      	uxth	r4, r7
 8000508:	fb0e 3318 	mls	r3, lr, r8, r3
 800050c:	0c11      	lsrs	r1, r2, #16
 800050e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000512:	fb08 f904 	mul.w	r9, r8, r4
 8000516:	40b0      	lsls	r0, r6
 8000518:	4589      	cmp	r9, r1
 800051a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800051e:	b280      	uxth	r0, r0
 8000520:	d93e      	bls.n	80005a0 <__udivmoddi4+0x2e8>
 8000522:	1879      	adds	r1, r7, r1
 8000524:	f108 3cff 	add.w	ip, r8, #4294967295
 8000528:	d201      	bcs.n	800052e <__udivmoddi4+0x276>
 800052a:	4589      	cmp	r9, r1
 800052c:	d81f      	bhi.n	800056e <__udivmoddi4+0x2b6>
 800052e:	eba1 0109 	sub.w	r1, r1, r9
 8000532:	fbb1 f9fe 	udiv	r9, r1, lr
 8000536:	fb09 f804 	mul.w	r8, r9, r4
 800053a:	fb0e 1119 	mls	r1, lr, r9, r1
 800053e:	b292      	uxth	r2, r2
 8000540:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000544:	4542      	cmp	r2, r8
 8000546:	d229      	bcs.n	800059c <__udivmoddi4+0x2e4>
 8000548:	18ba      	adds	r2, r7, r2
 800054a:	f109 31ff 	add.w	r1, r9, #4294967295
 800054e:	d2c4      	bcs.n	80004da <__udivmoddi4+0x222>
 8000550:	4542      	cmp	r2, r8
 8000552:	d2c2      	bcs.n	80004da <__udivmoddi4+0x222>
 8000554:	f1a9 0102 	sub.w	r1, r9, #2
 8000558:	443a      	add	r2, r7
 800055a:	e7be      	b.n	80004da <__udivmoddi4+0x222>
 800055c:	45f0      	cmp	r8, lr
 800055e:	d29d      	bcs.n	800049c <__udivmoddi4+0x1e4>
 8000560:	ebbe 0302 	subs.w	r3, lr, r2
 8000564:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000568:	3801      	subs	r0, #1
 800056a:	46e1      	mov	r9, ip
 800056c:	e796      	b.n	800049c <__udivmoddi4+0x1e4>
 800056e:	eba7 0909 	sub.w	r9, r7, r9
 8000572:	4449      	add	r1, r9
 8000574:	f1a8 0c02 	sub.w	ip, r8, #2
 8000578:	fbb1 f9fe 	udiv	r9, r1, lr
 800057c:	fb09 f804 	mul.w	r8, r9, r4
 8000580:	e7db      	b.n	800053a <__udivmoddi4+0x282>
 8000582:	4673      	mov	r3, lr
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1ce>
 8000586:	4650      	mov	r0, sl
 8000588:	e766      	b.n	8000458 <__udivmoddi4+0x1a0>
 800058a:	4608      	mov	r0, r1
 800058c:	e6fd      	b.n	800038a <__udivmoddi4+0xd2>
 800058e:	443b      	add	r3, r7
 8000590:	3a02      	subs	r2, #2
 8000592:	e733      	b.n	80003fc <__udivmoddi4+0x144>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	443b      	add	r3, r7
 800059a:	e71c      	b.n	80003d6 <__udivmoddi4+0x11e>
 800059c:	4649      	mov	r1, r9
 800059e:	e79c      	b.n	80004da <__udivmoddi4+0x222>
 80005a0:	eba1 0109 	sub.w	r1, r1, r9
 80005a4:	46c4      	mov	ip, r8
 80005a6:	fbb1 f9fe 	udiv	r9, r1, lr
 80005aa:	fb09 f804 	mul.w	r8, r9, r4
 80005ae:	e7c4      	b.n	800053a <__udivmoddi4+0x282>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <record_sample_and_maybe_runFFT>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void record_sample_and_maybe_runFFT(void) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
    // Convert raw 12‐bit ADC (0..4095) to float in [-1,+1], after centering around middle_point
	uint16_t raw_adc = HAL_ADC_GetValue(&hadc1);
 80005ba:	481a      	ldr	r0, [pc, #104]	@ (8000624 <record_sample_and_maybe_runFFT+0x70>)
 80005bc:	f001 f946 	bl	800184c <HAL_ADC_GetValue>
 80005c0:	4603      	mov	r3, r0
 80005c2:	80fb      	strh	r3, [r7, #6]

    float centered = ((float)(raw_adc - middle_point)) * UINT16_TO_FLOAT;
 80005c4:	88fb      	ldrh	r3, [r7, #6]
 80005c6:	4a18      	ldr	r2, [pc, #96]	@ (8000628 <record_sample_and_maybe_runFFT+0x74>)
 80005c8:	8812      	ldrh	r2, [r2, #0]
 80005ca:	1a9b      	subs	r3, r3, r2
 80005cc:	ee07 3a90 	vmov	s15, r3
 80005d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005d4:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 800062c <record_sample_and_maybe_runFFT+0x78>
 80005d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005dc:	edc7 7a00 	vstr	s15, [r7]
    fftBufIn[fftIndex] = centered;
 80005e0:	4b13      	ldr	r3, [pc, #76]	@ (8000630 <record_sample_and_maybe_runFFT+0x7c>)
 80005e2:	881b      	ldrh	r3, [r3, #0]
 80005e4:	4a13      	ldr	r2, [pc, #76]	@ (8000634 <record_sample_and_maybe_runFFT+0x80>)
 80005e6:	009b      	lsls	r3, r3, #2
 80005e8:	4413      	add	r3, r2
 80005ea:	683a      	ldr	r2, [r7, #0]
 80005ec:	601a      	str	r2, [r3, #0]
    fftIndex++;
 80005ee:	4b10      	ldr	r3, [pc, #64]	@ (8000630 <record_sample_and_maybe_runFFT+0x7c>)
 80005f0:	881b      	ldrh	r3, [r3, #0]
 80005f2:	3301      	adds	r3, #1
 80005f4:	b29a      	uxth	r2, r3
 80005f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000630 <record_sample_and_maybe_runFFT+0x7c>)
 80005f8:	801a      	strh	r2, [r3, #0]

    if (fftIndex >= FFT_BUFFER_SIZE) {
 80005fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000630 <record_sample_and_maybe_runFFT+0x7c>)
 80005fc:	881b      	ldrh	r3, [r3, #0]
 80005fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000602:	d30b      	bcc.n	800061c <record_sample_and_maybe_runFFT+0x68>
        // Run the RFFT in place: fftBufIn → fftBufOut
        arm_rfft_fast_f32(&fftHandler, fftBufIn, fftBufOut, 0);
 8000604:	2300      	movs	r3, #0
 8000606:	4a0c      	ldr	r2, [pc, #48]	@ (8000638 <record_sample_and_maybe_runFFT+0x84>)
 8000608:	490a      	ldr	r1, [pc, #40]	@ (8000634 <record_sample_and_maybe_runFFT+0x80>)
 800060a:	480c      	ldr	r0, [pc, #48]	@ (800063c <record_sample_and_maybe_runFFT+0x88>)
 800060c:	f003 fe88 	bl	8004320 <arm_rfft_fast_f32>

        fftReady = 1;
 8000610:	4b0b      	ldr	r3, [pc, #44]	@ (8000640 <record_sample_and_maybe_runFFT+0x8c>)
 8000612:	2201      	movs	r2, #1
 8000614:	701a      	strb	r2, [r3, #0]
        fftIndex = 0; // reset buffer index to record next block
 8000616:	4b06      	ldr	r3, [pc, #24]	@ (8000630 <record_sample_and_maybe_runFFT+0x7c>)
 8000618:	2200      	movs	r2, #0
 800061a:	801a      	strh	r2, [r3, #0]
    }
}
 800061c:	bf00      	nop
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20000078 	.word	0x20000078
 8000628:	200001b8 	.word	0x200001b8
 800062c:	37800001 	.word	0x37800001
 8000630:	200041d8 	.word	0x200041d8
 8000634:	200001d8 	.word	0x200001d8
 8000638:	200021d8 	.word	0x200021d8
 800063c:	200001c0 	.word	0x200001c0
 8000640:	200041da 	.word	0x200041da

08000644 <calculate_middle_point>:


void calculate_middle_point(){
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
	uint32_t sum = 0;
 800064a:	2300      	movs	r3, #0
 800064c:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < 32; i++){
 800064e:	2300      	movs	r3, #0
 8000650:	603b      	str	r3, [r7, #0]
 8000652:	e019      	b.n	8000688 <calculate_middle_point+0x44>
		  HAL_ADC_Start(&hadc1);
 8000654:	4812      	ldr	r0, [pc, #72]	@ (80006a0 <calculate_middle_point+0x5c>)
 8000656:	f000 fd7b 	bl	8001150 <HAL_ADC_Start>
		  if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK)
 800065a:	210a      	movs	r1, #10
 800065c:	4810      	ldr	r0, [pc, #64]	@ (80006a0 <calculate_middle_point+0x5c>)
 800065e:	f000 fe7c 	bl	800135a <HAL_ADC_PollForConversion>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d106      	bne.n	8000676 <calculate_middle_point+0x32>
			  sum += HAL_ADC_GetValue(&hadc1);
 8000668:	480d      	ldr	r0, [pc, #52]	@ (80006a0 <calculate_middle_point+0x5c>)
 800066a:	f001 f8ef 	bl	800184c <HAL_ADC_GetValue>
 800066e:	4602      	mov	r2, r0
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	4413      	add	r3, r2
 8000674:	607b      	str	r3, [r7, #4]
		  HAL_ADC_Stop(&hadc1);
 8000676:	480a      	ldr	r0, [pc, #40]	@ (80006a0 <calculate_middle_point+0x5c>)
 8000678:	f000 fe3c 	bl	80012f4 <HAL_ADC_Stop>
		  HAL_Delay(1);
 800067c:	2001      	movs	r0, #1
 800067e:	f000 fcff 	bl	8001080 <HAL_Delay>
	for (int i = 0; i < 32; i++){
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	3301      	adds	r3, #1
 8000686:	603b      	str	r3, [r7, #0]
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	2b1f      	cmp	r3, #31
 800068c:	dde2      	ble.n	8000654 <calculate_middle_point+0x10>
	  }

	middle_point = (uint16_t)(sum / 32);
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	095b      	lsrs	r3, r3, #5
 8000692:	b29a      	uxth	r2, r3
 8000694:	4b03      	ldr	r3, [pc, #12]	@ (80006a4 <calculate_middle_point+0x60>)
 8000696:	801a      	strh	r2, [r3, #0]
}
 8000698:	bf00      	nop
 800069a:	3708      	adds	r7, #8
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	20000078 	.word	0x20000078
 80006a4:	200001b8 	.word	0x200001b8

080006a8 <HAL_TIM_PWM_PulseFinishedCallback>:
	return abs(temp - middle_point);
}



void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
    if (htim == &htim1) {
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	4a07      	ldr	r2, [pc, #28]	@ (80006d0 <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d106      	bne.n	80006c6 <HAL_TIM_PWM_PulseFinishedCallback+0x1e>
        HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 80006b8:	2100      	movs	r1, #0
 80006ba:	4805      	ldr	r0, [pc, #20]	@ (80006d0 <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 80006bc:	f002 fe40 	bl	8003340 <HAL_TIM_PWM_Stop_DMA>
        datasentflag = 1;
 80006c0:	4b04      	ldr	r3, [pc, #16]	@ (80006d4 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	601a      	str	r2, [r3, #0]
    }
}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	200000c0 	.word	0x200000c0
 80006d4:	200001b4 	.word	0x200001b4

080006d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b086      	sub	sp, #24
 80006dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006de:	f000 fc5d 	bl	8000f9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e2:	f000 f88d 	bl	8000800 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e6:	f000 fa53 	bl	8000b90 <MX_GPIO_Init>
  MX_DMA_Init();
 80006ea:	f000 fa31 	bl	8000b50 <MX_DMA_Init>
  MX_TIM1_Init();
 80006ee:	f000 f943 	bl	8000978 <MX_TIM1_Init>
  MX_ADC1_Init();
 80006f2:	f000 f8ef 	bl	80008d4 <MX_ADC1_Init>
  MX_TIM2_Init();
 80006f6:	f000 f9df 	bl	8000ab8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  calculate_middle_point();
 80006fa:	f7ff ffa3 	bl	8000644 <calculate_middle_point>

  HAL_TIM_Base_Start(&htim2);
 80006fe:	4837      	ldr	r0, [pc, #220]	@ (80007dc <main+0x104>)
 8000700:	f002 fd5c 	bl	80031bc <HAL_TIM_Base_Start>


  HAL_ADC_Start_IT(&hadc1);
 8000704:	4836      	ldr	r0, [pc, #216]	@ (80007e0 <main+0x108>)
 8000706:	f000 feb3 	bl	8001470 <HAL_ADC_Start_IT>
  arm_rfft_fast_init_f32(&fftHandler, FFT_BUFFER_SIZE);
 800070a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800070e:	4835      	ldr	r0, [pc, #212]	@ (80007e4 <main+0x10c>)
 8000710:	f003 fd82 	bl	8004218 <arm_rfft_fast_init_f32>

  float	peakVal	= 0.0f;
 8000714:	f04f 0300 	mov.w	r3, #0
 8000718:	617b      	str	r3, [r7, #20]



	  //for FFT

		  if (fftReady){
 800071a:	4b33      	ldr	r3, [pc, #204]	@ (80007e8 <main+0x110>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d057      	beq.n	80007d2 <main+0xfa>
			  // Compute absolute value of complex FFT results per frequency bin, get peak
			  peakVal = 0.0f;
 8000722:	f04f 0300 	mov.w	r3, #0
 8000726:	617b      	str	r3, [r7, #20]
			  peakHz = 0.0f;
 8000728:	4b30      	ldr	r3, [pc, #192]	@ (80007ec <main+0x114>)
 800072a:	2200      	movs	r2, #0
 800072c:	801a      	strh	r2, [r3, #0]


			  uint16_t halfBins = FFT_BUFFER_SIZE / 2;
 800072e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000732:	823b      	strh	r3, [r7, #16]
				  for (uint16_t k = 1; k < halfBins; k++) {
 8000734:	2301      	movs	r3, #1
 8000736:	827b      	strh	r3, [r7, #18]
 8000738:	e044      	b.n	80007c4 <main+0xec>
					  float re = fftBufOut[2 * k];
 800073a:	8a7b      	ldrh	r3, [r7, #18]
 800073c:	005b      	lsls	r3, r3, #1
 800073e:	4a2c      	ldr	r2, [pc, #176]	@ (80007f0 <main+0x118>)
 8000740:	009b      	lsls	r3, r3, #2
 8000742:	4413      	add	r3, r2
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	60fb      	str	r3, [r7, #12]
					  float im = fftBufOut[2 * k + 1];
 8000748:	8a7b      	ldrh	r3, [r7, #18]
 800074a:	005b      	lsls	r3, r3, #1
 800074c:	3301      	adds	r3, #1
 800074e:	4a28      	ldr	r2, [pc, #160]	@ (80007f0 <main+0x118>)
 8000750:	009b      	lsls	r3, r3, #2
 8000752:	4413      	add	r3, r2
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	60bb      	str	r3, [r7, #8]
					  float mag = sqrtf(re * re + im * im);
 8000758:	edd7 7a03 	vldr	s15, [r7, #12]
 800075c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000760:	edd7 7a02 	vldr	s15, [r7, #8]
 8000764:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000768:	ee77 7a27 	vadd.f32	s15, s14, s15
 800076c:	eeb0 0a67 	vmov.f32	s0, s15
 8000770:	f004 fd58 	bl	8005224 <sqrtf>
 8000774:	ed87 0a01 	vstr	s0, [r7, #4]
					  if (mag > peakVal) {
 8000778:	ed97 7a01 	vldr	s14, [r7, #4]
 800077c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000780:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000788:	dd19      	ble.n	80007be <main+0xe6>
						  peakVal = mag;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	617b      	str	r3, [r7, #20]
						  peakHz  = (uint16_t)(k  * SAMPLE_RATE_HZ / (float)(FFT_BUFFER_SIZE));
 800078e:	8a7b      	ldrh	r3, [r7, #18]
 8000790:	ee07 3a90 	vmov	s15, r3
 8000794:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000798:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80007f4 <main+0x11c>
 800079c:	ee27 7a87 	vmul.f32	s14, s15, s14
 80007a0:	eddf 6a15 	vldr	s13, [pc, #84]	@ 80007f8 <main+0x120>
 80007a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80007a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007ac:	ee17 3a90 	vmov	r3, s15
 80007b0:	b29a      	uxth	r2, r3
 80007b2:	4b0e      	ldr	r3, [pc, #56]	@ (80007ec <main+0x114>)
 80007b4:	801a      	strh	r2, [r3, #0]
						  freq = peakHz;
 80007b6:	4b0d      	ldr	r3, [pc, #52]	@ (80007ec <main+0x114>)
 80007b8:	881a      	ldrh	r2, [r3, #0]
 80007ba:	4b10      	ldr	r3, [pc, #64]	@ (80007fc <main+0x124>)
 80007bc:	801a      	strh	r2, [r3, #0]
				  for (uint16_t k = 1; k < halfBins; k++) {
 80007be:	8a7b      	ldrh	r3, [r7, #18]
 80007c0:	3301      	adds	r3, #1
 80007c2:	827b      	strh	r3, [r7, #18]
 80007c4:	8a7a      	ldrh	r2, [r7, #18]
 80007c6:	8a3b      	ldrh	r3, [r7, #16]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	d3b6      	bcc.n	800073a <main+0x62>
				  }




				  fftReady = 0;
 80007cc:	4b06      	ldr	r3, [pc, #24]	@ (80007e8 <main+0x110>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	701a      	strb	r2, [r3, #0]
		  }

	  HAL_Delay(1);
 80007d2:	2001      	movs	r0, #1
 80007d4:	f000 fc54 	bl	8001080 <HAL_Delay>
		  if (fftReady){
 80007d8:	e79f      	b.n	800071a <main+0x42>
 80007da:	bf00      	nop
 80007dc:	20000108 	.word	0x20000108
 80007e0:	20000078 	.word	0x20000078
 80007e4:	200001c0 	.word	0x200001c0
 80007e8:	200041da 	.word	0x200041da
 80007ec:	200001bc 	.word	0x200001bc
 80007f0:	200021d8 	.word	0x200021d8
 80007f4:	46610000 	.word	0x46610000
 80007f8:	45000000 	.word	0x45000000
 80007fc:	200001ba 	.word	0x200001ba

08000800 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b094      	sub	sp, #80	@ 0x50
 8000804:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000806:	f107 0320 	add.w	r3, r7, #32
 800080a:	2230      	movs	r2, #48	@ 0x30
 800080c:	2100      	movs	r1, #0
 800080e:	4618      	mov	r0, r3
 8000810:	f004 fcd6 	bl	80051c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000814:	f107 030c 	add.w	r3, r7, #12
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
 8000822:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000824:	2300      	movs	r3, #0
 8000826:	60bb      	str	r3, [r7, #8]
 8000828:	4b28      	ldr	r3, [pc, #160]	@ (80008cc <SystemClock_Config+0xcc>)
 800082a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800082c:	4a27      	ldr	r2, [pc, #156]	@ (80008cc <SystemClock_Config+0xcc>)
 800082e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000832:	6413      	str	r3, [r2, #64]	@ 0x40
 8000834:	4b25      	ldr	r3, [pc, #148]	@ (80008cc <SystemClock_Config+0xcc>)
 8000836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000838:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800083c:	60bb      	str	r3, [r7, #8]
 800083e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000840:	2300      	movs	r3, #0
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	4b22      	ldr	r3, [pc, #136]	@ (80008d0 <SystemClock_Config+0xd0>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a21      	ldr	r2, [pc, #132]	@ (80008d0 <SystemClock_Config+0xd0>)
 800084a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800084e:	6013      	str	r3, [r2, #0]
 8000850:	4b1f      	ldr	r3, [pc, #124]	@ (80008d0 <SystemClock_Config+0xd0>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800085c:	2302      	movs	r3, #2
 800085e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000860:	2301      	movs	r3, #1
 8000862:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000864:	2310      	movs	r3, #16
 8000866:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000868:	2302      	movs	r3, #2
 800086a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800086c:	2300      	movs	r3, #0
 800086e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000870:	2308      	movs	r3, #8
 8000872:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000874:	2348      	movs	r3, #72	@ 0x48
 8000876:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000878:	2302      	movs	r3, #2
 800087a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800087c:	2304      	movs	r3, #4
 800087e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000880:	f107 0320 	add.w	r3, r7, #32
 8000884:	4618      	mov	r0, r3
 8000886:	f001 ffe5 	bl	8002854 <HAL_RCC_OscConfig>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000890:	f000 f9d6 	bl	8000c40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000894:	230f      	movs	r3, #15
 8000896:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000898:	2302      	movs	r3, #2
 800089a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800089c:	2300      	movs	r3, #0
 800089e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008ac:	f107 030c 	add.w	r3, r7, #12
 80008b0:	2102      	movs	r1, #2
 80008b2:	4618      	mov	r0, r3
 80008b4:	f002 fa46 	bl	8002d44 <HAL_RCC_ClockConfig>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008be:	f000 f9bf 	bl	8000c40 <Error_Handler>
  }
}
 80008c2:	bf00      	nop
 80008c4:	3750      	adds	r7, #80	@ 0x50
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40007000 	.word	0x40007000

080008d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008da:	463b      	mov	r3, r7
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008e6:	4b22      	ldr	r3, [pc, #136]	@ (8000970 <MX_ADC1_Init+0x9c>)
 80008e8:	4a22      	ldr	r2, [pc, #136]	@ (8000974 <MX_ADC1_Init+0xa0>)
 80008ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80008ec:	4b20      	ldr	r3, [pc, #128]	@ (8000970 <MX_ADC1_Init+0x9c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008f2:	4b1f      	ldr	r3, [pc, #124]	@ (8000970 <MX_ADC1_Init+0x9c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80008f8:	4b1d      	ldr	r3, [pc, #116]	@ (8000970 <MX_ADC1_Init+0x9c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008fe:	4b1c      	ldr	r3, [pc, #112]	@ (8000970 <MX_ADC1_Init+0x9c>)
 8000900:	2200      	movs	r2, #0
 8000902:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000904:	4b1a      	ldr	r3, [pc, #104]	@ (8000970 <MX_ADC1_Init+0x9c>)
 8000906:	2200      	movs	r2, #0
 8000908:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800090c:	4b18      	ldr	r3, [pc, #96]	@ (8000970 <MX_ADC1_Init+0x9c>)
 800090e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000912:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000914:	4b16      	ldr	r3, [pc, #88]	@ (8000970 <MX_ADC1_Init+0x9c>)
 8000916:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800091a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800091c:	4b14      	ldr	r3, [pc, #80]	@ (8000970 <MX_ADC1_Init+0x9c>)
 800091e:	2200      	movs	r2, #0
 8000920:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000922:	4b13      	ldr	r3, [pc, #76]	@ (8000970 <MX_ADC1_Init+0x9c>)
 8000924:	2201      	movs	r2, #1
 8000926:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000928:	4b11      	ldr	r3, [pc, #68]	@ (8000970 <MX_ADC1_Init+0x9c>)
 800092a:	2200      	movs	r2, #0
 800092c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000930:	4b0f      	ldr	r3, [pc, #60]	@ (8000970 <MX_ADC1_Init+0x9c>)
 8000932:	2201      	movs	r2, #1
 8000934:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000936:	480e      	ldr	r0, [pc, #56]	@ (8000970 <MX_ADC1_Init+0x9c>)
 8000938:	f000 fbc6 	bl	80010c8 <HAL_ADC_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000942:	f000 f97d 	bl	8000c40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000946:	2300      	movs	r3, #0
 8000948:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800094a:	2301      	movs	r3, #1
 800094c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800094e:	2301      	movs	r3, #1
 8000950:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000952:	463b      	mov	r3, r7
 8000954:	4619      	mov	r1, r3
 8000956:	4806      	ldr	r0, [pc, #24]	@ (8000970 <MX_ADC1_Init+0x9c>)
 8000958:	f000 ff9a 	bl	8001890 <HAL_ADC_ConfigChannel>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000962:	f000 f96d 	bl	8000c40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000966:	bf00      	nop
 8000968:	3710      	adds	r7, #16
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000078 	.word	0x20000078
 8000974:	40012000 	.word	0x40012000

08000978 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b096      	sub	sp, #88	@ 0x58
 800097c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800097e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	605a      	str	r2, [r3, #4]
 8000988:	609a      	str	r2, [r3, #8]
 800098a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800098c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000996:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
 80009a4:	611a      	str	r2, [r3, #16]
 80009a6:	615a      	str	r2, [r3, #20]
 80009a8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009aa:	1d3b      	adds	r3, r7, #4
 80009ac:	2220      	movs	r2, #32
 80009ae:	2100      	movs	r1, #0
 80009b0:	4618      	mov	r0, r3
 80009b2:	f004 fc05 	bl	80051c0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009b6:	4b3e      	ldr	r3, [pc, #248]	@ (8000ab0 <MX_TIM1_Init+0x138>)
 80009b8:	4a3e      	ldr	r2, [pc, #248]	@ (8000ab4 <MX_TIM1_Init+0x13c>)
 80009ba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80009bc:	4b3c      	ldr	r3, [pc, #240]	@ (8000ab0 <MX_TIM1_Init+0x138>)
 80009be:	2200      	movs	r2, #0
 80009c0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c2:	4b3b      	ldr	r3, [pc, #236]	@ (8000ab0 <MX_TIM1_Init+0x138>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90 - 1;
 80009c8:	4b39      	ldr	r3, [pc, #228]	@ (8000ab0 <MX_TIM1_Init+0x138>)
 80009ca:	2259      	movs	r2, #89	@ 0x59
 80009cc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ce:	4b38      	ldr	r3, [pc, #224]	@ (8000ab0 <MX_TIM1_Init+0x138>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009d4:	4b36      	ldr	r3, [pc, #216]	@ (8000ab0 <MX_TIM1_Init+0x138>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009da:	4b35      	ldr	r3, [pc, #212]	@ (8000ab0 <MX_TIM1_Init+0x138>)
 80009dc:	2200      	movs	r2, #0
 80009de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009e0:	4833      	ldr	r0, [pc, #204]	@ (8000ab0 <MX_TIM1_Init+0x138>)
 80009e2:	f002 fb9b 	bl	800311c <HAL_TIM_Base_Init>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80009ec:	f000 f928 	bl	8000c40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009f4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009f6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80009fa:	4619      	mov	r1, r3
 80009fc:	482c      	ldr	r0, [pc, #176]	@ (8000ab0 <MX_TIM1_Init+0x138>)
 80009fe:	f002 ff23 	bl	8003848 <HAL_TIM_ConfigClockSource>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000a08:	f000 f91a 	bl	8000c40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a0c:	4828      	ldr	r0, [pc, #160]	@ (8000ab0 <MX_TIM1_Init+0x138>)
 8000a0e:	f002 fc3d 	bl	800328c <HAL_TIM_PWM_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000a18:	f000 f912 	bl	8000c40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a20:	2300      	movs	r3, #0
 8000a22:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a24:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4821      	ldr	r0, [pc, #132]	@ (8000ab0 <MX_TIM1_Init+0x138>)
 8000a2c:	f003 fb12 	bl	8004054 <HAL_TIMEx_MasterConfigSynchronization>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000a36:	f000 f903 	bl	8000c40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a3a:	2360      	movs	r3, #96	@ 0x60
 8000a3c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a42:	2300      	movs	r3, #0
 8000a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a46:	2300      	movs	r3, #0
 8000a48:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a52:	2300      	movs	r3, #0
 8000a54:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4814      	ldr	r0, [pc, #80]	@ (8000ab0 <MX_TIM1_Init+0x138>)
 8000a60:	f002 fe30 	bl	80036c4 <HAL_TIM_PWM_ConfigChannel>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000a6a:	f000 f8e9 	bl	8000c40 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a72:	2300      	movs	r3, #0
 8000a74:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a76:	2300      	movs	r3, #0
 8000a78:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a82:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a86:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a8c:	1d3b      	adds	r3, r7, #4
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4807      	ldr	r0, [pc, #28]	@ (8000ab0 <MX_TIM1_Init+0x138>)
 8000a92:	f003 fb5b 	bl	800414c <HAL_TIMEx_ConfigBreakDeadTime>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000a9c:	f000 f8d0 	bl	8000c40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000aa0:	4803      	ldr	r0, [pc, #12]	@ (8000ab0 <MX_TIM1_Init+0x138>)
 8000aa2:	f000 f9b7 	bl	8000e14 <HAL_TIM_MspPostInit>

}
 8000aa6:	bf00      	nop
 8000aa8:	3758      	adds	r7, #88	@ 0x58
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	200000c0 	.word	0x200000c0
 8000ab4:	40010000 	.word	0x40010000

08000ab8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b086      	sub	sp, #24
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000abe:	f107 0308 	add.w	r3, r7, #8
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]
 8000ac8:	609a      	str	r2, [r3, #8]
 8000aca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000acc:	463b      	mov	r3, r7
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ad4:	4b1d      	ldr	r3, [pc, #116]	@ (8000b4c <MX_TIM2_Init+0x94>)
 8000ad6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ada:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 8000adc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b4c <MX_TIM2_Init+0x94>)
 8000ade:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ae2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae4:	4b19      	ldr	r3, [pc, #100]	@ (8000b4c <MX_TIM2_Init+0x94>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4;
 8000aea:	4b18      	ldr	r3, [pc, #96]	@ (8000b4c <MX_TIM2_Init+0x94>)
 8000aec:	2204      	movs	r2, #4
 8000aee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000af0:	4b16      	ldr	r3, [pc, #88]	@ (8000b4c <MX_TIM2_Init+0x94>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000af6:	4b15      	ldr	r3, [pc, #84]	@ (8000b4c <MX_TIM2_Init+0x94>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000afc:	4813      	ldr	r0, [pc, #76]	@ (8000b4c <MX_TIM2_Init+0x94>)
 8000afe:	f002 fb0d 	bl	800311c <HAL_TIM_Base_Init>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000b08:	f000 f89a 	bl	8000c40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b10:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b12:	f107 0308 	add.w	r3, r7, #8
 8000b16:	4619      	mov	r1, r3
 8000b18:	480c      	ldr	r0, [pc, #48]	@ (8000b4c <MX_TIM2_Init+0x94>)
 8000b1a:	f002 fe95 	bl	8003848 <HAL_TIM_ConfigClockSource>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000b24:	f000 f88c 	bl	8000c40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000b28:	2320      	movs	r3, #32
 8000b2a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b30:	463b      	mov	r3, r7
 8000b32:	4619      	mov	r1, r3
 8000b34:	4805      	ldr	r0, [pc, #20]	@ (8000b4c <MX_TIM2_Init+0x94>)
 8000b36:	f003 fa8d 	bl	8004054 <HAL_TIMEx_MasterConfigSynchronization>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000b40:	f000 f87e 	bl	8000c40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b44:	bf00      	nop
 8000b46:	3718      	adds	r7, #24
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	20000108 	.word	0x20000108

08000b50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	607b      	str	r3, [r7, #4]
 8000b5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b8c <MX_DMA_Init+0x3c>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5e:	4a0b      	ldr	r2, [pc, #44]	@ (8000b8c <MX_DMA_Init+0x3c>)
 8000b60:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b66:	4b09      	ldr	r3, [pc, #36]	@ (8000b8c <MX_DMA_Init+0x3c>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8000b72:	2200      	movs	r2, #0
 8000b74:	2105      	movs	r1, #5
 8000b76:	2039      	movs	r0, #57	@ 0x39
 8000b78:	f001 f98d 	bl	8001e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000b7c:	2039      	movs	r0, #57	@ 0x39
 8000b7e:	f001 f9a6 	bl	8001ece <HAL_NVIC_EnableIRQ>

}
 8000b82:	bf00      	nop
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40023800 	.word	0x40023800

08000b90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b088      	sub	sp, #32
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	60bb      	str	r3, [r7, #8]
 8000b9a:	4b19      	ldr	r3, [pc, #100]	@ (8000c00 <MX_GPIO_Init+0x70>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9e:	4a18      	ldr	r2, [pc, #96]	@ (8000c00 <MX_GPIO_Init+0x70>)
 8000ba0:	f043 0301 	orr.w	r3, r3, #1
 8000ba4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba6:	4b16      	ldr	r3, [pc, #88]	@ (8000c00 <MX_GPIO_Init+0x70>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	60bb      	str	r3, [r7, #8]
 8000bb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	607b      	str	r3, [r7, #4]
 8000bb6:	4b12      	ldr	r3, [pc, #72]	@ (8000c00 <MX_GPIO_Init+0x70>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bba:	4a11      	ldr	r2, [pc, #68]	@ (8000c00 <MX_GPIO_Init+0x70>)
 8000bbc:	f043 0310 	orr.w	r3, r3, #16
 8000bc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bc2:	4b0f      	ldr	r3, [pc, #60]	@ (8000c00 <MX_GPIO_Init+0x70>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc6:	f003 0310 	and.w	r3, r3, #16
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bce:	f107 030c 	add.w	r3, r7, #12
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
 8000bda:	60da      	str	r2, [r3, #12]
 8000bdc:	611a      	str	r2, [r3, #16]
     GPIO_InitStruct.Pin  = GPIO_PIN_0;
 8000bde:	2301      	movs	r3, #1
 8000be0:	60fb      	str	r3, [r7, #12]
     GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000be2:	2303      	movs	r3, #3
 8000be4:	613b      	str	r3, [r7, #16]
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	617b      	str	r3, [r7, #20]
     HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bea:	f107 030c 	add.w	r3, r7, #12
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4804      	ldr	r0, [pc, #16]	@ (8000c04 <MX_GPIO_Init+0x74>)
 8000bf2:	f001 fc93 	bl	800251c <HAL_GPIO_Init>
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000bf6:	bf00      	nop
 8000bf8:	3720      	adds	r7, #32
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40023800 	.word	0x40023800
 8000c04:	40020000 	.word	0x40020000

08000c08 <HAL_ADC_ConvCpltCallback>:
//        WS2812_Send();
//    }
//}
//
//// Called when second half of adc_buf is filled by DMA (another 32 samples)
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a07      	ldr	r2, [pc, #28]	@ (8000c34 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d108      	bne.n	8000c2c <HAL_ADC_ConvCpltCallback+0x24>
	    {
	        amp = HAL_ADC_GetValue(&hadc1);
 8000c1a:	4807      	ldr	r0, [pc, #28]	@ (8000c38 <HAL_ADC_ConvCpltCallback+0x30>)
 8000c1c:	f000 fe16 	bl	800184c <HAL_ADC_GetValue>
 8000c20:	4603      	mov	r3, r0
 8000c22:	b29a      	uxth	r2, r3
 8000c24:	4b05      	ldr	r3, [pc, #20]	@ (8000c3c <HAL_ADC_ConvCpltCallback+0x34>)
 8000c26:	801a      	strh	r2, [r3, #0]
	        record_sample_and_maybe_runFFT();
 8000c28:	f7ff fcc4 	bl	80005b4 <record_sample_and_maybe_runFFT>
	        // process “raw” or store into buffer or set a flag, etc.
	    }

}
 8000c2c:	bf00      	nop
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40012000 	.word	0x40012000
 8000c38:	20000078 	.word	0x20000078
 8000c3c:	200001b0 	.word	0x200001b0

08000c40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c44:	b672      	cpsid	i
}
 8000c46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c48:	bf00      	nop
 8000c4a:	e7fd      	b.n	8000c48 <Error_Handler+0x8>

08000c4c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	607b      	str	r3, [r7, #4]
 8000c56:	4b10      	ldr	r3, [pc, #64]	@ (8000c98 <HAL_MspInit+0x4c>)
 8000c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c5a:	4a0f      	ldr	r2, [pc, #60]	@ (8000c98 <HAL_MspInit+0x4c>)
 8000c5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c60:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c62:	4b0d      	ldr	r3, [pc, #52]	@ (8000c98 <HAL_MspInit+0x4c>)
 8000c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	603b      	str	r3, [r7, #0]
 8000c72:	4b09      	ldr	r3, [pc, #36]	@ (8000c98 <HAL_MspInit+0x4c>)
 8000c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c76:	4a08      	ldr	r2, [pc, #32]	@ (8000c98 <HAL_MspInit+0x4c>)
 8000c78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c7e:	4b06      	ldr	r3, [pc, #24]	@ (8000c98 <HAL_MspInit+0x4c>)
 8000c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c86:	603b      	str	r3, [r7, #0]
 8000c88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	40023800 	.word	0x40023800

08000c9c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08a      	sub	sp, #40	@ 0x28
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a1b      	ldr	r2, [pc, #108]	@ (8000d28 <HAL_ADC_MspInit+0x8c>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d12f      	bne.n	8000d1e <HAL_ADC_MspInit+0x82>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	613b      	str	r3, [r7, #16]
 8000cc2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d2c <HAL_ADC_MspInit+0x90>)
 8000cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cc6:	4a19      	ldr	r2, [pc, #100]	@ (8000d2c <HAL_ADC_MspInit+0x90>)
 8000cc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ccc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cce:	4b17      	ldr	r3, [pc, #92]	@ (8000d2c <HAL_ADC_MspInit+0x90>)
 8000cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000cd6:	613b      	str	r3, [r7, #16]
 8000cd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	4b13      	ldr	r3, [pc, #76]	@ (8000d2c <HAL_ADC_MspInit+0x90>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce2:	4a12      	ldr	r2, [pc, #72]	@ (8000d2c <HAL_ADC_MspInit+0x90>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cea:	4b10      	ldr	r3, [pc, #64]	@ (8000d2c <HAL_ADC_MspInit+0x90>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d02:	f107 0314 	add.w	r3, r7, #20
 8000d06:	4619      	mov	r1, r3
 8000d08:	4809      	ldr	r0, [pc, #36]	@ (8000d30 <HAL_ADC_MspInit+0x94>)
 8000d0a:	f001 fc07 	bl	800251c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2100      	movs	r1, #0
 8000d12:	2012      	movs	r0, #18
 8000d14:	f001 f8bf 	bl	8001e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000d18:	2012      	movs	r0, #18
 8000d1a:	f001 f8d8 	bl	8001ece <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000d1e:	bf00      	nop
 8000d20:	3728      	adds	r7, #40	@ 0x28
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40012000 	.word	0x40012000
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	40020000 	.word	0x40020000

08000d34 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a30      	ldr	r2, [pc, #192]	@ (8000e04 <HAL_TIM_Base_MspInit+0xd0>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d13f      	bne.n	8000dc6 <HAL_TIM_Base_MspInit+0x92>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	4b2f      	ldr	r3, [pc, #188]	@ (8000e08 <HAL_TIM_Base_MspInit+0xd4>)
 8000d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d4e:	4a2e      	ldr	r2, [pc, #184]	@ (8000e08 <HAL_TIM_Base_MspInit+0xd4>)
 8000d50:	f043 0301 	orr.w	r3, r3, #1
 8000d54:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d56:	4b2c      	ldr	r3, [pc, #176]	@ (8000e08 <HAL_TIM_Base_MspInit+0xd4>)
 8000d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8000d62:	4b2a      	ldr	r3, [pc, #168]	@ (8000e0c <HAL_TIM_Base_MspInit+0xd8>)
 8000d64:	4a2a      	ldr	r2, [pc, #168]	@ (8000e10 <HAL_TIM_Base_MspInit+0xdc>)
 8000d66:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8000d68:	4b28      	ldr	r3, [pc, #160]	@ (8000e0c <HAL_TIM_Base_MspInit+0xd8>)
 8000d6a:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8000d6e:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d70:	4b26      	ldr	r3, [pc, #152]	@ (8000e0c <HAL_TIM_Base_MspInit+0xd8>)
 8000d72:	2240      	movs	r2, #64	@ 0x40
 8000d74:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d76:	4b25      	ldr	r3, [pc, #148]	@ (8000e0c <HAL_TIM_Base_MspInit+0xd8>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000d7c:	4b23      	ldr	r3, [pc, #140]	@ (8000e0c <HAL_TIM_Base_MspInit+0xd8>)
 8000d7e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d82:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d84:	4b21      	ldr	r3, [pc, #132]	@ (8000e0c <HAL_TIM_Base_MspInit+0xd8>)
 8000d86:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000d8a:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d8c:	4b1f      	ldr	r3, [pc, #124]	@ (8000e0c <HAL_TIM_Base_MspInit+0xd8>)
 8000d8e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d92:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8000d94:	4b1d      	ldr	r3, [pc, #116]	@ (8000e0c <HAL_TIM_Base_MspInit+0xd8>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8000d9a:	4b1c      	ldr	r3, [pc, #112]	@ (8000e0c <HAL_TIM_Base_MspInit+0xd8>)
 8000d9c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000da0:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000da2:	4b1a      	ldr	r3, [pc, #104]	@ (8000e0c <HAL_TIM_Base_MspInit+0xd8>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000da8:	4818      	ldr	r0, [pc, #96]	@ (8000e0c <HAL_TIM_Base_MspInit+0xd8>)
 8000daa:	f001 f8ab 	bl	8001f04 <HAL_DMA_Init>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8000db4:	f7ff ff44 	bl	8000c40 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	4a14      	ldr	r2, [pc, #80]	@ (8000e0c <HAL_TIM_Base_MspInit+0xd8>)
 8000dbc:	625a      	str	r2, [r3, #36]	@ 0x24
 8000dbe:	4a13      	ldr	r2, [pc, #76]	@ (8000e0c <HAL_TIM_Base_MspInit+0xd8>)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6393      	str	r3, [r2, #56]	@ 0x38
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000dc4:	e01a      	b.n	8000dfc <HAL_TIM_Base_MspInit+0xc8>
  else if(htim_base->Instance==TIM2)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000dce:	d115      	bne.n	8000dfc <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60bb      	str	r3, [r7, #8]
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8000e08 <HAL_TIM_Base_MspInit+0xd4>)
 8000dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd8:	4a0b      	ldr	r2, [pc, #44]	@ (8000e08 <HAL_TIM_Base_MspInit+0xd4>)
 8000dda:	f043 0301 	orr.w	r3, r3, #1
 8000dde:	6413      	str	r3, [r2, #64]	@ 0x40
 8000de0:	4b09      	ldr	r3, [pc, #36]	@ (8000e08 <HAL_TIM_Base_MspInit+0xd4>)
 8000de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de4:	f003 0301 	and.w	r3, r3, #1
 8000de8:	60bb      	str	r3, [r7, #8]
 8000dea:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000dec:	2200      	movs	r2, #0
 8000dee:	2100      	movs	r1, #0
 8000df0:	201c      	movs	r0, #28
 8000df2:	f001 f850 	bl	8001e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000df6:	201c      	movs	r0, #28
 8000df8:	f001 f869 	bl	8001ece <HAL_NVIC_EnableIRQ>
}
 8000dfc:	bf00      	nop
 8000dfe:	3710      	adds	r7, #16
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40010000 	.word	0x40010000
 8000e08:	40023800 	.word	0x40023800
 8000e0c:	20000150 	.word	0x20000150
 8000e10:	40026428 	.word	0x40026428

08000e14 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b088      	sub	sp, #32
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1c:	f107 030c 	add.w	r3, r7, #12
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a12      	ldr	r2, [pc, #72]	@ (8000e7c <HAL_TIM_MspPostInit+0x68>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d11e      	bne.n	8000e74 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	60bb      	str	r3, [r7, #8]
 8000e3a:	4b11      	ldr	r3, [pc, #68]	@ (8000e80 <HAL_TIM_MspPostInit+0x6c>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3e:	4a10      	ldr	r2, [pc, #64]	@ (8000e80 <HAL_TIM_MspPostInit+0x6c>)
 8000e40:	f043 0310 	orr.w	r3, r3, #16
 8000e44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e46:	4b0e      	ldr	r3, [pc, #56]	@ (8000e80 <HAL_TIM_MspPostInit+0x6c>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4a:	f003 0310 	and.w	r3, r3, #16
 8000e4e:	60bb      	str	r3, [r7, #8]
 8000e50:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = RGB_LED_Pin;
 8000e52:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e56:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e60:	2300      	movs	r3, #0
 8000e62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e64:	2301      	movs	r3, #1
 8000e66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(RGB_LED_GPIO_Port, &GPIO_InitStruct);
 8000e68:	f107 030c 	add.w	r3, r7, #12
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4805      	ldr	r0, [pc, #20]	@ (8000e84 <HAL_TIM_MspPostInit+0x70>)
 8000e70:	f001 fb54 	bl	800251c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000e74:	bf00      	nop
 8000e76:	3720      	adds	r7, #32
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	40010000 	.word	0x40010000
 8000e80:	40023800 	.word	0x40023800
 8000e84:	40021000 	.word	0x40021000

08000e88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e8c:	bf00      	nop
 8000e8e:	e7fd      	b.n	8000e8c <NMI_Handler+0x4>

08000e90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e94:	bf00      	nop
 8000e96:	e7fd      	b.n	8000e94 <HardFault_Handler+0x4>

08000e98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e9c:	bf00      	nop
 8000e9e:	e7fd      	b.n	8000e9c <MemManage_Handler+0x4>

08000ea0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ea4:	bf00      	nop
 8000ea6:	e7fd      	b.n	8000ea4 <BusFault_Handler+0x4>

08000ea8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eac:	bf00      	nop
 8000eae:	e7fd      	b.n	8000eac <UsageFault_Handler+0x4>

08000eb0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr

08000ebe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr

08000eda <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ede:	f000 f8af 	bl	8001040 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
	...

08000ee8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000eec:	4802      	ldr	r0, [pc, #8]	@ (8000ef8 <ADC_IRQHandler+0x10>)
 8000eee:	f000 fb9d 	bl	800162c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000078 	.word	0x20000078

08000efc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f00:	4802      	ldr	r0, [pc, #8]	@ (8000f0c <TIM2_IRQHandler+0x10>)
 8000f02:	f002 faef 	bl	80034e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20000108 	.word	0x20000108

08000f10 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000f14:	4802      	ldr	r0, [pc, #8]	@ (8000f20 <DMA2_Stream1_IRQHandler+0x10>)
 8000f16:	f001 f8c5 	bl	80020a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000150 	.word	0x20000150

08000f24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f28:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <SystemInit+0x20>)
 8000f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f2e:	4a05      	ldr	r2, [pc, #20]	@ (8000f44 <SystemInit+0x20>)
 8000f30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f80 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f4c:	f7ff ffea 	bl	8000f24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f50:	480c      	ldr	r0, [pc, #48]	@ (8000f84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f52:	490d      	ldr	r1, [pc, #52]	@ (8000f88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f54:	4a0d      	ldr	r2, [pc, #52]	@ (8000f8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f58:	e002      	b.n	8000f60 <LoopCopyDataInit>

08000f5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f5e:	3304      	adds	r3, #4

08000f60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f64:	d3f9      	bcc.n	8000f5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f66:	4a0a      	ldr	r2, [pc, #40]	@ (8000f90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f68:	4c0a      	ldr	r4, [pc, #40]	@ (8000f94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f6c:	e001      	b.n	8000f72 <LoopFillZerobss>

08000f6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f70:	3204      	adds	r2, #4

08000f72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f74:	d3fb      	bcc.n	8000f6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f76:	f004 f931 	bl	80051dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f7a:	f7ff fbad 	bl	80006d8 <main>
  bx  lr    
 8000f7e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f88:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000f8c:	08018700 	.word	0x08018700
  ldr r2, =_sbss
 8000f90:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000f94:	20004318 	.word	0x20004318

08000f98 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f98:	e7fe      	b.n	8000f98 <CAN1_RX0_IRQHandler>
	...

08000f9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fa0:	4b0e      	ldr	r3, [pc, #56]	@ (8000fdc <HAL_Init+0x40>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a0d      	ldr	r2, [pc, #52]	@ (8000fdc <HAL_Init+0x40>)
 8000fa6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000faa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fac:	4b0b      	ldr	r3, [pc, #44]	@ (8000fdc <HAL_Init+0x40>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a0a      	ldr	r2, [pc, #40]	@ (8000fdc <HAL_Init+0x40>)
 8000fb2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fb8:	4b08      	ldr	r3, [pc, #32]	@ (8000fdc <HAL_Init+0x40>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a07      	ldr	r2, [pc, #28]	@ (8000fdc <HAL_Init+0x40>)
 8000fbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc4:	2003      	movs	r0, #3
 8000fc6:	f000 ff5b 	bl	8001e80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fca:	200f      	movs	r0, #15
 8000fcc:	f000 f808 	bl	8000fe0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fd0:	f7ff fe3c 	bl	8000c4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40023c00 	.word	0x40023c00

08000fe0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fe8:	4b12      	ldr	r3, [pc, #72]	@ (8001034 <HAL_InitTick+0x54>)
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	4b12      	ldr	r3, [pc, #72]	@ (8001038 <HAL_InitTick+0x58>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ff6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ffe:	4618      	mov	r0, r3
 8001000:	f000 ff73 	bl	8001eea <HAL_SYSTICK_Config>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e00e      	b.n	800102c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2b0f      	cmp	r3, #15
 8001012:	d80a      	bhi.n	800102a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001014:	2200      	movs	r2, #0
 8001016:	6879      	ldr	r1, [r7, #4]
 8001018:	f04f 30ff 	mov.w	r0, #4294967295
 800101c:	f000 ff3b 	bl	8001e96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001020:	4a06      	ldr	r2, [pc, #24]	@ (800103c <HAL_InitTick+0x5c>)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001026:	2300      	movs	r3, #0
 8001028:	e000      	b.n	800102c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
}
 800102c:	4618      	mov	r0, r3
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000000 	.word	0x20000000
 8001038:	20000008 	.word	0x20000008
 800103c:	20000004 	.word	0x20000004

08001040 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001044:	4b06      	ldr	r3, [pc, #24]	@ (8001060 <HAL_IncTick+0x20>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	461a      	mov	r2, r3
 800104a:	4b06      	ldr	r3, [pc, #24]	@ (8001064 <HAL_IncTick+0x24>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4413      	add	r3, r2
 8001050:	4a04      	ldr	r2, [pc, #16]	@ (8001064 <HAL_IncTick+0x24>)
 8001052:	6013      	str	r3, [r2, #0]
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	20000008 	.word	0x20000008
 8001064:	200041dc 	.word	0x200041dc

08001068 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  return uwTick;
 800106c:	4b03      	ldr	r3, [pc, #12]	@ (800107c <HAL_GetTick+0x14>)
 800106e:	681b      	ldr	r3, [r3, #0]
}
 8001070:	4618      	mov	r0, r3
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	200041dc 	.word	0x200041dc

08001080 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001088:	f7ff ffee 	bl	8001068 <HAL_GetTick>
 800108c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001098:	d005      	beq.n	80010a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800109a:	4b0a      	ldr	r3, [pc, #40]	@ (80010c4 <HAL_Delay+0x44>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	461a      	mov	r2, r3
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	4413      	add	r3, r2
 80010a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010a6:	bf00      	nop
 80010a8:	f7ff ffde 	bl	8001068 <HAL_GetTick>
 80010ac:	4602      	mov	r2, r0
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	68fa      	ldr	r2, [r7, #12]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d8f7      	bhi.n	80010a8 <HAL_Delay+0x28>
  {
  }
}
 80010b8:	bf00      	nop
 80010ba:	bf00      	nop
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000008 	.word	0x20000008

080010c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010d0:	2300      	movs	r3, #0
 80010d2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d101      	bne.n	80010de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e033      	b.n	8001146 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d109      	bne.n	80010fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff fdd8 	bl	8000c9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2200      	movs	r2, #0
 80010f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2200      	movs	r2, #0
 80010f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010fe:	f003 0310 	and.w	r3, r3, #16
 8001102:	2b00      	cmp	r3, #0
 8001104:	d118      	bne.n	8001138 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800110a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800110e:	f023 0302 	bic.w	r3, r3, #2
 8001112:	f043 0202 	orr.w	r2, r3, #2
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f000 fcda 	bl	8001ad4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2200      	movs	r2, #0
 8001124:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800112a:	f023 0303 	bic.w	r3, r3, #3
 800112e:	f043 0201 	orr.w	r2, r3, #1
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	641a      	str	r2, [r3, #64]	@ 0x40
 8001136:	e001      	b.n	800113c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2200      	movs	r2, #0
 8001140:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001144:	7bfb      	ldrb	r3, [r7, #15]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001158:	2300      	movs	r3, #0
 800115a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001162:	2b01      	cmp	r3, #1
 8001164:	d101      	bne.n	800116a <HAL_ADC_Start+0x1a>
 8001166:	2302      	movs	r3, #2
 8001168:	e0b2      	b.n	80012d0 <HAL_ADC_Start+0x180>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2201      	movs	r2, #1
 800116e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	f003 0301 	and.w	r3, r3, #1
 800117c:	2b01      	cmp	r3, #1
 800117e:	d018      	beq.n	80011b2 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	689a      	ldr	r2, [r3, #8]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f042 0201 	orr.w	r2, r2, #1
 800118e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001190:	4b52      	ldr	r3, [pc, #328]	@ (80012dc <HAL_ADC_Start+0x18c>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a52      	ldr	r2, [pc, #328]	@ (80012e0 <HAL_ADC_Start+0x190>)
 8001196:	fba2 2303 	umull	r2, r3, r2, r3
 800119a:	0c9a      	lsrs	r2, r3, #18
 800119c:	4613      	mov	r3, r2
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	4413      	add	r3, r2
 80011a2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80011a4:	e002      	b.n	80011ac <HAL_ADC_Start+0x5c>
    {
      counter--;
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	3b01      	subs	r3, #1
 80011aa:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d1f9      	bne.n	80011a6 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	f003 0301 	and.w	r3, r3, #1
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d17a      	bne.n	80012b6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80011c8:	f023 0301 	bic.w	r3, r3, #1
 80011cc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d007      	beq.n	80011f2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80011ea:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80011fe:	d106      	bne.n	800120e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001204:	f023 0206 	bic.w	r2, r3, #6
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	645a      	str	r2, [r3, #68]	@ 0x44
 800120c:	e002      	b.n	8001214 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2200      	movs	r2, #0
 8001212:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2200      	movs	r2, #0
 8001218:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800121c:	4b31      	ldr	r3, [pc, #196]	@ (80012e4 <HAL_ADC_Start+0x194>)
 800121e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001228:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f003 031f 	and.w	r3, r3, #31
 8001232:	2b00      	cmp	r3, #0
 8001234:	d12a      	bne.n	800128c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a2b      	ldr	r2, [pc, #172]	@ (80012e8 <HAL_ADC_Start+0x198>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d015      	beq.n	800126c <HAL_ADC_Start+0x11c>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a29      	ldr	r2, [pc, #164]	@ (80012ec <HAL_ADC_Start+0x19c>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d105      	bne.n	8001256 <HAL_ADC_Start+0x106>
 800124a:	4b26      	ldr	r3, [pc, #152]	@ (80012e4 <HAL_ADC_Start+0x194>)
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f003 031f 	and.w	r3, r3, #31
 8001252:	2b00      	cmp	r3, #0
 8001254:	d00a      	beq.n	800126c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a25      	ldr	r2, [pc, #148]	@ (80012f0 <HAL_ADC_Start+0x1a0>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d136      	bne.n	80012ce <HAL_ADC_Start+0x17e>
 8001260:	4b20      	ldr	r3, [pc, #128]	@ (80012e4 <HAL_ADC_Start+0x194>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f003 0310 	and.w	r3, r3, #16
 8001268:	2b00      	cmp	r3, #0
 800126a:	d130      	bne.n	80012ce <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d129      	bne.n	80012ce <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	689a      	ldr	r2, [r3, #8]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001288:	609a      	str	r2, [r3, #8]
 800128a:	e020      	b.n	80012ce <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a15      	ldr	r2, [pc, #84]	@ (80012e8 <HAL_ADC_Start+0x198>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d11b      	bne.n	80012ce <HAL_ADC_Start+0x17e>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d114      	bne.n	80012ce <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	689a      	ldr	r2, [r3, #8]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	e00b      	b.n	80012ce <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ba:	f043 0210 	orr.w	r2, r3, #16
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012c6:	f043 0201 	orr.w	r2, r3, #1
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80012ce:	2300      	movs	r3, #0
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3714      	adds	r7, #20
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	20000000 	.word	0x20000000
 80012e0:	431bde83 	.word	0x431bde83
 80012e4:	40012300 	.word	0x40012300
 80012e8:	40012000 	.word	0x40012000
 80012ec:	40012100 	.word	0x40012100
 80012f0:	40012200 	.word	0x40012200

080012f4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001302:	2b01      	cmp	r3, #1
 8001304:	d101      	bne.n	800130a <HAL_ADC_Stop+0x16>
 8001306:	2302      	movs	r3, #2
 8001308:	e021      	b.n	800134e <HAL_ADC_Stop+0x5a>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2201      	movs	r2, #1
 800130e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	689a      	ldr	r2, [r3, #8]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f022 0201 	bic.w	r2, r2, #1
 8001320:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	f003 0301 	and.w	r3, r3, #1
 800132c:	2b00      	cmp	r3, #0
 800132e:	d109      	bne.n	8001344 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001334:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001338:	f023 0301 	bic.w	r3, r3, #1
 800133c:	f043 0201 	orr.w	r2, r3, #1
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2200      	movs	r2, #0
 8001348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr

0800135a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b084      	sub	sp, #16
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
 8001362:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001364:	2300      	movs	r3, #0
 8001366:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001372:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001376:	d113      	bne.n	80013a0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001382:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001386:	d10b      	bne.n	80013a0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800138c:	f043 0220 	orr.w	r2, r3, #32
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e063      	b.n	8001468 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80013a0:	f7ff fe62 	bl	8001068 <HAL_GetTick>
 80013a4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80013a6:	e021      	b.n	80013ec <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013ae:	d01d      	beq.n	80013ec <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d007      	beq.n	80013c6 <HAL_ADC_PollForConversion+0x6c>
 80013b6:	f7ff fe57 	bl	8001068 <HAL_GetTick>
 80013ba:	4602      	mov	r2, r0
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	683a      	ldr	r2, [r7, #0]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d212      	bcs.n	80013ec <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0302 	and.w	r3, r3, #2
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d00b      	beq.n	80013ec <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d8:	f043 0204 	orr.w	r2, r3, #4
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2200      	movs	r2, #0
 80013e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80013e8:	2303      	movs	r3, #3
 80013ea:	e03d      	b.n	8001468 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d1d6      	bne.n	80013a8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f06f 0212 	mvn.w	r2, #18
 8001402:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001408:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d123      	bne.n	8001466 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001422:	2b00      	cmp	r3, #0
 8001424:	d11f      	bne.n	8001466 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800142c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001430:	2b00      	cmp	r3, #0
 8001432:	d006      	beq.n	8001442 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800143e:	2b00      	cmp	r3, #0
 8001440:	d111      	bne.n	8001466 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001446:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001452:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d105      	bne.n	8001466 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800145e:	f043 0201 	orr.w	r2, r3, #1
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001466:	2300      	movs	r3, #0
}
 8001468:	4618      	mov	r0, r3
 800146a:	3710      	adds	r7, #16
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001470:	b480      	push	{r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001478:	2300      	movs	r3, #0
 800147a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001482:	2b01      	cmp	r3, #1
 8001484:	d101      	bne.n	800148a <HAL_ADC_Start_IT+0x1a>
 8001486:	2302      	movs	r3, #2
 8001488:	e0bd      	b.n	8001606 <HAL_ADC_Start_IT+0x196>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2201      	movs	r2, #1
 800148e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	f003 0301 	and.w	r3, r3, #1
 800149c:	2b01      	cmp	r3, #1
 800149e:	d018      	beq.n	80014d2 <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	689a      	ldr	r2, [r3, #8]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f042 0201 	orr.w	r2, r2, #1
 80014ae:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80014b0:	4b58      	ldr	r3, [pc, #352]	@ (8001614 <HAL_ADC_Start_IT+0x1a4>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a58      	ldr	r2, [pc, #352]	@ (8001618 <HAL_ADC_Start_IT+0x1a8>)
 80014b6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ba:	0c9a      	lsrs	r2, r3, #18
 80014bc:	4613      	mov	r3, r2
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	4413      	add	r3, r2
 80014c2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80014c4:	e002      	b.n	80014cc <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	3b01      	subs	r3, #1
 80014ca:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1f9      	bne.n	80014c6 <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	2b01      	cmp	r3, #1
 80014de:	f040 8085 	bne.w	80015ec <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e6:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80014ea:	f023 0301 	bic.w	r3, r3, #1
 80014ee:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001500:	2b00      	cmp	r3, #0
 8001502:	d007      	beq.n	8001514 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001508:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800150c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001518:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800151c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001520:	d106      	bne.n	8001530 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001526:	f023 0206 	bic.w	r2, r3, #6
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	645a      	str	r2, [r3, #68]	@ 0x44
 800152e:	e002      	b.n	8001536 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2200      	movs	r2, #0
 8001534:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2200      	movs	r2, #0
 800153a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800153e:	4b37      	ldr	r3, [pc, #220]	@ (800161c <HAL_ADC_Start_IT+0x1ac>)
 8001540:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800154a:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	6812      	ldr	r2, [r2, #0]
 8001556:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800155a:	f043 0320 	orr.w	r3, r3, #32
 800155e:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f003 031f 	and.w	r3, r3, #31
 8001568:	2b00      	cmp	r3, #0
 800156a:	d12a      	bne.n	80015c2 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a2b      	ldr	r2, [pc, #172]	@ (8001620 <HAL_ADC_Start_IT+0x1b0>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d015      	beq.n	80015a2 <HAL_ADC_Start_IT+0x132>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a2a      	ldr	r2, [pc, #168]	@ (8001624 <HAL_ADC_Start_IT+0x1b4>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d105      	bne.n	800158c <HAL_ADC_Start_IT+0x11c>
 8001580:	4b26      	ldr	r3, [pc, #152]	@ (800161c <HAL_ADC_Start_IT+0x1ac>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f003 031f 	and.w	r3, r3, #31
 8001588:	2b00      	cmp	r3, #0
 800158a:	d00a      	beq.n	80015a2 <HAL_ADC_Start_IT+0x132>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a25      	ldr	r2, [pc, #148]	@ (8001628 <HAL_ADC_Start_IT+0x1b8>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d136      	bne.n	8001604 <HAL_ADC_Start_IT+0x194>
 8001596:	4b21      	ldr	r3, [pc, #132]	@ (800161c <HAL_ADC_Start_IT+0x1ac>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f003 0310 	and.w	r3, r3, #16
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d130      	bne.n	8001604 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d129      	bne.n	8001604 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	689a      	ldr	r2, [r3, #8]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	e020      	b.n	8001604 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a16      	ldr	r2, [pc, #88]	@ (8001620 <HAL_ADC_Start_IT+0x1b0>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d11b      	bne.n	8001604 <HAL_ADC_Start_IT+0x194>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d114      	bne.n	8001604 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	689a      	ldr	r2, [r3, #8]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80015e8:	609a      	str	r2, [r3, #8]
 80015ea:	e00b      	b.n	8001604 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f0:	f043 0210 	orr.w	r2, r3, #16
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015fc:	f043 0201 	orr.w	r2, r3, #1
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3714      	adds	r7, #20
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	20000000 	.word	0x20000000
 8001618:	431bde83 	.word	0x431bde83
 800161c:	40012300 	.word	0x40012300
 8001620:	40012000 	.word	0x40012000
 8001624:	40012100 	.word	0x40012100
 8001628:	40012200 	.word	0x40012200

0800162c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001634:	2300      	movs	r3, #0
 8001636:	617b      	str	r3, [r7, #20]
 8001638:	2300      	movs	r3, #0
 800163a:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	f003 0320 	and.w	r3, r3, #32
 800165a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d049      	beq.n	80016f6 <HAL_ADC_IRQHandler+0xca>
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d046      	beq.n	80016f6 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166c:	f003 0310 	and.w	r3, r3, #16
 8001670:	2b00      	cmp	r3, #0
 8001672:	d105      	bne.n	8001680 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001678:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d12b      	bne.n	80016e6 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001692:	2b00      	cmp	r3, #0
 8001694:	d127      	bne.n	80016e6 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800169c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d006      	beq.n	80016b2 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d119      	bne.n	80016e6 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	685a      	ldr	r2, [r3, #4]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f022 0220 	bic.w	r2, r2, #32
 80016c0:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d105      	bne.n	80016e6 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016de:	f043 0201 	orr.w	r2, r3, #1
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7ff fa8e 	bl	8000c08 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f06f 0212 	mvn.w	r2, #18
 80016f4:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	f003 0304 	and.w	r3, r3, #4
 80016fc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001704:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d057      	beq.n	80017bc <HAL_ADC_IRQHandler+0x190>
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d054      	beq.n	80017bc <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001716:	f003 0310 	and.w	r3, r3, #16
 800171a:	2b00      	cmp	r3, #0
 800171c:	d105      	bne.n	800172a <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001722:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d139      	bne.n	80017ac <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800173e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001742:	2b00      	cmp	r3, #0
 8001744:	d006      	beq.n	8001754 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001750:	2b00      	cmp	r3, #0
 8001752:	d12b      	bne.n	80017ac <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800175e:	2b00      	cmp	r3, #0
 8001760:	d124      	bne.n	80017ac <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800176c:	2b00      	cmp	r3, #0
 800176e:	d11d      	bne.n	80017ac <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001774:	2b00      	cmp	r3, #0
 8001776:	d119      	bne.n	80017ac <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	685a      	ldr	r2, [r3, #4]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001786:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001798:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800179c:	2b00      	cmp	r3, #0
 800179e:	d105      	bne.n	80017ac <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a4:	f043 0201 	orr.w	r2, r3, #1
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f000 fa8d 	bl	8001ccc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f06f 020c 	mvn.w	r2, #12
 80017ba:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017ca:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d017      	beq.n	8001802 <HAL_ADC_IRQHandler+0x1d6>
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d014      	beq.n	8001802 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d10d      	bne.n	8001802 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ea:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f000 f837 	bl	8001866 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f06f 0201 	mvn.w	r2, #1
 8001800:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	f003 0320 	and.w	r3, r3, #32
 8001808:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001810:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d015      	beq.n	8001844 <HAL_ADC_IRQHandler+0x218>
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d012      	beq.n	8001844 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001822:	f043 0202 	orr.w	r2, r3, #2
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f06f 0220 	mvn.w	r2, #32
 8001832:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f000 f820 	bl	800187a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f06f 0220 	mvn.w	r2, #32
 8001842:	601a      	str	r2, [r3, #0]
  }
}
 8001844:	bf00      	nop
 8001846:	3718      	adds	r7, #24
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800185a:	4618      	mov	r0, r3
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr

08001866 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001866:	b480      	push	{r7}
 8001868:	b083      	sub	sp, #12
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800186e:	bf00      	nop
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800187a:	b480      	push	{r7}
 800187c:	b083      	sub	sp, #12
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001882:	bf00      	nop
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
	...

08001890 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800189a:	2300      	movs	r3, #0
 800189c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d101      	bne.n	80018ac <HAL_ADC_ConfigChannel+0x1c>
 80018a8:	2302      	movs	r3, #2
 80018aa:	e105      	b.n	8001ab8 <HAL_ADC_ConfigChannel+0x228>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2201      	movs	r2, #1
 80018b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2b09      	cmp	r3, #9
 80018ba:	d925      	bls.n	8001908 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	68d9      	ldr	r1, [r3, #12]
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	461a      	mov	r2, r3
 80018ca:	4613      	mov	r3, r2
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	4413      	add	r3, r2
 80018d0:	3b1e      	subs	r3, #30
 80018d2:	2207      	movs	r2, #7
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	43da      	mvns	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	400a      	ands	r2, r1
 80018e0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	68d9      	ldr	r1, [r3, #12]
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	689a      	ldr	r2, [r3, #8]
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	4618      	mov	r0, r3
 80018f4:	4603      	mov	r3, r0
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	4403      	add	r3, r0
 80018fa:	3b1e      	subs	r3, #30
 80018fc:	409a      	lsls	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	430a      	orrs	r2, r1
 8001904:	60da      	str	r2, [r3, #12]
 8001906:	e022      	b.n	800194e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6919      	ldr	r1, [r3, #16]
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	b29b      	uxth	r3, r3
 8001914:	461a      	mov	r2, r3
 8001916:	4613      	mov	r3, r2
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	4413      	add	r3, r2
 800191c:	2207      	movs	r2, #7
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	43da      	mvns	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	400a      	ands	r2, r1
 800192a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	6919      	ldr	r1, [r3, #16]
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	689a      	ldr	r2, [r3, #8]
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	b29b      	uxth	r3, r3
 800193c:	4618      	mov	r0, r3
 800193e:	4603      	mov	r3, r0
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	4403      	add	r3, r0
 8001944:	409a      	lsls	r2, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	430a      	orrs	r2, r1
 800194c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	2b06      	cmp	r3, #6
 8001954:	d824      	bhi.n	80019a0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685a      	ldr	r2, [r3, #4]
 8001960:	4613      	mov	r3, r2
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	4413      	add	r3, r2
 8001966:	3b05      	subs	r3, #5
 8001968:	221f      	movs	r2, #31
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	43da      	mvns	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	400a      	ands	r2, r1
 8001976:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	b29b      	uxth	r3, r3
 8001984:	4618      	mov	r0, r3
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685a      	ldr	r2, [r3, #4]
 800198a:	4613      	mov	r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	4413      	add	r3, r2
 8001990:	3b05      	subs	r3, #5
 8001992:	fa00 f203 	lsl.w	r2, r0, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	430a      	orrs	r2, r1
 800199c:	635a      	str	r2, [r3, #52]	@ 0x34
 800199e:	e04c      	b.n	8001a3a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	2b0c      	cmp	r3, #12
 80019a6:	d824      	bhi.n	80019f2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685a      	ldr	r2, [r3, #4]
 80019b2:	4613      	mov	r3, r2
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	4413      	add	r3, r2
 80019b8:	3b23      	subs	r3, #35	@ 0x23
 80019ba:	221f      	movs	r2, #31
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	43da      	mvns	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	400a      	ands	r2, r1
 80019c8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	4618      	mov	r0, r3
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685a      	ldr	r2, [r3, #4]
 80019dc:	4613      	mov	r3, r2
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	4413      	add	r3, r2
 80019e2:	3b23      	subs	r3, #35	@ 0x23
 80019e4:	fa00 f203 	lsl.w	r2, r0, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	430a      	orrs	r2, r1
 80019ee:	631a      	str	r2, [r3, #48]	@ 0x30
 80019f0:	e023      	b.n	8001a3a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685a      	ldr	r2, [r3, #4]
 80019fc:	4613      	mov	r3, r2
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	4413      	add	r3, r2
 8001a02:	3b41      	subs	r3, #65	@ 0x41
 8001a04:	221f      	movs	r2, #31
 8001a06:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0a:	43da      	mvns	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	400a      	ands	r2, r1
 8001a12:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	4618      	mov	r0, r3
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685a      	ldr	r2, [r3, #4]
 8001a26:	4613      	mov	r3, r2
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	4413      	add	r3, r2
 8001a2c:	3b41      	subs	r3, #65	@ 0x41
 8001a2e:	fa00 f203 	lsl.w	r2, r0, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	430a      	orrs	r2, r1
 8001a38:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a3a:	4b22      	ldr	r3, [pc, #136]	@ (8001ac4 <HAL_ADC_ConfigChannel+0x234>)
 8001a3c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a21      	ldr	r2, [pc, #132]	@ (8001ac8 <HAL_ADC_ConfigChannel+0x238>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d109      	bne.n	8001a5c <HAL_ADC_ConfigChannel+0x1cc>
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2b12      	cmp	r3, #18
 8001a4e:	d105      	bne.n	8001a5c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a19      	ldr	r2, [pc, #100]	@ (8001ac8 <HAL_ADC_ConfigChannel+0x238>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d123      	bne.n	8001aae <HAL_ADC_ConfigChannel+0x21e>
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2b10      	cmp	r3, #16
 8001a6c:	d003      	beq.n	8001a76 <HAL_ADC_ConfigChannel+0x1e6>
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2b11      	cmp	r3, #17
 8001a74:	d11b      	bne.n	8001aae <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2b10      	cmp	r3, #16
 8001a88:	d111      	bne.n	8001aae <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a8a:	4b10      	ldr	r3, [pc, #64]	@ (8001acc <HAL_ADC_ConfigChannel+0x23c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a10      	ldr	r2, [pc, #64]	@ (8001ad0 <HAL_ADC_ConfigChannel+0x240>)
 8001a90:	fba2 2303 	umull	r2, r3, r2, r3
 8001a94:	0c9a      	lsrs	r2, r3, #18
 8001a96:	4613      	mov	r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	4413      	add	r3, r2
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001aa0:	e002      	b.n	8001aa8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d1f9      	bne.n	8001aa2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3714      	adds	r7, #20
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	40012300 	.word	0x40012300
 8001ac8:	40012000 	.word	0x40012000
 8001acc:	20000000 	.word	0x20000000
 8001ad0:	431bde83 	.word	0x431bde83

08001ad4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001adc:	4b79      	ldr	r3, [pc, #484]	@ (8001cc4 <ADC_Init+0x1f0>)
 8001ade:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	685a      	ldr	r2, [r3, #4]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	431a      	orrs	r2, r3
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	685a      	ldr	r2, [r3, #4]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	6859      	ldr	r1, [r3, #4]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	691b      	ldr	r3, [r3, #16]
 8001b14:	021a      	lsls	r2, r3, #8
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	685a      	ldr	r2, [r3, #4]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001b2c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	6859      	ldr	r1, [r3, #4]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689a      	ldr	r2, [r3, #8]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	689a      	ldr	r2, [r3, #8]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b4e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6899      	ldr	r1, [r3, #8]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	68da      	ldr	r2, [r3, #12]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b66:	4a58      	ldr	r2, [pc, #352]	@ (8001cc8 <ADC_Init+0x1f4>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d022      	beq.n	8001bb2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	689a      	ldr	r2, [r3, #8]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001b7a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	6899      	ldr	r1, [r3, #8]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	689a      	ldr	r2, [r3, #8]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001b9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	6899      	ldr	r1, [r3, #8]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	430a      	orrs	r2, r1
 8001bae:	609a      	str	r2, [r3, #8]
 8001bb0:	e00f      	b.n	8001bd2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	689a      	ldr	r2, [r3, #8]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001bc0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	689a      	ldr	r2, [r3, #8]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001bd0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	689a      	ldr	r2, [r3, #8]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f022 0202 	bic.w	r2, r2, #2
 8001be0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	6899      	ldr	r1, [r3, #8]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	7e1b      	ldrb	r3, [r3, #24]
 8001bec:	005a      	lsls	r2, r3, #1
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d01b      	beq.n	8001c38 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	685a      	ldr	r2, [r3, #4]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001c0e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	685a      	ldr	r2, [r3, #4]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001c1e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	6859      	ldr	r1, [r3, #4]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	035a      	lsls	r2, r3, #13
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	430a      	orrs	r2, r1
 8001c34:	605a      	str	r2, [r3, #4]
 8001c36:	e007      	b.n	8001c48 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	685a      	ldr	r2, [r3, #4]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c46:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001c56:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	69db      	ldr	r3, [r3, #28]
 8001c62:	3b01      	subs	r3, #1
 8001c64:	051a      	lsls	r2, r3, #20
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001c7c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	6899      	ldr	r1, [r3, #8]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001c8a:	025a      	lsls	r2, r3, #9
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	430a      	orrs	r2, r1
 8001c92:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	689a      	ldr	r2, [r3, #8]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ca2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	6899      	ldr	r1, [r3, #8]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	695b      	ldr	r3, [r3, #20]
 8001cae:	029a      	lsls	r2, r3, #10
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	609a      	str	r2, [r3, #8]
}
 8001cb8:	bf00      	nop
 8001cba:	3714      	adds	r7, #20
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr
 8001cc4:	40012300 	.word	0x40012300
 8001cc8:	0f000001 	.word	0x0f000001

08001ccc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8001d24 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cf6:	68ba      	ldr	r2, [r7, #8]
 8001cf8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d12:	4a04      	ldr	r2, [pc, #16]	@ (8001d24 <__NVIC_SetPriorityGrouping+0x44>)
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	60d3      	str	r3, [r2, #12]
}
 8001d18:	bf00      	nop
 8001d1a:	3714      	adds	r7, #20
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	e000ed00 	.word	0xe000ed00

08001d28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d2c:	4b04      	ldr	r3, [pc, #16]	@ (8001d40 <__NVIC_GetPriorityGrouping+0x18>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	0a1b      	lsrs	r3, r3, #8
 8001d32:	f003 0307 	and.w	r3, r3, #7
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	e000ed00 	.word	0xe000ed00

08001d44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	db0b      	blt.n	8001d6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d56:	79fb      	ldrb	r3, [r7, #7]
 8001d58:	f003 021f 	and.w	r2, r3, #31
 8001d5c:	4907      	ldr	r1, [pc, #28]	@ (8001d7c <__NVIC_EnableIRQ+0x38>)
 8001d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d62:	095b      	lsrs	r3, r3, #5
 8001d64:	2001      	movs	r0, #1
 8001d66:	fa00 f202 	lsl.w	r2, r0, r2
 8001d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d6e:	bf00      	nop
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	e000e100 	.word	0xe000e100

08001d80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4603      	mov	r3, r0
 8001d88:	6039      	str	r1, [r7, #0]
 8001d8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	db0a      	blt.n	8001daa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	b2da      	uxtb	r2, r3
 8001d98:	490c      	ldr	r1, [pc, #48]	@ (8001dcc <__NVIC_SetPriority+0x4c>)
 8001d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9e:	0112      	lsls	r2, r2, #4
 8001da0:	b2d2      	uxtb	r2, r2
 8001da2:	440b      	add	r3, r1
 8001da4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001da8:	e00a      	b.n	8001dc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	b2da      	uxtb	r2, r3
 8001dae:	4908      	ldr	r1, [pc, #32]	@ (8001dd0 <__NVIC_SetPriority+0x50>)
 8001db0:	79fb      	ldrb	r3, [r7, #7]
 8001db2:	f003 030f 	and.w	r3, r3, #15
 8001db6:	3b04      	subs	r3, #4
 8001db8:	0112      	lsls	r2, r2, #4
 8001dba:	b2d2      	uxtb	r2, r2
 8001dbc:	440b      	add	r3, r1
 8001dbe:	761a      	strb	r2, [r3, #24]
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	e000e100 	.word	0xe000e100
 8001dd0:	e000ed00 	.word	0xe000ed00

08001dd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b089      	sub	sp, #36	@ 0x24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f003 0307 	and.w	r3, r3, #7
 8001de6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	f1c3 0307 	rsb	r3, r3, #7
 8001dee:	2b04      	cmp	r3, #4
 8001df0:	bf28      	it	cs
 8001df2:	2304      	movcs	r3, #4
 8001df4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	3304      	adds	r3, #4
 8001dfa:	2b06      	cmp	r3, #6
 8001dfc:	d902      	bls.n	8001e04 <NVIC_EncodePriority+0x30>
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	3b03      	subs	r3, #3
 8001e02:	e000      	b.n	8001e06 <NVIC_EncodePriority+0x32>
 8001e04:	2300      	movs	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e08:	f04f 32ff 	mov.w	r2, #4294967295
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	43da      	mvns	r2, r3
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	401a      	ands	r2, r3
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	fa01 f303 	lsl.w	r3, r1, r3
 8001e26:	43d9      	mvns	r1, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e2c:	4313      	orrs	r3, r2
         );
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3724      	adds	r7, #36	@ 0x24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
	...

08001e3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3b01      	subs	r3, #1
 8001e48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e4c:	d301      	bcc.n	8001e52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e00f      	b.n	8001e72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e52:	4a0a      	ldr	r2, [pc, #40]	@ (8001e7c <SysTick_Config+0x40>)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3b01      	subs	r3, #1
 8001e58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e5a:	210f      	movs	r1, #15
 8001e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e60:	f7ff ff8e 	bl	8001d80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e64:	4b05      	ldr	r3, [pc, #20]	@ (8001e7c <SysTick_Config+0x40>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e6a:	4b04      	ldr	r3, [pc, #16]	@ (8001e7c <SysTick_Config+0x40>)
 8001e6c:	2207      	movs	r2, #7
 8001e6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	e000e010 	.word	0xe000e010

08001e80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f7ff ff29 	bl	8001ce0 <__NVIC_SetPriorityGrouping>
}
 8001e8e:	bf00      	nop
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b086      	sub	sp, #24
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	60b9      	str	r1, [r7, #8]
 8001ea0:	607a      	str	r2, [r7, #4]
 8001ea2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ea8:	f7ff ff3e 	bl	8001d28 <__NVIC_GetPriorityGrouping>
 8001eac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	68b9      	ldr	r1, [r7, #8]
 8001eb2:	6978      	ldr	r0, [r7, #20]
 8001eb4:	f7ff ff8e 	bl	8001dd4 <NVIC_EncodePriority>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ebe:	4611      	mov	r1, r2
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff ff5d 	bl	8001d80 <__NVIC_SetPriority>
}
 8001ec6:	bf00      	nop
 8001ec8:	3718      	adds	r7, #24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b082      	sub	sp, #8
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff ff31 	bl	8001d44 <__NVIC_EnableIRQ>
}
 8001ee2:	bf00      	nop
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b082      	sub	sp, #8
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f7ff ffa2 	bl	8001e3c <SysTick_Config>
 8001ef8:	4603      	mov	r3, r0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
	...

08001f04 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b086      	sub	sp, #24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f10:	f7ff f8aa 	bl	8001068 <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d101      	bne.n	8001f20 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e099      	b.n	8002054 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2202      	movs	r2, #2
 8001f24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f022 0201 	bic.w	r2, r2, #1
 8001f3e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f40:	e00f      	b.n	8001f62 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f42:	f7ff f891 	bl	8001068 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b05      	cmp	r3, #5
 8001f4e:	d908      	bls.n	8001f62 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2220      	movs	r2, #32
 8001f54:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2203      	movs	r2, #3
 8001f5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e078      	b.n	8002054 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d1e8      	bne.n	8001f42 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f78:	697a      	ldr	r2, [r7, #20]
 8001f7a:	4b38      	ldr	r3, [pc, #224]	@ (800205c <HAL_DMA_Init+0x158>)
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685a      	ldr	r2, [r3, #4]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	691b      	ldr	r3, [r3, #16]
 8001f94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fa6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a1b      	ldr	r3, [r3, #32]
 8001fac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fae:	697a      	ldr	r2, [r7, #20]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb8:	2b04      	cmp	r3, #4
 8001fba:	d107      	bne.n	8001fcc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	697a      	ldr	r2, [r7, #20]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	697a      	ldr	r2, [r7, #20]
 8001fd2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	f023 0307 	bic.w	r3, r3, #7
 8001fe2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe8:	697a      	ldr	r2, [r7, #20]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff2:	2b04      	cmp	r3, #4
 8001ff4:	d117      	bne.n	8002026 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ffa:	697a      	ldr	r2, [r7, #20]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002004:	2b00      	cmp	r3, #0
 8002006:	d00e      	beq.n	8002026 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f000 fa0b 	bl	8002424 <DMA_CheckFifoParam>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d008      	beq.n	8002026 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2240      	movs	r2, #64	@ 0x40
 8002018:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2201      	movs	r2, #1
 800201e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002022:	2301      	movs	r3, #1
 8002024:	e016      	b.n	8002054 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	697a      	ldr	r2, [r7, #20]
 800202c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 f9c2 	bl	80023b8 <DMA_CalcBaseAndBitshift>
 8002034:	4603      	mov	r3, r0
 8002036:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800203c:	223f      	movs	r2, #63	@ 0x3f
 800203e:	409a      	lsls	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2201      	movs	r2, #1
 800204e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002052:	2300      	movs	r3, #0
}
 8002054:	4618      	mov	r0, r3
 8002056:	3718      	adds	r7, #24
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	f010803f 	.word	0xf010803f

08002060 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800206e:	b2db      	uxtb	r3, r3
 8002070:	2b02      	cmp	r3, #2
 8002072:	d004      	beq.n	800207e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2280      	movs	r2, #128	@ 0x80
 8002078:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e00c      	b.n	8002098 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2205      	movs	r2, #5
 8002082:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f022 0201 	bic.w	r2, r2, #1
 8002094:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002096:	2300      	movs	r3, #0
}
 8002098:	4618      	mov	r0, r3
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80020ac:	2300      	movs	r3, #0
 80020ae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80020b0:	4b8e      	ldr	r3, [pc, #568]	@ (80022ec <HAL_DMA_IRQHandler+0x248>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a8e      	ldr	r2, [pc, #568]	@ (80022f0 <HAL_DMA_IRQHandler+0x24c>)
 80020b6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ba:	0a9b      	lsrs	r3, r3, #10
 80020bc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020c2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ce:	2208      	movs	r2, #8
 80020d0:	409a      	lsls	r2, r3
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	4013      	ands	r3, r2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d01a      	beq.n	8002110 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0304 	and.w	r3, r3, #4
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d013      	beq.n	8002110 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f022 0204 	bic.w	r2, r2, #4
 80020f6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020fc:	2208      	movs	r2, #8
 80020fe:	409a      	lsls	r2, r3
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002108:	f043 0201 	orr.w	r2, r3, #1
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002114:	2201      	movs	r2, #1
 8002116:	409a      	lsls	r2, r3
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	4013      	ands	r3, r2
 800211c:	2b00      	cmp	r3, #0
 800211e:	d012      	beq.n	8002146 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	695b      	ldr	r3, [r3, #20]
 8002126:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800212a:	2b00      	cmp	r3, #0
 800212c:	d00b      	beq.n	8002146 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002132:	2201      	movs	r2, #1
 8002134:	409a      	lsls	r2, r3
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800213e:	f043 0202 	orr.w	r2, r3, #2
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800214a:	2204      	movs	r2, #4
 800214c:	409a      	lsls	r2, r3
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	4013      	ands	r3, r2
 8002152:	2b00      	cmp	r3, #0
 8002154:	d012      	beq.n	800217c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0302 	and.w	r3, r3, #2
 8002160:	2b00      	cmp	r3, #0
 8002162:	d00b      	beq.n	800217c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002168:	2204      	movs	r2, #4
 800216a:	409a      	lsls	r2, r3
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002174:	f043 0204 	orr.w	r2, r3, #4
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002180:	2210      	movs	r2, #16
 8002182:	409a      	lsls	r2, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	4013      	ands	r3, r2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d043      	beq.n	8002214 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0308 	and.w	r3, r3, #8
 8002196:	2b00      	cmp	r3, #0
 8002198:	d03c      	beq.n	8002214 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800219e:	2210      	movs	r2, #16
 80021a0:	409a      	lsls	r2, r3
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d018      	beq.n	80021e6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d108      	bne.n	80021d4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d024      	beq.n	8002214 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	4798      	blx	r3
 80021d2:	e01f      	b.n	8002214 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d01b      	beq.n	8002214 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	4798      	blx	r3
 80021e4:	e016      	b.n	8002214 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d107      	bne.n	8002204 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f022 0208 	bic.w	r2, r2, #8
 8002202:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002208:	2b00      	cmp	r3, #0
 800220a:	d003      	beq.n	8002214 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002218:	2220      	movs	r2, #32
 800221a:	409a      	lsls	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	4013      	ands	r3, r2
 8002220:	2b00      	cmp	r3, #0
 8002222:	f000 808f 	beq.w	8002344 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0310 	and.w	r3, r3, #16
 8002230:	2b00      	cmp	r3, #0
 8002232:	f000 8087 	beq.w	8002344 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800223a:	2220      	movs	r2, #32
 800223c:	409a      	lsls	r2, r3
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b05      	cmp	r3, #5
 800224c:	d136      	bne.n	80022bc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f022 0216 	bic.w	r2, r2, #22
 800225c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	695a      	ldr	r2, [r3, #20]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800226c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002272:	2b00      	cmp	r3, #0
 8002274:	d103      	bne.n	800227e <HAL_DMA_IRQHandler+0x1da>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800227a:	2b00      	cmp	r3, #0
 800227c:	d007      	beq.n	800228e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f022 0208 	bic.w	r2, r2, #8
 800228c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002292:	223f      	movs	r2, #63	@ 0x3f
 8002294:	409a      	lsls	r2, r3
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2201      	movs	r2, #1
 800229e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d07e      	beq.n	80023b0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	4798      	blx	r3
        }
        return;
 80022ba:	e079      	b.n	80023b0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d01d      	beq.n	8002306 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d10d      	bne.n	80022f4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d031      	beq.n	8002344 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	4798      	blx	r3
 80022e8:	e02c      	b.n	8002344 <HAL_DMA_IRQHandler+0x2a0>
 80022ea:	bf00      	nop
 80022ec:	20000000 	.word	0x20000000
 80022f0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d023      	beq.n	8002344 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	4798      	blx	r3
 8002304:	e01e      	b.n	8002344 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002310:	2b00      	cmp	r3, #0
 8002312:	d10f      	bne.n	8002334 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f022 0210 	bic.w	r2, r2, #16
 8002322:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002338:	2b00      	cmp	r3, #0
 800233a:	d003      	beq.n	8002344 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002348:	2b00      	cmp	r3, #0
 800234a:	d032      	beq.n	80023b2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002350:	f003 0301 	and.w	r3, r3, #1
 8002354:	2b00      	cmp	r3, #0
 8002356:	d022      	beq.n	800239e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2205      	movs	r2, #5
 800235c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f022 0201 	bic.w	r2, r2, #1
 800236e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	3301      	adds	r3, #1
 8002374:	60bb      	str	r3, [r7, #8]
 8002376:	697a      	ldr	r2, [r7, #20]
 8002378:	429a      	cmp	r2, r3
 800237a:	d307      	bcc.n	800238c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1f2      	bne.n	8002370 <HAL_DMA_IRQHandler+0x2cc>
 800238a:	e000      	b.n	800238e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800238c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2201      	movs	r2, #1
 8002392:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d005      	beq.n	80023b2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	4798      	blx	r3
 80023ae:	e000      	b.n	80023b2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80023b0:	bf00      	nop
    }
  }
}
 80023b2:	3718      	adds	r7, #24
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	3b10      	subs	r3, #16
 80023c8:	4a14      	ldr	r2, [pc, #80]	@ (800241c <DMA_CalcBaseAndBitshift+0x64>)
 80023ca:	fba2 2303 	umull	r2, r3, r2, r3
 80023ce:	091b      	lsrs	r3, r3, #4
 80023d0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80023d2:	4a13      	ldr	r2, [pc, #76]	@ (8002420 <DMA_CalcBaseAndBitshift+0x68>)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	4413      	add	r3, r2
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	461a      	mov	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2b03      	cmp	r3, #3
 80023e4:	d909      	bls.n	80023fa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80023ee:	f023 0303 	bic.w	r3, r3, #3
 80023f2:	1d1a      	adds	r2, r3, #4
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	659a      	str	r2, [r3, #88]	@ 0x58
 80023f8:	e007      	b.n	800240a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002402:	f023 0303 	bic.w	r3, r3, #3
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800240e:	4618      	mov	r0, r3
 8002410:	3714      	adds	r7, #20
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	aaaaaaab 	.word	0xaaaaaaab
 8002420:	08005290 	.word	0x08005290

08002424 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002424:	b480      	push	{r7}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800242c:	2300      	movs	r3, #0
 800242e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002434:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d11f      	bne.n	800247e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	2b03      	cmp	r3, #3
 8002442:	d856      	bhi.n	80024f2 <DMA_CheckFifoParam+0xce>
 8002444:	a201      	add	r2, pc, #4	@ (adr r2, 800244c <DMA_CheckFifoParam+0x28>)
 8002446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800244a:	bf00      	nop
 800244c:	0800245d 	.word	0x0800245d
 8002450:	0800246f 	.word	0x0800246f
 8002454:	0800245d 	.word	0x0800245d
 8002458:	080024f3 	.word	0x080024f3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002460:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d046      	beq.n	80024f6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800246c:	e043      	b.n	80024f6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002472:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002476:	d140      	bne.n	80024fa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800247c:	e03d      	b.n	80024fa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002486:	d121      	bne.n	80024cc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	2b03      	cmp	r3, #3
 800248c:	d837      	bhi.n	80024fe <DMA_CheckFifoParam+0xda>
 800248e:	a201      	add	r2, pc, #4	@ (adr r2, 8002494 <DMA_CheckFifoParam+0x70>)
 8002490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002494:	080024a5 	.word	0x080024a5
 8002498:	080024ab 	.word	0x080024ab
 800249c:	080024a5 	.word	0x080024a5
 80024a0:	080024bd 	.word	0x080024bd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	73fb      	strb	r3, [r7, #15]
      break;
 80024a8:	e030      	b.n	800250c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024ae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d025      	beq.n	8002502 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024ba:	e022      	b.n	8002502 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024c0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80024c4:	d11f      	bne.n	8002506 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80024ca:	e01c      	b.n	8002506 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d903      	bls.n	80024da <DMA_CheckFifoParam+0xb6>
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	2b03      	cmp	r3, #3
 80024d6:	d003      	beq.n	80024e0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80024d8:	e018      	b.n	800250c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	73fb      	strb	r3, [r7, #15]
      break;
 80024de:	e015      	b.n	800250c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d00e      	beq.n	800250a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	73fb      	strb	r3, [r7, #15]
      break;
 80024f0:	e00b      	b.n	800250a <DMA_CheckFifoParam+0xe6>
      break;
 80024f2:	bf00      	nop
 80024f4:	e00a      	b.n	800250c <DMA_CheckFifoParam+0xe8>
      break;
 80024f6:	bf00      	nop
 80024f8:	e008      	b.n	800250c <DMA_CheckFifoParam+0xe8>
      break;
 80024fa:	bf00      	nop
 80024fc:	e006      	b.n	800250c <DMA_CheckFifoParam+0xe8>
      break;
 80024fe:	bf00      	nop
 8002500:	e004      	b.n	800250c <DMA_CheckFifoParam+0xe8>
      break;
 8002502:	bf00      	nop
 8002504:	e002      	b.n	800250c <DMA_CheckFifoParam+0xe8>
      break;   
 8002506:	bf00      	nop
 8002508:	e000      	b.n	800250c <DMA_CheckFifoParam+0xe8>
      break;
 800250a:	bf00      	nop
    }
  } 
  
  return status; 
 800250c:	7bfb      	ldrb	r3, [r7, #15]
}
 800250e:	4618      	mov	r0, r3
 8002510:	3714      	adds	r7, #20
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop

0800251c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800251c:	b480      	push	{r7}
 800251e:	b089      	sub	sp, #36	@ 0x24
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002526:	2300      	movs	r3, #0
 8002528:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800252a:	2300      	movs	r3, #0
 800252c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800252e:	2300      	movs	r3, #0
 8002530:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002532:	2300      	movs	r3, #0
 8002534:	61fb      	str	r3, [r7, #28]
 8002536:	e16b      	b.n	8002810 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002538:	2201      	movs	r2, #1
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	697a      	ldr	r2, [r7, #20]
 8002548:	4013      	ands	r3, r2
 800254a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	429a      	cmp	r2, r3
 8002552:	f040 815a 	bne.w	800280a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f003 0303 	and.w	r3, r3, #3
 800255e:	2b01      	cmp	r3, #1
 8002560:	d005      	beq.n	800256e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800256a:	2b02      	cmp	r3, #2
 800256c:	d130      	bne.n	80025d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	2203      	movs	r2, #3
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	43db      	mvns	r3, r3
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	4013      	ands	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	68da      	ldr	r2, [r3, #12]
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	fa02 f303 	lsl.w	r3, r2, r3
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	4313      	orrs	r3, r2
 8002596:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025a4:	2201      	movs	r2, #1
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	43db      	mvns	r3, r3
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	4013      	ands	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	091b      	lsrs	r3, r3, #4
 80025ba:	f003 0201 	and.w	r2, r3, #1
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f003 0303 	and.w	r3, r3, #3
 80025d8:	2b03      	cmp	r3, #3
 80025da:	d017      	beq.n	800260c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	2203      	movs	r2, #3
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	43db      	mvns	r3, r3
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	4013      	ands	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	689a      	ldr	r2, [r3, #8]
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	4313      	orrs	r3, r2
 8002604:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f003 0303 	and.w	r3, r3, #3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d123      	bne.n	8002660 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	08da      	lsrs	r2, r3, #3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	3208      	adds	r2, #8
 8002620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002624:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	f003 0307 	and.w	r3, r3, #7
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	220f      	movs	r2, #15
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	43db      	mvns	r3, r3
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	4013      	ands	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	691a      	ldr	r2, [r3, #16]
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	f003 0307 	and.w	r3, r3, #7
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	4313      	orrs	r3, r2
 8002650:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	08da      	lsrs	r2, r3, #3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	3208      	adds	r2, #8
 800265a:	69b9      	ldr	r1, [r7, #24]
 800265c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	2203      	movs	r2, #3
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	43db      	mvns	r3, r3
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	4013      	ands	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f003 0203 	and.w	r2, r3, #3
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	4313      	orrs	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800269c:	2b00      	cmp	r3, #0
 800269e:	f000 80b4 	beq.w	800280a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026a2:	2300      	movs	r3, #0
 80026a4:	60fb      	str	r3, [r7, #12]
 80026a6:	4b60      	ldr	r3, [pc, #384]	@ (8002828 <HAL_GPIO_Init+0x30c>)
 80026a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026aa:	4a5f      	ldr	r2, [pc, #380]	@ (8002828 <HAL_GPIO_Init+0x30c>)
 80026ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80026b2:	4b5d      	ldr	r3, [pc, #372]	@ (8002828 <HAL_GPIO_Init+0x30c>)
 80026b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026ba:	60fb      	str	r3, [r7, #12]
 80026bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026be:	4a5b      	ldr	r2, [pc, #364]	@ (800282c <HAL_GPIO_Init+0x310>)
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	089b      	lsrs	r3, r3, #2
 80026c4:	3302      	adds	r3, #2
 80026c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	f003 0303 	and.w	r3, r3, #3
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	220f      	movs	r2, #15
 80026d6:	fa02 f303 	lsl.w	r3, r2, r3
 80026da:	43db      	mvns	r3, r3
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	4013      	ands	r3, r2
 80026e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a52      	ldr	r2, [pc, #328]	@ (8002830 <HAL_GPIO_Init+0x314>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d02b      	beq.n	8002742 <HAL_GPIO_Init+0x226>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a51      	ldr	r2, [pc, #324]	@ (8002834 <HAL_GPIO_Init+0x318>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d025      	beq.n	800273e <HAL_GPIO_Init+0x222>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a50      	ldr	r2, [pc, #320]	@ (8002838 <HAL_GPIO_Init+0x31c>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d01f      	beq.n	800273a <HAL_GPIO_Init+0x21e>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a4f      	ldr	r2, [pc, #316]	@ (800283c <HAL_GPIO_Init+0x320>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d019      	beq.n	8002736 <HAL_GPIO_Init+0x21a>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a4e      	ldr	r2, [pc, #312]	@ (8002840 <HAL_GPIO_Init+0x324>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d013      	beq.n	8002732 <HAL_GPIO_Init+0x216>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a4d      	ldr	r2, [pc, #308]	@ (8002844 <HAL_GPIO_Init+0x328>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d00d      	beq.n	800272e <HAL_GPIO_Init+0x212>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a4c      	ldr	r2, [pc, #304]	@ (8002848 <HAL_GPIO_Init+0x32c>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d007      	beq.n	800272a <HAL_GPIO_Init+0x20e>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a4b      	ldr	r2, [pc, #300]	@ (800284c <HAL_GPIO_Init+0x330>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d101      	bne.n	8002726 <HAL_GPIO_Init+0x20a>
 8002722:	2307      	movs	r3, #7
 8002724:	e00e      	b.n	8002744 <HAL_GPIO_Init+0x228>
 8002726:	2308      	movs	r3, #8
 8002728:	e00c      	b.n	8002744 <HAL_GPIO_Init+0x228>
 800272a:	2306      	movs	r3, #6
 800272c:	e00a      	b.n	8002744 <HAL_GPIO_Init+0x228>
 800272e:	2305      	movs	r3, #5
 8002730:	e008      	b.n	8002744 <HAL_GPIO_Init+0x228>
 8002732:	2304      	movs	r3, #4
 8002734:	e006      	b.n	8002744 <HAL_GPIO_Init+0x228>
 8002736:	2303      	movs	r3, #3
 8002738:	e004      	b.n	8002744 <HAL_GPIO_Init+0x228>
 800273a:	2302      	movs	r3, #2
 800273c:	e002      	b.n	8002744 <HAL_GPIO_Init+0x228>
 800273e:	2301      	movs	r3, #1
 8002740:	e000      	b.n	8002744 <HAL_GPIO_Init+0x228>
 8002742:	2300      	movs	r3, #0
 8002744:	69fa      	ldr	r2, [r7, #28]
 8002746:	f002 0203 	and.w	r2, r2, #3
 800274a:	0092      	lsls	r2, r2, #2
 800274c:	4093      	lsls	r3, r2
 800274e:	69ba      	ldr	r2, [r7, #24]
 8002750:	4313      	orrs	r3, r2
 8002752:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002754:	4935      	ldr	r1, [pc, #212]	@ (800282c <HAL_GPIO_Init+0x310>)
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	089b      	lsrs	r3, r3, #2
 800275a:	3302      	adds	r3, #2
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002762:	4b3b      	ldr	r3, [pc, #236]	@ (8002850 <HAL_GPIO_Init+0x334>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	43db      	mvns	r3, r3
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	4013      	ands	r3, r2
 8002770:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d003      	beq.n	8002786 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	4313      	orrs	r3, r2
 8002784:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002786:	4a32      	ldr	r2, [pc, #200]	@ (8002850 <HAL_GPIO_Init+0x334>)
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800278c:	4b30      	ldr	r3, [pc, #192]	@ (8002850 <HAL_GPIO_Init+0x334>)
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	43db      	mvns	r3, r3
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	4013      	ands	r3, r2
 800279a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d003      	beq.n	80027b0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027b0:	4a27      	ldr	r2, [pc, #156]	@ (8002850 <HAL_GPIO_Init+0x334>)
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027b6:	4b26      	ldr	r3, [pc, #152]	@ (8002850 <HAL_GPIO_Init+0x334>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	43db      	mvns	r3, r3
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	4013      	ands	r3, r2
 80027c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d003      	beq.n	80027da <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027da:	4a1d      	ldr	r2, [pc, #116]	@ (8002850 <HAL_GPIO_Init+0x334>)
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002850 <HAL_GPIO_Init+0x334>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	43db      	mvns	r3, r3
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	4013      	ands	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d003      	beq.n	8002804 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	4313      	orrs	r3, r2
 8002802:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002804:	4a12      	ldr	r2, [pc, #72]	@ (8002850 <HAL_GPIO_Init+0x334>)
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	3301      	adds	r3, #1
 800280e:	61fb      	str	r3, [r7, #28]
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	2b0f      	cmp	r3, #15
 8002814:	f67f ae90 	bls.w	8002538 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002818:	bf00      	nop
 800281a:	bf00      	nop
 800281c:	3724      	adds	r7, #36	@ 0x24
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	40023800 	.word	0x40023800
 800282c:	40013800 	.word	0x40013800
 8002830:	40020000 	.word	0x40020000
 8002834:	40020400 	.word	0x40020400
 8002838:	40020800 	.word	0x40020800
 800283c:	40020c00 	.word	0x40020c00
 8002840:	40021000 	.word	0x40021000
 8002844:	40021400 	.word	0x40021400
 8002848:	40021800 	.word	0x40021800
 800284c:	40021c00 	.word	0x40021c00
 8002850:	40013c00 	.word	0x40013c00

08002854 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e267      	b.n	8002d36 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b00      	cmp	r3, #0
 8002870:	d075      	beq.n	800295e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002872:	4b88      	ldr	r3, [pc, #544]	@ (8002a94 <HAL_RCC_OscConfig+0x240>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f003 030c 	and.w	r3, r3, #12
 800287a:	2b04      	cmp	r3, #4
 800287c:	d00c      	beq.n	8002898 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800287e:	4b85      	ldr	r3, [pc, #532]	@ (8002a94 <HAL_RCC_OscConfig+0x240>)
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002886:	2b08      	cmp	r3, #8
 8002888:	d112      	bne.n	80028b0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800288a:	4b82      	ldr	r3, [pc, #520]	@ (8002a94 <HAL_RCC_OscConfig+0x240>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002892:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002896:	d10b      	bne.n	80028b0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002898:	4b7e      	ldr	r3, [pc, #504]	@ (8002a94 <HAL_RCC_OscConfig+0x240>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d05b      	beq.n	800295c <HAL_RCC_OscConfig+0x108>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d157      	bne.n	800295c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e242      	b.n	8002d36 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028b8:	d106      	bne.n	80028c8 <HAL_RCC_OscConfig+0x74>
 80028ba:	4b76      	ldr	r3, [pc, #472]	@ (8002a94 <HAL_RCC_OscConfig+0x240>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a75      	ldr	r2, [pc, #468]	@ (8002a94 <HAL_RCC_OscConfig+0x240>)
 80028c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028c4:	6013      	str	r3, [r2, #0]
 80028c6:	e01d      	b.n	8002904 <HAL_RCC_OscConfig+0xb0>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028d0:	d10c      	bne.n	80028ec <HAL_RCC_OscConfig+0x98>
 80028d2:	4b70      	ldr	r3, [pc, #448]	@ (8002a94 <HAL_RCC_OscConfig+0x240>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a6f      	ldr	r2, [pc, #444]	@ (8002a94 <HAL_RCC_OscConfig+0x240>)
 80028d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028dc:	6013      	str	r3, [r2, #0]
 80028de:	4b6d      	ldr	r3, [pc, #436]	@ (8002a94 <HAL_RCC_OscConfig+0x240>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a6c      	ldr	r2, [pc, #432]	@ (8002a94 <HAL_RCC_OscConfig+0x240>)
 80028e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028e8:	6013      	str	r3, [r2, #0]
 80028ea:	e00b      	b.n	8002904 <HAL_RCC_OscConfig+0xb0>
 80028ec:	4b69      	ldr	r3, [pc, #420]	@ (8002a94 <HAL_RCC_OscConfig+0x240>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a68      	ldr	r2, [pc, #416]	@ (8002a94 <HAL_RCC_OscConfig+0x240>)
 80028f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028f6:	6013      	str	r3, [r2, #0]
 80028f8:	4b66      	ldr	r3, [pc, #408]	@ (8002a94 <HAL_RCC_OscConfig+0x240>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a65      	ldr	r2, [pc, #404]	@ (8002a94 <HAL_RCC_OscConfig+0x240>)
 80028fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002902:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d013      	beq.n	8002934 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290c:	f7fe fbac 	bl	8001068 <HAL_GetTick>
 8002910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002912:	e008      	b.n	8002926 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002914:	f7fe fba8 	bl	8001068 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b64      	cmp	r3, #100	@ 0x64
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e207      	b.n	8002d36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002926:	4b5b      	ldr	r3, [pc, #364]	@ (8002a94 <HAL_RCC_OscConfig+0x240>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d0f0      	beq.n	8002914 <HAL_RCC_OscConfig+0xc0>
 8002932:	e014      	b.n	800295e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002934:	f7fe fb98 	bl	8001068 <HAL_GetTick>
 8002938:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800293a:	e008      	b.n	800294e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800293c:	f7fe fb94 	bl	8001068 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b64      	cmp	r3, #100	@ 0x64
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e1f3      	b.n	8002d36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800294e:	4b51      	ldr	r3, [pc, #324]	@ (8002a94 <HAL_RCC_OscConfig+0x240>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1f0      	bne.n	800293c <HAL_RCC_OscConfig+0xe8>
 800295a:	e000      	b.n	800295e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800295c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d063      	beq.n	8002a32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800296a:	4b4a      	ldr	r3, [pc, #296]	@ (8002a94 <HAL_RCC_OscConfig+0x240>)
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 030c 	and.w	r3, r3, #12
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00b      	beq.n	800298e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002976:	4b47      	ldr	r3, [pc, #284]	@ (8002a94 <HAL_RCC_OscConfig+0x240>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800297e:	2b08      	cmp	r3, #8
 8002980:	d11c      	bne.n	80029bc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002982:	4b44      	ldr	r3, [pc, #272]	@ (8002a94 <HAL_RCC_OscConfig+0x240>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d116      	bne.n	80029bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800298e:	4b41      	ldr	r3, [pc, #260]	@ (8002a94 <HAL_RCC_OscConfig+0x240>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d005      	beq.n	80029a6 <HAL_RCC_OscConfig+0x152>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d001      	beq.n	80029a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e1c7      	b.n	8002d36 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029a6:	4b3b      	ldr	r3, [pc, #236]	@ (8002a94 <HAL_RCC_OscConfig+0x240>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	00db      	lsls	r3, r3, #3
 80029b4:	4937      	ldr	r1, [pc, #220]	@ (8002a94 <HAL_RCC_OscConfig+0x240>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ba:	e03a      	b.n	8002a32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d020      	beq.n	8002a06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029c4:	4b34      	ldr	r3, [pc, #208]	@ (8002a98 <HAL_RCC_OscConfig+0x244>)
 80029c6:	2201      	movs	r2, #1
 80029c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ca:	f7fe fb4d 	bl	8001068 <HAL_GetTick>
 80029ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029d0:	e008      	b.n	80029e4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029d2:	f7fe fb49 	bl	8001068 <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d901      	bls.n	80029e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e1a8      	b.n	8002d36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029e4:	4b2b      	ldr	r3, [pc, #172]	@ (8002a94 <HAL_RCC_OscConfig+0x240>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d0f0      	beq.n	80029d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029f0:	4b28      	ldr	r3, [pc, #160]	@ (8002a94 <HAL_RCC_OscConfig+0x240>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	00db      	lsls	r3, r3, #3
 80029fe:	4925      	ldr	r1, [pc, #148]	@ (8002a94 <HAL_RCC_OscConfig+0x240>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	600b      	str	r3, [r1, #0]
 8002a04:	e015      	b.n	8002a32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a06:	4b24      	ldr	r3, [pc, #144]	@ (8002a98 <HAL_RCC_OscConfig+0x244>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a0c:	f7fe fb2c 	bl	8001068 <HAL_GetTick>
 8002a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a12:	e008      	b.n	8002a26 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a14:	f7fe fb28 	bl	8001068 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e187      	b.n	8002d36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a26:	4b1b      	ldr	r3, [pc, #108]	@ (8002a94 <HAL_RCC_OscConfig+0x240>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1f0      	bne.n	8002a14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0308 	and.w	r3, r3, #8
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d036      	beq.n	8002aac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	695b      	ldr	r3, [r3, #20]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d016      	beq.n	8002a74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a46:	4b15      	ldr	r3, [pc, #84]	@ (8002a9c <HAL_RCC_OscConfig+0x248>)
 8002a48:	2201      	movs	r2, #1
 8002a4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a4c:	f7fe fb0c 	bl	8001068 <HAL_GetTick>
 8002a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a52:	e008      	b.n	8002a66 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a54:	f7fe fb08 	bl	8001068 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e167      	b.n	8002d36 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a66:	4b0b      	ldr	r3, [pc, #44]	@ (8002a94 <HAL_RCC_OscConfig+0x240>)
 8002a68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d0f0      	beq.n	8002a54 <HAL_RCC_OscConfig+0x200>
 8002a72:	e01b      	b.n	8002aac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a74:	4b09      	ldr	r3, [pc, #36]	@ (8002a9c <HAL_RCC_OscConfig+0x248>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a7a:	f7fe faf5 	bl	8001068 <HAL_GetTick>
 8002a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a80:	e00e      	b.n	8002aa0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a82:	f7fe faf1 	bl	8001068 <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d907      	bls.n	8002aa0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e150      	b.n	8002d36 <HAL_RCC_OscConfig+0x4e2>
 8002a94:	40023800 	.word	0x40023800
 8002a98:	42470000 	.word	0x42470000
 8002a9c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aa0:	4b88      	ldr	r3, [pc, #544]	@ (8002cc4 <HAL_RCC_OscConfig+0x470>)
 8002aa2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002aa4:	f003 0302 	and.w	r3, r3, #2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1ea      	bne.n	8002a82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0304 	and.w	r3, r3, #4
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f000 8097 	beq.w	8002be8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aba:	2300      	movs	r3, #0
 8002abc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002abe:	4b81      	ldr	r3, [pc, #516]	@ (8002cc4 <HAL_RCC_OscConfig+0x470>)
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d10f      	bne.n	8002aea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aca:	2300      	movs	r3, #0
 8002acc:	60bb      	str	r3, [r7, #8]
 8002ace:	4b7d      	ldr	r3, [pc, #500]	@ (8002cc4 <HAL_RCC_OscConfig+0x470>)
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad2:	4a7c      	ldr	r2, [pc, #496]	@ (8002cc4 <HAL_RCC_OscConfig+0x470>)
 8002ad4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ad8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ada:	4b7a      	ldr	r3, [pc, #488]	@ (8002cc4 <HAL_RCC_OscConfig+0x470>)
 8002adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ade:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ae2:	60bb      	str	r3, [r7, #8]
 8002ae4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aea:	4b77      	ldr	r3, [pc, #476]	@ (8002cc8 <HAL_RCC_OscConfig+0x474>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d118      	bne.n	8002b28 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002af6:	4b74      	ldr	r3, [pc, #464]	@ (8002cc8 <HAL_RCC_OscConfig+0x474>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a73      	ldr	r2, [pc, #460]	@ (8002cc8 <HAL_RCC_OscConfig+0x474>)
 8002afc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b02:	f7fe fab1 	bl	8001068 <HAL_GetTick>
 8002b06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b08:	e008      	b.n	8002b1c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b0a:	f7fe faad 	bl	8001068 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d901      	bls.n	8002b1c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e10c      	b.n	8002d36 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b1c:	4b6a      	ldr	r3, [pc, #424]	@ (8002cc8 <HAL_RCC_OscConfig+0x474>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d0f0      	beq.n	8002b0a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d106      	bne.n	8002b3e <HAL_RCC_OscConfig+0x2ea>
 8002b30:	4b64      	ldr	r3, [pc, #400]	@ (8002cc4 <HAL_RCC_OscConfig+0x470>)
 8002b32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b34:	4a63      	ldr	r2, [pc, #396]	@ (8002cc4 <HAL_RCC_OscConfig+0x470>)
 8002b36:	f043 0301 	orr.w	r3, r3, #1
 8002b3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b3c:	e01c      	b.n	8002b78 <HAL_RCC_OscConfig+0x324>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	2b05      	cmp	r3, #5
 8002b44:	d10c      	bne.n	8002b60 <HAL_RCC_OscConfig+0x30c>
 8002b46:	4b5f      	ldr	r3, [pc, #380]	@ (8002cc4 <HAL_RCC_OscConfig+0x470>)
 8002b48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b4a:	4a5e      	ldr	r2, [pc, #376]	@ (8002cc4 <HAL_RCC_OscConfig+0x470>)
 8002b4c:	f043 0304 	orr.w	r3, r3, #4
 8002b50:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b52:	4b5c      	ldr	r3, [pc, #368]	@ (8002cc4 <HAL_RCC_OscConfig+0x470>)
 8002b54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b56:	4a5b      	ldr	r2, [pc, #364]	@ (8002cc4 <HAL_RCC_OscConfig+0x470>)
 8002b58:	f043 0301 	orr.w	r3, r3, #1
 8002b5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b5e:	e00b      	b.n	8002b78 <HAL_RCC_OscConfig+0x324>
 8002b60:	4b58      	ldr	r3, [pc, #352]	@ (8002cc4 <HAL_RCC_OscConfig+0x470>)
 8002b62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b64:	4a57      	ldr	r2, [pc, #348]	@ (8002cc4 <HAL_RCC_OscConfig+0x470>)
 8002b66:	f023 0301 	bic.w	r3, r3, #1
 8002b6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b6c:	4b55      	ldr	r3, [pc, #340]	@ (8002cc4 <HAL_RCC_OscConfig+0x470>)
 8002b6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b70:	4a54      	ldr	r2, [pc, #336]	@ (8002cc4 <HAL_RCC_OscConfig+0x470>)
 8002b72:	f023 0304 	bic.w	r3, r3, #4
 8002b76:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d015      	beq.n	8002bac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b80:	f7fe fa72 	bl	8001068 <HAL_GetTick>
 8002b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b86:	e00a      	b.n	8002b9e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b88:	f7fe fa6e 	bl	8001068 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e0cb      	b.n	8002d36 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b9e:	4b49      	ldr	r3, [pc, #292]	@ (8002cc4 <HAL_RCC_OscConfig+0x470>)
 8002ba0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d0ee      	beq.n	8002b88 <HAL_RCC_OscConfig+0x334>
 8002baa:	e014      	b.n	8002bd6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bac:	f7fe fa5c 	bl	8001068 <HAL_GetTick>
 8002bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bb2:	e00a      	b.n	8002bca <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bb4:	f7fe fa58 	bl	8001068 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e0b5      	b.n	8002d36 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bca:	4b3e      	ldr	r3, [pc, #248]	@ (8002cc4 <HAL_RCC_OscConfig+0x470>)
 8002bcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1ee      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002bd6:	7dfb      	ldrb	r3, [r7, #23]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d105      	bne.n	8002be8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bdc:	4b39      	ldr	r3, [pc, #228]	@ (8002cc4 <HAL_RCC_OscConfig+0x470>)
 8002bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be0:	4a38      	ldr	r2, [pc, #224]	@ (8002cc4 <HAL_RCC_OscConfig+0x470>)
 8002be2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002be6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f000 80a1 	beq.w	8002d34 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002bf2:	4b34      	ldr	r3, [pc, #208]	@ (8002cc4 <HAL_RCC_OscConfig+0x470>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f003 030c 	and.w	r3, r3, #12
 8002bfa:	2b08      	cmp	r3, #8
 8002bfc:	d05c      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d141      	bne.n	8002c8a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c06:	4b31      	ldr	r3, [pc, #196]	@ (8002ccc <HAL_RCC_OscConfig+0x478>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c0c:	f7fe fa2c 	bl	8001068 <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c14:	f7fe fa28 	bl	8001068 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e087      	b.n	8002d36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c26:	4b27      	ldr	r3, [pc, #156]	@ (8002cc4 <HAL_RCC_OscConfig+0x470>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1f0      	bne.n	8002c14 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	69da      	ldr	r2, [r3, #28]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a1b      	ldr	r3, [r3, #32]
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c40:	019b      	lsls	r3, r3, #6
 8002c42:	431a      	orrs	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c48:	085b      	lsrs	r3, r3, #1
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	041b      	lsls	r3, r3, #16
 8002c4e:	431a      	orrs	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c54:	061b      	lsls	r3, r3, #24
 8002c56:	491b      	ldr	r1, [pc, #108]	@ (8002cc4 <HAL_RCC_OscConfig+0x470>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c5c:	4b1b      	ldr	r3, [pc, #108]	@ (8002ccc <HAL_RCC_OscConfig+0x478>)
 8002c5e:	2201      	movs	r2, #1
 8002c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c62:	f7fe fa01 	bl	8001068 <HAL_GetTick>
 8002c66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c68:	e008      	b.n	8002c7c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c6a:	f7fe f9fd 	bl	8001068 <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d901      	bls.n	8002c7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e05c      	b.n	8002d36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c7c:	4b11      	ldr	r3, [pc, #68]	@ (8002cc4 <HAL_RCC_OscConfig+0x470>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d0f0      	beq.n	8002c6a <HAL_RCC_OscConfig+0x416>
 8002c88:	e054      	b.n	8002d34 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c8a:	4b10      	ldr	r3, [pc, #64]	@ (8002ccc <HAL_RCC_OscConfig+0x478>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c90:	f7fe f9ea 	bl	8001068 <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c98:	f7fe f9e6 	bl	8001068 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e045      	b.n	8002d36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002caa:	4b06      	ldr	r3, [pc, #24]	@ (8002cc4 <HAL_RCC_OscConfig+0x470>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1f0      	bne.n	8002c98 <HAL_RCC_OscConfig+0x444>
 8002cb6:	e03d      	b.n	8002d34 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d107      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e038      	b.n	8002d36 <HAL_RCC_OscConfig+0x4e2>
 8002cc4:	40023800 	.word	0x40023800
 8002cc8:	40007000 	.word	0x40007000
 8002ccc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cd0:	4b1b      	ldr	r3, [pc, #108]	@ (8002d40 <HAL_RCC_OscConfig+0x4ec>)
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d028      	beq.n	8002d30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d121      	bne.n	8002d30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d11a      	bne.n	8002d30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002d00:	4013      	ands	r3, r2
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d111      	bne.n	8002d30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d16:	085b      	lsrs	r3, r3, #1
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d107      	bne.n	8002d30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d001      	beq.n	8002d34 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e000      	b.n	8002d36 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3718      	adds	r7, #24
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	40023800 	.word	0x40023800

08002d44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d101      	bne.n	8002d58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e0cc      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d58:	4b68      	ldr	r3, [pc, #416]	@ (8002efc <HAL_RCC_ClockConfig+0x1b8>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0307 	and.w	r3, r3, #7
 8002d60:	683a      	ldr	r2, [r7, #0]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d90c      	bls.n	8002d80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d66:	4b65      	ldr	r3, [pc, #404]	@ (8002efc <HAL_RCC_ClockConfig+0x1b8>)
 8002d68:	683a      	ldr	r2, [r7, #0]
 8002d6a:	b2d2      	uxtb	r2, r2
 8002d6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d6e:	4b63      	ldr	r3, [pc, #396]	@ (8002efc <HAL_RCC_ClockConfig+0x1b8>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0307 	and.w	r3, r3, #7
 8002d76:	683a      	ldr	r2, [r7, #0]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d001      	beq.n	8002d80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e0b8      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0302 	and.w	r3, r3, #2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d020      	beq.n	8002dce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0304 	and.w	r3, r3, #4
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d005      	beq.n	8002da4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d98:	4b59      	ldr	r3, [pc, #356]	@ (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	4a58      	ldr	r2, [pc, #352]	@ (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002da2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0308 	and.w	r3, r3, #8
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d005      	beq.n	8002dbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002db0:	4b53      	ldr	r3, [pc, #332]	@ (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	4a52      	ldr	r2, [pc, #328]	@ (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002db6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002dba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dbc:	4b50      	ldr	r3, [pc, #320]	@ (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	494d      	ldr	r1, [pc, #308]	@ (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d044      	beq.n	8002e64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d107      	bne.n	8002df2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002de2:	4b47      	ldr	r3, [pc, #284]	@ (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d119      	bne.n	8002e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e07f      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d003      	beq.n	8002e02 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dfe:	2b03      	cmp	r3, #3
 8002e00:	d107      	bne.n	8002e12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e02:	4b3f      	ldr	r3, [pc, #252]	@ (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d109      	bne.n	8002e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e06f      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e12:	4b3b      	ldr	r3, [pc, #236]	@ (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d101      	bne.n	8002e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e067      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e22:	4b37      	ldr	r3, [pc, #220]	@ (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f023 0203 	bic.w	r2, r3, #3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	4934      	ldr	r1, [pc, #208]	@ (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e34:	f7fe f918 	bl	8001068 <HAL_GetTick>
 8002e38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e3a:	e00a      	b.n	8002e52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e3c:	f7fe f914 	bl	8001068 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e04f      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e52:	4b2b      	ldr	r3, [pc, #172]	@ (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f003 020c 	and.w	r2, r3, #12
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d1eb      	bne.n	8002e3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e64:	4b25      	ldr	r3, [pc, #148]	@ (8002efc <HAL_RCC_ClockConfig+0x1b8>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0307 	and.w	r3, r3, #7
 8002e6c:	683a      	ldr	r2, [r7, #0]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d20c      	bcs.n	8002e8c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e72:	4b22      	ldr	r3, [pc, #136]	@ (8002efc <HAL_RCC_ClockConfig+0x1b8>)
 8002e74:	683a      	ldr	r2, [r7, #0]
 8002e76:	b2d2      	uxtb	r2, r2
 8002e78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e7a:	4b20      	ldr	r3, [pc, #128]	@ (8002efc <HAL_RCC_ClockConfig+0x1b8>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0307 	and.w	r3, r3, #7
 8002e82:	683a      	ldr	r2, [r7, #0]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d001      	beq.n	8002e8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e032      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0304 	and.w	r3, r3, #4
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d008      	beq.n	8002eaa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e98:	4b19      	ldr	r3, [pc, #100]	@ (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	4916      	ldr	r1, [pc, #88]	@ (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0308 	and.w	r3, r3, #8
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d009      	beq.n	8002eca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002eb6:	4b12      	ldr	r3, [pc, #72]	@ (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	00db      	lsls	r3, r3, #3
 8002ec4:	490e      	ldr	r1, [pc, #56]	@ (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002eca:	f000 f821 	bl	8002f10 <HAL_RCC_GetSysClockFreq>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	091b      	lsrs	r3, r3, #4
 8002ed6:	f003 030f 	and.w	r3, r3, #15
 8002eda:	490a      	ldr	r1, [pc, #40]	@ (8002f04 <HAL_RCC_ClockConfig+0x1c0>)
 8002edc:	5ccb      	ldrb	r3, [r1, r3]
 8002ede:	fa22 f303 	lsr.w	r3, r2, r3
 8002ee2:	4a09      	ldr	r2, [pc, #36]	@ (8002f08 <HAL_RCC_ClockConfig+0x1c4>)
 8002ee4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002ee6:	4b09      	ldr	r3, [pc, #36]	@ (8002f0c <HAL_RCC_ClockConfig+0x1c8>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7fe f878 	bl	8000fe0 <HAL_InitTick>

  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3710      	adds	r7, #16
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	40023c00 	.word	0x40023c00
 8002f00:	40023800 	.word	0x40023800
 8002f04:	08005280 	.word	0x08005280
 8002f08:	20000000 	.word	0x20000000
 8002f0c:	20000004 	.word	0x20000004

08002f10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f14:	b094      	sub	sp, #80	@ 0x50
 8002f16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002f20:	2300      	movs	r3, #0
 8002f22:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002f24:	2300      	movs	r3, #0
 8002f26:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f28:	4b79      	ldr	r3, [pc, #484]	@ (8003110 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f003 030c 	and.w	r3, r3, #12
 8002f30:	2b08      	cmp	r3, #8
 8002f32:	d00d      	beq.n	8002f50 <HAL_RCC_GetSysClockFreq+0x40>
 8002f34:	2b08      	cmp	r3, #8
 8002f36:	f200 80e1 	bhi.w	80030fc <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d002      	beq.n	8002f44 <HAL_RCC_GetSysClockFreq+0x34>
 8002f3e:	2b04      	cmp	r3, #4
 8002f40:	d003      	beq.n	8002f4a <HAL_RCC_GetSysClockFreq+0x3a>
 8002f42:	e0db      	b.n	80030fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f44:	4b73      	ldr	r3, [pc, #460]	@ (8003114 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f46:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f48:	e0db      	b.n	8003102 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f4a:	4b73      	ldr	r3, [pc, #460]	@ (8003118 <HAL_RCC_GetSysClockFreq+0x208>)
 8002f4c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f4e:	e0d8      	b.n	8003102 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f50:	4b6f      	ldr	r3, [pc, #444]	@ (8003110 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f58:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f5a:	4b6d      	ldr	r3, [pc, #436]	@ (8003110 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d063      	beq.n	800302e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f66:	4b6a      	ldr	r3, [pc, #424]	@ (8003110 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	099b      	lsrs	r3, r3, #6
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f70:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002f72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f78:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f7e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002f82:	4622      	mov	r2, r4
 8002f84:	462b      	mov	r3, r5
 8002f86:	f04f 0000 	mov.w	r0, #0
 8002f8a:	f04f 0100 	mov.w	r1, #0
 8002f8e:	0159      	lsls	r1, r3, #5
 8002f90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f94:	0150      	lsls	r0, r2, #5
 8002f96:	4602      	mov	r2, r0
 8002f98:	460b      	mov	r3, r1
 8002f9a:	4621      	mov	r1, r4
 8002f9c:	1a51      	subs	r1, r2, r1
 8002f9e:	6139      	str	r1, [r7, #16]
 8002fa0:	4629      	mov	r1, r5
 8002fa2:	eb63 0301 	sbc.w	r3, r3, r1
 8002fa6:	617b      	str	r3, [r7, #20]
 8002fa8:	f04f 0200 	mov.w	r2, #0
 8002fac:	f04f 0300 	mov.w	r3, #0
 8002fb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002fb4:	4659      	mov	r1, fp
 8002fb6:	018b      	lsls	r3, r1, #6
 8002fb8:	4651      	mov	r1, sl
 8002fba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fbe:	4651      	mov	r1, sl
 8002fc0:	018a      	lsls	r2, r1, #6
 8002fc2:	4651      	mov	r1, sl
 8002fc4:	ebb2 0801 	subs.w	r8, r2, r1
 8002fc8:	4659      	mov	r1, fp
 8002fca:	eb63 0901 	sbc.w	r9, r3, r1
 8002fce:	f04f 0200 	mov.w	r2, #0
 8002fd2:	f04f 0300 	mov.w	r3, #0
 8002fd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fe2:	4690      	mov	r8, r2
 8002fe4:	4699      	mov	r9, r3
 8002fe6:	4623      	mov	r3, r4
 8002fe8:	eb18 0303 	adds.w	r3, r8, r3
 8002fec:	60bb      	str	r3, [r7, #8]
 8002fee:	462b      	mov	r3, r5
 8002ff0:	eb49 0303 	adc.w	r3, r9, r3
 8002ff4:	60fb      	str	r3, [r7, #12]
 8002ff6:	f04f 0200 	mov.w	r2, #0
 8002ffa:	f04f 0300 	mov.w	r3, #0
 8002ffe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003002:	4629      	mov	r1, r5
 8003004:	024b      	lsls	r3, r1, #9
 8003006:	4621      	mov	r1, r4
 8003008:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800300c:	4621      	mov	r1, r4
 800300e:	024a      	lsls	r2, r1, #9
 8003010:	4610      	mov	r0, r2
 8003012:	4619      	mov	r1, r3
 8003014:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003016:	2200      	movs	r2, #0
 8003018:	62bb      	str	r3, [r7, #40]	@ 0x28
 800301a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800301c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003020:	f7fd f932 	bl	8000288 <__aeabi_uldivmod>
 8003024:	4602      	mov	r2, r0
 8003026:	460b      	mov	r3, r1
 8003028:	4613      	mov	r3, r2
 800302a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800302c:	e058      	b.n	80030e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800302e:	4b38      	ldr	r3, [pc, #224]	@ (8003110 <HAL_RCC_GetSysClockFreq+0x200>)
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	099b      	lsrs	r3, r3, #6
 8003034:	2200      	movs	r2, #0
 8003036:	4618      	mov	r0, r3
 8003038:	4611      	mov	r1, r2
 800303a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800303e:	623b      	str	r3, [r7, #32]
 8003040:	2300      	movs	r3, #0
 8003042:	627b      	str	r3, [r7, #36]	@ 0x24
 8003044:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003048:	4642      	mov	r2, r8
 800304a:	464b      	mov	r3, r9
 800304c:	f04f 0000 	mov.w	r0, #0
 8003050:	f04f 0100 	mov.w	r1, #0
 8003054:	0159      	lsls	r1, r3, #5
 8003056:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800305a:	0150      	lsls	r0, r2, #5
 800305c:	4602      	mov	r2, r0
 800305e:	460b      	mov	r3, r1
 8003060:	4641      	mov	r1, r8
 8003062:	ebb2 0a01 	subs.w	sl, r2, r1
 8003066:	4649      	mov	r1, r9
 8003068:	eb63 0b01 	sbc.w	fp, r3, r1
 800306c:	f04f 0200 	mov.w	r2, #0
 8003070:	f04f 0300 	mov.w	r3, #0
 8003074:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003078:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800307c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003080:	ebb2 040a 	subs.w	r4, r2, sl
 8003084:	eb63 050b 	sbc.w	r5, r3, fp
 8003088:	f04f 0200 	mov.w	r2, #0
 800308c:	f04f 0300 	mov.w	r3, #0
 8003090:	00eb      	lsls	r3, r5, #3
 8003092:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003096:	00e2      	lsls	r2, r4, #3
 8003098:	4614      	mov	r4, r2
 800309a:	461d      	mov	r5, r3
 800309c:	4643      	mov	r3, r8
 800309e:	18e3      	adds	r3, r4, r3
 80030a0:	603b      	str	r3, [r7, #0]
 80030a2:	464b      	mov	r3, r9
 80030a4:	eb45 0303 	adc.w	r3, r5, r3
 80030a8:	607b      	str	r3, [r7, #4]
 80030aa:	f04f 0200 	mov.w	r2, #0
 80030ae:	f04f 0300 	mov.w	r3, #0
 80030b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030b6:	4629      	mov	r1, r5
 80030b8:	028b      	lsls	r3, r1, #10
 80030ba:	4621      	mov	r1, r4
 80030bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030c0:	4621      	mov	r1, r4
 80030c2:	028a      	lsls	r2, r1, #10
 80030c4:	4610      	mov	r0, r2
 80030c6:	4619      	mov	r1, r3
 80030c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030ca:	2200      	movs	r2, #0
 80030cc:	61bb      	str	r3, [r7, #24]
 80030ce:	61fa      	str	r2, [r7, #28]
 80030d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030d4:	f7fd f8d8 	bl	8000288 <__aeabi_uldivmod>
 80030d8:	4602      	mov	r2, r0
 80030da:	460b      	mov	r3, r1
 80030dc:	4613      	mov	r3, r2
 80030de:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80030e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003110 <HAL_RCC_GetSysClockFreq+0x200>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	0c1b      	lsrs	r3, r3, #16
 80030e6:	f003 0303 	and.w	r3, r3, #3
 80030ea:	3301      	adds	r3, #1
 80030ec:	005b      	lsls	r3, r3, #1
 80030ee:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80030f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80030f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80030fa:	e002      	b.n	8003102 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030fc:	4b05      	ldr	r3, [pc, #20]	@ (8003114 <HAL_RCC_GetSysClockFreq+0x204>)
 80030fe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003100:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003102:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003104:	4618      	mov	r0, r3
 8003106:	3750      	adds	r7, #80	@ 0x50
 8003108:	46bd      	mov	sp, r7
 800310a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800310e:	bf00      	nop
 8003110:	40023800 	.word	0x40023800
 8003114:	00f42400 	.word	0x00f42400
 8003118:	007a1200 	.word	0x007a1200

0800311c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e041      	b.n	80031b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b00      	cmp	r3, #0
 8003138:	d106      	bne.n	8003148 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f7fd fdf6 	bl	8000d34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2202      	movs	r2, #2
 800314c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	3304      	adds	r3, #4
 8003158:	4619      	mov	r1, r3
 800315a:	4610      	mov	r0, r2
 800315c:	f000 fc64 	bl	8003a28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
	...

080031bc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80031bc:	b480      	push	{r7}
 80031be:	b085      	sub	sp, #20
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d001      	beq.n	80031d4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e046      	b.n	8003262 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2202      	movs	r2, #2
 80031d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a23      	ldr	r2, [pc, #140]	@ (8003270 <HAL_TIM_Base_Start+0xb4>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d022      	beq.n	800322c <HAL_TIM_Base_Start+0x70>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031ee:	d01d      	beq.n	800322c <HAL_TIM_Base_Start+0x70>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a1f      	ldr	r2, [pc, #124]	@ (8003274 <HAL_TIM_Base_Start+0xb8>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d018      	beq.n	800322c <HAL_TIM_Base_Start+0x70>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a1e      	ldr	r2, [pc, #120]	@ (8003278 <HAL_TIM_Base_Start+0xbc>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d013      	beq.n	800322c <HAL_TIM_Base_Start+0x70>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a1c      	ldr	r2, [pc, #112]	@ (800327c <HAL_TIM_Base_Start+0xc0>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d00e      	beq.n	800322c <HAL_TIM_Base_Start+0x70>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a1b      	ldr	r2, [pc, #108]	@ (8003280 <HAL_TIM_Base_Start+0xc4>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d009      	beq.n	800322c <HAL_TIM_Base_Start+0x70>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a19      	ldr	r2, [pc, #100]	@ (8003284 <HAL_TIM_Base_Start+0xc8>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d004      	beq.n	800322c <HAL_TIM_Base_Start+0x70>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a18      	ldr	r2, [pc, #96]	@ (8003288 <HAL_TIM_Base_Start+0xcc>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d111      	bne.n	8003250 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2b06      	cmp	r3, #6
 800323c:	d010      	beq.n	8003260 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f042 0201 	orr.w	r2, r2, #1
 800324c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800324e:	e007      	b.n	8003260 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f042 0201 	orr.w	r2, r2, #1
 800325e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3714      	adds	r7, #20
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	40010000 	.word	0x40010000
 8003274:	40000400 	.word	0x40000400
 8003278:	40000800 	.word	0x40000800
 800327c:	40000c00 	.word	0x40000c00
 8003280:	40010400 	.word	0x40010400
 8003284:	40014000 	.word	0x40014000
 8003288:	40001800 	.word	0x40001800

0800328c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e041      	b.n	8003322 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d106      	bne.n	80032b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 f839 	bl	800332a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2202      	movs	r2, #2
 80032bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	3304      	adds	r3, #4
 80032c8:	4619      	mov	r1, r3
 80032ca:	4610      	mov	r0, r2
 80032cc:	f000 fbac 	bl	8003a28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3708      	adds	r7, #8
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800332a:	b480      	push	{r7}
 800332c:	b083      	sub	sp, #12
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003332:	bf00      	nop
 8003334:	370c      	adds	r7, #12
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
	...

08003340 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800334a:	2300      	movs	r3, #0
 800334c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	2b0c      	cmp	r3, #12
 8003352:	d855      	bhi.n	8003400 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8003354:	a201      	add	r2, pc, #4	@ (adr r2, 800335c <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8003356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800335a:	bf00      	nop
 800335c:	08003391 	.word	0x08003391
 8003360:	08003401 	.word	0x08003401
 8003364:	08003401 	.word	0x08003401
 8003368:	08003401 	.word	0x08003401
 800336c:	080033ad 	.word	0x080033ad
 8003370:	08003401 	.word	0x08003401
 8003374:	08003401 	.word	0x08003401
 8003378:	08003401 	.word	0x08003401
 800337c:	080033c9 	.word	0x080033c9
 8003380:	08003401 	.word	0x08003401
 8003384:	08003401 	.word	0x08003401
 8003388:	08003401 	.word	0x08003401
 800338c:	080033e5 	.word	0x080033e5
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68da      	ldr	r2, [r3, #12]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800339e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7fe fe5b 	bl	8002060 <HAL_DMA_Abort_IT>
      break;
 80033aa:	e02c      	b.n	8003406 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68da      	ldr	r2, [r3, #12]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033ba:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7fe fe4d 	bl	8002060 <HAL_DMA_Abort_IT>
      break;
 80033c6:	e01e      	b.n	8003406 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68da      	ldr	r2, [r3, #12]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033d6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033dc:	4618      	mov	r0, r3
 80033de:	f7fe fe3f 	bl	8002060 <HAL_DMA_Abort_IT>
      break;
 80033e2:	e010      	b.n	8003406 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68da      	ldr	r2, [r3, #12]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80033f2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7fe fe31 	bl	8002060 <HAL_DMA_Abort_IT>
      break;
 80033fe:	e002      	b.n	8003406 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	73fb      	strb	r3, [r7, #15]
      break;
 8003404:	bf00      	nop
  }

  if (status == HAL_OK)
 8003406:	7bfb      	ldrb	r3, [r7, #15]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d161      	bne.n	80034d0 <HAL_TIM_PWM_Stop_DMA+0x190>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2200      	movs	r2, #0
 8003412:	6839      	ldr	r1, [r7, #0]
 8003414:	4618      	mov	r0, r3
 8003416:	f000 fdf7 	bl	8004008 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a2f      	ldr	r2, [pc, #188]	@ (80034dc <HAL_TIM_PWM_Stop_DMA+0x19c>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d004      	beq.n	800342e <HAL_TIM_PWM_Stop_DMA+0xee>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a2d      	ldr	r2, [pc, #180]	@ (80034e0 <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d101      	bne.n	8003432 <HAL_TIM_PWM_Stop_DMA+0xf2>
 800342e:	2301      	movs	r3, #1
 8003430:	e000      	b.n	8003434 <HAL_TIM_PWM_Stop_DMA+0xf4>
 8003432:	2300      	movs	r3, #0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d017      	beq.n	8003468 <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6a1a      	ldr	r2, [r3, #32]
 800343e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003442:	4013      	ands	r3, r2
 8003444:	2b00      	cmp	r3, #0
 8003446:	d10f      	bne.n	8003468 <HAL_TIM_PWM_Stop_DMA+0x128>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	6a1a      	ldr	r2, [r3, #32]
 800344e:	f240 4344 	movw	r3, #1092	@ 0x444
 8003452:	4013      	ands	r3, r2
 8003454:	2b00      	cmp	r3, #0
 8003456:	d107      	bne.n	8003468 <HAL_TIM_PWM_Stop_DMA+0x128>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003466:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6a1a      	ldr	r2, [r3, #32]
 800346e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003472:	4013      	ands	r3, r2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d10f      	bne.n	8003498 <HAL_TIM_PWM_Stop_DMA+0x158>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6a1a      	ldr	r2, [r3, #32]
 800347e:	f240 4344 	movw	r3, #1092	@ 0x444
 8003482:	4013      	ands	r3, r2
 8003484:	2b00      	cmp	r3, #0
 8003486:	d107      	bne.n	8003498 <HAL_TIM_PWM_Stop_DMA+0x158>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f022 0201 	bic.w	r2, r2, #1
 8003496:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d104      	bne.n	80034a8 <HAL_TIM_PWM_Stop_DMA+0x168>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2201      	movs	r2, #1
 80034a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034a6:	e013      	b.n	80034d0 <HAL_TIM_PWM_Stop_DMA+0x190>
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	2b04      	cmp	r3, #4
 80034ac:	d104      	bne.n	80034b8 <HAL_TIM_PWM_Stop_DMA+0x178>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2201      	movs	r2, #1
 80034b2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034b6:	e00b      	b.n	80034d0 <HAL_TIM_PWM_Stop_DMA+0x190>
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	2b08      	cmp	r3, #8
 80034bc:	d104      	bne.n	80034c8 <HAL_TIM_PWM_Stop_DMA+0x188>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2201      	movs	r2, #1
 80034c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034c6:	e003      	b.n	80034d0 <HAL_TIM_PWM_Stop_DMA+0x190>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 80034d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3710      	adds	r7, #16
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	40010000 	.word	0x40010000
 80034e0:	40010400 	.word	0x40010400

080034e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	2b00      	cmp	r3, #0
 8003504:	d020      	beq.n	8003548 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d01b      	beq.n	8003548 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f06f 0202 	mvn.w	r2, #2
 8003518:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2201      	movs	r2, #1
 800351e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	f003 0303 	and.w	r3, r3, #3
 800352a:	2b00      	cmp	r3, #0
 800352c:	d003      	beq.n	8003536 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 fa65 	bl	80039fe <HAL_TIM_IC_CaptureCallback>
 8003534:	e005      	b.n	8003542 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 fa57 	bl	80039ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f7fd f8b3 	bl	80006a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	f003 0304 	and.w	r3, r3, #4
 800354e:	2b00      	cmp	r3, #0
 8003550:	d020      	beq.n	8003594 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f003 0304 	and.w	r3, r3, #4
 8003558:	2b00      	cmp	r3, #0
 800355a:	d01b      	beq.n	8003594 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f06f 0204 	mvn.w	r2, #4
 8003564:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2202      	movs	r2, #2
 800356a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003576:	2b00      	cmp	r3, #0
 8003578:	d003      	beq.n	8003582 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 fa3f 	bl	80039fe <HAL_TIM_IC_CaptureCallback>
 8003580:	e005      	b.n	800358e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 fa31 	bl	80039ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f7fd f88d 	bl	80006a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	f003 0308 	and.w	r3, r3, #8
 800359a:	2b00      	cmp	r3, #0
 800359c:	d020      	beq.n	80035e0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f003 0308 	and.w	r3, r3, #8
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d01b      	beq.n	80035e0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f06f 0208 	mvn.w	r2, #8
 80035b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2204      	movs	r2, #4
 80035b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	69db      	ldr	r3, [r3, #28]
 80035be:	f003 0303 	and.w	r3, r3, #3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d003      	beq.n	80035ce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 fa19 	bl	80039fe <HAL_TIM_IC_CaptureCallback>
 80035cc:	e005      	b.n	80035da <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 fa0b 	bl	80039ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f7fd f867 	bl	80006a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	f003 0310 	and.w	r3, r3, #16
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d020      	beq.n	800362c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f003 0310 	and.w	r3, r3, #16
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d01b      	beq.n	800362c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f06f 0210 	mvn.w	r2, #16
 80035fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2208      	movs	r2, #8
 8003602:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	69db      	ldr	r3, [r3, #28]
 800360a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800360e:	2b00      	cmp	r3, #0
 8003610:	d003      	beq.n	800361a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 f9f3 	bl	80039fe <HAL_TIM_IC_CaptureCallback>
 8003618:	e005      	b.n	8003626 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 f9e5 	bl	80039ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f7fd f841 	bl	80006a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00c      	beq.n	8003650 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f003 0301 	and.w	r3, r3, #1
 800363c:	2b00      	cmp	r3, #0
 800363e:	d007      	beq.n	8003650 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f06f 0201 	mvn.w	r2, #1
 8003648:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 f9c3 	bl	80039d6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00c      	beq.n	8003674 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003660:	2b00      	cmp	r3, #0
 8003662:	d007      	beq.n	8003674 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800366c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 fdc8 	bl	8004204 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00c      	beq.n	8003698 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003684:	2b00      	cmp	r3, #0
 8003686:	d007      	beq.n	8003698 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003690:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 f9bd 	bl	8003a12 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	f003 0320 	and.w	r3, r3, #32
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00c      	beq.n	80036bc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f003 0320 	and.w	r3, r3, #32
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d007      	beq.n	80036bc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f06f 0220 	mvn.w	r2, #32
 80036b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 fd9a 	bl	80041f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036bc:	bf00      	nop
 80036be:	3710      	adds	r7, #16
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b086      	sub	sp, #24
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036d0:	2300      	movs	r3, #0
 80036d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d101      	bne.n	80036e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80036de:	2302      	movs	r3, #2
 80036e0:	e0ae      	b.n	8003840 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2201      	movs	r2, #1
 80036e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2b0c      	cmp	r3, #12
 80036ee:	f200 809f 	bhi.w	8003830 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80036f2:	a201      	add	r2, pc, #4	@ (adr r2, 80036f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80036f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f8:	0800372d 	.word	0x0800372d
 80036fc:	08003831 	.word	0x08003831
 8003700:	08003831 	.word	0x08003831
 8003704:	08003831 	.word	0x08003831
 8003708:	0800376d 	.word	0x0800376d
 800370c:	08003831 	.word	0x08003831
 8003710:	08003831 	.word	0x08003831
 8003714:	08003831 	.word	0x08003831
 8003718:	080037af 	.word	0x080037af
 800371c:	08003831 	.word	0x08003831
 8003720:	08003831 	.word	0x08003831
 8003724:	08003831 	.word	0x08003831
 8003728:	080037ef 	.word	0x080037ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68b9      	ldr	r1, [r7, #8]
 8003732:	4618      	mov	r0, r3
 8003734:	f000 fa1e 	bl	8003b74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	699a      	ldr	r2, [r3, #24]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f042 0208 	orr.w	r2, r2, #8
 8003746:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	699a      	ldr	r2, [r3, #24]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f022 0204 	bic.w	r2, r2, #4
 8003756:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	6999      	ldr	r1, [r3, #24]
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	691a      	ldr	r2, [r3, #16]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	430a      	orrs	r2, r1
 8003768:	619a      	str	r2, [r3, #24]
      break;
 800376a:	e064      	b.n	8003836 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	68b9      	ldr	r1, [r7, #8]
 8003772:	4618      	mov	r0, r3
 8003774:	f000 fa6e 	bl	8003c54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	699a      	ldr	r2, [r3, #24]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003786:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	699a      	ldr	r2, [r3, #24]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003796:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	6999      	ldr	r1, [r3, #24]
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	021a      	lsls	r2, r3, #8
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	430a      	orrs	r2, r1
 80037aa:	619a      	str	r2, [r3, #24]
      break;
 80037ac:	e043      	b.n	8003836 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68b9      	ldr	r1, [r7, #8]
 80037b4:	4618      	mov	r0, r3
 80037b6:	f000 fac3 	bl	8003d40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	69da      	ldr	r2, [r3, #28]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f042 0208 	orr.w	r2, r2, #8
 80037c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	69da      	ldr	r2, [r3, #28]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f022 0204 	bic.w	r2, r2, #4
 80037d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	69d9      	ldr	r1, [r3, #28]
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	691a      	ldr	r2, [r3, #16]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	430a      	orrs	r2, r1
 80037ea:	61da      	str	r2, [r3, #28]
      break;
 80037ec:	e023      	b.n	8003836 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68b9      	ldr	r1, [r7, #8]
 80037f4:	4618      	mov	r0, r3
 80037f6:	f000 fb17 	bl	8003e28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	69da      	ldr	r2, [r3, #28]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003808:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	69da      	ldr	r2, [r3, #28]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003818:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	69d9      	ldr	r1, [r3, #28]
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	021a      	lsls	r2, r3, #8
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	430a      	orrs	r2, r1
 800382c:	61da      	str	r2, [r3, #28]
      break;
 800382e:	e002      	b.n	8003836 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	75fb      	strb	r3, [r7, #23]
      break;
 8003834:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800383e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003840:	4618      	mov	r0, r3
 8003842:	3718      	adds	r7, #24
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003852:	2300      	movs	r3, #0
 8003854:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800385c:	2b01      	cmp	r3, #1
 800385e:	d101      	bne.n	8003864 <HAL_TIM_ConfigClockSource+0x1c>
 8003860:	2302      	movs	r3, #2
 8003862:	e0b4      	b.n	80039ce <HAL_TIM_ConfigClockSource+0x186>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2202      	movs	r2, #2
 8003870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003882:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800388a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68ba      	ldr	r2, [r7, #8]
 8003892:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800389c:	d03e      	beq.n	800391c <HAL_TIM_ConfigClockSource+0xd4>
 800389e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038a2:	f200 8087 	bhi.w	80039b4 <HAL_TIM_ConfigClockSource+0x16c>
 80038a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038aa:	f000 8086 	beq.w	80039ba <HAL_TIM_ConfigClockSource+0x172>
 80038ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038b2:	d87f      	bhi.n	80039b4 <HAL_TIM_ConfigClockSource+0x16c>
 80038b4:	2b70      	cmp	r3, #112	@ 0x70
 80038b6:	d01a      	beq.n	80038ee <HAL_TIM_ConfigClockSource+0xa6>
 80038b8:	2b70      	cmp	r3, #112	@ 0x70
 80038ba:	d87b      	bhi.n	80039b4 <HAL_TIM_ConfigClockSource+0x16c>
 80038bc:	2b60      	cmp	r3, #96	@ 0x60
 80038be:	d050      	beq.n	8003962 <HAL_TIM_ConfigClockSource+0x11a>
 80038c0:	2b60      	cmp	r3, #96	@ 0x60
 80038c2:	d877      	bhi.n	80039b4 <HAL_TIM_ConfigClockSource+0x16c>
 80038c4:	2b50      	cmp	r3, #80	@ 0x50
 80038c6:	d03c      	beq.n	8003942 <HAL_TIM_ConfigClockSource+0xfa>
 80038c8:	2b50      	cmp	r3, #80	@ 0x50
 80038ca:	d873      	bhi.n	80039b4 <HAL_TIM_ConfigClockSource+0x16c>
 80038cc:	2b40      	cmp	r3, #64	@ 0x40
 80038ce:	d058      	beq.n	8003982 <HAL_TIM_ConfigClockSource+0x13a>
 80038d0:	2b40      	cmp	r3, #64	@ 0x40
 80038d2:	d86f      	bhi.n	80039b4 <HAL_TIM_ConfigClockSource+0x16c>
 80038d4:	2b30      	cmp	r3, #48	@ 0x30
 80038d6:	d064      	beq.n	80039a2 <HAL_TIM_ConfigClockSource+0x15a>
 80038d8:	2b30      	cmp	r3, #48	@ 0x30
 80038da:	d86b      	bhi.n	80039b4 <HAL_TIM_ConfigClockSource+0x16c>
 80038dc:	2b20      	cmp	r3, #32
 80038de:	d060      	beq.n	80039a2 <HAL_TIM_ConfigClockSource+0x15a>
 80038e0:	2b20      	cmp	r3, #32
 80038e2:	d867      	bhi.n	80039b4 <HAL_TIM_ConfigClockSource+0x16c>
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d05c      	beq.n	80039a2 <HAL_TIM_ConfigClockSource+0x15a>
 80038e8:	2b10      	cmp	r3, #16
 80038ea:	d05a      	beq.n	80039a2 <HAL_TIM_ConfigClockSource+0x15a>
 80038ec:	e062      	b.n	80039b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80038fe:	f000 fb63 	bl	8003fc8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003910:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68ba      	ldr	r2, [r7, #8]
 8003918:	609a      	str	r2, [r3, #8]
      break;
 800391a:	e04f      	b.n	80039bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800392c:	f000 fb4c 	bl	8003fc8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	689a      	ldr	r2, [r3, #8]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800393e:	609a      	str	r2, [r3, #8]
      break;
 8003940:	e03c      	b.n	80039bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800394e:	461a      	mov	r2, r3
 8003950:	f000 fac0 	bl	8003ed4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2150      	movs	r1, #80	@ 0x50
 800395a:	4618      	mov	r0, r3
 800395c:	f000 fb19 	bl	8003f92 <TIM_ITRx_SetConfig>
      break;
 8003960:	e02c      	b.n	80039bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800396e:	461a      	mov	r2, r3
 8003970:	f000 fadf 	bl	8003f32 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2160      	movs	r1, #96	@ 0x60
 800397a:	4618      	mov	r0, r3
 800397c:	f000 fb09 	bl	8003f92 <TIM_ITRx_SetConfig>
      break;
 8003980:	e01c      	b.n	80039bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800398e:	461a      	mov	r2, r3
 8003990:	f000 faa0 	bl	8003ed4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2140      	movs	r1, #64	@ 0x40
 800399a:	4618      	mov	r0, r3
 800399c:	f000 faf9 	bl	8003f92 <TIM_ITRx_SetConfig>
      break;
 80039a0:	e00c      	b.n	80039bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4619      	mov	r1, r3
 80039ac:	4610      	mov	r0, r2
 80039ae:	f000 faf0 	bl	8003f92 <TIM_ITRx_SetConfig>
      break;
 80039b2:	e003      	b.n	80039bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	73fb      	strb	r3, [r7, #15]
      break;
 80039b8:	e000      	b.n	80039bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80039ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80039cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039d6:	b480      	push	{r7}
 80039d8:	b083      	sub	sp, #12
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80039de:	bf00      	nop
 80039e0:	370c      	adds	r7, #12
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr

080039ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039ea:	b480      	push	{r7}
 80039ec:	b083      	sub	sp, #12
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039f2:	bf00      	nop
 80039f4:	370c      	adds	r7, #12
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr

080039fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039fe:	b480      	push	{r7}
 8003a00:	b083      	sub	sp, #12
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a06:	bf00      	nop
 8003a08:	370c      	adds	r7, #12
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr

08003a12 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a12:	b480      	push	{r7}
 8003a14:	b083      	sub	sp, #12
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a1a:	bf00      	nop
 8003a1c:	370c      	adds	r7, #12
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
	...

08003a28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b085      	sub	sp, #20
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a43      	ldr	r2, [pc, #268]	@ (8003b48 <TIM_Base_SetConfig+0x120>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d013      	beq.n	8003a68 <TIM_Base_SetConfig+0x40>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a46:	d00f      	beq.n	8003a68 <TIM_Base_SetConfig+0x40>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a40      	ldr	r2, [pc, #256]	@ (8003b4c <TIM_Base_SetConfig+0x124>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d00b      	beq.n	8003a68 <TIM_Base_SetConfig+0x40>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a3f      	ldr	r2, [pc, #252]	@ (8003b50 <TIM_Base_SetConfig+0x128>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d007      	beq.n	8003a68 <TIM_Base_SetConfig+0x40>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a3e      	ldr	r2, [pc, #248]	@ (8003b54 <TIM_Base_SetConfig+0x12c>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d003      	beq.n	8003a68 <TIM_Base_SetConfig+0x40>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a3d      	ldr	r2, [pc, #244]	@ (8003b58 <TIM_Base_SetConfig+0x130>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d108      	bne.n	8003a7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a32      	ldr	r2, [pc, #200]	@ (8003b48 <TIM_Base_SetConfig+0x120>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d02b      	beq.n	8003ada <TIM_Base_SetConfig+0xb2>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a88:	d027      	beq.n	8003ada <TIM_Base_SetConfig+0xb2>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a2f      	ldr	r2, [pc, #188]	@ (8003b4c <TIM_Base_SetConfig+0x124>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d023      	beq.n	8003ada <TIM_Base_SetConfig+0xb2>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a2e      	ldr	r2, [pc, #184]	@ (8003b50 <TIM_Base_SetConfig+0x128>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d01f      	beq.n	8003ada <TIM_Base_SetConfig+0xb2>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a2d      	ldr	r2, [pc, #180]	@ (8003b54 <TIM_Base_SetConfig+0x12c>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d01b      	beq.n	8003ada <TIM_Base_SetConfig+0xb2>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a2c      	ldr	r2, [pc, #176]	@ (8003b58 <TIM_Base_SetConfig+0x130>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d017      	beq.n	8003ada <TIM_Base_SetConfig+0xb2>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a2b      	ldr	r2, [pc, #172]	@ (8003b5c <TIM_Base_SetConfig+0x134>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d013      	beq.n	8003ada <TIM_Base_SetConfig+0xb2>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a2a      	ldr	r2, [pc, #168]	@ (8003b60 <TIM_Base_SetConfig+0x138>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d00f      	beq.n	8003ada <TIM_Base_SetConfig+0xb2>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a29      	ldr	r2, [pc, #164]	@ (8003b64 <TIM_Base_SetConfig+0x13c>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d00b      	beq.n	8003ada <TIM_Base_SetConfig+0xb2>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a28      	ldr	r2, [pc, #160]	@ (8003b68 <TIM_Base_SetConfig+0x140>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d007      	beq.n	8003ada <TIM_Base_SetConfig+0xb2>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a27      	ldr	r2, [pc, #156]	@ (8003b6c <TIM_Base_SetConfig+0x144>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d003      	beq.n	8003ada <TIM_Base_SetConfig+0xb2>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a26      	ldr	r2, [pc, #152]	@ (8003b70 <TIM_Base_SetConfig+0x148>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d108      	bne.n	8003aec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ae0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	68fa      	ldr	r2, [r7, #12]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	695b      	ldr	r3, [r3, #20]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	689a      	ldr	r2, [r3, #8]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a0e      	ldr	r2, [pc, #56]	@ (8003b48 <TIM_Base_SetConfig+0x120>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d003      	beq.n	8003b1a <TIM_Base_SetConfig+0xf2>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a10      	ldr	r2, [pc, #64]	@ (8003b58 <TIM_Base_SetConfig+0x130>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d103      	bne.n	8003b22 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	691a      	ldr	r2, [r3, #16]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f043 0204 	orr.w	r2, r3, #4
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2201      	movs	r2, #1
 8003b32:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	601a      	str	r2, [r3, #0]
}
 8003b3a:	bf00      	nop
 8003b3c:	3714      	adds	r7, #20
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	40010000 	.word	0x40010000
 8003b4c:	40000400 	.word	0x40000400
 8003b50:	40000800 	.word	0x40000800
 8003b54:	40000c00 	.word	0x40000c00
 8003b58:	40010400 	.word	0x40010400
 8003b5c:	40014000 	.word	0x40014000
 8003b60:	40014400 	.word	0x40014400
 8003b64:	40014800 	.word	0x40014800
 8003b68:	40001800 	.word	0x40001800
 8003b6c:	40001c00 	.word	0x40001c00
 8003b70:	40002000 	.word	0x40002000

08003b74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b087      	sub	sp, #28
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a1b      	ldr	r3, [r3, #32]
 8003b82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a1b      	ldr	r3, [r3, #32]
 8003b88:	f023 0201 	bic.w	r2, r3, #1
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ba2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f023 0303 	bic.w	r3, r3, #3
 8003baa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	f023 0302 	bic.w	r3, r3, #2
 8003bbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	697a      	ldr	r2, [r7, #20]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a20      	ldr	r2, [pc, #128]	@ (8003c4c <TIM_OC1_SetConfig+0xd8>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d003      	beq.n	8003bd8 <TIM_OC1_SetConfig+0x64>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a1f      	ldr	r2, [pc, #124]	@ (8003c50 <TIM_OC1_SetConfig+0xdc>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d10c      	bne.n	8003bf2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	f023 0308 	bic.w	r3, r3, #8
 8003bde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	697a      	ldr	r2, [r7, #20]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	f023 0304 	bic.w	r3, r3, #4
 8003bf0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a15      	ldr	r2, [pc, #84]	@ (8003c4c <TIM_OC1_SetConfig+0xd8>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d003      	beq.n	8003c02 <TIM_OC1_SetConfig+0x8e>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a14      	ldr	r2, [pc, #80]	@ (8003c50 <TIM_OC1_SetConfig+0xdc>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d111      	bne.n	8003c26 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003c10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	685a      	ldr	r2, [r3, #4]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	697a      	ldr	r2, [r7, #20]
 8003c3e:	621a      	str	r2, [r3, #32]
}
 8003c40:	bf00      	nop
 8003c42:	371c      	adds	r7, #28
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr
 8003c4c:	40010000 	.word	0x40010000
 8003c50:	40010400 	.word	0x40010400

08003c54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b087      	sub	sp, #28
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a1b      	ldr	r3, [r3, #32]
 8003c62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a1b      	ldr	r3, [r3, #32]
 8003c68:	f023 0210 	bic.w	r2, r3, #16
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	021b      	lsls	r3, r3, #8
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	f023 0320 	bic.w	r3, r3, #32
 8003c9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	011b      	lsls	r3, r3, #4
 8003ca6:	697a      	ldr	r2, [r7, #20]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4a22      	ldr	r2, [pc, #136]	@ (8003d38 <TIM_OC2_SetConfig+0xe4>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d003      	beq.n	8003cbc <TIM_OC2_SetConfig+0x68>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4a21      	ldr	r2, [pc, #132]	@ (8003d3c <TIM_OC2_SetConfig+0xe8>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d10d      	bne.n	8003cd8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003cc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	011b      	lsls	r3, r3, #4
 8003cca:	697a      	ldr	r2, [r7, #20]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003cd6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a17      	ldr	r2, [pc, #92]	@ (8003d38 <TIM_OC2_SetConfig+0xe4>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d003      	beq.n	8003ce8 <TIM_OC2_SetConfig+0x94>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a16      	ldr	r2, [pc, #88]	@ (8003d3c <TIM_OC2_SetConfig+0xe8>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d113      	bne.n	8003d10 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003cee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003cf6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	695b      	ldr	r3, [r3, #20]
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	693a      	ldr	r2, [r7, #16]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	693a      	ldr	r2, [r7, #16]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	693a      	ldr	r2, [r7, #16]
 8003d14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	685a      	ldr	r2, [r3, #4]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	697a      	ldr	r2, [r7, #20]
 8003d28:	621a      	str	r2, [r3, #32]
}
 8003d2a:	bf00      	nop
 8003d2c:	371c      	adds	r7, #28
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	40010000 	.word	0x40010000
 8003d3c:	40010400 	.word	0x40010400

08003d40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b087      	sub	sp, #28
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
 8003d4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a1b      	ldr	r3, [r3, #32]
 8003d54:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	69db      	ldr	r3, [r3, #28]
 8003d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f023 0303 	bic.w	r3, r3, #3
 8003d76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003d88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	021b      	lsls	r3, r3, #8
 8003d90:	697a      	ldr	r2, [r7, #20]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a21      	ldr	r2, [pc, #132]	@ (8003e20 <TIM_OC3_SetConfig+0xe0>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d003      	beq.n	8003da6 <TIM_OC3_SetConfig+0x66>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a20      	ldr	r2, [pc, #128]	@ (8003e24 <TIM_OC3_SetConfig+0xe4>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d10d      	bne.n	8003dc2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003dac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	021b      	lsls	r3, r3, #8
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003dc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a16      	ldr	r2, [pc, #88]	@ (8003e20 <TIM_OC3_SetConfig+0xe0>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d003      	beq.n	8003dd2 <TIM_OC3_SetConfig+0x92>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a15      	ldr	r2, [pc, #84]	@ (8003e24 <TIM_OC3_SetConfig+0xe4>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d113      	bne.n	8003dfa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003dd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003de0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	695b      	ldr	r3, [r3, #20]
 8003de6:	011b      	lsls	r3, r3, #4
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	699b      	ldr	r3, [r3, #24]
 8003df2:	011b      	lsls	r3, r3, #4
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	693a      	ldr	r2, [r7, #16]
 8003dfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	68fa      	ldr	r2, [r7, #12]
 8003e04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	685a      	ldr	r2, [r3, #4]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	697a      	ldr	r2, [r7, #20]
 8003e12:	621a      	str	r2, [r3, #32]
}
 8003e14:	bf00      	nop
 8003e16:	371c      	adds	r7, #28
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr
 8003e20:	40010000 	.word	0x40010000
 8003e24:	40010400 	.word	0x40010400

08003e28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b087      	sub	sp, #28
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a1b      	ldr	r3, [r3, #32]
 8003e36:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a1b      	ldr	r3, [r3, #32]
 8003e3c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	69db      	ldr	r3, [r3, #28]
 8003e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	021b      	lsls	r3, r3, #8
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	031b      	lsls	r3, r3, #12
 8003e7a:	693a      	ldr	r2, [r7, #16]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a12      	ldr	r2, [pc, #72]	@ (8003ecc <TIM_OC4_SetConfig+0xa4>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d003      	beq.n	8003e90 <TIM_OC4_SetConfig+0x68>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a11      	ldr	r2, [pc, #68]	@ (8003ed0 <TIM_OC4_SetConfig+0xa8>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d109      	bne.n	8003ea4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	695b      	ldr	r3, [r3, #20]
 8003e9c:	019b      	lsls	r3, r3, #6
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	697a      	ldr	r2, [r7, #20]
 8003ea8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	685a      	ldr	r2, [r3, #4]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	621a      	str	r2, [r3, #32]
}
 8003ebe:	bf00      	nop
 8003ec0:	371c      	adds	r7, #28
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	40010000 	.word	0x40010000
 8003ed0:	40010400 	.word	0x40010400

08003ed4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b087      	sub	sp, #28
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6a1b      	ldr	r3, [r3, #32]
 8003ee4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6a1b      	ldr	r3, [r3, #32]
 8003eea:	f023 0201 	bic.w	r2, r3, #1
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003efe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	011b      	lsls	r3, r3, #4
 8003f04:	693a      	ldr	r2, [r7, #16]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	f023 030a 	bic.w	r3, r3, #10
 8003f10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f12:	697a      	ldr	r2, [r7, #20]
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	693a      	ldr	r2, [r7, #16]
 8003f1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	697a      	ldr	r2, [r7, #20]
 8003f24:	621a      	str	r2, [r3, #32]
}
 8003f26:	bf00      	nop
 8003f28:	371c      	adds	r7, #28
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr

08003f32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f32:	b480      	push	{r7}
 8003f34:	b087      	sub	sp, #28
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	60f8      	str	r0, [r7, #12]
 8003f3a:	60b9      	str	r1, [r7, #8]
 8003f3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6a1b      	ldr	r3, [r3, #32]
 8003f42:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6a1b      	ldr	r3, [r3, #32]
 8003f48:	f023 0210 	bic.w	r2, r3, #16
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003f5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	031b      	lsls	r3, r3, #12
 8003f62:	693a      	ldr	r2, [r7, #16]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003f6e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	011b      	lsls	r3, r3, #4
 8003f74:	697a      	ldr	r2, [r7, #20]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	693a      	ldr	r2, [r7, #16]
 8003f7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	621a      	str	r2, [r3, #32]
}
 8003f86:	bf00      	nop
 8003f88:	371c      	adds	r7, #28
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr

08003f92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f92:	b480      	push	{r7}
 8003f94:	b085      	sub	sp, #20
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
 8003f9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fa8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003faa:	683a      	ldr	r2, [r7, #0]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	f043 0307 	orr.w	r3, r3, #7
 8003fb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	68fa      	ldr	r2, [r7, #12]
 8003fba:	609a      	str	r2, [r3, #8]
}
 8003fbc:	bf00      	nop
 8003fbe:	3714      	adds	r7, #20
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b087      	sub	sp, #28
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	607a      	str	r2, [r7, #4]
 8003fd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003fe2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	021a      	lsls	r2, r3, #8
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	431a      	orrs	r2, r3
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	697a      	ldr	r2, [r7, #20]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	697a      	ldr	r2, [r7, #20]
 8003ffa:	609a      	str	r2, [r3, #8]
}
 8003ffc:	bf00      	nop
 8003ffe:	371c      	adds	r7, #28
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004008:	b480      	push	{r7}
 800400a:	b087      	sub	sp, #28
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	f003 031f 	and.w	r3, r3, #31
 800401a:	2201      	movs	r2, #1
 800401c:	fa02 f303 	lsl.w	r3, r2, r3
 8004020:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6a1a      	ldr	r2, [r3, #32]
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	43db      	mvns	r3, r3
 800402a:	401a      	ands	r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6a1a      	ldr	r2, [r3, #32]
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	f003 031f 	and.w	r3, r3, #31
 800403a:	6879      	ldr	r1, [r7, #4]
 800403c:	fa01 f303 	lsl.w	r3, r1, r3
 8004040:	431a      	orrs	r2, r3
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	621a      	str	r2, [r3, #32]
}
 8004046:	bf00      	nop
 8004048:	371c      	adds	r7, #28
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
	...

08004054 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004064:	2b01      	cmp	r3, #1
 8004066:	d101      	bne.n	800406c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004068:	2302      	movs	r3, #2
 800406a:	e05a      	b.n	8004122 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2202      	movs	r2, #2
 8004078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004092:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68fa      	ldr	r2, [r7, #12]
 800409a:	4313      	orrs	r3, r2
 800409c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a21      	ldr	r2, [pc, #132]	@ (8004130 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d022      	beq.n	80040f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040b8:	d01d      	beq.n	80040f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a1d      	ldr	r2, [pc, #116]	@ (8004134 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d018      	beq.n	80040f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a1b      	ldr	r2, [pc, #108]	@ (8004138 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d013      	beq.n	80040f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a1a      	ldr	r2, [pc, #104]	@ (800413c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d00e      	beq.n	80040f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a18      	ldr	r2, [pc, #96]	@ (8004140 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d009      	beq.n	80040f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a17      	ldr	r2, [pc, #92]	@ (8004144 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d004      	beq.n	80040f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a15      	ldr	r2, [pc, #84]	@ (8004148 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d10c      	bne.n	8004110 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	68ba      	ldr	r2, [r7, #8]
 8004104:	4313      	orrs	r3, r2
 8004106:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68ba      	ldr	r2, [r7, #8]
 800410e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3714      	adds	r7, #20
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	40010000 	.word	0x40010000
 8004134:	40000400 	.word	0x40000400
 8004138:	40000800 	.word	0x40000800
 800413c:	40000c00 	.word	0x40000c00
 8004140:	40010400 	.word	0x40010400
 8004144:	40014000 	.word	0x40014000
 8004148:	40001800 	.word	0x40001800

0800414c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004156:	2300      	movs	r3, #0
 8004158:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004160:	2b01      	cmp	r3, #1
 8004162:	d101      	bne.n	8004168 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004164:	2302      	movs	r3, #2
 8004166:	e03d      	b.n	80041e4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	4313      	orrs	r3, r2
 800417c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	4313      	orrs	r3, r2
 800418a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	4313      	orrs	r3, r2
 8004198:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	695b      	ldr	r3, [r3, #20]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	69db      	ldr	r3, [r3, #28]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80041e2:	2300      	movs	r3, #0
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3714      	adds	r7, #20
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041f8:	bf00      	nop
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800420c:	bf00      	nop
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <arm_rfft_fast_init_f32>:
 8004218:	084b      	lsrs	r3, r1, #1
 800421a:	2b80      	cmp	r3, #128	@ 0x80
 800421c:	b410      	push	{r4}
 800421e:	8201      	strh	r1, [r0, #16]
 8004220:	8003      	strh	r3, [r0, #0]
 8004222:	d047      	beq.n	80042b4 <arm_rfft_fast_init_f32+0x9c>
 8004224:	d917      	bls.n	8004256 <arm_rfft_fast_init_f32+0x3e>
 8004226:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800422a:	d03d      	beq.n	80042a8 <arm_rfft_fast_init_f32+0x90>
 800422c:	d929      	bls.n	8004282 <arm_rfft_fast_init_f32+0x6a>
 800422e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004232:	d020      	beq.n	8004276 <arm_rfft_fast_init_f32+0x5e>
 8004234:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004238:	d113      	bne.n	8004262 <arm_rfft_fast_init_f32+0x4a>
 800423a:	4921      	ldr	r1, [pc, #132]	@ (80042c0 <arm_rfft_fast_init_f32+0xa8>)
 800423c:	4a21      	ldr	r2, [pc, #132]	@ (80042c4 <arm_rfft_fast_init_f32+0xac>)
 800423e:	4b22      	ldr	r3, [pc, #136]	@ (80042c8 <arm_rfft_fast_init_f32+0xb0>)
 8004240:	f44f 646e 	mov.w	r4, #3808	@ 0xee0
 8004244:	8184      	strh	r4, [r0, #12]
 8004246:	6081      	str	r1, [r0, #8]
 8004248:	6042      	str	r2, [r0, #4]
 800424a:	6143      	str	r3, [r0, #20]
 800424c:	2000      	movs	r0, #0
 800424e:	b240      	sxtb	r0, r0
 8004250:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004254:	4770      	bx	lr
 8004256:	2b20      	cmp	r3, #32
 8004258:	d01c      	beq.n	8004294 <arm_rfft_fast_init_f32+0x7c>
 800425a:	2b40      	cmp	r3, #64	@ 0x40
 800425c:	d006      	beq.n	800426c <arm_rfft_fast_init_f32+0x54>
 800425e:	2b10      	cmp	r3, #16
 8004260:	d01d      	beq.n	800429e <arm_rfft_fast_init_f32+0x86>
 8004262:	20ff      	movs	r0, #255	@ 0xff
 8004264:	b240      	sxtb	r0, r0
 8004266:	f85d 4b04 	ldr.w	r4, [sp], #4
 800426a:	4770      	bx	lr
 800426c:	2438      	movs	r4, #56	@ 0x38
 800426e:	4917      	ldr	r1, [pc, #92]	@ (80042cc <arm_rfft_fast_init_f32+0xb4>)
 8004270:	4a17      	ldr	r2, [pc, #92]	@ (80042d0 <arm_rfft_fast_init_f32+0xb8>)
 8004272:	4b18      	ldr	r3, [pc, #96]	@ (80042d4 <arm_rfft_fast_init_f32+0xbc>)
 8004274:	e7e6      	b.n	8004244 <arm_rfft_fast_init_f32+0x2c>
 8004276:	f44f 64e1 	mov.w	r4, #1800	@ 0x708
 800427a:	4917      	ldr	r1, [pc, #92]	@ (80042d8 <arm_rfft_fast_init_f32+0xc0>)
 800427c:	4a17      	ldr	r2, [pc, #92]	@ (80042dc <arm_rfft_fast_init_f32+0xc4>)
 800427e:	4b18      	ldr	r3, [pc, #96]	@ (80042e0 <arm_rfft_fast_init_f32+0xc8>)
 8004280:	e7e0      	b.n	8004244 <arm_rfft_fast_init_f32+0x2c>
 8004282:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004286:	d1ec      	bne.n	8004262 <arm_rfft_fast_init_f32+0x4a>
 8004288:	f44f 74dc 	mov.w	r4, #440	@ 0x1b8
 800428c:	4915      	ldr	r1, [pc, #84]	@ (80042e4 <arm_rfft_fast_init_f32+0xcc>)
 800428e:	4a16      	ldr	r2, [pc, #88]	@ (80042e8 <arm_rfft_fast_init_f32+0xd0>)
 8004290:	4b16      	ldr	r3, [pc, #88]	@ (80042ec <arm_rfft_fast_init_f32+0xd4>)
 8004292:	e7d7      	b.n	8004244 <arm_rfft_fast_init_f32+0x2c>
 8004294:	2430      	movs	r4, #48	@ 0x30
 8004296:	4916      	ldr	r1, [pc, #88]	@ (80042f0 <arm_rfft_fast_init_f32+0xd8>)
 8004298:	4a16      	ldr	r2, [pc, #88]	@ (80042f4 <arm_rfft_fast_init_f32+0xdc>)
 800429a:	4b17      	ldr	r3, [pc, #92]	@ (80042f8 <arm_rfft_fast_init_f32+0xe0>)
 800429c:	e7d2      	b.n	8004244 <arm_rfft_fast_init_f32+0x2c>
 800429e:	2414      	movs	r4, #20
 80042a0:	4916      	ldr	r1, [pc, #88]	@ (80042fc <arm_rfft_fast_init_f32+0xe4>)
 80042a2:	4a17      	ldr	r2, [pc, #92]	@ (8004300 <arm_rfft_fast_init_f32+0xe8>)
 80042a4:	4b17      	ldr	r3, [pc, #92]	@ (8004304 <arm_rfft_fast_init_f32+0xec>)
 80042a6:	e7cd      	b.n	8004244 <arm_rfft_fast_init_f32+0x2c>
 80042a8:	f44f 74e0 	mov.w	r4, #448	@ 0x1c0
 80042ac:	4916      	ldr	r1, [pc, #88]	@ (8004308 <arm_rfft_fast_init_f32+0xf0>)
 80042ae:	4a17      	ldr	r2, [pc, #92]	@ (800430c <arm_rfft_fast_init_f32+0xf4>)
 80042b0:	4b17      	ldr	r3, [pc, #92]	@ (8004310 <arm_rfft_fast_init_f32+0xf8>)
 80042b2:	e7c7      	b.n	8004244 <arm_rfft_fast_init_f32+0x2c>
 80042b4:	24d0      	movs	r4, #208	@ 0xd0
 80042b6:	4917      	ldr	r1, [pc, #92]	@ (8004314 <arm_rfft_fast_init_f32+0xfc>)
 80042b8:	4a17      	ldr	r2, [pc, #92]	@ (8004318 <arm_rfft_fast_init_f32+0x100>)
 80042ba:	4b18      	ldr	r3, [pc, #96]	@ (800431c <arm_rfft_fast_init_f32+0x104>)
 80042bc:	e7c2      	b.n	8004244 <arm_rfft_fast_init_f32+0x2c>
 80042be:	bf00      	nop
 80042c0:	080140a0 	.word	0x080140a0
 80042c4:	08005298 	.word	0x08005298
 80042c8:	0800b408 	.word	0x0800b408
 80042cc:	08009398 	.word	0x08009398
 80042d0:	08015e60 	.word	0x08015e60
 80042d4:	08018350 	.word	0x08018350
 80042d8:	08011d88 	.word	0x08011d88
 80042dc:	0800fc88 	.word	0x0800fc88
 80042e0:	08009408 	.word	0x08009408
 80042e4:	08017fe0 	.word	0x08017fe0
 80042e8:	0800f408 	.word	0x0800f408
 80042ec:	08016060 	.word	0x08016060
 80042f0:	08012c40 	.word	0x08012c40
 80042f4:	08011c88 	.word	0x08011c88
 80042f8:	08009298 	.word	0x08009298
 80042fc:	08012b98 	.word	0x08012b98
 8004300:	0800fc08 	.word	0x0800fc08
 8004304:	08012bc0 	.word	0x08012bc0
 8004308:	08016860 	.word	0x08016860
 800430c:	080130a0 	.word	0x080130a0
 8004310:	08016be0 	.word	0x08016be0
 8004314:	08018550 	.word	0x08018550
 8004318:	08012ca0 	.word	0x08012ca0
 800431c:	08017be0 	.word	0x08017be0

08004320 <arm_rfft_fast_f32>:
 8004320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004324:	8a06      	ldrh	r6, [r0, #16]
 8004326:	0876      	lsrs	r6, r6, #1
 8004328:	4607      	mov	r7, r0
 800432a:	4615      	mov	r5, r2
 800432c:	8006      	strh	r6, [r0, #0]
 800432e:	460c      	mov	r4, r1
 8004330:	2b00      	cmp	r3, #0
 8004332:	d15c      	bne.n	80043ee <arm_rfft_fast_f32+0xce>
 8004334:	461a      	mov	r2, r3
 8004336:	2301      	movs	r3, #1
 8004338:	f000 fbe6 	bl	8004b08 <arm_cfft_f32>
 800433c:	edd4 7a00 	vldr	s15, [r4]
 8004340:	ed94 7a01 	vldr	s14, [r4, #4]
 8004344:	883e      	ldrh	r6, [r7, #0]
 8004346:	6978      	ldr	r0, [r7, #20]
 8004348:	ee37 7a07 	vadd.f32	s14, s14, s14
 800434c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004350:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 8004354:	ee77 6a87 	vadd.f32	s13, s15, s14
 8004358:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800435c:	3e01      	subs	r6, #1
 800435e:	ee26 7aa3 	vmul.f32	s14, s13, s7
 8004362:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8004366:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 800436a:	ed85 7a00 	vstr	s14, [r5]
 800436e:	edc5 7a01 	vstr	s15, [r5, #4]
 8004372:	3010      	adds	r0, #16
 8004374:	f105 0210 	add.w	r2, r5, #16
 8004378:	3b08      	subs	r3, #8
 800437a:	f104 0110 	add.w	r1, r4, #16
 800437e:	ed51 4a02 	vldr	s9, [r1, #-8]
 8004382:	ed93 5a02 	vldr	s10, [r3, #8]
 8004386:	ed11 7a01 	vldr	s14, [r1, #-4]
 800438a:	ed10 6a02 	vldr	s12, [r0, #-8]
 800438e:	edd3 5a03 	vldr	s11, [r3, #12]
 8004392:	ed50 6a01 	vldr	s13, [r0, #-4]
 8004396:	ee75 7a64 	vsub.f32	s15, s10, s9
 800439a:	ee35 4a87 	vadd.f32	s8, s11, s14
 800439e:	ee35 5a24 	vadd.f32	s10, s10, s9
 80043a2:	ee77 5a65 	vsub.f32	s11, s14, s11
 80043a6:	ee66 4a27 	vmul.f32	s9, s12, s15
 80043aa:	ee26 7aa7 	vmul.f32	s14, s13, s15
 80043ae:	ee34 5a85 	vadd.f32	s10, s9, s10
 80043b2:	ee26 6a04 	vmul.f32	s12, s12, s8
 80043b6:	ee66 6a84 	vmul.f32	s13, s13, s8
 80043ba:	ee77 7a25 	vadd.f32	s15, s14, s11
 80043be:	ee76 6a85 	vadd.f32	s13, s13, s10
 80043c2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80043c6:	ee66 6aa3 	vmul.f32	s13, s13, s7
 80043ca:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80043ce:	3e01      	subs	r6, #1
 80043d0:	ed42 6a02 	vstr	s13, [r2, #-8]
 80043d4:	ed42 7a01 	vstr	s15, [r2, #-4]
 80043d8:	f1a3 0308 	sub.w	r3, r3, #8
 80043dc:	f101 0108 	add.w	r1, r1, #8
 80043e0:	f100 0008 	add.w	r0, r0, #8
 80043e4:	f102 0208 	add.w	r2, r2, #8
 80043e8:	d1c9      	bne.n	800437e <arm_rfft_fast_f32+0x5e>
 80043ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043ee:	edd1 7a00 	vldr	s15, [r1]
 80043f2:	edd1 6a01 	vldr	s13, [r1, #4]
 80043f6:	6941      	ldr	r1, [r0, #20]
 80043f8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80043fc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004400:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 8004404:	ee27 7a23 	vmul.f32	s14, s14, s7
 8004408:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800440c:	3e01      	subs	r6, #1
 800440e:	ed82 7a00 	vstr	s14, [r2]
 8004412:	edc2 7a01 	vstr	s15, [r2, #4]
 8004416:	00f0      	lsls	r0, r6, #3
 8004418:	b3ee      	cbz	r6, 8004496 <arm_rfft_fast_f32+0x176>
 800441a:	3808      	subs	r0, #8
 800441c:	f101 0e10 	add.w	lr, r1, #16
 8004420:	4420      	add	r0, r4
 8004422:	f104 0110 	add.w	r1, r4, #16
 8004426:	f102 0c10 	add.w	ip, r2, #16
 800442a:	ed90 7a02 	vldr	s14, [r0, #8]
 800442e:	ed51 6a02 	vldr	s13, [r1, #-8]
 8004432:	ed1e 6a02 	vldr	s12, [lr, #-8]
 8004436:	ed90 4a03 	vldr	s8, [r0, #12]
 800443a:	ed11 5a01 	vldr	s10, [r1, #-4]
 800443e:	ed5e 5a01 	vldr	s11, [lr, #-4]
 8004442:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8004446:	ee74 4a05 	vadd.f32	s9, s8, s10
 800444a:	ee26 3a27 	vmul.f32	s6, s12, s15
 800444e:	ee77 6a26 	vadd.f32	s13, s14, s13
 8004452:	ee35 5a44 	vsub.f32	s10, s10, s8
 8004456:	ee25 7aa7 	vmul.f32	s14, s11, s15
 800445a:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800445e:	ee77 7a05 	vadd.f32	s15, s14, s10
 8004462:	ee26 6a24 	vmul.f32	s12, s12, s9
 8004466:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800446a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800446e:	ee36 7ae5 	vsub.f32	s14, s13, s11
 8004472:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8004476:	ee27 7a23 	vmul.f32	s14, s14, s7
 800447a:	3e01      	subs	r6, #1
 800447c:	ed0c 7a02 	vstr	s14, [ip, #-8]
 8004480:	ed4c 7a01 	vstr	s15, [ip, #-4]
 8004484:	f1a0 0008 	sub.w	r0, r0, #8
 8004488:	f101 0108 	add.w	r1, r1, #8
 800448c:	f10e 0e08 	add.w	lr, lr, #8
 8004490:	f10c 0c08 	add.w	ip, ip, #8
 8004494:	d1c9      	bne.n	800442a <arm_rfft_fast_f32+0x10a>
 8004496:	4638      	mov	r0, r7
 8004498:	4629      	mov	r1, r5
 800449a:	461a      	mov	r2, r3
 800449c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80044a0:	2301      	movs	r3, #1
 80044a2:	f000 bb31 	b.w	8004b08 <arm_cfft_f32>
 80044a6:	bf00      	nop

080044a8 <arm_cfft_radix8by2_f32>:
 80044a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044ac:	ed2d 8b08 	vpush	{d8-d11}
 80044b0:	f8b0 e000 	ldrh.w	lr, [r0]
 80044b4:	6842      	ldr	r2, [r0, #4]
 80044b6:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 80044ba:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 80044be:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 80044c2:	4607      	mov	r7, r0
 80044c4:	ea4f 038c 	mov.w	r3, ip, lsl #2
 80044c8:	f000 80af 	beq.w	800462a <arm_cfft_radix8by2_f32+0x182>
 80044cc:	3310      	adds	r3, #16
 80044ce:	18ce      	adds	r6, r1, r3
 80044d0:	3210      	adds	r2, #16
 80044d2:	4443      	add	r3, r8
 80044d4:	f101 0510 	add.w	r5, r1, #16
 80044d8:	f108 0410 	add.w	r4, r8, #16
 80044dc:	ed54 1a04 	vldr	s3, [r4, #-16]
 80044e0:	ed13 4a04 	vldr	s8, [r3, #-16]
 80044e4:	ed53 3a03 	vldr	s7, [r3, #-12]
 80044e8:	ed53 5a02 	vldr	s11, [r3, #-8]
 80044ec:	ed13 5a01 	vldr	s10, [r3, #-4]
 80044f0:	ed54 6a03 	vldr	s13, [r4, #-12]
 80044f4:	ed14 0a02 	vldr	s0, [r4, #-8]
 80044f8:	ed16 2a04 	vldr	s4, [r6, #-16]
 80044fc:	ed56 2a03 	vldr	s5, [r6, #-12]
 8004500:	ed15 6a03 	vldr	s12, [r5, #-12]
 8004504:	ed15 7a01 	vldr	s14, [r5, #-4]
 8004508:	ed15 3a04 	vldr	s6, [r5, #-16]
 800450c:	ed54 7a01 	vldr	s15, [r4, #-4]
 8004510:	ed56 0a02 	vldr	s1, [r6, #-8]
 8004514:	ed16 1a01 	vldr	s2, [r6, #-4]
 8004518:	ed55 4a02 	vldr	s9, [r5, #-8]
 800451c:	ee73 ba21 	vadd.f32	s23, s6, s3
 8004520:	ee36 ba26 	vadd.f32	s22, s12, s13
 8004524:	ee37 aa27 	vadd.f32	s20, s14, s15
 8004528:	ee72 9a04 	vadd.f32	s19, s4, s8
 800452c:	ee32 9aa3 	vadd.f32	s18, s5, s7
 8004530:	ee31 8a05 	vadd.f32	s16, s2, s10
 8004534:	ee74 aa80 	vadd.f32	s21, s9, s0
 8004538:	ee70 8aa5 	vadd.f32	s17, s1, s11
 800453c:	ed45 ba04 	vstr	s23, [r5, #-16]
 8004540:	ed05 ba03 	vstr	s22, [r5, #-12]
 8004544:	ed45 aa02 	vstr	s21, [r5, #-8]
 8004548:	ed05 aa01 	vstr	s20, [r5, #-4]
 800454c:	ed06 8a01 	vstr	s16, [r6, #-4]
 8004550:	ed46 9a04 	vstr	s19, [r6, #-16]
 8004554:	ed06 9a03 	vstr	s18, [r6, #-12]
 8004558:	ed46 8a02 	vstr	s17, [r6, #-8]
 800455c:	ee76 6a66 	vsub.f32	s13, s12, s13
 8004560:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8004564:	ed12 6a03 	vldr	s12, [r2, #-12]
 8004568:	ed52 2a04 	vldr	s5, [r2, #-16]
 800456c:	ee33 3a61 	vsub.f32	s6, s6, s3
 8004570:	ee34 4a42 	vsub.f32	s8, s8, s4
 8004574:	ee26 8a86 	vmul.f32	s16, s13, s12
 8004578:	ee24 2a06 	vmul.f32	s4, s8, s12
 800457c:	ee63 1a22 	vmul.f32	s3, s6, s5
 8004580:	ee24 4a22 	vmul.f32	s8, s8, s5
 8004584:	ee23 3a06 	vmul.f32	s6, s6, s12
 8004588:	ee66 6aa2 	vmul.f32	s13, s13, s5
 800458c:	ee23 6a86 	vmul.f32	s12, s7, s12
 8004590:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8004594:	ee36 6a04 	vadd.f32	s12, s12, s8
 8004598:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800459c:	ee72 3a63 	vsub.f32	s7, s4, s7
 80045a0:	ee71 2a88 	vadd.f32	s5, s3, s16
 80045a4:	ed44 6a03 	vstr	s13, [r4, #-12]
 80045a8:	ed44 2a04 	vstr	s5, [r4, #-16]
 80045ac:	ed43 3a04 	vstr	s7, [r3, #-16]
 80045b0:	ed03 6a03 	vstr	s12, [r3, #-12]
 80045b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045b8:	ee75 6ae0 	vsub.f32	s13, s11, s1
 80045bc:	ed12 7a01 	vldr	s14, [r2, #-4]
 80045c0:	ed52 5a02 	vldr	s11, [r2, #-8]
 80045c4:	ee35 6a41 	vsub.f32	s12, s10, s2
 80045c8:	ee74 4ac0 	vsub.f32	s9, s9, s0
 80045cc:	ee67 3a87 	vmul.f32	s7, s15, s14
 80045d0:	ee26 5a87 	vmul.f32	s10, s13, s14
 80045d4:	ee24 4aa5 	vmul.f32	s8, s9, s11
 80045d8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80045dc:	ee64 4a87 	vmul.f32	s9, s9, s14
 80045e0:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80045e4:	ee26 7a07 	vmul.f32	s14, s12, s14
 80045e8:	ee26 6a25 	vmul.f32	s12, s12, s11
 80045ec:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80045f0:	ee74 5a23 	vadd.f32	s11, s8, s7
 80045f4:	ee35 6a46 	vsub.f32	s12, s10, s12
 80045f8:	ee37 7a26 	vadd.f32	s14, s14, s13
 80045fc:	f1be 0e01 	subs.w	lr, lr, #1
 8004600:	ed44 5a02 	vstr	s11, [r4, #-8]
 8004604:	f105 0510 	add.w	r5, r5, #16
 8004608:	ed44 7a01 	vstr	s15, [r4, #-4]
 800460c:	f106 0610 	add.w	r6, r6, #16
 8004610:	ed03 6a02 	vstr	s12, [r3, #-8]
 8004614:	ed03 7a01 	vstr	s14, [r3, #-4]
 8004618:	f102 0210 	add.w	r2, r2, #16
 800461c:	f104 0410 	add.w	r4, r4, #16
 8004620:	f103 0310 	add.w	r3, r3, #16
 8004624:	f47f af5a 	bne.w	80044dc <arm_cfft_radix8by2_f32+0x34>
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	fa1f f48c 	uxth.w	r4, ip
 800462e:	4608      	mov	r0, r1
 8004630:	2302      	movs	r3, #2
 8004632:	4621      	mov	r1, r4
 8004634:	f000 fae2 	bl	8004bfc <arm_radix8_butterfly_f32>
 8004638:	ecbd 8b08 	vpop	{d8-d11}
 800463c:	4640      	mov	r0, r8
 800463e:	4621      	mov	r1, r4
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	2302      	movs	r3, #2
 8004644:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004648:	f000 bad8 	b.w	8004bfc <arm_radix8_butterfly_f32>

0800464c <arm_cfft_radix8by4_f32>:
 800464c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004650:	ed2d 8b0a 	vpush	{d8-d12}
 8004654:	8802      	ldrh	r2, [r0, #0]
 8004656:	ed91 6a00 	vldr	s12, [r1]
 800465a:	b08f      	sub	sp, #60	@ 0x3c
 800465c:	460f      	mov	r7, r1
 800465e:	0852      	lsrs	r2, r2, #1
 8004660:	0093      	lsls	r3, r2, #2
 8004662:	900c      	str	r0, [sp, #48]	@ 0x30
 8004664:	9103      	str	r1, [sp, #12]
 8004666:	6841      	ldr	r1, [r0, #4]
 8004668:	ed97 7a01 	vldr	s14, [r7, #4]
 800466c:	4638      	mov	r0, r7
 800466e:	4418      	add	r0, r3
 8004670:	4606      	mov	r6, r0
 8004672:	9009      	str	r0, [sp, #36]	@ 0x24
 8004674:	4418      	add	r0, r3
 8004676:	edd0 6a00 	vldr	s13, [r0]
 800467a:	edd6 3a00 	vldr	s7, [r6]
 800467e:	edd6 2a01 	vldr	s5, [r6, #4]
 8004682:	edd0 7a01 	vldr	s15, [r0, #4]
 8004686:	900a      	str	r0, [sp, #40]	@ 0x28
 8004688:	ee76 5a26 	vadd.f32	s11, s12, s13
 800468c:	4604      	mov	r4, r0
 800468e:	4625      	mov	r5, r4
 8004690:	441c      	add	r4, r3
 8004692:	ed94 4a00 	vldr	s8, [r4]
 8004696:	ed94 5a01 	vldr	s10, [r4, #4]
 800469a:	9401      	str	r4, [sp, #4]
 800469c:	ee75 4aa3 	vadd.f32	s9, s11, s7
 80046a0:	4630      	mov	r0, r6
 80046a2:	ee74 4a24 	vadd.f32	s9, s8, s9
 80046a6:	463e      	mov	r6, r7
 80046a8:	ee14 ea90 	vmov	lr, s9
 80046ac:	ee76 6a66 	vsub.f32	s13, s12, s13
 80046b0:	f846 eb08 	str.w	lr, [r6], #8
 80046b4:	ee37 6a27 	vadd.f32	s12, s14, s15
 80046b8:	edd0 4a01 	vldr	s9, [r0, #4]
 80046bc:	9604      	str	r6, [sp, #16]
 80046be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046c2:	9e01      	ldr	r6, [sp, #4]
 80046c4:	ee32 3aa6 	vadd.f32	s6, s5, s13
 80046c8:	ed96 2a01 	vldr	s4, [r6, #4]
 80046cc:	ee36 7a24 	vadd.f32	s14, s12, s9
 80046d0:	ee75 5ae3 	vsub.f32	s11, s11, s7
 80046d4:	ee77 4ae3 	vsub.f32	s9, s15, s7
 80046d8:	ee36 6a62 	vsub.f32	s12, s12, s5
 80046dc:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80046e0:	ee76 6ae2 	vsub.f32	s13, s13, s5
 80046e4:	ee73 3a45 	vsub.f32	s7, s6, s10
 80046e8:	4604      	mov	r4, r0
 80046ea:	ee36 6a45 	vsub.f32	s12, s12, s10
 80046ee:	ee75 6a26 	vadd.f32	s13, s10, s13
 80046f2:	46a3      	mov	fp, r4
 80046f4:	ee37 7a02 	vadd.f32	s14, s14, s4
 80046f8:	ee34 5a84 	vadd.f32	s10, s9, s8
 80046fc:	ee13 8a90 	vmov	r8, s7
 8004700:	46a4      	mov	ip, r4
 8004702:	ee75 5ac4 	vsub.f32	s11, s11, s8
 8004706:	ed87 7a01 	vstr	s14, [r7, #4]
 800470a:	f84b 8b08 	str.w	r8, [fp], #8
 800470e:	f1ac 0704 	sub.w	r7, ip, #4
 8004712:	ed8c 5a01 	vstr	s10, [ip, #4]
 8004716:	f101 0c08 	add.w	ip, r1, #8
 800471a:	462c      	mov	r4, r5
 800471c:	f8cd c014 	str.w	ip, [sp, #20]
 8004720:	ee15 ca90 	vmov	ip, s11
 8004724:	f844 cb08 	str.w	ip, [r4], #8
 8004728:	9407      	str	r4, [sp, #28]
 800472a:	f101 0410 	add.w	r4, r1, #16
 800472e:	ed85 6a01 	vstr	s12, [r5, #4]
 8004732:	0852      	lsrs	r2, r2, #1
 8004734:	9402      	str	r4, [sp, #8]
 8004736:	462c      	mov	r4, r5
 8004738:	f101 0518 	add.w	r5, r1, #24
 800473c:	920b      	str	r2, [sp, #44]	@ 0x2c
 800473e:	46b2      	mov	sl, r6
 8004740:	9506      	str	r5, [sp, #24]
 8004742:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8004746:	3a02      	subs	r2, #2
 8004748:	ee16 5a90 	vmov	r5, s13
 800474c:	46b6      	mov	lr, r6
 800474e:	4630      	mov	r0, r6
 8004750:	0852      	lsrs	r2, r2, #1
 8004752:	f84a 5b08 	str.w	r5, [sl], #8
 8004756:	f1a0 0604 	sub.w	r6, r0, #4
 800475a:	edce 7a01 	vstr	s15, [lr, #4]
 800475e:	9208      	str	r2, [sp, #32]
 8004760:	f000 8130 	beq.w	80049c4 <arm_cfft_radix8by4_f32+0x378>
 8004764:	4691      	mov	r9, r2
 8004766:	9a03      	ldr	r2, [sp, #12]
 8004768:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800476c:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
 8004770:	3b08      	subs	r3, #8
 8004772:	f102 0510 	add.w	r5, r2, #16
 8004776:	f101 0c20 	add.w	ip, r1, #32
 800477a:	f1a4 020c 	sub.w	r2, r4, #12
 800477e:	f101 0e30 	add.w	lr, r1, #48	@ 0x30
 8004782:	4433      	add	r3, r6
 8004784:	3410      	adds	r4, #16
 8004786:	4650      	mov	r0, sl
 8004788:	4659      	mov	r1, fp
 800478a:	ed55 3a02 	vldr	s7, [r5, #-8]
 800478e:	ed14 5a02 	vldr	s10, [r4, #-8]
 8004792:	ed91 7a00 	vldr	s14, [r1]
 8004796:	edd0 7a00 	vldr	s15, [r0]
 800479a:	ed15 4a01 	vldr	s8, [r5, #-4]
 800479e:	ed54 5a01 	vldr	s11, [r4, #-4]
 80047a2:	edd0 6a01 	vldr	s13, [r0, #4]
 80047a6:	ed91 6a01 	vldr	s12, [r1, #4]
 80047aa:	ee33 8a85 	vadd.f32	s16, s7, s10
 80047ae:	ee34 0a25 	vadd.f32	s0, s8, s11
 80047b2:	ee78 4a07 	vadd.f32	s9, s16, s14
 80047b6:	ee74 5a65 	vsub.f32	s11, s8, s11
 80047ba:	ee77 4aa4 	vadd.f32	s9, s15, s9
 80047be:	ee33 5ac5 	vsub.f32	s10, s7, s10
 80047c2:	ed45 4a02 	vstr	s9, [r5, #-8]
 80047c6:	edd1 4a01 	vldr	s9, [r1, #4]
 80047ca:	ed90 4a01 	vldr	s8, [r0, #4]
 80047ce:	ee70 4a24 	vadd.f32	s9, s0, s9
 80047d2:	ee76 aa05 	vadd.f32	s21, s12, s10
 80047d6:	ee74 4a84 	vadd.f32	s9, s9, s8
 80047da:	ee35 aac7 	vsub.f32	s20, s11, s14
 80047de:	ed45 4a01 	vstr	s9, [r5, #-4]
 80047e2:	edd6 1a00 	vldr	s3, [r6]
 80047e6:	edd7 0a00 	vldr	s1, [r7]
 80047ea:	ed92 4a02 	vldr	s8, [r2, #8]
 80047ee:	edd3 3a02 	vldr	s7, [r3, #8]
 80047f2:	ed93 2a01 	vldr	s4, [r3, #4]
 80047f6:	ed16 1a01 	vldr	s2, [r6, #-4]
 80047fa:	edd2 2a01 	vldr	s5, [r2, #4]
 80047fe:	ed57 9a01 	vldr	s19, [r7, #-4]
 8004802:	ee70 4aa1 	vadd.f32	s9, s1, s3
 8004806:	ee39 3a81 	vadd.f32	s6, s19, s2
 800480a:	ee74 8a84 	vadd.f32	s17, s9, s8
 800480e:	ee70 1ae1 	vsub.f32	s3, s1, s3
 8004812:	ee73 8aa8 	vadd.f32	s17, s7, s17
 8004816:	ee7a aae6 	vsub.f32	s21, s21, s13
 800481a:	ee18 aa90 	vmov	sl, s17
 800481e:	f847 a908 	str.w	sl, [r7], #-8
 8004822:	edd2 8a01 	vldr	s17, [r2, #4]
 8004826:	ed93 9a01 	vldr	s18, [r3, #4]
 800482a:	ee73 8a28 	vadd.f32	s17, s6, s17
 800482e:	ee3a aa27 	vadd.f32	s20, s20, s15
 8004832:	ee78 8a89 	vadd.f32	s17, s17, s18
 8004836:	ee74 0a63 	vsub.f32	s1, s8, s7
 800483a:	edc7 8a01 	vstr	s17, [r7, #4]
 800483e:	ed18 ba02 	vldr	s22, [r8, #-8]
 8004842:	ed58 8a01 	vldr	s17, [r8, #-4]
 8004846:	ee39 1ac1 	vsub.f32	s2, s19, s2
 800484a:	ee6a ba28 	vmul.f32	s23, s20, s17
 800484e:	ee2a ca8b 	vmul.f32	s24, s21, s22
 8004852:	ee71 9ae2 	vsub.f32	s19, s3, s5
 8004856:	ee30 9a81 	vadd.f32	s18, s1, s2
 800485a:	ee79 9a82 	vadd.f32	s19, s19, s4
 800485e:	ee3c ca2b 	vadd.f32	s24, s24, s23
 8004862:	ee6a aaa8 	vmul.f32	s21, s21, s17
 8004866:	ee69 baa8 	vmul.f32	s23, s19, s17
 800486a:	ee2a aa0b 	vmul.f32	s20, s20, s22
 800486e:	ee69 9a8b 	vmul.f32	s19, s19, s22
 8004872:	ee69 8a28 	vmul.f32	s17, s18, s17
 8004876:	ee29 ba0b 	vmul.f32	s22, s18, s22
 800487a:	ee1c aa10 	vmov	sl, s24
 800487e:	ee78 8aa9 	vadd.f32	s17, s17, s19
 8004882:	f841 ab08 	str.w	sl, [r1], #8
 8004886:	ee3a aa6a 	vsub.f32	s20, s20, s21
 800488a:	ee3b bacb 	vsub.f32	s22, s23, s22
 800488e:	ee34 4ac4 	vsub.f32	s8, s9, s8
 8004892:	ee33 3a62 	vsub.f32	s6, s6, s5
 8004896:	ed01 aa01 	vstr	s20, [r1, #-4]
 800489a:	edc2 8a01 	vstr	s17, [r2, #4]
 800489e:	ed82 ba02 	vstr	s22, [r2, #8]
 80048a2:	ed5c 4a04 	vldr	s9, [ip, #-16]
 80048a6:	ee74 3a63 	vsub.f32	s7, s8, s7
 80048aa:	ee38 8a47 	vsub.f32	s16, s16, s14
 80048ae:	ed1c 4a03 	vldr	s8, [ip, #-12]
 80048b2:	ee30 0a46 	vsub.f32	s0, s0, s12
 80048b6:	ee33 3a42 	vsub.f32	s6, s6, s4
 80048ba:	ee38 8a67 	vsub.f32	s16, s16, s15
 80048be:	ee30 0a66 	vsub.f32	s0, s0, s13
 80048c2:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 80048c6:	ee63 8a04 	vmul.f32	s17, s6, s8
 80048ca:	ee28 aa24 	vmul.f32	s20, s16, s9
 80048ce:	ee60 9a04 	vmul.f32	s19, s0, s8
 80048d2:	ee28 8a04 	vmul.f32	s16, s16, s8
 80048d6:	ee20 0a24 	vmul.f32	s0, s0, s9
 80048da:	ee63 3a84 	vmul.f32	s7, s7, s8
 80048de:	ee39 4a68 	vsub.f32	s8, s18, s17
 80048e2:	ee7a 9a29 	vadd.f32	s19, s20, s19
 80048e6:	ee14 aa10 	vmov	sl, s8
 80048ea:	ee30 0a48 	vsub.f32	s0, s0, s16
 80048ee:	ee63 4a24 	vmul.f32	s9, s6, s9
 80048f2:	ed44 9a02 	vstr	s19, [r4, #-8]
 80048f6:	ee73 3ae4 	vsub.f32	s7, s7, s9
 80048fa:	ed04 0a01 	vstr	s0, [r4, #-4]
 80048fe:	f846 a908 	str.w	sl, [r6], #-8
 8004902:	ee35 6a46 	vsub.f32	s12, s10, s12
 8004906:	ee35 7a87 	vadd.f32	s14, s11, s14
 800490a:	edc6 3a01 	vstr	s7, [r6, #4]
 800490e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8004912:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004916:	ed1e 6a05 	vldr	s12, [lr, #-20]	@ 0xffffffec
 800491a:	ed1e 7a06 	vldr	s14, [lr, #-24]	@ 0xffffffe8
 800491e:	ee67 5a86 	vmul.f32	s11, s15, s12
 8004922:	ee26 5a87 	vmul.f32	s10, s13, s14
 8004926:	ee72 2a62 	vsub.f32	s5, s4, s5
 800492a:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800492e:	ee72 2ae1 	vsub.f32	s5, s5, s3
 8004932:	ee75 5a25 	vadd.f32	s11, s10, s11
 8004936:	ee62 0a86 	vmul.f32	s1, s5, s12
 800493a:	ee66 6a86 	vmul.f32	s13, s13, s12
 800493e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004942:	ee21 6a06 	vmul.f32	s12, s2, s12
 8004946:	ee62 2a87 	vmul.f32	s5, s5, s14
 800494a:	ee21 1a07 	vmul.f32	s2, s2, s14
 800494e:	ee15 aa90 	vmov	sl, s11
 8004952:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004956:	f840 ab08 	str.w	sl, [r0], #8
 800495a:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800495e:	ee76 2a22 	vadd.f32	s5, s12, s5
 8004962:	f1b9 0901 	subs.w	r9, r9, #1
 8004966:	ed40 7a01 	vstr	s15, [r0, #-4]
 800496a:	f105 0508 	add.w	r5, r5, #8
 800496e:	ed83 1a02 	vstr	s2, [r3, #8]
 8004972:	edc3 2a01 	vstr	s5, [r3, #4]
 8004976:	f108 0808 	add.w	r8, r8, #8
 800497a:	f1a2 0208 	sub.w	r2, r2, #8
 800497e:	f10c 0c10 	add.w	ip, ip, #16
 8004982:	f104 0408 	add.w	r4, r4, #8
 8004986:	f10e 0e18 	add.w	lr, lr, #24
 800498a:	f1a3 0308 	sub.w	r3, r3, #8
 800498e:	f47f aefc 	bne.w	800478a <arm_cfft_radix8by4_f32+0x13e>
 8004992:	9908      	ldr	r1, [sp, #32]
 8004994:	9802      	ldr	r0, [sp, #8]
 8004996:	f8dd a034 	ldr.w	sl, [sp, #52]	@ 0x34
 800499a:	00cb      	lsls	r3, r1, #3
 800499c:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 80049a0:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80049a4:	9102      	str	r1, [sp, #8]
 80049a6:	9904      	ldr	r1, [sp, #16]
 80049a8:	4419      	add	r1, r3
 80049aa:	9104      	str	r1, [sp, #16]
 80049ac:	9905      	ldr	r1, [sp, #20]
 80049ae:	4419      	add	r1, r3
 80049b0:	9105      	str	r1, [sp, #20]
 80049b2:	9907      	ldr	r1, [sp, #28]
 80049b4:	449b      	add	fp, r3
 80049b6:	4419      	add	r1, r3
 80049b8:	449a      	add	sl, r3
 80049ba:	9b06      	ldr	r3, [sp, #24]
 80049bc:	9107      	str	r1, [sp, #28]
 80049be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80049c2:	9306      	str	r3, [sp, #24]
 80049c4:	9a04      	ldr	r2, [sp, #16]
 80049c6:	9807      	ldr	r0, [sp, #28]
 80049c8:	edd2 3a00 	vldr	s7, [r2]
 80049cc:	ed90 4a00 	vldr	s8, [r0]
 80049d0:	eddb 7a00 	vldr	s15, [fp]
 80049d4:	ed9a 3a00 	vldr	s6, [sl]
 80049d8:	edd2 4a01 	vldr	s9, [r2, #4]
 80049dc:	ed90 7a01 	vldr	s14, [r0, #4]
 80049e0:	ed9b 2a01 	vldr	s4, [fp, #4]
 80049e4:	edda 5a01 	vldr	s11, [sl, #4]
 80049e8:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 80049ec:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80049ee:	ee73 6a84 	vadd.f32	s13, s7, s8
 80049f2:	ee34 6a87 	vadd.f32	s12, s9, s14
 80049f6:	ee36 5aa7 	vadd.f32	s10, s13, s15
 80049fa:	ee34 7ac7 	vsub.f32	s14, s9, s14
 80049fe:	ee33 5a05 	vadd.f32	s10, s6, s10
 8004a02:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8004a06:	ed82 5a00 	vstr	s10, [r2]
 8004a0a:	ed9b 5a01 	vldr	s10, [fp, #4]
 8004a0e:	edda 4a01 	vldr	s9, [sl, #4]
 8004a12:	ee36 5a05 	vadd.f32	s10, s12, s10
 8004a16:	ee72 3a04 	vadd.f32	s7, s4, s8
 8004a1a:	ee35 5a24 	vadd.f32	s10, s10, s9
 8004a1e:	ee77 4a67 	vsub.f32	s9, s14, s15
 8004a22:	ed82 5a01 	vstr	s10, [r2, #4]
 8004a26:	9a05      	ldr	r2, [sp, #20]
 8004a28:	ee34 5a83 	vadd.f32	s10, s9, s6
 8004a2c:	edd2 1a00 	vldr	s3, [r2]
 8004a30:	edd2 2a01 	vldr	s5, [r2, #4]
 8004a34:	9a02      	ldr	r2, [sp, #8]
 8004a36:	ee73 3ae5 	vsub.f32	s7, s7, s11
 8004a3a:	ee36 6a42 	vsub.f32	s12, s12, s4
 8004a3e:	ee63 4aa1 	vmul.f32	s9, s7, s3
 8004a42:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8004a46:	ee65 2a22 	vmul.f32	s5, s10, s5
 8004a4a:	ee25 5a21 	vmul.f32	s10, s10, s3
 8004a4e:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8004a52:	ee35 5a63 	vsub.f32	s10, s10, s7
 8004a56:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004a5a:	edcb 2a00 	vstr	s5, [fp]
 8004a5e:	ed8b 5a01 	vstr	s10, [fp, #4]
 8004a62:	edd2 3a01 	vldr	s7, [r2, #4]
 8004a66:	ed92 5a00 	vldr	s10, [r2]
 8004a6a:	9a06      	ldr	r2, [sp, #24]
 8004a6c:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8004a70:	ee36 6a65 	vsub.f32	s12, s12, s11
 8004a74:	ee66 4a85 	vmul.f32	s9, s13, s10
 8004a78:	ee26 5a05 	vmul.f32	s10, s12, s10
 8004a7c:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8004a80:	ee26 6a23 	vmul.f32	s12, s12, s7
 8004a84:	ee75 6a66 	vsub.f32	s13, s10, s13
 8004a88:	ee34 6a86 	vadd.f32	s12, s9, s12
 8004a8c:	ee34 4a42 	vsub.f32	s8, s8, s4
 8004a90:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004a94:	edc0 6a01 	vstr	s13, [r0, #4]
 8004a98:	ed80 6a00 	vstr	s12, [r0]
 8004a9c:	ed92 6a01 	vldr	s12, [r2, #4]
 8004aa0:	9803      	ldr	r0, [sp, #12]
 8004aa2:	ee77 7a43 	vsub.f32	s15, s14, s6
 8004aa6:	ee75 5a84 	vadd.f32	s11, s11, s8
 8004aaa:	ed92 7a00 	vldr	s14, [r2]
 8004aae:	ee65 6a87 	vmul.f32	s13, s11, s14
 8004ab2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004ab6:	ee65 5a86 	vmul.f32	s11, s11, s12
 8004aba:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004abe:	ee77 5a65 	vsub.f32	s11, s14, s11
 8004ac2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ac6:	edca 5a01 	vstr	s11, [sl, #4]
 8004aca:	edca 7a00 	vstr	s15, [sl]
 8004ace:	6872      	ldr	r2, [r6, #4]
 8004ad0:	4621      	mov	r1, r4
 8004ad2:	2304      	movs	r3, #4
 8004ad4:	f000 f892 	bl	8004bfc <arm_radix8_butterfly_f32>
 8004ad8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004ada:	6872      	ldr	r2, [r6, #4]
 8004adc:	4621      	mov	r1, r4
 8004ade:	2304      	movs	r3, #4
 8004ae0:	f000 f88c 	bl	8004bfc <arm_radix8_butterfly_f32>
 8004ae4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004ae6:	6872      	ldr	r2, [r6, #4]
 8004ae8:	4621      	mov	r1, r4
 8004aea:	2304      	movs	r3, #4
 8004aec:	f000 f886 	bl	8004bfc <arm_radix8_butterfly_f32>
 8004af0:	9801      	ldr	r0, [sp, #4]
 8004af2:	6872      	ldr	r2, [r6, #4]
 8004af4:	4621      	mov	r1, r4
 8004af6:	2304      	movs	r3, #4
 8004af8:	b00f      	add	sp, #60	@ 0x3c
 8004afa:	ecbd 8b0a 	vpop	{d8-d12}
 8004afe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b02:	f000 b87b 	b.w	8004bfc <arm_radix8_butterfly_f32>
 8004b06:	bf00      	nop

08004b08 <arm_cfft_f32>:
 8004b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b0c:	2a01      	cmp	r2, #1
 8004b0e:	4606      	mov	r6, r0
 8004b10:	4617      	mov	r7, r2
 8004b12:	460c      	mov	r4, r1
 8004b14:	4698      	mov	r8, r3
 8004b16:	8805      	ldrh	r5, [r0, #0]
 8004b18:	d054      	beq.n	8004bc4 <arm_cfft_f32+0xbc>
 8004b1a:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8004b1e:	d04c      	beq.n	8004bba <arm_cfft_f32+0xb2>
 8004b20:	d916      	bls.n	8004b50 <arm_cfft_f32+0x48>
 8004b22:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 8004b26:	d01a      	beq.n	8004b5e <arm_cfft_f32+0x56>
 8004b28:	d95c      	bls.n	8004be4 <arm_cfft_f32+0xdc>
 8004b2a:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 8004b2e:	d044      	beq.n	8004bba <arm_cfft_f32+0xb2>
 8004b30:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8004b34:	d105      	bne.n	8004b42 <arm_cfft_f32+0x3a>
 8004b36:	4620      	mov	r0, r4
 8004b38:	4629      	mov	r1, r5
 8004b3a:	6872      	ldr	r2, [r6, #4]
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	f000 f85d 	bl	8004bfc <arm_radix8_butterfly_f32>
 8004b42:	f1b8 0f00 	cmp.w	r8, #0
 8004b46:	d111      	bne.n	8004b6c <arm_cfft_f32+0x64>
 8004b48:	2f01      	cmp	r7, #1
 8004b4a:	d016      	beq.n	8004b7a <arm_cfft_f32+0x72>
 8004b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b50:	2d20      	cmp	r5, #32
 8004b52:	d032      	beq.n	8004bba <arm_cfft_f32+0xb2>
 8004b54:	d94a      	bls.n	8004bec <arm_cfft_f32+0xe4>
 8004b56:	2d40      	cmp	r5, #64	@ 0x40
 8004b58:	d0ed      	beq.n	8004b36 <arm_cfft_f32+0x2e>
 8004b5a:	2d80      	cmp	r5, #128	@ 0x80
 8004b5c:	d1f1      	bne.n	8004b42 <arm_cfft_f32+0x3a>
 8004b5e:	4630      	mov	r0, r6
 8004b60:	4621      	mov	r1, r4
 8004b62:	f7ff fca1 	bl	80044a8 <arm_cfft_radix8by2_f32>
 8004b66:	f1b8 0f00 	cmp.w	r8, #0
 8004b6a:	d0ed      	beq.n	8004b48 <arm_cfft_f32+0x40>
 8004b6c:	4620      	mov	r0, r4
 8004b6e:	89b1      	ldrh	r1, [r6, #12]
 8004b70:	68b2      	ldr	r2, [r6, #8]
 8004b72:	f7fb fb29 	bl	80001c8 <arm_bitreversal_32>
 8004b76:	2f01      	cmp	r7, #1
 8004b78:	d1e8      	bne.n	8004b4c <arm_cfft_f32+0x44>
 8004b7a:	ee07 5a90 	vmov	s15, r5
 8004b7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b82:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8004b86:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 8004b8a:	2d00      	cmp	r5, #0
 8004b8c:	d0de      	beq.n	8004b4c <arm_cfft_f32+0x44>
 8004b8e:	f104 0108 	add.w	r1, r4, #8
 8004b92:	2300      	movs	r3, #0
 8004b94:	3301      	adds	r3, #1
 8004b96:	429d      	cmp	r5, r3
 8004b98:	f101 0108 	add.w	r1, r1, #8
 8004b9c:	ed11 7a04 	vldr	s14, [r1, #-16]
 8004ba0:	ed51 7a03 	vldr	s15, [r1, #-12]
 8004ba4:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004ba8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8004bac:	ed01 7a04 	vstr	s14, [r1, #-16]
 8004bb0:	ed41 7a03 	vstr	s15, [r1, #-12]
 8004bb4:	d1ee      	bne.n	8004b94 <arm_cfft_f32+0x8c>
 8004bb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bba:	4630      	mov	r0, r6
 8004bbc:	4621      	mov	r1, r4
 8004bbe:	f7ff fd45 	bl	800464c <arm_cfft_radix8by4_f32>
 8004bc2:	e7be      	b.n	8004b42 <arm_cfft_f32+0x3a>
 8004bc4:	b1ad      	cbz	r5, 8004bf2 <arm_cfft_f32+0xea>
 8004bc6:	f101 030c 	add.w	r3, r1, #12
 8004bca:	2200      	movs	r2, #0
 8004bcc:	ed53 7a02 	vldr	s15, [r3, #-8]
 8004bd0:	3201      	adds	r2, #1
 8004bd2:	eef1 7a67 	vneg.f32	s15, s15
 8004bd6:	4295      	cmp	r5, r2
 8004bd8:	ed43 7a02 	vstr	s15, [r3, #-8]
 8004bdc:	f103 0308 	add.w	r3, r3, #8
 8004be0:	d1f4      	bne.n	8004bcc <arm_cfft_f32+0xc4>
 8004be2:	e79a      	b.n	8004b1a <arm_cfft_f32+0x12>
 8004be4:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8004be8:	d0a5      	beq.n	8004b36 <arm_cfft_f32+0x2e>
 8004bea:	e7aa      	b.n	8004b42 <arm_cfft_f32+0x3a>
 8004bec:	2d10      	cmp	r5, #16
 8004bee:	d0b6      	beq.n	8004b5e <arm_cfft_f32+0x56>
 8004bf0:	e7a7      	b.n	8004b42 <arm_cfft_f32+0x3a>
 8004bf2:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8004bf6:	d894      	bhi.n	8004b22 <arm_cfft_f32+0x1a>
 8004bf8:	e7aa      	b.n	8004b50 <arm_cfft_f32+0x48>
 8004bfa:	bf00      	nop

08004bfc <arm_radix8_butterfly_f32>:
 8004bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c00:	ed2d 8b10 	vpush	{d8-d15}
 8004c04:	b09d      	sub	sp, #116	@ 0x74
 8004c06:	461c      	mov	r4, r3
 8004c08:	ed9f bac8 	vldr	s22, [pc, #800]	@ 8004f2c <arm_radix8_butterfly_f32+0x330>
 8004c0c:	921a      	str	r2, [sp, #104]	@ 0x68
 8004c0e:	1d03      	adds	r3, r0, #4
 8004c10:	4682      	mov	sl, r0
 8004c12:	4689      	mov	r9, r1
 8004c14:	468b      	mov	fp, r1
 8004c16:	931b      	str	r3, [sp, #108]	@ 0x6c
 8004c18:	9400      	str	r4, [sp, #0]
 8004c1a:	469e      	mov	lr, r3
 8004c1c:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8004c20:	005a      	lsls	r2, r3, #1
 8004c22:	18d6      	adds	r6, r2, r3
 8004c24:	18f5      	adds	r5, r6, r3
 8004c26:	9203      	str	r2, [sp, #12]
 8004c28:	195a      	adds	r2, r3, r5
 8004c2a:	18d0      	adds	r0, r2, r3
 8004c2c:	00df      	lsls	r7, r3, #3
 8004c2e:	1819      	adds	r1, r3, r0
 8004c30:	463c      	mov	r4, r7
 8004c32:	9701      	str	r7, [sp, #4]
 8004c34:	4457      	add	r7, sl
 8004c36:	930c      	str	r3, [sp, #48]	@ 0x30
 8004c38:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 8004c3c:	011b      	lsls	r3, r3, #4
 8004c3e:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
 8004c42:	eb07 0c04 	add.w	ip, r7, r4
 8004c46:	9c00      	ldr	r4, [sp, #0]
 8004c48:	9302      	str	r3, [sp, #8]
 8004c4a:	eb0a 06c6 	add.w	r6, sl, r6, lsl #3
 8004c4e:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
 8004c52:	3204      	adds	r2, #4
 8004c54:	3104      	adds	r1, #4
 8004c56:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
 8004c5a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c5e:	f04f 0800 	mov.w	r8, #0
 8004c62:	eddc 7a00 	vldr	s15, [ip]
 8004c66:	edd7 6a00 	vldr	s13, [r7]
 8004c6a:	edd6 3a00 	vldr	s7, [r6]
 8004c6e:	ed5e aa01 	vldr	s21, [lr, #-4]
 8004c72:	edd5 4a00 	vldr	s9, [r5]
 8004c76:	ed90 2a00 	vldr	s4, [r0]
 8004c7a:	ed12 7a01 	vldr	s14, [r2, #-4]
 8004c7e:	ed51 0a01 	vldr	s1, [r1, #-4]
 8004c82:	ee77 8a82 	vadd.f32	s17, s15, s4
 8004c86:	ee33 4aa0 	vadd.f32	s8, s7, s1
 8004c8a:	ee76 1a87 	vadd.f32	s3, s13, s14
 8004c8e:	ee3a 3aa4 	vadd.f32	s6, s21, s9
 8004c92:	ee31 6a84 	vadd.f32	s12, s3, s8
 8004c96:	ee33 5a28 	vadd.f32	s10, s6, s17
 8004c9a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8004c9e:	ee75 6a06 	vadd.f32	s13, s10, s12
 8004ca2:	ee35 5a46 	vsub.f32	s10, s10, s12
 8004ca6:	ed4e 6a01 	vstr	s13, [lr, #-4]
 8004caa:	ed85 5a00 	vstr	s10, [r5]
 8004cae:	ed96 1a01 	vldr	s2, [r6, #4]
 8004cb2:	edd7 5a01 	vldr	s11, [r7, #4]
 8004cb6:	ed92 aa00 	vldr	s20, [r2]
 8004cba:	ed91 6a00 	vldr	s12, [r1]
 8004cbe:	ed9e 9a00 	vldr	s18, [lr]
 8004cc2:	ed95 5a01 	vldr	s10, [r5, #4]
 8004cc6:	eddc 6a01 	vldr	s13, [ip, #4]
 8004cca:	edd0 9a01 	vldr	s19, [r0, #4]
 8004cce:	ee73 0ae0 	vsub.f32	s1, s7, s1
 8004cd2:	ee71 2a46 	vsub.f32	s5, s2, s12
 8004cd6:	ee75 3aca 	vsub.f32	s7, s11, s20
 8004cda:	ee37 0a60 	vsub.f32	s0, s14, s1
 8004cde:	ee33 8aa2 	vadd.f32	s16, s7, s5
 8004ce2:	ee37 7a20 	vadd.f32	s14, s14, s1
 8004ce6:	ee73 2ae2 	vsub.f32	s5, s7, s5
 8004cea:	ee37 2ac2 	vsub.f32	s4, s15, s4
 8004cee:	ee79 3a05 	vadd.f32	s7, s18, s10
 8004cf2:	ee60 0a0b 	vmul.f32	s1, s0, s22
 8004cf6:	ee39 5a45 	vsub.f32	s10, s18, s10
 8004cfa:	ee7a 4ae4 	vsub.f32	s9, s21, s9
 8004cfe:	ee36 9aa9 	vadd.f32	s18, s13, s19
 8004d02:	ee75 5a8a 	vadd.f32	s11, s11, s20
 8004d06:	ee31 6a06 	vadd.f32	s12, s2, s12
 8004d0a:	ee76 6ae9 	vsub.f32	s13, s13, s19
 8004d0e:	ee28 8a0b 	vmul.f32	s16, s16, s22
 8004d12:	ee62 2a8b 	vmul.f32	s5, s5, s22
 8004d16:	ee67 7a0b 	vmul.f32	s15, s14, s22
 8004d1a:	ee33 3a68 	vsub.f32	s6, s6, s17
 8004d1e:	ee36 0a88 	vadd.f32	s0, s13, s16
 8004d22:	ee75 8a86 	vadd.f32	s17, s11, s12
 8004d26:	ee36 7ac8 	vsub.f32	s14, s13, s16
 8004d2a:	ee71 1ac4 	vsub.f32	s3, s3, s8
 8004d2e:	ee75 6a62 	vsub.f32	s13, s10, s5
 8004d32:	ee33 4ac9 	vsub.f32	s8, s7, s18
 8004d36:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8004d3a:	ee33 1a89 	vadd.f32	s2, s7, s18
 8004d3e:	ee74 5ae0 	vsub.f32	s11, s9, s1
 8004d42:	ee74 3aa0 	vadd.f32	s7, s9, s1
 8004d46:	ee75 4a22 	vadd.f32	s9, s10, s5
 8004d4a:	ee32 5a27 	vadd.f32	s10, s4, s15
 8004d4e:	ee72 7a67 	vsub.f32	s15, s4, s15
 8004d52:	ee33 8a06 	vadd.f32	s16, s6, s12
 8004d56:	ee75 2a87 	vadd.f32	s5, s11, s14
 8004d5a:	ee31 9a28 	vadd.f32	s18, s2, s17
 8004d5e:	ee33 6a46 	vsub.f32	s12, s6, s12
 8004d62:	ee74 0a61 	vsub.f32	s1, s8, s3
 8004d66:	ee33 2a80 	vadd.f32	s4, s7, s0
 8004d6a:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8004d6e:	ee34 3ac5 	vsub.f32	s6, s9, s10
 8004d72:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8004d76:	ee31 1a68 	vsub.f32	s2, s2, s17
 8004d7a:	ee34 4a21 	vadd.f32	s8, s8, s3
 8004d7e:	ee73 3ac0 	vsub.f32	s7, s7, s0
 8004d82:	ee74 4a85 	vadd.f32	s9, s9, s10
 8004d86:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004d8a:	44d8      	add	r8, fp
 8004d8c:	45c1      	cmp	r9, r8
 8004d8e:	ed8e 9a00 	vstr	s18, [lr]
 8004d92:	ed85 1a01 	vstr	s2, [r5, #4]
 8004d96:	449e      	add	lr, r3
 8004d98:	ed8c 8a00 	vstr	s16, [ip]
 8004d9c:	441d      	add	r5, r3
 8004d9e:	ed80 6a00 	vstr	s12, [r0]
 8004da2:	edcc 0a01 	vstr	s1, [ip, #4]
 8004da6:	ed80 4a01 	vstr	s8, [r0, #4]
 8004daa:	449c      	add	ip, r3
 8004dac:	ed87 2a00 	vstr	s4, [r7]
 8004db0:	4418      	add	r0, r3
 8004db2:	ed41 3a01 	vstr	s7, [r1, #-4]
 8004db6:	ed42 2a01 	vstr	s5, [r2, #-4]
 8004dba:	ed86 7a00 	vstr	s14, [r6]
 8004dbe:	ed87 3a01 	vstr	s6, [r7, #4]
 8004dc2:	edc1 4a00 	vstr	s9, [r1]
 8004dc6:	441f      	add	r7, r3
 8004dc8:	edc2 5a00 	vstr	s11, [r2]
 8004dcc:	4419      	add	r1, r3
 8004dce:	edc6 6a01 	vstr	s13, [r6, #4]
 8004dd2:	441a      	add	r2, r3
 8004dd4:	441e      	add	r6, r3
 8004dd6:	f63f af44 	bhi.w	8004c62 <arm_radix8_butterfly_f32+0x66>
 8004dda:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8004ddc:	2907      	cmp	r1, #7
 8004dde:	4620      	mov	r0, r4
 8004de0:	f240 81e9 	bls.w	80051b6 <arm_radix8_butterfly_f32+0x5ba>
 8004de4:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 8004de8:	193e      	adds	r6, r7, r4
 8004dea:	1935      	adds	r5, r6, r4
 8004dec:	9c03      	ldr	r4, [sp, #12]
 8004dee:	9000      	str	r0, [sp, #0]
 8004df0:	4622      	mov	r2, r4
 8004df2:	3201      	adds	r2, #1
 8004df4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8004df8:	9900      	ldr	r1, [sp, #0]
 8004dfa:	1828      	adds	r0, r5, r0
 8004dfc:	eb00 0e01 	add.w	lr, r0, r1
 8004e00:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8004e02:	440a      	add	r2, r1
 8004e04:	eb04 0c01 	add.w	ip, r4, r1
 8004e08:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 8004e0c:	eb0a 0ec2 	add.w	lr, sl, r2, lsl #3
 8004e10:	9a00      	ldr	r2, [sp, #0]
 8004e12:	940f      	str	r4, [sp, #60]	@ 0x3c
 8004e14:	00ed      	lsls	r5, r5, #3
 8004e16:	9511      	str	r5, [sp, #68]	@ 0x44
 8004e18:	00d5      	lsls	r5, r2, #3
 8004e1a:	950d      	str	r5, [sp, #52]	@ 0x34
 8004e1c:	9d01      	ldr	r5, [sp, #4]
 8004e1e:	3508      	adds	r5, #8
 8004e20:	9516      	str	r5, [sp, #88]	@ 0x58
 8004e22:	9d02      	ldr	r5, [sp, #8]
 8004e24:	3508      	adds	r5, #8
 8004e26:	0114      	lsls	r4, r2, #4
 8004e28:	9517      	str	r5, [sp, #92]	@ 0x5c
 8004e2a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8004e2c:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8004e2e:	940e      	str	r4, [sp, #56]	@ 0x38
 8004e30:	00c0      	lsls	r0, r0, #3
 8004e32:	9010      	str	r0, [sp, #64]	@ 0x40
 8004e34:	18aa      	adds	r2, r5, r2
 8004e36:	9207      	str	r2, [sp, #28]
 8004e38:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8004e3a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8004e3c:	18aa      	adds	r2, r5, r2
 8004e3e:	9208      	str	r2, [sp, #32]
 8004e40:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8004e42:	18aa      	adds	r2, r5, r2
 8004e44:	9209      	str	r2, [sp, #36]	@ 0x24
 8004e46:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8004e4a:	f10e 0204 	add.w	r2, lr, #4
 8004e4e:	920a      	str	r2, [sp, #40]	@ 0x28
 8004e50:	00c9      	lsls	r1, r1, #3
 8004e52:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8004e54:	310c      	adds	r1, #12
 8004e56:	00f6      	lsls	r6, r6, #3
 8004e58:	ea4f 00cc 	mov.w	r0, ip, lsl #3
 8004e5c:	9114      	str	r1, [sp, #80]	@ 0x50
 8004e5e:	18a9      	adds	r1, r5, r2
 8004e60:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004e62:	9612      	str	r6, [sp, #72]	@ 0x48
 8004e64:	00ff      	lsls	r7, r7, #3
 8004e66:	19ae      	adds	r6, r5, r6
 8004e68:	3008      	adds	r0, #8
 8004e6a:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8004e6e:	9606      	str	r6, [sp, #24]
 8004e70:	9019      	str	r0, [sp, #100]	@ 0x64
 8004e72:	18aa      	adds	r2, r5, r2
 8004e74:	0164      	lsls	r4, r4, #5
 8004e76:	19ee      	adds	r6, r5, r7
 8004e78:	f10c 000c 	add.w	r0, ip, #12
 8004e7c:	9713      	str	r7, [sp, #76]	@ 0x4c
 8004e7e:	9604      	str	r6, [sp, #16]
 8004e80:	9015      	str	r0, [sp, #84]	@ 0x54
 8004e82:	9103      	str	r1, [sp, #12]
 8004e84:	9205      	str	r2, [sp, #20]
 8004e86:	f104 0208 	add.w	r2, r4, #8
 8004e8a:	9218      	str	r2, [sp, #96]	@ 0x60
 8004e8c:	f04f 0801 	mov.w	r8, #1
 8004e90:	2200      	movs	r2, #0
 8004e92:	f102 0108 	add.w	r1, r2, #8
 8004e96:	460f      	mov	r7, r1
 8004e98:	910b      	str	r1, [sp, #44]	@ 0x2c
 8004e9a:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8004e9c:	188e      	adds	r6, r1, r2
 8004e9e:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8004ea0:	188d      	adds	r5, r1, r2
 8004ea2:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8004ea4:	188c      	adds	r4, r1, r2
 8004ea6:	9919      	ldr	r1, [sp, #100]	@ 0x64
 8004ea8:	1888      	adds	r0, r1, r2
 8004eaa:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8004eac:	eb01 0c02 	add.w	ip, r1, r2
 8004eb0:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8004eb2:	440a      	add	r2, r1
 8004eb4:	9903      	ldr	r1, [sp, #12]
 8004eb6:	edd1 fa00 	vldr	s31, [r1]
 8004eba:	9905      	ldr	r1, [sp, #20]
 8004ebc:	ed91 fa00 	vldr	s30, [r1]
 8004ec0:	9904      	ldr	r1, [sp, #16]
 8004ec2:	edd1 ea00 	vldr	s29, [r1]
 8004ec6:	9906      	ldr	r1, [sp, #24]
 8004ec8:	ed91 ea00 	vldr	s28, [r1]
 8004ecc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004ece:	edd1 da00 	vldr	s27, [r1]
 8004ed2:	9908      	ldr	r1, [sp, #32]
 8004ed4:	ed91 da00 	vldr	s26, [r1]
 8004ed8:	9907      	ldr	r1, [sp, #28]
 8004eda:	edd1 ca00 	vldr	s25, [r1]
 8004ede:	9903      	ldr	r1, [sp, #12]
 8004ee0:	ed91 ca01 	vldr	s24, [r1, #4]
 8004ee4:	9905      	ldr	r1, [sp, #20]
 8004ee6:	edd1 ba01 	vldr	s23, [r1, #4]
 8004eea:	9904      	ldr	r1, [sp, #16]
 8004eec:	edd1 aa01 	vldr	s21, [r1, #4]
 8004ef0:	9906      	ldr	r1, [sp, #24]
 8004ef2:	ed91 aa01 	vldr	s20, [r1, #4]
 8004ef6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004ef8:	edd1 7a01 	vldr	s15, [r1, #4]
 8004efc:	9908      	ldr	r1, [sp, #32]
 8004efe:	edcd 7a00 	vstr	s15, [sp]
 8004f02:	edd1 7a01 	vldr	s15, [r1, #4]
 8004f06:	9907      	ldr	r1, [sp, #28]
 8004f08:	edcd 7a01 	vstr	s15, [sp, #4]
 8004f0c:	edd1 7a01 	vldr	s15, [r1, #4]
 8004f10:	eb0a 0e07 	add.w	lr, sl, r7
 8004f14:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8004f16:	edcd 7a02 	vstr	s15, [sp, #8]
 8004f1a:	eb0c 010a 	add.w	r1, ip, sl
 8004f1e:	4456      	add	r6, sl
 8004f20:	4455      	add	r5, sl
 8004f22:	4454      	add	r4, sl
 8004f24:	4450      	add	r0, sl
 8004f26:	4452      	add	r2, sl
 8004f28:	46c4      	mov	ip, r8
 8004f2a:	e001      	b.n	8004f30 <arm_radix8_butterfly_f32+0x334>
 8004f2c:	3f3504f3 	.word	0x3f3504f3
 8004f30:	ed96 5a00 	vldr	s10, [r6]
 8004f34:	ed52 9a01 	vldr	s19, [r2, #-4]
 8004f38:	ed11 6a01 	vldr	s12, [r1, #-4]
 8004f3c:	edd0 7a00 	vldr	s15, [r0]
 8004f40:	ed17 7a01 	vldr	s14, [r7, #-4]
 8004f44:	edde 3a00 	vldr	s7, [lr]
 8004f48:	ed94 3a00 	vldr	s6, [r4]
 8004f4c:	ed95 2a00 	vldr	s4, [r5]
 8004f50:	ed9e 0a01 	vldr	s0, [lr, #4]
 8004f54:	ee33 8a85 	vadd.f32	s16, s7, s10
 8004f58:	ee32 1a06 	vadd.f32	s2, s4, s12
 8004f5c:	ee33 4a29 	vadd.f32	s8, s6, s19
 8004f60:	ee77 4a87 	vadd.f32	s9, s15, s14
 8004f64:	ee78 1a04 	vadd.f32	s3, s16, s8
 8004f68:	ee71 6a24 	vadd.f32	s13, s2, s9
 8004f6c:	ee32 2a46 	vsub.f32	s4, s4, s12
 8004f70:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8004f74:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004f78:	ed8e 6a00 	vstr	s12, [lr]
 8004f7c:	edd0 8a01 	vldr	s17, [r0, #4]
 8004f80:	ed95 9a01 	vldr	s18, [r5, #4]
 8004f84:	edd1 2a00 	vldr	s5, [r1]
 8004f88:	ed97 7a00 	vldr	s14, [r7]
 8004f8c:	edd4 0a01 	vldr	s1, [r4, #4]
 8004f90:	ed96 6a01 	vldr	s12, [r6, #4]
 8004f94:	edd2 5a00 	vldr	s11, [r2]
 8004f98:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8004f9c:	ee33 3a69 	vsub.f32	s6, s6, s19
 8004fa0:	ee39 5a62 	vsub.f32	s10, s18, s5
 8004fa4:	ee78 9ac7 	vsub.f32	s19, s17, s14
 8004fa8:	ee38 4a44 	vsub.f32	s8, s16, s8
 8004fac:	ee38 7a87 	vadd.f32	s14, s17, s14
 8004fb0:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8004fb4:	ee79 2a22 	vadd.f32	s5, s18, s5
 8004fb8:	ee75 8a69 	vsub.f32	s17, s10, s19
 8004fbc:	ee32 9a27 	vadd.f32	s18, s4, s15
 8004fc0:	ee35 5a29 	vadd.f32	s10, s10, s19
 8004fc4:	ee72 7a67 	vsub.f32	s15, s4, s15
 8004fc8:	ee30 2a06 	vadd.f32	s4, s0, s12
 8004fcc:	ee69 9a0b 	vmul.f32	s19, s18, s22
 8004fd0:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8004fd4:	ee32 9a08 	vadd.f32	s18, s4, s16
 8004fd8:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8004fdc:	ee32 2a48 	vsub.f32	s4, s4, s16
 8004fe0:	ee71 4a64 	vsub.f32	s9, s2, s9
 8004fe4:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8004fe8:	ee32 1a87 	vadd.f32	s2, s5, s14
 8004fec:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8004ff0:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8004ff4:	ee30 6a46 	vsub.f32	s12, s0, s12
 8004ff8:	ee73 0a29 	vadd.f32	s1, s6, s19
 8004ffc:	ee36 0a28 	vadd.f32	s0, s12, s17
 8005000:	ee33 3a69 	vsub.f32	s6, s6, s19
 8005004:	ee32 7a64 	vsub.f32	s14, s4, s9
 8005008:	ee73 9aa7 	vadd.f32	s19, s7, s15
 800500c:	ee36 6a68 	vsub.f32	s12, s12, s17
 8005010:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8005014:	ee75 8a85 	vadd.f32	s17, s11, s10
 8005018:	ee74 3a22 	vadd.f32	s7, s8, s5
 800501c:	ee35 5ac5 	vsub.f32	s10, s11, s10
 8005020:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8005024:	ee79 1a41 	vsub.f32	s3, s18, s2
 8005028:	ee39 8aa8 	vadd.f32	s16, s19, s17
 800502c:	ee76 5a43 	vsub.f32	s11, s12, s6
 8005030:	ee74 2a62 	vsub.f32	s5, s8, s5
 8005034:	ee72 4a24 	vadd.f32	s9, s4, s9
 8005038:	ee30 4a60 	vsub.f32	s8, s0, s1
 800503c:	ee79 8ae8 	vsub.f32	s17, s19, s17
 8005040:	ee30 0a20 	vadd.f32	s0, s0, s1
 8005044:	ee77 9a85 	vadd.f32	s19, s15, s10
 8005048:	ee36 6a03 	vadd.f32	s12, s12, s6
 800504c:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8005050:	ee2e 2a21 	vmul.f32	s4, s28, s3
 8005054:	ee2e 5a26 	vmul.f32	s10, s28, s13
 8005058:	ee6f 0a23 	vmul.f32	s1, s30, s7
 800505c:	ee2a 3a21 	vmul.f32	s6, s20, s3
 8005060:	ee39 1a01 	vadd.f32	s2, s18, s2
 8005064:	ee6a 6a26 	vmul.f32	s13, s20, s13
 8005068:	ee2b 9a87 	vmul.f32	s18, s23, s14
 800506c:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 8005070:	ee2f 7a07 	vmul.f32	s14, s30, s14
 8005074:	ee6f 1a84 	vmul.f32	s3, s31, s8
 8005078:	ee35 3a03 	vadd.f32	s6, s10, s6
 800507c:	ee72 6a66 	vsub.f32	s13, s4, s13
 8005080:	ee2c 5a04 	vmul.f32	s10, s24, s8
 8005084:	ee2f 2a88 	vmul.f32	s4, s31, s16
 8005088:	ed9d 4a02 	vldr	s8, [sp, #8]
 800508c:	ed8e 1a01 	vstr	s2, [lr, #4]
 8005090:	ee77 3a63 	vsub.f32	s7, s14, s7
 8005094:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8005098:	ed9d 7a01 	vldr	s14, [sp, #4]
 800509c:	ed86 3a00 	vstr	s6, [r6]
 80050a0:	ee30 9a89 	vadd.f32	s18, s1, s18
 80050a4:	ee32 2a05 	vadd.f32	s4, s4, s10
 80050a8:	ee6d 0a22 	vmul.f32	s1, s26, s5
 80050ac:	ee31 8ac8 	vsub.f32	s16, s3, s16
 80050b0:	ee67 2a22 	vmul.f32	s5, s14, s5
 80050b4:	ee64 1a00 	vmul.f32	s3, s8, s0
 80050b8:	ee27 7a24 	vmul.f32	s14, s14, s9
 80050bc:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 80050c0:	ee6d 4a24 	vmul.f32	s9, s26, s9
 80050c4:	ee64 8a28 	vmul.f32	s17, s8, s17
 80050c8:	ed9d 4a00 	vldr	s8, [sp]
 80050cc:	edc6 6a01 	vstr	s13, [r6, #4]
 80050d0:	ee74 2ae2 	vsub.f32	s5, s9, s5
 80050d4:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 80050d8:	ee64 9a29 	vmul.f32	s19, s8, s19
 80050dc:	ee24 4a25 	vmul.f32	s8, s8, s11
 80050e0:	ee30 7a87 	vadd.f32	s14, s1, s14
 80050e4:	ee74 4a84 	vadd.f32	s9, s9, s8
 80050e8:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 80050ec:	ee2a 4a86 	vmul.f32	s8, s21, s12
 80050f0:	ee2c 0a80 	vmul.f32	s0, s25, s0
 80050f4:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 80050f8:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 80050fc:	ee2e 6a86 	vmul.f32	s12, s29, s12
 8005100:	ee75 1a21 	vadd.f32	s3, s10, s3
 8005104:	ee30 0a68 	vsub.f32	s0, s0, s17
 8005108:	ee75 9ae9 	vsub.f32	s19, s11, s19
 800510c:	ee70 0a84 	vadd.f32	s1, s1, s8
 8005110:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005114:	44dc      	add	ip, fp
 8005116:	45e1      	cmp	r9, ip
 8005118:	ed84 9a00 	vstr	s18, [r4]
 800511c:	edc4 3a01 	vstr	s7, [r4, #4]
 8005120:	449e      	add	lr, r3
 8005122:	ed02 7a01 	vstr	s14, [r2, #-4]
 8005126:	edc2 2a00 	vstr	s5, [r2]
 800512a:	441e      	add	r6, r3
 800512c:	ed85 2a00 	vstr	s4, [r5]
 8005130:	ed85 8a01 	vstr	s16, [r5, #4]
 8005134:	441c      	add	r4, r3
 8005136:	ed47 1a01 	vstr	s3, [r7, #-4]
 800513a:	ed87 0a00 	vstr	s0, [r7]
 800513e:	441a      	add	r2, r3
 8005140:	ed41 4a01 	vstr	s9, [r1, #-4]
 8005144:	edc1 9a00 	vstr	s19, [r1]
 8005148:	441d      	add	r5, r3
 800514a:	edc0 0a00 	vstr	s1, [r0]
 800514e:	441f      	add	r7, r3
 8005150:	ed80 6a01 	vstr	s12, [r0, #4]
 8005154:	4419      	add	r1, r3
 8005156:	4418      	add	r0, r3
 8005158:	f63f aeea 	bhi.w	8004f30 <arm_radix8_butterfly_f32+0x334>
 800515c:	9a03      	ldr	r2, [sp, #12]
 800515e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005160:	440a      	add	r2, r1
 8005162:	9203      	str	r2, [sp, #12]
 8005164:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005166:	9a05      	ldr	r2, [sp, #20]
 8005168:	440a      	add	r2, r1
 800516a:	9205      	str	r2, [sp, #20]
 800516c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800516e:	9a04      	ldr	r2, [sp, #16]
 8005170:	440a      	add	r2, r1
 8005172:	9204      	str	r2, [sp, #16]
 8005174:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8005176:	9a06      	ldr	r2, [sp, #24]
 8005178:	440a      	add	r2, r1
 800517a:	9206      	str	r2, [sp, #24]
 800517c:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800517e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005180:	440a      	add	r2, r1
 8005182:	9209      	str	r2, [sp, #36]	@ 0x24
 8005184:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8005186:	9a08      	ldr	r2, [sp, #32]
 8005188:	440a      	add	r2, r1
 800518a:	9208      	str	r2, [sp, #32]
 800518c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800518e:	9a07      	ldr	r2, [sp, #28]
 8005190:	440a      	add	r2, r1
 8005192:	9207      	str	r2, [sp, #28]
 8005194:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8005196:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005198:	f108 0801 	add.w	r8, r8, #1
 800519c:	3208      	adds	r2, #8
 800519e:	4588      	cmp	r8, r1
 80051a0:	920a      	str	r2, [sp, #40]	@ 0x28
 80051a2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80051a4:	f47f ae75 	bne.w	8004e92 <arm_radix8_butterfly_f32+0x296>
 80051a8:	f8bd 3034 	ldrh.w	r3, [sp, #52]	@ 0x34
 80051ac:	9300      	str	r3, [sp, #0]
 80051ae:	46c3      	mov	fp, r8
 80051b0:	f8dd e06c 	ldr.w	lr, [sp, #108]	@ 0x6c
 80051b4:	e532      	b.n	8004c1c <arm_radix8_butterfly_f32+0x20>
 80051b6:	b01d      	add	sp, #116	@ 0x74
 80051b8:	ecbd 8b10 	vpop	{d8-d15}
 80051bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080051c0 <memset>:
 80051c0:	4402      	add	r2, r0
 80051c2:	4603      	mov	r3, r0
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d100      	bne.n	80051ca <memset+0xa>
 80051c8:	4770      	bx	lr
 80051ca:	f803 1b01 	strb.w	r1, [r3], #1
 80051ce:	e7f9      	b.n	80051c4 <memset+0x4>

080051d0 <__errno>:
 80051d0:	4b01      	ldr	r3, [pc, #4]	@ (80051d8 <__errno+0x8>)
 80051d2:	6818      	ldr	r0, [r3, #0]
 80051d4:	4770      	bx	lr
 80051d6:	bf00      	nop
 80051d8:	2000000c 	.word	0x2000000c

080051dc <__libc_init_array>:
 80051dc:	b570      	push	{r4, r5, r6, lr}
 80051de:	4d0d      	ldr	r5, [pc, #52]	@ (8005214 <__libc_init_array+0x38>)
 80051e0:	4c0d      	ldr	r4, [pc, #52]	@ (8005218 <__libc_init_array+0x3c>)
 80051e2:	1b64      	subs	r4, r4, r5
 80051e4:	10a4      	asrs	r4, r4, #2
 80051e6:	2600      	movs	r6, #0
 80051e8:	42a6      	cmp	r6, r4
 80051ea:	d109      	bne.n	8005200 <__libc_init_array+0x24>
 80051ec:	4d0b      	ldr	r5, [pc, #44]	@ (800521c <__libc_init_array+0x40>)
 80051ee:	4c0c      	ldr	r4, [pc, #48]	@ (8005220 <__libc_init_array+0x44>)
 80051f0:	f000 f83a 	bl	8005268 <_init>
 80051f4:	1b64      	subs	r4, r4, r5
 80051f6:	10a4      	asrs	r4, r4, #2
 80051f8:	2600      	movs	r6, #0
 80051fa:	42a6      	cmp	r6, r4
 80051fc:	d105      	bne.n	800520a <__libc_init_array+0x2e>
 80051fe:	bd70      	pop	{r4, r5, r6, pc}
 8005200:	f855 3b04 	ldr.w	r3, [r5], #4
 8005204:	4798      	blx	r3
 8005206:	3601      	adds	r6, #1
 8005208:	e7ee      	b.n	80051e8 <__libc_init_array+0xc>
 800520a:	f855 3b04 	ldr.w	r3, [r5], #4
 800520e:	4798      	blx	r3
 8005210:	3601      	adds	r6, #1
 8005212:	e7f2      	b.n	80051fa <__libc_init_array+0x1e>
 8005214:	080186f8 	.word	0x080186f8
 8005218:	080186f8 	.word	0x080186f8
 800521c:	080186f8 	.word	0x080186f8
 8005220:	080186fc 	.word	0x080186fc

08005224 <sqrtf>:
 8005224:	b508      	push	{r3, lr}
 8005226:	ed2d 8b02 	vpush	{d8}
 800522a:	eeb0 8a40 	vmov.f32	s16, s0
 800522e:	f000 f817 	bl	8005260 <__ieee754_sqrtf>
 8005232:	eeb4 8a48 	vcmp.f32	s16, s16
 8005236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800523a:	d60c      	bvs.n	8005256 <sqrtf+0x32>
 800523c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800525c <sqrtf+0x38>
 8005240:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8005244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005248:	d505      	bpl.n	8005256 <sqrtf+0x32>
 800524a:	f7ff ffc1 	bl	80051d0 <__errno>
 800524e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8005252:	2321      	movs	r3, #33	@ 0x21
 8005254:	6003      	str	r3, [r0, #0]
 8005256:	ecbd 8b02 	vpop	{d8}
 800525a:	bd08      	pop	{r3, pc}
 800525c:	00000000 	.word	0x00000000

08005260 <__ieee754_sqrtf>:
 8005260:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8005264:	4770      	bx	lr
	...

08005268 <_init>:
 8005268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800526a:	bf00      	nop
 800526c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800526e:	bc08      	pop	{r3}
 8005270:	469e      	mov	lr, r3
 8005272:	4770      	bx	lr

08005274 <_fini>:
 8005274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005276:	bf00      	nop
 8005278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800527a:	bc08      	pop	{r3}
 800527c:	469e      	mov	lr, r3
 800527e:	4770      	bx	lr
