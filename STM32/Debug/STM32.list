
STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007738  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013558  080078c8  080078c8  000088c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ae20  0801ae20  0001c070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801ae20  0801ae20  0001be20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ae28  0801ae28  0001c070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ae28  0801ae28  0001be28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801ae2c  0801ae2c  0001be2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  0801ae30  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001c070  2**0
                  CONTENTS
 10 .bss          00004f80  20000070  20000070  0001c070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004ff0  20004ff0  0001c070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001c070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f67b  00000000  00000000  0001c0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000261d  00000000  00000000  0002b71b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e00  00000000  00000000  0002dd38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a4b  00000000  00000000  0002eb38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023302  00000000  00000000  0002f583  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001056a  00000000  00000000  00052885  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d949d  00000000  00000000  00062def  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000b3  00000000  00000000  0013c28c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004348  00000000  00000000  0013c340  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  00140688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00002a79  00000000  00000000  001406eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00000060  00000000  00000000  00143164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080078b0 	.word	0x080078b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080078b0 	.word	0x080078b0

080001d0 <arm_bitreversal_32>:
 80001d0:	1c4b      	adds	r3, r1, #1
 80001d2:	2b01      	cmp	r3, #1
 80001d4:	bf98      	it	ls
 80001d6:	4770      	bxls	lr
 80001d8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001dc:	1c91      	adds	r1, r2, #2
 80001de:	089b      	lsrs	r3, r3, #2

080001e0 <arm_bitreversal_32_0>:
 80001e0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001e4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001e8:	880a      	ldrh	r2, [r1, #0]
 80001ea:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001ee:	4480      	add	r8, r0
 80001f0:	4481      	add	r9, r0
 80001f2:	4402      	add	r2, r0
 80001f4:	4484      	add	ip, r0
 80001f6:	f8d9 7000 	ldr.w	r7, [r9]
 80001fa:	f8d8 6000 	ldr.w	r6, [r8]
 80001fe:	6815      	ldr	r5, [r2, #0]
 8000200:	f8dc 4000 	ldr.w	r4, [ip]
 8000204:	f8c9 6000 	str.w	r6, [r9]
 8000208:	f8c8 7000 	str.w	r7, [r8]
 800020c:	f8cc 5000 	str.w	r5, [ip]
 8000210:	6014      	str	r4, [r2, #0]
 8000212:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000216:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800021a:	6855      	ldr	r5, [r2, #4]
 800021c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000220:	f8c9 6004 	str.w	r6, [r9, #4]
 8000224:	f8c8 7004 	str.w	r7, [r8, #4]
 8000228:	f8cc 5004 	str.w	r5, [ip, #4]
 800022c:	6054      	str	r4, [r2, #4]
 800022e:	3108      	adds	r1, #8
 8000230:	3b01      	subs	r3, #1
 8000232:	d1d5      	bne.n	80001e0 <arm_bitreversal_32_0>
 8000234:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000238:	4770      	bx	lr

0800023a <arm_bitreversal_16>:
 800023a:	1c4b      	adds	r3, r1, #1
 800023c:	2b01      	cmp	r3, #1
 800023e:	bf98      	it	ls
 8000240:	4770      	bxls	lr
 8000242:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000246:	1c91      	adds	r1, r2, #2
 8000248:	089b      	lsrs	r3, r3, #2

0800024a <arm_bitreversal_16_0>:
 800024a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800024e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000252:	880a      	ldrh	r2, [r1, #0]
 8000254:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000258:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800025c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000260:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000264:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000268:	f8d9 7000 	ldr.w	r7, [r9]
 800026c:	f8d8 6000 	ldr.w	r6, [r8]
 8000270:	6815      	ldr	r5, [r2, #0]
 8000272:	f8dc 4000 	ldr.w	r4, [ip]
 8000276:	f8c9 6000 	str.w	r6, [r9]
 800027a:	f8c8 7000 	str.w	r7, [r8]
 800027e:	f8cc 5000 	str.w	r5, [ip]
 8000282:	6014      	str	r4, [r2, #0]
 8000284:	3108      	adds	r1, #8
 8000286:	3b01      	subs	r3, #1
 8000288:	d1df      	bne.n	800024a <arm_bitreversal_16_0>
 800028a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800028e:	4770      	bx	lr

08000290 <memchr>:
 8000290:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000294:	2a10      	cmp	r2, #16
 8000296:	db2b      	blt.n	80002f0 <memchr+0x60>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	d008      	beq.n	80002b0 <memchr+0x20>
 800029e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a2:	3a01      	subs	r2, #1
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d02d      	beq.n	8000304 <memchr+0x74>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	b342      	cbz	r2, 8000300 <memchr+0x70>
 80002ae:	d1f6      	bne.n	800029e <memchr+0xe>
 80002b0:	b4f0      	push	{r4, r5, r6, r7}
 80002b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ba:	f022 0407 	bic.w	r4, r2, #7
 80002be:	f07f 0700 	mvns.w	r7, #0
 80002c2:	2300      	movs	r3, #0
 80002c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002c8:	3c08      	subs	r4, #8
 80002ca:	ea85 0501 	eor.w	r5, r5, r1
 80002ce:	ea86 0601 	eor.w	r6, r6, r1
 80002d2:	fa85 f547 	uadd8	r5, r5, r7
 80002d6:	faa3 f587 	sel	r5, r3, r7
 80002da:	fa86 f647 	uadd8	r6, r6, r7
 80002de:	faa5 f687 	sel	r6, r5, r7
 80002e2:	b98e      	cbnz	r6, 8000308 <memchr+0x78>
 80002e4:	d1ee      	bne.n	80002c4 <memchr+0x34>
 80002e6:	bcf0      	pop	{r4, r5, r6, r7}
 80002e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ec:	f002 0207 	and.w	r2, r2, #7
 80002f0:	b132      	cbz	r2, 8000300 <memchr+0x70>
 80002f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f6:	3a01      	subs	r2, #1
 80002f8:	ea83 0301 	eor.w	r3, r3, r1
 80002fc:	b113      	cbz	r3, 8000304 <memchr+0x74>
 80002fe:	d1f8      	bne.n	80002f2 <memchr+0x62>
 8000300:	2000      	movs	r0, #0
 8000302:	4770      	bx	lr
 8000304:	3801      	subs	r0, #1
 8000306:	4770      	bx	lr
 8000308:	2d00      	cmp	r5, #0
 800030a:	bf06      	itte	eq
 800030c:	4635      	moveq	r5, r6
 800030e:	3803      	subeq	r0, #3
 8000310:	3807      	subne	r0, #7
 8000312:	f015 0f01 	tst.w	r5, #1
 8000316:	d107      	bne.n	8000328 <memchr+0x98>
 8000318:	3001      	adds	r0, #1
 800031a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800031e:	bf02      	ittt	eq
 8000320:	3001      	addeq	r0, #1
 8000322:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000326:	3001      	addeq	r0, #1
 8000328:	bcf0      	pop	{r4, r5, r6, r7}
 800032a:	3801      	subs	r0, #1
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop

08000330 <__aeabi_uldivmod>:
 8000330:	b953      	cbnz	r3, 8000348 <__aeabi_uldivmod+0x18>
 8000332:	b94a      	cbnz	r2, 8000348 <__aeabi_uldivmod+0x18>
 8000334:	2900      	cmp	r1, #0
 8000336:	bf08      	it	eq
 8000338:	2800      	cmpeq	r0, #0
 800033a:	bf1c      	itt	ne
 800033c:	f04f 31ff 	movne.w	r1, #4294967295
 8000340:	f04f 30ff 	movne.w	r0, #4294967295
 8000344:	f000 b988 	b.w	8000658 <__aeabi_idiv0>
 8000348:	f1ad 0c08 	sub.w	ip, sp, #8
 800034c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000350:	f000 f806 	bl	8000360 <__udivmoddi4>
 8000354:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000358:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800035c:	b004      	add	sp, #16
 800035e:	4770      	bx	lr

08000360 <__udivmoddi4>:
 8000360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000364:	9d08      	ldr	r5, [sp, #32]
 8000366:	468e      	mov	lr, r1
 8000368:	4604      	mov	r4, r0
 800036a:	4688      	mov	r8, r1
 800036c:	2b00      	cmp	r3, #0
 800036e:	d14a      	bne.n	8000406 <__udivmoddi4+0xa6>
 8000370:	428a      	cmp	r2, r1
 8000372:	4617      	mov	r7, r2
 8000374:	d962      	bls.n	800043c <__udivmoddi4+0xdc>
 8000376:	fab2 f682 	clz	r6, r2
 800037a:	b14e      	cbz	r6, 8000390 <__udivmoddi4+0x30>
 800037c:	f1c6 0320 	rsb	r3, r6, #32
 8000380:	fa01 f806 	lsl.w	r8, r1, r6
 8000384:	fa20 f303 	lsr.w	r3, r0, r3
 8000388:	40b7      	lsls	r7, r6
 800038a:	ea43 0808 	orr.w	r8, r3, r8
 800038e:	40b4      	lsls	r4, r6
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fbb8 f1fe 	udiv	r1, r8, lr
 800039c:	0c23      	lsrs	r3, r4, #16
 800039e:	fb0e 8811 	mls	r8, lr, r1, r8
 80003a2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003a6:	fb01 f20c 	mul.w	r2, r1, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0x62>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f101 30ff 	add.w	r0, r1, #4294967295
 80003b4:	f080 80ea 	bcs.w	800058c <__udivmoddi4+0x22c>
 80003b8:	429a      	cmp	r2, r3
 80003ba:	f240 80e7 	bls.w	800058c <__udivmoddi4+0x22c>
 80003be:	3902      	subs	r1, #2
 80003c0:	443b      	add	r3, r7
 80003c2:	1a9a      	subs	r2, r3, r2
 80003c4:	b2a3      	uxth	r3, r4
 80003c6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003ca:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003d2:	fb00 fc0c 	mul.w	ip, r0, ip
 80003d6:	459c      	cmp	ip, r3
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x8e>
 80003da:	18fb      	adds	r3, r7, r3
 80003dc:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e0:	f080 80d6 	bcs.w	8000590 <__udivmoddi4+0x230>
 80003e4:	459c      	cmp	ip, r3
 80003e6:	f240 80d3 	bls.w	8000590 <__udivmoddi4+0x230>
 80003ea:	443b      	add	r3, r7
 80003ec:	3802      	subs	r0, #2
 80003ee:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003f2:	eba3 030c 	sub.w	r3, r3, ip
 80003f6:	2100      	movs	r1, #0
 80003f8:	b11d      	cbz	r5, 8000402 <__udivmoddi4+0xa2>
 80003fa:	40f3      	lsrs	r3, r6
 80003fc:	2200      	movs	r2, #0
 80003fe:	e9c5 3200 	strd	r3, r2, [r5]
 8000402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000406:	428b      	cmp	r3, r1
 8000408:	d905      	bls.n	8000416 <__udivmoddi4+0xb6>
 800040a:	b10d      	cbz	r5, 8000410 <__udivmoddi4+0xb0>
 800040c:	e9c5 0100 	strd	r0, r1, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	4608      	mov	r0, r1
 8000414:	e7f5      	b.n	8000402 <__udivmoddi4+0xa2>
 8000416:	fab3 f183 	clz	r1, r3
 800041a:	2900      	cmp	r1, #0
 800041c:	d146      	bne.n	80004ac <__udivmoddi4+0x14c>
 800041e:	4573      	cmp	r3, lr
 8000420:	d302      	bcc.n	8000428 <__udivmoddi4+0xc8>
 8000422:	4282      	cmp	r2, r0
 8000424:	f200 8105 	bhi.w	8000632 <__udivmoddi4+0x2d2>
 8000428:	1a84      	subs	r4, r0, r2
 800042a:	eb6e 0203 	sbc.w	r2, lr, r3
 800042e:	2001      	movs	r0, #1
 8000430:	4690      	mov	r8, r2
 8000432:	2d00      	cmp	r5, #0
 8000434:	d0e5      	beq.n	8000402 <__udivmoddi4+0xa2>
 8000436:	e9c5 4800 	strd	r4, r8, [r5]
 800043a:	e7e2      	b.n	8000402 <__udivmoddi4+0xa2>
 800043c:	2a00      	cmp	r2, #0
 800043e:	f000 8090 	beq.w	8000562 <__udivmoddi4+0x202>
 8000442:	fab2 f682 	clz	r6, r2
 8000446:	2e00      	cmp	r6, #0
 8000448:	f040 80a4 	bne.w	8000594 <__udivmoddi4+0x234>
 800044c:	1a8a      	subs	r2, r1, r2
 800044e:	0c03      	lsrs	r3, r0, #16
 8000450:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000454:	b280      	uxth	r0, r0
 8000456:	b2bc      	uxth	r4, r7
 8000458:	2101      	movs	r1, #1
 800045a:	fbb2 fcfe 	udiv	ip, r2, lr
 800045e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000462:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000466:	fb04 f20c 	mul.w	r2, r4, ip
 800046a:	429a      	cmp	r2, r3
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x11e>
 800046e:	18fb      	adds	r3, r7, r3
 8000470:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000474:	d202      	bcs.n	800047c <__udivmoddi4+0x11c>
 8000476:	429a      	cmp	r2, r3
 8000478:	f200 80e0 	bhi.w	800063c <__udivmoddi4+0x2dc>
 800047c:	46c4      	mov	ip, r8
 800047e:	1a9b      	subs	r3, r3, r2
 8000480:	fbb3 f2fe 	udiv	r2, r3, lr
 8000484:	fb0e 3312 	mls	r3, lr, r2, r3
 8000488:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800048c:	fb02 f404 	mul.w	r4, r2, r4
 8000490:	429c      	cmp	r4, r3
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x144>
 8000494:	18fb      	adds	r3, r7, r3
 8000496:	f102 30ff 	add.w	r0, r2, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0x142>
 800049c:	429c      	cmp	r4, r3
 800049e:	f200 80ca 	bhi.w	8000636 <__udivmoddi4+0x2d6>
 80004a2:	4602      	mov	r2, r0
 80004a4:	1b1b      	subs	r3, r3, r4
 80004a6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004aa:	e7a5      	b.n	80003f8 <__udivmoddi4+0x98>
 80004ac:	f1c1 0620 	rsb	r6, r1, #32
 80004b0:	408b      	lsls	r3, r1
 80004b2:	fa22 f706 	lsr.w	r7, r2, r6
 80004b6:	431f      	orrs	r7, r3
 80004b8:	fa0e f401 	lsl.w	r4, lr, r1
 80004bc:	fa20 f306 	lsr.w	r3, r0, r6
 80004c0:	fa2e fe06 	lsr.w	lr, lr, r6
 80004c4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80004c8:	4323      	orrs	r3, r4
 80004ca:	fa00 f801 	lsl.w	r8, r0, r1
 80004ce:	fa1f fc87 	uxth.w	ip, r7
 80004d2:	fbbe f0f9 	udiv	r0, lr, r9
 80004d6:	0c1c      	lsrs	r4, r3, #16
 80004d8:	fb09 ee10 	mls	lr, r9, r0, lr
 80004dc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004e0:	fb00 fe0c 	mul.w	lr, r0, ip
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ea:	d909      	bls.n	8000500 <__udivmoddi4+0x1a0>
 80004ec:	193c      	adds	r4, r7, r4
 80004ee:	f100 3aff 	add.w	sl, r0, #4294967295
 80004f2:	f080 809c 	bcs.w	800062e <__udivmoddi4+0x2ce>
 80004f6:	45a6      	cmp	lr, r4
 80004f8:	f240 8099 	bls.w	800062e <__udivmoddi4+0x2ce>
 80004fc:	3802      	subs	r0, #2
 80004fe:	443c      	add	r4, r7
 8000500:	eba4 040e 	sub.w	r4, r4, lr
 8000504:	fa1f fe83 	uxth.w	lr, r3
 8000508:	fbb4 f3f9 	udiv	r3, r4, r9
 800050c:	fb09 4413 	mls	r4, r9, r3, r4
 8000510:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000514:	fb03 fc0c 	mul.w	ip, r3, ip
 8000518:	45a4      	cmp	ip, r4
 800051a:	d908      	bls.n	800052e <__udivmoddi4+0x1ce>
 800051c:	193c      	adds	r4, r7, r4
 800051e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000522:	f080 8082 	bcs.w	800062a <__udivmoddi4+0x2ca>
 8000526:	45a4      	cmp	ip, r4
 8000528:	d97f      	bls.n	800062a <__udivmoddi4+0x2ca>
 800052a:	3b02      	subs	r3, #2
 800052c:	443c      	add	r4, r7
 800052e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000532:	eba4 040c 	sub.w	r4, r4, ip
 8000536:	fba0 ec02 	umull	lr, ip, r0, r2
 800053a:	4564      	cmp	r4, ip
 800053c:	4673      	mov	r3, lr
 800053e:	46e1      	mov	r9, ip
 8000540:	d362      	bcc.n	8000608 <__udivmoddi4+0x2a8>
 8000542:	d05f      	beq.n	8000604 <__udivmoddi4+0x2a4>
 8000544:	b15d      	cbz	r5, 800055e <__udivmoddi4+0x1fe>
 8000546:	ebb8 0203 	subs.w	r2, r8, r3
 800054a:	eb64 0409 	sbc.w	r4, r4, r9
 800054e:	fa04 f606 	lsl.w	r6, r4, r6
 8000552:	fa22 f301 	lsr.w	r3, r2, r1
 8000556:	431e      	orrs	r6, r3
 8000558:	40cc      	lsrs	r4, r1
 800055a:	e9c5 6400 	strd	r6, r4, [r5]
 800055e:	2100      	movs	r1, #0
 8000560:	e74f      	b.n	8000402 <__udivmoddi4+0xa2>
 8000562:	fbb1 fcf2 	udiv	ip, r1, r2
 8000566:	0c01      	lsrs	r1, r0, #16
 8000568:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800056c:	b280      	uxth	r0, r0
 800056e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000572:	463b      	mov	r3, r7
 8000574:	4638      	mov	r0, r7
 8000576:	463c      	mov	r4, r7
 8000578:	46b8      	mov	r8, r7
 800057a:	46be      	mov	lr, r7
 800057c:	2620      	movs	r6, #32
 800057e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000582:	eba2 0208 	sub.w	r2, r2, r8
 8000586:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800058a:	e766      	b.n	800045a <__udivmoddi4+0xfa>
 800058c:	4601      	mov	r1, r0
 800058e:	e718      	b.n	80003c2 <__udivmoddi4+0x62>
 8000590:	4610      	mov	r0, r2
 8000592:	e72c      	b.n	80003ee <__udivmoddi4+0x8e>
 8000594:	f1c6 0220 	rsb	r2, r6, #32
 8000598:	fa2e f302 	lsr.w	r3, lr, r2
 800059c:	40b7      	lsls	r7, r6
 800059e:	40b1      	lsls	r1, r6
 80005a0:	fa20 f202 	lsr.w	r2, r0, r2
 80005a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005a8:	430a      	orrs	r2, r1
 80005aa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005ae:	b2bc      	uxth	r4, r7
 80005b0:	fb0e 3318 	mls	r3, lr, r8, r3
 80005b4:	0c11      	lsrs	r1, r2, #16
 80005b6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ba:	fb08 f904 	mul.w	r9, r8, r4
 80005be:	40b0      	lsls	r0, r6
 80005c0:	4589      	cmp	r9, r1
 80005c2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80005c6:	b280      	uxth	r0, r0
 80005c8:	d93e      	bls.n	8000648 <__udivmoddi4+0x2e8>
 80005ca:	1879      	adds	r1, r7, r1
 80005cc:	f108 3cff 	add.w	ip, r8, #4294967295
 80005d0:	d201      	bcs.n	80005d6 <__udivmoddi4+0x276>
 80005d2:	4589      	cmp	r9, r1
 80005d4:	d81f      	bhi.n	8000616 <__udivmoddi4+0x2b6>
 80005d6:	eba1 0109 	sub.w	r1, r1, r9
 80005da:	fbb1 f9fe 	udiv	r9, r1, lr
 80005de:	fb09 f804 	mul.w	r8, r9, r4
 80005e2:	fb0e 1119 	mls	r1, lr, r9, r1
 80005e6:	b292      	uxth	r2, r2
 80005e8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005ec:	4542      	cmp	r2, r8
 80005ee:	d229      	bcs.n	8000644 <__udivmoddi4+0x2e4>
 80005f0:	18ba      	adds	r2, r7, r2
 80005f2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005f6:	d2c4      	bcs.n	8000582 <__udivmoddi4+0x222>
 80005f8:	4542      	cmp	r2, r8
 80005fa:	d2c2      	bcs.n	8000582 <__udivmoddi4+0x222>
 80005fc:	f1a9 0102 	sub.w	r1, r9, #2
 8000600:	443a      	add	r2, r7
 8000602:	e7be      	b.n	8000582 <__udivmoddi4+0x222>
 8000604:	45f0      	cmp	r8, lr
 8000606:	d29d      	bcs.n	8000544 <__udivmoddi4+0x1e4>
 8000608:	ebbe 0302 	subs.w	r3, lr, r2
 800060c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000610:	3801      	subs	r0, #1
 8000612:	46e1      	mov	r9, ip
 8000614:	e796      	b.n	8000544 <__udivmoddi4+0x1e4>
 8000616:	eba7 0909 	sub.w	r9, r7, r9
 800061a:	4449      	add	r1, r9
 800061c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000620:	fbb1 f9fe 	udiv	r9, r1, lr
 8000624:	fb09 f804 	mul.w	r8, r9, r4
 8000628:	e7db      	b.n	80005e2 <__udivmoddi4+0x282>
 800062a:	4673      	mov	r3, lr
 800062c:	e77f      	b.n	800052e <__udivmoddi4+0x1ce>
 800062e:	4650      	mov	r0, sl
 8000630:	e766      	b.n	8000500 <__udivmoddi4+0x1a0>
 8000632:	4608      	mov	r0, r1
 8000634:	e6fd      	b.n	8000432 <__udivmoddi4+0xd2>
 8000636:	443b      	add	r3, r7
 8000638:	3a02      	subs	r2, #2
 800063a:	e733      	b.n	80004a4 <__udivmoddi4+0x144>
 800063c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000640:	443b      	add	r3, r7
 8000642:	e71c      	b.n	800047e <__udivmoddi4+0x11e>
 8000644:	4649      	mov	r1, r9
 8000646:	e79c      	b.n	8000582 <__udivmoddi4+0x222>
 8000648:	eba1 0109 	sub.w	r1, r1, r9
 800064c:	46c4      	mov	ip, r8
 800064e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000652:	fb09 f804 	mul.w	r8, r9, r4
 8000656:	e7c4      	b.n	80005e2 <__udivmoddi4+0x282>

08000658 <__aeabi_idiv0>:
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop

0800065c <record_sample_and_maybe_runFFT>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void record_sample_and_maybe_runFFT(void) {
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
    // Convert raw 12‐bit ADC (0..4095) to float in [-1,+1], after centering around middle_point
	uint16_t raw_adc = HAL_ADC_GetValue(&hadc1);
 8000662:	481b      	ldr	r0, [pc, #108]	@ (80006d0 <record_sample_and_maybe_runFFT+0x74>)
 8000664:	f002 f852 	bl	800270c <HAL_ADC_GetValue>
 8000668:	4603      	mov	r3, r0
 800066a:	80fb      	strh	r3, [r7, #6]

    float centered = ((float)(raw_adc - (uint16_t)(middle_point))) * UINT16_TO_FLOAT;
 800066c:	88fb      	ldrh	r3, [r7, #6]
 800066e:	4a19      	ldr	r2, [pc, #100]	@ (80006d4 <record_sample_and_maybe_runFFT+0x78>)
 8000670:	6812      	ldr	r2, [r2, #0]
 8000672:	b292      	uxth	r2, r2
 8000674:	1a9b      	subs	r3, r3, r2
 8000676:	ee07 3a90 	vmov	s15, r3
 800067a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800067e:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80006d8 <record_sample_and_maybe_runFFT+0x7c>
 8000682:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000686:	edc7 7a00 	vstr	s15, [r7]
    fftBufIn[fftIndex] = centered;
 800068a:	4b14      	ldr	r3, [pc, #80]	@ (80006dc <record_sample_and_maybe_runFFT+0x80>)
 800068c:	881b      	ldrh	r3, [r3, #0]
 800068e:	4a14      	ldr	r2, [pc, #80]	@ (80006e0 <record_sample_and_maybe_runFFT+0x84>)
 8000690:	009b      	lsls	r3, r3, #2
 8000692:	4413      	add	r3, r2
 8000694:	683a      	ldr	r2, [r7, #0]
 8000696:	601a      	str	r2, [r3, #0]
    fftIndex++;
 8000698:	4b10      	ldr	r3, [pc, #64]	@ (80006dc <record_sample_and_maybe_runFFT+0x80>)
 800069a:	881b      	ldrh	r3, [r3, #0]
 800069c:	3301      	adds	r3, #1
 800069e:	b29a      	uxth	r2, r3
 80006a0:	4b0e      	ldr	r3, [pc, #56]	@ (80006dc <record_sample_and_maybe_runFFT+0x80>)
 80006a2:	801a      	strh	r2, [r3, #0]

    if (fftIndex >= FFT_BUFFER_SIZE) {
 80006a4:	4b0d      	ldr	r3, [pc, #52]	@ (80006dc <record_sample_and_maybe_runFFT+0x80>)
 80006a6:	881b      	ldrh	r3, [r3, #0]
 80006a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80006ac:	d30b      	bcc.n	80006c6 <record_sample_and_maybe_runFFT+0x6a>
        // Run the RFFT in place: fftBufIn → fftBufOut
        arm_rfft_fast_f32(&fftHandler, fftBufIn, fftBufOut, 0);
 80006ae:	2300      	movs	r3, #0
 80006b0:	4a0c      	ldr	r2, [pc, #48]	@ (80006e4 <record_sample_and_maybe_runFFT+0x88>)
 80006b2:	490b      	ldr	r1, [pc, #44]	@ (80006e0 <record_sample_and_maybe_runFFT+0x84>)
 80006b4:	480c      	ldr	r0, [pc, #48]	@ (80006e8 <record_sample_and_maybe_runFFT+0x8c>)
 80006b6:	f005 f8dd 	bl	8005874 <arm_rfft_fast_f32>

        fftReady = 1;
 80006ba:	4b0c      	ldr	r3, [pc, #48]	@ (80006ec <record_sample_and_maybe_runFFT+0x90>)
 80006bc:	2201      	movs	r2, #1
 80006be:	701a      	strb	r2, [r3, #0]
        fftIndex = 0; // reset buffer index to record next block
 80006c0:	4b06      	ldr	r3, [pc, #24]	@ (80006dc <record_sample_and_maybe_runFFT+0x80>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	801a      	strh	r2, [r3, #0]
    }
}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	2000008c 	.word	0x2000008c
 80006d4:	20000e00 	.word	0x20000e00
 80006d8:	37800001 	.word	0x37800001
 80006dc:	20004e20 	.word	0x20004e20
 80006e0:	20000e20 	.word	0x20000e20
 80006e4:	20002e20 	.word	0x20002e20
 80006e8:	20000e08 	.word	0x20000e08
 80006ec:	20004e22 	.word	0x20004e22

080006f0 <HAL_TIM_PWM_PulseFinishedCallback>:


void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
    if (htim == &htim1) {
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	4a07      	ldr	r2, [pc, #28]	@ (8000718 <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 80006fc:	4293      	cmp	r3, r2
 80006fe:	d106      	bne.n	800070e <HAL_TIM_PWM_PulseFinishedCallback+0x1e>
        HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8000700:	2100      	movs	r1, #0
 8000702:	4805      	ldr	r0, [pc, #20]	@ (8000718 <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 8000704:	f003 ffe2 	bl	80046cc <HAL_TIM_PWM_Stop_DMA>
        datasentflag = 1;
 8000708:	4b04      	ldr	r3, [pc, #16]	@ (800071c <HAL_TIM_PWM_PulseFinishedCallback+0x2c>)
 800070a:	2201      	movs	r2, #1
 800070c:	601a      	str	r2, [r3, #0]
    }
}
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	200000d4 	.word	0x200000d4
 800071c:	20000378 	.word	0x20000378

08000720 <Set_LED>:


void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 8000720:	b480      	push	{r7}
 8000722:	b085      	sub	sp, #20
 8000724:	af00      	add	r7, sp, #0
 8000726:	60f8      	str	r0, [r7, #12]
 8000728:	60b9      	str	r1, [r7, #8]
 800072a:	607a      	str	r2, [r7, #4]
 800072c:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	b2d9      	uxtb	r1, r3
 8000732:	4a11      	ldr	r2, [pc, #68]	@ (8000778 <Set_LED+0x58>)
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	b2d9      	uxtb	r1, r3
 800073e:	4a0e      	ldr	r2, [pc, #56]	@ (8000778 <Set_LED+0x58>)
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	009b      	lsls	r3, r3, #2
 8000744:	4413      	add	r3, r2
 8000746:	460a      	mov	r2, r1
 8000748:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	b2d9      	uxtb	r1, r3
 800074e:	4a0a      	ldr	r2, [pc, #40]	@ (8000778 <Set_LED+0x58>)
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	009b      	lsls	r3, r3, #2
 8000754:	4413      	add	r3, r2
 8000756:	460a      	mov	r2, r1
 8000758:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	b2d9      	uxtb	r1, r3
 800075e:	4a06      	ldr	r2, [pc, #24]	@ (8000778 <Set_LED+0x58>)
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	009b      	lsls	r3, r3, #2
 8000764:	4413      	add	r3, r2
 8000766:	460a      	mov	r2, r1
 8000768:	70da      	strb	r2, [r3, #3]
}
 800076a:	bf00      	nop
 800076c:	3714      	adds	r7, #20
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	200001c8 	.word	0x200001c8

0800077c <Set_Brightness>:

void Set_Brightness (int brightness)  // 0–NORMAL_BRIGHTNESS
{
 800077c:	b480      	push	{r7}
 800077e:	b085      	sub	sp, #20
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS
    if (brightness > NORMAL_BRIGHTNESS) brightness = NORMAL_BRIGHTNESS;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2b19      	cmp	r3, #25
 8000788:	dd01      	ble.n	800078e <Set_Brightness+0x12>
 800078a:	2319      	movs	r3, #25
 800078c:	607b      	str	r3, [r7, #4]
    float scale = brightness / (float)NORMAL_BRIGHTNESS;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	ee07 3a90 	vmov	s15, r3
 8000794:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000798:	eef3 6a09 	vmov.f32	s13, #57	@ 0x41c80000  25.0
 800079c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80007a0:	edc7 7a02 	vstr	s15, [r7, #8]

    for (int i = 0; i < MAX_LED; i++)
 80007a4:	2300      	movs	r3, #0
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	e055      	b.n	8000856 <Set_Brightness+0xda>
    {
        // preserve the “LED number” byte
        LED_Mod[i][0] = LED_Data[i][0];
 80007aa:	4a30      	ldr	r2, [pc, #192]	@ (800086c <Set_Brightness+0xf0>)
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 80007b2:	4a2f      	ldr	r2, [pc, #188]	@ (8000870 <Set_Brightness+0xf4>)
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
        // scale each color channel linearly
        LED_Mod[i][1] = (uint8_t)(LED_Data[i][1] * scale);
 80007ba:	4a2c      	ldr	r2, [pc, #176]	@ (800086c <Set_Brightness+0xf0>)
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	009b      	lsls	r3, r3, #2
 80007c0:	4413      	add	r3, r2
 80007c2:	785b      	ldrb	r3, [r3, #1]
 80007c4:	ee07 3a90 	vmov	s15, r3
 80007c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80007d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007d8:	edc7 7a00 	vstr	s15, [r7]
 80007dc:	783b      	ldrb	r3, [r7, #0]
 80007de:	b2d9      	uxtb	r1, r3
 80007e0:	4a23      	ldr	r2, [pc, #140]	@ (8000870 <Set_Brightness+0xf4>)
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	009b      	lsls	r3, r3, #2
 80007e6:	4413      	add	r3, r2
 80007e8:	460a      	mov	r2, r1
 80007ea:	705a      	strb	r2, [r3, #1]
        LED_Mod[i][2] = (uint8_t)(LED_Data[i][2] * scale);
 80007ec:	4a1f      	ldr	r2, [pc, #124]	@ (800086c <Set_Brightness+0xf0>)
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	009b      	lsls	r3, r3, #2
 80007f2:	4413      	add	r3, r2
 80007f4:	789b      	ldrb	r3, [r3, #2]
 80007f6:	ee07 3a90 	vmov	s15, r3
 80007fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8000802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000806:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800080a:	edc7 7a00 	vstr	s15, [r7]
 800080e:	783b      	ldrb	r3, [r7, #0]
 8000810:	b2d9      	uxtb	r1, r3
 8000812:	4a17      	ldr	r2, [pc, #92]	@ (8000870 <Set_Brightness+0xf4>)
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	009b      	lsls	r3, r3, #2
 8000818:	4413      	add	r3, r2
 800081a:	460a      	mov	r2, r1
 800081c:	709a      	strb	r2, [r3, #2]
        LED_Mod[i][3] = (uint8_t)(LED_Data[i][3] * scale);
 800081e:	4a13      	ldr	r2, [pc, #76]	@ (800086c <Set_Brightness+0xf0>)
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	4413      	add	r3, r2
 8000826:	78db      	ldrb	r3, [r3, #3]
 8000828:	ee07 3a90 	vmov	s15, r3
 800082c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000830:	edd7 7a02 	vldr	s15, [r7, #8]
 8000834:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000838:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800083c:	edc7 7a00 	vstr	s15, [r7]
 8000840:	783b      	ldrb	r3, [r7, #0]
 8000842:	b2d9      	uxtb	r1, r3
 8000844:	4a0a      	ldr	r2, [pc, #40]	@ (8000870 <Set_Brightness+0xf4>)
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	009b      	lsls	r3, r3, #2
 800084a:	4413      	add	r3, r2
 800084c:	460a      	mov	r2, r1
 800084e:	70da      	strb	r2, [r3, #3]
    for (int i = 0; i < MAX_LED; i++)
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	3301      	adds	r3, #1
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	2b35      	cmp	r3, #53	@ 0x35
 800085a:	dda6      	ble.n	80007aa <Set_Brightness+0x2e>
    }
#endif
}
 800085c:	bf00      	nop
 800085e:	bf00      	nop
 8000860:	3714      	adds	r7, #20
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	200001c8 	.word	0x200001c8
 8000870:	200002a0 	.word	0x200002a0

08000874 <WS2812_Send>:

void WS2812_Send (void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b086      	sub	sp, #24
 8000878:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 800087a:	2300      	movs	r3, #0
 800087c:	617b      	str	r3, [r7, #20]
	uint32_t color;


	for (int i= 0; i<MAX_LED; i++)
 800087e:	2300      	movs	r3, #0
 8000880:	613b      	str	r3, [r7, #16]
 8000882:	e036      	b.n	80008f2 <WS2812_Send+0x7e>
	{
#if USE_BRIGHTNESS
		color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
 8000884:	4a2e      	ldr	r2, [pc, #184]	@ (8000940 <WS2812_Send+0xcc>)
 8000886:	693b      	ldr	r3, [r7, #16]
 8000888:	009b      	lsls	r3, r3, #2
 800088a:	4413      	add	r3, r2
 800088c:	785b      	ldrb	r3, [r3, #1]
 800088e:	041a      	lsls	r2, r3, #16
 8000890:	492b      	ldr	r1, [pc, #172]	@ (8000940 <WS2812_Send+0xcc>)
 8000892:	693b      	ldr	r3, [r7, #16]
 8000894:	009b      	lsls	r3, r3, #2
 8000896:	440b      	add	r3, r1
 8000898:	789b      	ldrb	r3, [r3, #2]
 800089a:	021b      	lsls	r3, r3, #8
 800089c:	431a      	orrs	r2, r3
 800089e:	4928      	ldr	r1, [pc, #160]	@ (8000940 <WS2812_Send+0xcc>)
 80008a0:	693b      	ldr	r3, [r7, #16]
 80008a2:	009b      	lsls	r3, r3, #2
 80008a4:	440b      	add	r3, r1
 80008a6:	78db      	ldrb	r3, [r3, #3]
 80008a8:	4313      	orrs	r3, r2
 80008aa:	607b      	str	r3, [r7, #4]
#else
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
#endif

		for (int i=23; i>=0; i--)
 80008ac:	2317      	movs	r3, #23
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	e019      	b.n	80008e6 <WS2812_Send+0x72>
		{
			if (color&(1<<i))
 80008b2:	2201      	movs	r2, #1
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ba:	461a      	mov	r2, r3
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	4013      	ands	r3, r2
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d005      	beq.n	80008d0 <WS2812_Send+0x5c>
			{
				pwmData[indx] = 60;  // 2/3 of 90
 80008c4:	4a1f      	ldr	r2, [pc, #124]	@ (8000944 <WS2812_Send+0xd0>)
 80008c6:	697b      	ldr	r3, [r7, #20]
 80008c8:	213c      	movs	r1, #60	@ 0x3c
 80008ca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80008ce:	e004      	b.n	80008da <WS2812_Send+0x66>
			}

			else pwmData[indx] = 30;  // 1/3 of 90
 80008d0:	4a1c      	ldr	r2, [pc, #112]	@ (8000944 <WS2812_Send+0xd0>)
 80008d2:	697b      	ldr	r3, [r7, #20]
 80008d4:	211e      	movs	r1, #30
 80008d6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			indx++;
 80008da:	697b      	ldr	r3, [r7, #20]
 80008dc:	3301      	adds	r3, #1
 80008de:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	3b01      	subs	r3, #1
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	dae2      	bge.n	80008b2 <WS2812_Send+0x3e>
	for (int i= 0; i<MAX_LED; i++)
 80008ec:	693b      	ldr	r3, [r7, #16]
 80008ee:	3301      	adds	r3, #1
 80008f0:	613b      	str	r3, [r7, #16]
 80008f2:	693b      	ldr	r3, [r7, #16]
 80008f4:	2b35      	cmp	r3, #53	@ 0x35
 80008f6:	ddc5      	ble.n	8000884 <WS2812_Send+0x10>
		}

	}

	for (int i=0; i<50; i++)
 80008f8:	2300      	movs	r3, #0
 80008fa:	60bb      	str	r3, [r7, #8]
 80008fc:	e00a      	b.n	8000914 <WS2812_Send+0xa0>
	{
		pwmData[indx] = 0;
 80008fe:	4a11      	ldr	r2, [pc, #68]	@ (8000944 <WS2812_Send+0xd0>)
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	2100      	movs	r1, #0
 8000904:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	3301      	adds	r3, #1
 800090c:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	3301      	adds	r3, #1
 8000912:	60bb      	str	r3, [r7, #8]
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	2b31      	cmp	r3, #49	@ 0x31
 8000918:	ddf1      	ble.n	80008fe <WS2812_Send+0x8a>
	}

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	b29b      	uxth	r3, r3
 800091e:	4a09      	ldr	r2, [pc, #36]	@ (8000944 <WS2812_Send+0xd0>)
 8000920:	2100      	movs	r1, #0
 8000922:	4809      	ldr	r0, [pc, #36]	@ (8000948 <WS2812_Send+0xd4>)
 8000924:	f003 fd0a 	bl	800433c <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag){};
 8000928:	bf00      	nop
 800092a:	4b08      	ldr	r3, [pc, #32]	@ (800094c <WS2812_Send+0xd8>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d0fb      	beq.n	800092a <WS2812_Send+0xb6>
	datasentflag = 0;
 8000932:	4b06      	ldr	r3, [pc, #24]	@ (800094c <WS2812_Send+0xd8>)
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
}
 8000938:	bf00      	nop
 800093a:	3718      	adds	r7, #24
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	200002a0 	.word	0x200002a0
 8000944:	2000037c 	.word	0x2000037c
 8000948:	200000d4 	.word	0x200000d4
 800094c:	20000378 	.word	0x20000378

08000950 <HSV_to_RGB>:

void HSV_to_RGB(float h, float s, float v, uint8_t* r, uint8_t* g, uint8_t* b) {
 8000950:	b480      	push	{r7}
 8000952:	b091      	sub	sp, #68	@ 0x44
 8000954:	af00      	add	r7, sp, #0
 8000956:	ed87 0a07 	vstr	s0, [r7, #28]
 800095a:	edc7 0a06 	vstr	s1, [r7, #24]
 800095e:	ed87 1a05 	vstr	s2, [r7, #20]
 8000962:	6138      	str	r0, [r7, #16]
 8000964:	60f9      	str	r1, [r7, #12]
 8000966:	60ba      	str	r2, [r7, #8]
    int i = (int)(h / 60.0f) % 6;
 8000968:	ed97 7a07 	vldr	s14, [r7, #28]
 800096c:	eddf 6a5d 	vldr	s13, [pc, #372]	@ 8000ae4 <HSV_to_RGB+0x194>
 8000970:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000974:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000978:	ee17 2a90 	vmov	r2, s15
 800097c:	4b5a      	ldr	r3, [pc, #360]	@ (8000ae8 <HSV_to_RGB+0x198>)
 800097e:	fb83 3102 	smull	r3, r1, r3, r2
 8000982:	17d3      	asrs	r3, r2, #31
 8000984:	1ac9      	subs	r1, r1, r3
 8000986:	460b      	mov	r3, r1
 8000988:	005b      	lsls	r3, r3, #1
 800098a:	440b      	add	r3, r1
 800098c:	005b      	lsls	r3, r3, #1
 800098e:	1ad3      	subs	r3, r2, r3
 8000990:	633b      	str	r3, [r7, #48]	@ 0x30
    float f = (h / 60.0f) - i;
 8000992:	edd7 7a07 	vldr	s15, [r7, #28]
 8000996:	eddf 6a53 	vldr	s13, [pc, #332]	@ 8000ae4 <HSV_to_RGB+0x194>
 800099a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800099e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009a0:	ee07 3a90 	vmov	s15, r3
 80009a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009ac:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float p = v * (1.0f - s);
 80009b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80009b4:	edd7 7a06 	vldr	s15, [r7, #24]
 80009b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009bc:	ed97 7a05 	vldr	s14, [r7, #20]
 80009c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009c4:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    float q = v * (1.0f - f * s);
 80009c8:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80009cc:	edd7 7a06 	vldr	s15, [r7, #24]
 80009d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009d4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80009d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009dc:	ed97 7a05 	vldr	s14, [r7, #20]
 80009e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009e4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float t = v * (1.0f - (1.0f - f) * s);
 80009e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80009ec:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80009f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80009f4:	edd7 7a06 	vldr	s15, [r7, #24]
 80009f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000a00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a04:	ed97 7a05 	vldr	s14, [r7, #20]
 8000a08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a0c:	edc7 7a08 	vstr	s15, [r7, #32]

    float r_, g_, b_;

    switch (i) {
 8000a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a12:	2b04      	cmp	r3, #4
 8000a14:	d82f      	bhi.n	8000a76 <HSV_to_RGB+0x126>
 8000a16:	a201      	add	r2, pc, #4	@ (adr r2, 8000a1c <HSV_to_RGB+0xcc>)
 8000a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a1c:	08000a31 	.word	0x08000a31
 8000a20:	08000a3f 	.word	0x08000a3f
 8000a24:	08000a4d 	.word	0x08000a4d
 8000a28:	08000a5b 	.word	0x08000a5b
 8000a2c:	08000a69 	.word	0x08000a69
        case 0: r_ = v; g_ = t; b_ = p; break;
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000a34:	6a3b      	ldr	r3, [r7, #32]
 8000a36:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8000a3c:	e022      	b.n	8000a84 <HSV_to_RGB+0x134>
        case 1: r_ = q; g_ = v; b_ = p; break;
 8000a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a48:	637b      	str	r3, [r7, #52]	@ 0x34
 8000a4a:	e01b      	b.n	8000a84 <HSV_to_RGB+0x134>
        case 2: r_ = p; g_ = v; b_ = t; break;
 8000a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000a54:	6a3b      	ldr	r3, [r7, #32]
 8000a56:	637b      	str	r3, [r7, #52]	@ 0x34
 8000a58:	e014      	b.n	8000a84 <HSV_to_RGB+0x134>
        case 3: r_ = p; g_ = q; b_ = v; break;
 8000a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a60:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	637b      	str	r3, [r7, #52]	@ 0x34
 8000a66:	e00d      	b.n	8000a84 <HSV_to_RGB+0x134>
        case 4: r_ = t; g_ = p; b_ = v; break;
 8000a68:	6a3b      	ldr	r3, [r7, #32]
 8000a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a6e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	637b      	str	r3, [r7, #52]	@ 0x34
 8000a74:	e006      	b.n	8000a84 <HSV_to_RGB+0x134>
        default: r_ = v; g_ = p; b_ = q; break;
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a7c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a80:	637b      	str	r3, [r7, #52]	@ 0x34
 8000a82:	bf00      	nop
    }

    *r = (uint8_t)(r_ * 255);
 8000a84:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8000a88:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8000aec <HSV_to_RGB+0x19c>
 8000a8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a94:	edc7 7a01 	vstr	s15, [r7, #4]
 8000a98:	793b      	ldrb	r3, [r7, #4]
 8000a9a:	b2da      	uxtb	r2, r3
 8000a9c:	693b      	ldr	r3, [r7, #16]
 8000a9e:	701a      	strb	r2, [r3, #0]
    *g = (uint8_t)(g_ * 255);
 8000aa0:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8000aa4:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8000aec <HSV_to_RGB+0x19c>
 8000aa8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000aac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ab0:	edc7 7a01 	vstr	s15, [r7, #4]
 8000ab4:	793b      	ldrb	r3, [r7, #4]
 8000ab6:	b2da      	uxtb	r2, r3
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	701a      	strb	r2, [r3, #0]
    *b = (uint8_t)(b_ * 255);
 8000abc:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000ac0:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8000aec <HSV_to_RGB+0x19c>
 8000ac4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ac8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000acc:	edc7 7a01 	vstr	s15, [r7, #4]
 8000ad0:	793b      	ldrb	r3, [r7, #4]
 8000ad2:	b2da      	uxtb	r2, r3
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	701a      	strb	r2, [r3, #0]
}
 8000ad8:	bf00      	nop
 8000ada:	3744      	adds	r7, #68	@ 0x44
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr
 8000ae4:	42700000 	.word	0x42700000
 8000ae8:	2aaaaaab 	.word	0x2aaaaaab
 8000aec:	437f0000 	.word	0x437f0000

08000af0 <Set_LEDs_color_at_once>:

//effect
void Set_LEDs_color_at_once(int start, int end, int step, int r, int g, int b){
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	60f8      	str	r0, [r7, #12]
 8000af8:	60b9      	str	r1, [r7, #8]
 8000afa:	607a      	str	r2, [r7, #4]
 8000afc:	603b      	str	r3, [r7, #0]
	for (int pos = start; pos < end; pos += step){
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	617b      	str	r3, [r7, #20]
 8000b02:	e009      	b.n	8000b18 <Set_LEDs_color_at_once+0x28>
		Set_LED(pos, r, g, b);		// purple
 8000b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b06:	6a3a      	ldr	r2, [r7, #32]
 8000b08:	6839      	ldr	r1, [r7, #0]
 8000b0a:	6978      	ldr	r0, [r7, #20]
 8000b0c:	f7ff fe08 	bl	8000720 <Set_LED>
	for (int pos = start; pos < end; pos += step){
 8000b10:	697a      	ldr	r2, [r7, #20]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4413      	add	r3, r2
 8000b16:	617b      	str	r3, [r7, #20]
 8000b18:	697a      	ldr	r2, [r7, #20]
 8000b1a:	68bb      	ldr	r3, [r7, #8]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	dbf1      	blt.n	8000b04 <Set_LEDs_color_at_once+0x14>
	}
}
 8000b20:	bf00      	nop
 8000b22:	bf00      	nop
 8000b24:	3718      	adds	r7, #24
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <Turn_off_all_at_once>:
	Set_LEDs_color_at_once(0, to_led, 1, r, g, b);
	Set_Brightness(NORMAL_BRIGHTNESS);
	WS2812_Send();
}

void Turn_off_all_at_once(void){
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	b082      	sub	sp, #8
 8000b2e:	af02      	add	r7, sp, #8
	Set_LEDs_color_at_once(0, MAX_LED, 1, 0, 0, 0);
 8000b30:	2300      	movs	r3, #0
 8000b32:	9301      	str	r3, [sp, #4]
 8000b34:	2300      	movs	r3, #0
 8000b36:	9300      	str	r3, [sp, #0]
 8000b38:	2300      	movs	r3, #0
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	2136      	movs	r1, #54	@ 0x36
 8000b3e:	2000      	movs	r0, #0
 8000b40:	f7ff ffd6 	bl	8000af0 <Set_LEDs_color_at_once>
	Set_Brightness(NORMAL_BRIGHTNESS);
 8000b44:	2019      	movs	r0, #25
 8000b46:	f7ff fe19 	bl	800077c <Set_Brightness>
	WS2812_Send();
 8000b4a:	f7ff fe93 	bl	8000874 <WS2812_Send>
}
 8000b4e:	bf00      	nop
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <frequency_to_full_spectrum>:
        }
    }
}

// Helper function to map frequency to full spectrum (Red to Violet)
void frequency_to_full_spectrum(uint16_t freq, uint8_t* r, uint8_t* g, uint8_t* b) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b086      	sub	sp, #24
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	60b9      	str	r1, [r7, #8]
 8000b5c:	607a      	str	r2, [r7, #4]
 8000b5e:	603b      	str	r3, [r7, #0]
 8000b60:	4603      	mov	r3, r0
 8000b62:	81fb      	strh	r3, [r7, #14]
    // Map frequency to hue (0-300 degrees)
    float hue = (float)freq / 7000.0f * 300.0f; // 0-7kHz mapped to 0-300°
 8000b64:	89fb      	ldrh	r3, [r7, #14]
 8000b66:	ee07 3a90 	vmov	s15, r3
 8000b6a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000b6e:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8000bb8 <frequency_to_full_spectrum+0x64>
 8000b72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b76:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8000bbc <frequency_to_full_spectrum+0x68>
 8000b7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b7e:	edc7 7a05 	vstr	s15, [r7, #20]
    if (hue > 300.0f) hue = 300.0f;
 8000b82:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b86:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8000bbc <frequency_to_full_spectrum+0x68>
 8000b8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b92:	dd01      	ble.n	8000b98 <frequency_to_full_spectrum+0x44>
 8000b94:	4b0a      	ldr	r3, [pc, #40]	@ (8000bc0 <frequency_to_full_spectrum+0x6c>)
 8000b96:	617b      	str	r3, [r7, #20]

    HSV_to_RGB(hue, 1.0f, 1.0f, r, g, b);
 8000b98:	683a      	ldr	r2, [r7, #0]
 8000b9a:	6879      	ldr	r1, [r7, #4]
 8000b9c:	68b8      	ldr	r0, [r7, #8]
 8000b9e:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8000ba2:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8000ba6:	ed97 0a05 	vldr	s0, [r7, #20]
 8000baa:	f7ff fed1 	bl	8000950 <HSV_to_RGB>

}
 8000bae:	bf00      	nop
 8000bb0:	3718      	adds	r7, #24
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	45dac000 	.word	0x45dac000
 8000bbc:	43960000 	.word	0x43960000
 8000bc0:	43960000 	.word	0x43960000

08000bc4 <effect_flash_fade_random_color>:
    WS2812_Send();
}

#define AMP_THRESHOLD 1000     // Amplitude threshold to detect a beat
#define FADE_DURATION_MS 500   // Fade duration in milliseconds
void effect_flash_fade_random_color(uint16_t amp, uint16_t peakHz, uint8_t brightness_mode) {
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b088      	sub	sp, #32
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	80fb      	strh	r3, [r7, #6]
 8000bce:	460b      	mov	r3, r1
 8000bd0:	80bb      	strh	r3, [r7, #4]
 8000bd2:	4613      	mov	r3, r2
 8000bd4:	70fb      	strb	r3, [r7, #3]
    static uint32_t last_flash_time = 0;  // Time of the last flash

    uint32_t current_time = HAL_GetTick();  // Current time in milliseconds
 8000bd6:	f001 fb37 	bl	8002248 <HAL_GetTick>
 8000bda:	6178      	str	r0, [r7, #20]

    // Beat detection: Check if amplitude exceeds threshold
    if (amp > AMP_THRESHOLD) {
 8000bdc:	88fb      	ldrh	r3, [r7, #6]
 8000bde:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000be2:	d92c      	bls.n	8000c3e <effect_flash_fade_random_color+0x7a>
        // Generate a random RGB color (0-255)
        uint8_t r = rand() % 256;
 8000be4:	f005 fdc4 	bl	8006770 <rand>
 8000be8:	4603      	mov	r3, r0
 8000bea:	425a      	negs	r2, r3
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	b2d2      	uxtb	r2, r2
 8000bf0:	bf58      	it	pl
 8000bf2:	4253      	negpl	r3, r2
 8000bf4:	74fb      	strb	r3, [r7, #19]
        uint8_t g = rand() % 256;
 8000bf6:	f005 fdbb 	bl	8006770 <rand>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	425a      	negs	r2, r3
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	b2d2      	uxtb	r2, r2
 8000c02:	bf58      	it	pl
 8000c04:	4253      	negpl	r3, r2
 8000c06:	74bb      	strb	r3, [r7, #18]
        uint8_t b = rand() % 256;
 8000c08:	f005 fdb2 	bl	8006770 <rand>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	425a      	negs	r2, r3
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	b2d2      	uxtb	r2, r2
 8000c14:	bf58      	it	pl
 8000c16:	4253      	negpl	r3, r2
 8000c18:	747b      	strb	r3, [r7, #17]

        // Set all LEDs to the new random color
        for (int i = 0; i < MAX_LED; i++) {
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61fb      	str	r3, [r7, #28]
 8000c1e:	e008      	b.n	8000c32 <effect_flash_fade_random_color+0x6e>
            Set_LED(i, r, g, b);
 8000c20:	7cf9      	ldrb	r1, [r7, #19]
 8000c22:	7cba      	ldrb	r2, [r7, #18]
 8000c24:	7c7b      	ldrb	r3, [r7, #17]
 8000c26:	69f8      	ldr	r0, [r7, #28]
 8000c28:	f7ff fd7a 	bl	8000720 <Set_LED>
        for (int i = 0; i < MAX_LED; i++) {
 8000c2c:	69fb      	ldr	r3, [r7, #28]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	61fb      	str	r3, [r7, #28]
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	2b35      	cmp	r3, #53	@ 0x35
 8000c36:	ddf3      	ble.n	8000c20 <effect_flash_fade_random_color+0x5c>
        }

        // Update the last flash time to start a new fade cycle
        last_flash_time = current_time;
 8000c38:	4a11      	ldr	r2, [pc, #68]	@ (8000c80 <effect_flash_fade_random_color+0xbc>)
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	6013      	str	r3, [r2, #0]
    }

    // Calculate elapsed time since the last flash
    uint32_t elapsed_time = current_time - last_flash_time;
 8000c3e:	4b10      	ldr	r3, [pc, #64]	@ (8000c80 <effect_flash_fade_random_color+0xbc>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	697a      	ldr	r2, [r7, #20]
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	60fb      	str	r3, [r7, #12]

    // Calculate brightness based on elapsed time
    int brightness;
    if (elapsed_time >= FADE_DURATION_MS) {
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000c4e:	d302      	bcc.n	8000c56 <effect_flash_fade_random_color+0x92>
        brightness = 0;  // Fully faded out
 8000c50:	2300      	movs	r3, #0
 8000c52:	61bb      	str	r3, [r7, #24]
 8000c54:	e00a      	b.n	8000c6c <effect_flash_fade_random_color+0xa8>
    } else {
        // Linear fade: brightness decreases from BRIGHTNESS_MODE to 0
        brightness = brightness_mode - (brightness_mode * elapsed_time) / FADE_DURATION_MS;
 8000c56:	78fa      	ldrb	r2, [r7, #3]
 8000c58:	78fb      	ldrb	r3, [r7, #3]
 8000c5a:	68f9      	ldr	r1, [r7, #12]
 8000c5c:	fb01 f303 	mul.w	r3, r1, r3
 8000c60:	4908      	ldr	r1, [pc, #32]	@ (8000c84 <effect_flash_fade_random_color+0xc0>)
 8000c62:	fba1 1303 	umull	r1, r3, r1, r3
 8000c66:	095b      	lsrs	r3, r3, #5
 8000c68:	1ad3      	subs	r3, r2, r3
 8000c6a:	61bb      	str	r3, [r7, #24]
    }

    // Apply the calculated brightness to the LEDs
    Set_Brightness(brightness);
 8000c6c:	69b8      	ldr	r0, [r7, #24]
 8000c6e:	f7ff fd85 	bl	800077c <Set_Brightness>

    // Update the LED strip
    WS2812_Send();
 8000c72:	f7ff fdff 	bl	8000874 <WS2812_Send>
}
 8000c76:	bf00      	nop
 8000c78:	3720      	adds	r7, #32
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	20004e8c 	.word	0x20004e8c
 8000c84:	10624dd3 	.word	0x10624dd3

08000c88 <effect_dynamic_vu_meter>:

void effect_dynamic_vu_meter(uint16_t amplitude, uint16_t peak_freq, uint8_t brightness_mode) {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08a      	sub	sp, #40	@ 0x28
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	80fb      	strh	r3, [r7, #6]
 8000c92:	460b      	mov	r3, r1
 8000c94:	80bb      	strh	r3, [r7, #4]
 8000c96:	4613      	mov	r3, r2
 8000c98:	70fb      	strb	r3, [r7, #3]
    // Calculate ratio and number of LEDs to light
    float ratio = (float)amplitude / amp_maxn;
 8000c9a:	88fb      	ldrh	r3, [r7, #6]
 8000c9c:	ee07 3a90 	vmov	s15, r3
 8000ca0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000ca4:	4b49      	ldr	r3, [pc, #292]	@ (8000dcc <effect_dynamic_vu_meter+0x144>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	ee07 3a90 	vmov	s15, r3
 8000cac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000cb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cb4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    if (ratio > 1.0f) ratio = 1.0f;
 8000cb8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000cbc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000cc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cc8:	dd02      	ble.n	8000cd0 <effect_dynamic_vu_meter+0x48>
 8000cca:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000cce:	627b      	str	r3, [r7, #36]	@ 0x24

    if (ratio <= 0.05f) {
 8000cd0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000cd4:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8000dd0 <effect_dynamic_vu_meter+0x148>
 8000cd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ce0:	d802      	bhi.n	8000ce8 <effect_dynamic_vu_meter+0x60>
        Turn_off_all_at_once();
 8000ce2:	f7ff ff22 	bl	8000b2a <Turn_off_all_at_once>
 8000ce6:	e06e      	b.n	8000dc6 <effect_dynamic_vu_meter+0x13e>
        return;
    }

    int total_leds_to_light = (int)(ratio * MAX_LED);
 8000ce8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000cec:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8000dd4 <effect_dynamic_vu_meter+0x14c>
 8000cf0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cf4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000cf8:	ee17 3a90 	vmov	r3, s15
 8000cfc:	623b      	str	r3, [r7, #32]
    if (total_leds_to_light < 1) total_leds_to_light = 1;
 8000cfe:	6a3b      	ldr	r3, [r7, #32]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	dc01      	bgt.n	8000d08 <effect_dynamic_vu_meter+0x80>
 8000d04:	2301      	movs	r3, #1
 8000d06:	623b      	str	r3, [r7, #32]

    // Get color based on frequency
    uint8_t r, g, b;
    frequency_to_full_spectrum(peak_freq, &r, &g, &b);
 8000d08:	f107 030d 	add.w	r3, r7, #13
 8000d0c:	f107 020e 	add.w	r2, r7, #14
 8000d10:	f107 010f 	add.w	r1, r7, #15
 8000d14:	88b8      	ldrh	r0, [r7, #4]
 8000d16:	f7ff ff1d 	bl	8000b54 <frequency_to_full_spectrum>

    // Clear all LEDs first
    Turn_off_all_at_once();
 8000d1a:	f7ff ff06 	bl	8000b2a <Turn_off_all_at_once>

    // Light LEDs from center outward
    int center = MAX_LED / 2;
 8000d1e:	231b      	movs	r3, #27
 8000d20:	61bb      	str	r3, [r7, #24]
    int leds_per_side = total_leds_to_light / 2;
 8000d22:	6a3b      	ldr	r3, [r7, #32]
 8000d24:	0fda      	lsrs	r2, r3, #31
 8000d26:	4413      	add	r3, r2
 8000d28:	105b      	asrs	r3, r3, #1
 8000d2a:	617b      	str	r3, [r7, #20]

    // Light center LED if odd number
    if (total_leds_to_light % 2 == 1) {
 8000d2c:	6a3b      	ldr	r3, [r7, #32]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f003 0301 	and.w	r3, r3, #1
 8000d34:	bfb8      	it	lt
 8000d36:	425b      	neglt	r3, r3
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d107      	bne.n	8000d4c <effect_dynamic_vu_meter+0xc4>
        Set_LED(center, r, g, b);
 8000d3c:	7bfb      	ldrb	r3, [r7, #15]
 8000d3e:	4619      	mov	r1, r3
 8000d40:	7bbb      	ldrb	r3, [r7, #14]
 8000d42:	461a      	mov	r2, r3
 8000d44:	7b7b      	ldrb	r3, [r7, #13]
 8000d46:	69b8      	ldr	r0, [r7, #24]
 8000d48:	f7ff fcea 	bl	8000720 <Set_LED>
    }

    // Light LEDs on both sides of center
    for (int i = 1; i <= leds_per_side; i++) {
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	61fb      	str	r3, [r7, #28]
 8000d50:	e020      	b.n	8000d94 <effect_dynamic_vu_meter+0x10c>
        if (center - i >= 0) {
 8000d52:	69ba      	ldr	r2, [r7, #24]
 8000d54:	69fb      	ldr	r3, [r7, #28]
 8000d56:	1ad3      	subs	r3, r2, r3
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	db09      	blt.n	8000d70 <effect_dynamic_vu_meter+0xe8>
            Set_LED(center - i, r, g, b);
 8000d5c:	69ba      	ldr	r2, [r7, #24]
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	1ad0      	subs	r0, r2, r3
 8000d62:	7bfb      	ldrb	r3, [r7, #15]
 8000d64:	4619      	mov	r1, r3
 8000d66:	7bbb      	ldrb	r3, [r7, #14]
 8000d68:	461a      	mov	r2, r3
 8000d6a:	7b7b      	ldrb	r3, [r7, #13]
 8000d6c:	f7ff fcd8 	bl	8000720 <Set_LED>
        }
        if (center + i < MAX_LED) {
 8000d70:	69ba      	ldr	r2, [r7, #24]
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	4413      	add	r3, r2
 8000d76:	2b35      	cmp	r3, #53	@ 0x35
 8000d78:	dc09      	bgt.n	8000d8e <effect_dynamic_vu_meter+0x106>
            Set_LED(center + i, r, g, b);
 8000d7a:	69ba      	ldr	r2, [r7, #24]
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	18d0      	adds	r0, r2, r3
 8000d80:	7bfb      	ldrb	r3, [r7, #15]
 8000d82:	4619      	mov	r1, r3
 8000d84:	7bbb      	ldrb	r3, [r7, #14]
 8000d86:	461a      	mov	r2, r3
 8000d88:	7b7b      	ldrb	r3, [r7, #13]
 8000d8a:	f7ff fcc9 	bl	8000720 <Set_LED>
    for (int i = 1; i <= leds_per_side; i++) {
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	3301      	adds	r3, #1
 8000d92:	61fb      	str	r3, [r7, #28]
 8000d94:	69fa      	ldr	r2, [r7, #28]
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	ddda      	ble.n	8000d52 <effect_dynamic_vu_meter+0xca>
        }
    }

    int brightness = 5 + (int)(ratio * (brightness_mode - 5));
 8000d9c:	78fb      	ldrb	r3, [r7, #3]
 8000d9e:	3b05      	subs	r3, #5
 8000da0:	ee07 3a90 	vmov	s15, r3
 8000da4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000da8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000dac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000db0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000db4:	ee17 3a90 	vmov	r3, s15
 8000db8:	3305      	adds	r3, #5
 8000dba:	613b      	str	r3, [r7, #16]
    Set_Brightness(brightness);
 8000dbc:	6938      	ldr	r0, [r7, #16]
 8000dbe:	f7ff fcdd 	bl	800077c <Set_Brightness>
    WS2812_Send();
 8000dc2:	f7ff fd57 	bl	8000874 <WS2812_Send>
}
 8000dc6:	3728      	adds	r7, #40	@ 0x28
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	20000004 	.word	0x20000004
 8000dd0:	3d4ccccd 	.word	0x3d4ccccd
 8000dd4:	42580000 	.word	0x42580000

08000dd8 <effect_spectrum_color_bands>:

void effect_spectrum_color_bands(uint16_t amplitude, uint16_t peak_freq, uint8_t brightness_mode) {
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08e      	sub	sp, #56	@ 0x38
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	80fb      	strh	r3, [r7, #6]
 8000de2:	460b      	mov	r3, r1
 8000de4:	80bb      	strh	r3, [r7, #4]
 8000de6:	4613      	mov	r3, r2
 8000de8:	70fb      	strb	r3, [r7, #3]
    float ratio = (float)amplitude / amp_maxn;
 8000dea:	88fb      	ldrh	r3, [r7, #6]
 8000dec:	ee07 3a90 	vmov	s15, r3
 8000df0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000df4:	4b49      	ldr	r3, [pc, #292]	@ (8000f1c <effect_spectrum_color_bands+0x144>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	ee07 3a90 	vmov	s15, r3
 8000dfc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e04:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    if (ratio > 1.0f) ratio = 1.0f;
 8000e08:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000e0c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000e10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e18:	dd02      	ble.n	8000e20 <effect_spectrum_color_bands+0x48>
 8000e1a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000e1e:	637b      	str	r3, [r7, #52]	@ 0x34

    if (ratio <= 0.05f) {
 8000e20:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000e24:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8000f20 <effect_spectrum_color_bands+0x148>
 8000e28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e30:	d802      	bhi.n	8000e38 <effect_spectrum_color_bands+0x60>
        Turn_off_all_at_once();
 8000e32:	f7ff fe7a 	bl	8000b2a <Turn_off_all_at_once>
 8000e36:	e06e      	b.n	8000f16 <effect_spectrum_color_bands+0x13e>
        return;
    }

    // Define frequency bands and LED sections
    int low_start = 0;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	627b      	str	r3, [r7, #36]	@ 0x24
    int low_end = MAX_LED / 3;
 8000e3c:	2312      	movs	r3, #18
 8000e3e:	623b      	str	r3, [r7, #32]
    int mid_start = low_end;
 8000e40:	6a3b      	ldr	r3, [r7, #32]
 8000e42:	61fb      	str	r3, [r7, #28]
    int mid_end = (MAX_LED * 2) / 3;
 8000e44:	2324      	movs	r3, #36	@ 0x24
 8000e46:	61bb      	str	r3, [r7, #24]
    int high_start = mid_end;
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	617b      	str	r3, [r7, #20]
    int high_end = MAX_LED;
 8000e4c:	2336      	movs	r3, #54	@ 0x36
 8000e4e:	613b      	str	r3, [r7, #16]

    // Clear all LEDs
    Turn_off_all_at_once();
 8000e50:	f7ff fe6b 	bl	8000b2a <Turn_off_all_at_once>

    // Determine which band the peak frequency falls into
    uint8_t r = 0, g = 0, b = 0;
 8000e54:	2300      	movs	r3, #0
 8000e56:	72fb      	strb	r3, [r7, #11]
 8000e58:	2300      	movs	r3, #0
 8000e5a:	72bb      	strb	r3, [r7, #10]
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	727b      	strb	r3, [r7, #9]
    int start_led = 0, end_led = 0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	633b      	str	r3, [r7, #48]	@ 0x30
 8000e64:	2300      	movs	r3, #0
 8000e66:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (peak_freq <= 250) {
 8000e68:	88bb      	ldrh	r3, [r7, #4]
 8000e6a:	2bfa      	cmp	r3, #250	@ 0xfa
 8000e6c:	d80d      	bhi.n	8000e8a <effect_spectrum_color_bands+0xb2>
        // Low frequency band - Red
        frequency_to_full_spectrum(peak_freq, &r, &g, &b);
 8000e6e:	f107 0309 	add.w	r3, r7, #9
 8000e72:	f107 020a 	add.w	r2, r7, #10
 8000e76:	f107 010b 	add.w	r1, r7, #11
 8000e7a:	88b8      	ldrh	r0, [r7, #4]
 8000e7c:	f7ff fe6a 	bl	8000b54 <frequency_to_full_spectrum>
        start_led = low_start;
 8000e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e82:	633b      	str	r3, [r7, #48]	@ 0x30
        end_led = low_end;
 8000e84:	6a3b      	ldr	r3, [r7, #32]
 8000e86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e88:	e01e      	b.n	8000ec8 <effect_spectrum_color_bands+0xf0>
    } else if (peak_freq <= 2000) {
 8000e8a:	88bb      	ldrh	r3, [r7, #4]
 8000e8c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000e90:	d80d      	bhi.n	8000eae <effect_spectrum_color_bands+0xd6>
        // Mid frequency band - Green
    	frequency_to_full_spectrum(peak_freq, &r, &g, &b);
 8000e92:	f107 0309 	add.w	r3, r7, #9
 8000e96:	f107 020a 	add.w	r2, r7, #10
 8000e9a:	f107 010b 	add.w	r1, r7, #11
 8000e9e:	88b8      	ldrh	r0, [r7, #4]
 8000ea0:	f7ff fe58 	bl	8000b54 <frequency_to_full_spectrum>
        start_led = mid_start;
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	633b      	str	r3, [r7, #48]	@ 0x30
        end_led = mid_end;
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000eac:	e00c      	b.n	8000ec8 <effect_spectrum_color_bands+0xf0>
    } else {
        // High frequency band - Blue
    	frequency_to_full_spectrum(peak_freq, &r, &g, &b);
 8000eae:	f107 0309 	add.w	r3, r7, #9
 8000eb2:	f107 020a 	add.w	r2, r7, #10
 8000eb6:	f107 010b 	add.w	r1, r7, #11
 8000eba:	88b8      	ldrh	r0, [r7, #4]
 8000ebc:	f7ff fe4a 	bl	8000b54 <frequency_to_full_spectrum>
        start_led = high_start;
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	633b      	str	r3, [r7, #48]	@ 0x30
        end_led = high_end;
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }

    // Light up the appropriate section
    for (int i = start_led; i < end_led; i++) {
 8000ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000eca:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000ecc:	e00a      	b.n	8000ee4 <effect_spectrum_color_bands+0x10c>
        Set_LED(i, r, g, b);
 8000ece:	7afb      	ldrb	r3, [r7, #11]
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	7abb      	ldrb	r3, [r7, #10]
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	7a7b      	ldrb	r3, [r7, #9]
 8000ed8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000eda:	f7ff fc21 	bl	8000720 <Set_LED>
    for (int i = start_led; i < end_led; i++) {
 8000ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000ee4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	dbf0      	blt.n	8000ece <effect_spectrum_color_bands+0xf6>
    }

    int brightness = 5 + (int)(ratio * (brightness_mode - 5));
 8000eec:	78fb      	ldrb	r3, [r7, #3]
 8000eee:	3b05      	subs	r3, #5
 8000ef0:	ee07 3a90 	vmov	s15, r3
 8000ef4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ef8:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000efc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f04:	ee17 3a90 	vmov	r3, s15
 8000f08:	3305      	adds	r3, #5
 8000f0a:	60fb      	str	r3, [r7, #12]
    Set_Brightness(brightness);
 8000f0c:	68f8      	ldr	r0, [r7, #12]
 8000f0e:	f7ff fc35 	bl	800077c <Set_Brightness>
    WS2812_Send();
 8000f12:	f7ff fcaf 	bl	8000874 <WS2812_Send>
}
 8000f16:	3738      	adds	r7, #56	@ 0x38
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000004 	.word	0x20000004
 8000f20:	3d4ccccd 	.word	0x3d4ccccd

08000f24 <effect_frequency_chase_gradient>:
#define MAX_PULSES 8
static Pulse pulses[MAX_PULSES];
static uint16_t last_amp = 0;
static uint32_t last_pulse_time = 0;

void effect_frequency_chase_gradient(uint16_t amplitude, uint16_t peak_freq, uint8_t brightness_mode) {
 8000f24:	b590      	push	{r4, r7, lr}
 8000f26:	b091      	sub	sp, #68	@ 0x44
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	81fb      	strh	r3, [r7, #14]
 8000f2e:	460b      	mov	r3, r1
 8000f30:	81bb      	strh	r3, [r7, #12]
 8000f32:	4613      	mov	r3, r2
 8000f34:	72fb      	strb	r3, [r7, #11]
    const uint16_t BEAT_THRESHOLD = 800;  // Adjust based on your amp_maxn
 8000f36:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8000f3a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    const uint32_t MIN_PULSE_INTERVAL = 100; // Minimum time between pulses (ms)
 8000f3c:	2364      	movs	r3, #100	@ 0x64
 8000f3e:	62bb      	str	r3, [r7, #40]	@ 0x28

    uint32_t current_time = HAL_GetTick();
 8000f40:	f001 f982 	bl	8002248 <HAL_GetTick>
 8000f44:	6278      	str	r0, [r7, #36]	@ 0x24

    // Beat detection: amplitude spike above threshold
    if (amplitude > BEAT_THRESHOLD &&
 8000f46:	89fa      	ldrh	r2, [r7, #14]
 8000f48:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	f240 80a0 	bls.w	8001090 <effect_frequency_chase_gradient+0x16c>
        amplitude > (last_amp + 200) &&
 8000f50:	89fa      	ldrh	r2, [r7, #14]
 8000f52:	4b59      	ldr	r3, [pc, #356]	@ (80010b8 <effect_frequency_chase_gradient+0x194>)
 8000f54:	881b      	ldrh	r3, [r3, #0]
 8000f56:	33c8      	adds	r3, #200	@ 0xc8
    if (amplitude > BEAT_THRESHOLD &&
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	f340 8099 	ble.w	8001090 <effect_frequency_chase_gradient+0x16c>
        (current_time - last_pulse_time) > MIN_PULSE_INTERVAL) {
 8000f5e:	4b57      	ldr	r3, [pc, #348]	@ (80010bc <effect_frequency_chase_gradient+0x198>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f64:	1ad3      	subs	r3, r2, r3
        amplitude > (last_amp + 200) &&
 8000f66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	f080 8091 	bcs.w	8001090 <effect_frequency_chase_gradient+0x16c>

        // Find an inactive pulse slot
        for (int i = 0; i < MAX_PULSES; i++) {
 8000f6e:	2300      	movs	r3, #0
 8000f70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000f72:	e089      	b.n	8001088 <effect_frequency_chase_gradient+0x164>
            if (!pulses[i].active) {
 8000f74:	4952      	ldr	r1, [pc, #328]	@ (80010c0 <effect_frequency_chase_gradient+0x19c>)
 8000f76:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000f78:	4613      	mov	r3, r2
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	4413      	add	r3, r2
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	440b      	add	r3, r1
 8000f82:	3309      	adds	r3, #9
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d17b      	bne.n	8001082 <effect_frequency_chase_gradient+0x15e>
                // Initialize new pulse
                pulses[i].position = 0;
 8000f8a:	494d      	ldr	r1, [pc, #308]	@ (80010c0 <effect_frequency_chase_gradient+0x19c>)
 8000f8c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000f8e:	4613      	mov	r3, r2
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	4413      	add	r3, r2
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	440b      	add	r3, r1
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
                frequency_to_full_spectrum(peak_freq, &pulses[i].r, &pulses[i].g, &pulses[i].b);
 8000f9c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	4413      	add	r3, r2
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	4a46      	ldr	r2, [pc, #280]	@ (80010c0 <effect_frequency_chase_gradient+0x19c>)
 8000fa8:	4413      	add	r3, r2
 8000faa:	1d19      	adds	r1, r3, #4
 8000fac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000fae:	4613      	mov	r3, r2
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	4413      	add	r3, r2
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	4a42      	ldr	r2, [pc, #264]	@ (80010c0 <effect_frequency_chase_gradient+0x19c>)
 8000fb8:	4413      	add	r3, r2
 8000fba:	1d5c      	adds	r4, r3, #5
 8000fbc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	4413      	add	r3, r2
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	4a3e      	ldr	r2, [pc, #248]	@ (80010c0 <effect_frequency_chase_gradient+0x19c>)
 8000fc8:	4413      	add	r3, r2
 8000fca:	3306      	adds	r3, #6
 8000fcc:	89b8      	ldrh	r0, [r7, #12]
 8000fce:	4622      	mov	r2, r4
 8000fd0:	f7ff fdc0 	bl	8000b54 <frequency_to_full_spectrum>

                float ratio = (float)amplitude / amp_maxn;
 8000fd4:	89fb      	ldrh	r3, [r7, #14]
 8000fd6:	ee07 3a90 	vmov	s15, r3
 8000fda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000fde:	4b39      	ldr	r3, [pc, #228]	@ (80010c4 <effect_frequency_chase_gradient+0x1a0>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	ee07 3a90 	vmov	s15, r3
 8000fe6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fee:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
                if (ratio > 1.0f) ratio = 1.0f;
 8000ff2:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8000ff6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000ffa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001002:	dd02      	ble.n	800100a <effect_frequency_chase_gradient+0xe6>
 8001004:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001008:	63bb      	str	r3, [r7, #56]	@ 0x38

                pulses[i].brightness = (uint8_t)(ratio * 255);
 800100a:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800100e:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 80010c8 <effect_frequency_chase_gradient+0x1a4>
 8001012:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001016:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800101a:	edc7 7a01 	vstr	s15, [r7, #4]
 800101e:	793b      	ldrb	r3, [r7, #4]
 8001020:	b2d8      	uxtb	r0, r3
 8001022:	4927      	ldr	r1, [pc, #156]	@ (80010c0 <effect_frequency_chase_gradient+0x19c>)
 8001024:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001026:	4613      	mov	r3, r2
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	4413      	add	r3, r2
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	440b      	add	r3, r1
 8001030:	3307      	adds	r3, #7
 8001032:	4602      	mov	r2, r0
 8001034:	701a      	strb	r2, [r3, #0]
                pulses[i].length = 3 + (uint8_t)(ratio * 8); // 3-11 LEDs long
 8001036:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800103a:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 800103e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001042:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001046:	edc7 7a01 	vstr	s15, [r7, #4]
 800104a:	793b      	ldrb	r3, [r7, #4]
 800104c:	b2db      	uxtb	r3, r3
 800104e:	3303      	adds	r3, #3
 8001050:	b2d8      	uxtb	r0, r3
 8001052:	491b      	ldr	r1, [pc, #108]	@ (80010c0 <effect_frequency_chase_gradient+0x19c>)
 8001054:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001056:	4613      	mov	r3, r2
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	4413      	add	r3, r2
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	440b      	add	r3, r1
 8001060:	3308      	adds	r3, #8
 8001062:	4602      	mov	r2, r0
 8001064:	701a      	strb	r2, [r3, #0]
                pulses[i].active = 1;
 8001066:	4916      	ldr	r1, [pc, #88]	@ (80010c0 <effect_frequency_chase_gradient+0x19c>)
 8001068:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800106a:	4613      	mov	r3, r2
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	4413      	add	r3, r2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	440b      	add	r3, r1
 8001074:	3309      	adds	r3, #9
 8001076:	2201      	movs	r2, #1
 8001078:	701a      	strb	r2, [r3, #0]

                last_pulse_time = current_time;
 800107a:	4a10      	ldr	r2, [pc, #64]	@ (80010bc <effect_frequency_chase_gradient+0x198>)
 800107c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800107e:	6013      	str	r3, [r2, #0]
                break;
 8001080:	e006      	b.n	8001090 <effect_frequency_chase_gradient+0x16c>
        for (int i = 0; i < MAX_PULSES; i++) {
 8001082:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001084:	3301      	adds	r3, #1
 8001086:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001088:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800108a:	2b07      	cmp	r3, #7
 800108c:	f77f af72 	ble.w	8000f74 <effect_frequency_chase_gradient+0x50>
            }
        }
    }

    // Clear all LEDs
    Turn_off_all_at_once();
 8001090:	f7ff fd4b 	bl	8000b2a <Turn_off_all_at_once>

    // Update and draw all active pulses
    for (int i = 0; i < MAX_PULSES; i++) {
 8001094:	2300      	movs	r3, #0
 8001096:	637b      	str	r3, [r7, #52]	@ 0x34
 8001098:	e0fb      	b.n	8001292 <effect_frequency_chase_gradient+0x36e>
        if (pulses[i].active) {
 800109a:	4909      	ldr	r1, [pc, #36]	@ (80010c0 <effect_frequency_chase_gradient+0x19c>)
 800109c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800109e:	4613      	mov	r3, r2
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	4413      	add	r3, r2
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	440b      	add	r3, r1
 80010a8:	3309      	adds	r3, #9
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	f000 80ed 	beq.w	800128c <effect_frequency_chase_gradient+0x368>
            // Draw pulse with fade-out trail
            for (int j = 0; j < pulses[i].length; j++) {
 80010b2:	2300      	movs	r3, #0
 80010b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80010b6:	e0ab      	b.n	8001210 <effect_frequency_chase_gradient+0x2ec>
 80010b8:	20004e84 	.word	0x20004e84
 80010bc:	20004e88 	.word	0x20004e88
 80010c0:	20004e24 	.word	0x20004e24
 80010c4:	20000004 	.word	0x20000004
 80010c8:	437f0000 	.word	0x437f0000
                int led_pos = pulses[i].position - j;
 80010cc:	4979      	ldr	r1, [pc, #484]	@ (80012b4 <effect_frequency_chase_gradient+0x390>)
 80010ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80010d0:	4613      	mov	r3, r2
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	4413      	add	r3, r2
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	440b      	add	r3, r1
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	623b      	str	r3, [r7, #32]
                if (led_pos >= 0 && led_pos < MAX_LED) {
 80010e2:	6a3b      	ldr	r3, [r7, #32]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	f2c0 8090 	blt.w	800120a <effect_frequency_chase_gradient+0x2e6>
 80010ea:	6a3b      	ldr	r3, [r7, #32]
 80010ec:	2b35      	cmp	r3, #53	@ 0x35
 80010ee:	f300 808c 	bgt.w	800120a <effect_frequency_chase_gradient+0x2e6>
                    // Calculate fade factor for trail
                    float fade = 1.0f - ((float)j / pulses[i].length);
 80010f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010f4:	ee07 3a90 	vmov	s15, r3
 80010f8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80010fc:	496d      	ldr	r1, [pc, #436]	@ (80012b4 <effect_frequency_chase_gradient+0x390>)
 80010fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001100:	4613      	mov	r3, r2
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	4413      	add	r3, r2
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	440b      	add	r3, r1
 800110a:	3308      	adds	r3, #8
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	ee07 3a90 	vmov	s15, r3
 8001112:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001116:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800111a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800111e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001122:	edc7 7a07 	vstr	s15, [r7, #28]
                    uint8_t r = (uint8_t)(pulses[i].r * fade);
 8001126:	4963      	ldr	r1, [pc, #396]	@ (80012b4 <effect_frequency_chase_gradient+0x390>)
 8001128:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800112a:	4613      	mov	r3, r2
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	4413      	add	r3, r2
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	440b      	add	r3, r1
 8001134:	3304      	adds	r3, #4
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	ee07 3a90 	vmov	s15, r3
 800113c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001140:	edd7 7a07 	vldr	s15, [r7, #28]
 8001144:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001148:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800114c:	edc7 7a01 	vstr	s15, [r7, #4]
 8001150:	793b      	ldrb	r3, [r7, #4]
 8001152:	76fb      	strb	r3, [r7, #27]
                    uint8_t g = (uint8_t)(pulses[i].g * fade);
 8001154:	4957      	ldr	r1, [pc, #348]	@ (80012b4 <effect_frequency_chase_gradient+0x390>)
 8001156:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001158:	4613      	mov	r3, r2
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	4413      	add	r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	440b      	add	r3, r1
 8001162:	3305      	adds	r3, #5
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	ee07 3a90 	vmov	s15, r3
 800116a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800116e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001176:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800117a:	edc7 7a01 	vstr	s15, [r7, #4]
 800117e:	793b      	ldrb	r3, [r7, #4]
 8001180:	76bb      	strb	r3, [r7, #26]
                    uint8_t b = (uint8_t)(pulses[i].b * fade);
 8001182:	494c      	ldr	r1, [pc, #304]	@ (80012b4 <effect_frequency_chase_gradient+0x390>)
 8001184:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001186:	4613      	mov	r3, r2
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	4413      	add	r3, r2
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	440b      	add	r3, r1
 8001190:	3306      	adds	r3, #6
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	ee07 3a90 	vmov	s15, r3
 8001198:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800119c:	edd7 7a07 	vldr	s15, [r7, #28]
 80011a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011a8:	edc7 7a01 	vstr	s15, [r7, #4]
 80011ac:	793b      	ldrb	r3, [r7, #4]
 80011ae:	767b      	strb	r3, [r7, #25]

                    // Blend with existing LED color (simple additive)
                    uint8_t existing_r = LED_Data[led_pos][2];
 80011b0:	4a41      	ldr	r2, [pc, #260]	@ (80012b8 <effect_frequency_chase_gradient+0x394>)
 80011b2:	6a3b      	ldr	r3, [r7, #32]
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	4413      	add	r3, r2
 80011b8:	789b      	ldrb	r3, [r3, #2]
 80011ba:	763b      	strb	r3, [r7, #24]
                    uint8_t existing_g = LED_Data[led_pos][1];
 80011bc:	4a3e      	ldr	r2, [pc, #248]	@ (80012b8 <effect_frequency_chase_gradient+0x394>)
 80011be:	6a3b      	ldr	r3, [r7, #32]
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	4413      	add	r3, r2
 80011c4:	785b      	ldrb	r3, [r3, #1]
 80011c6:	75fb      	strb	r3, [r7, #23]
                    uint8_t existing_b = LED_Data[led_pos][3];
 80011c8:	4a3b      	ldr	r2, [pc, #236]	@ (80012b8 <effect_frequency_chase_gradient+0x394>)
 80011ca:	6a3b      	ldr	r3, [r7, #32]
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	4413      	add	r3, r2
 80011d0:	78db      	ldrb	r3, [r3, #3]
 80011d2:	75bb      	strb	r3, [r7, #22]

                    r = (r + existing_r > 255) ? 255 : r + existing_r;
 80011d4:	7efa      	ldrb	r2, [r7, #27]
 80011d6:	7e3b      	ldrb	r3, [r7, #24]
 80011d8:	4413      	add	r3, r2
 80011da:	2bff      	cmp	r3, #255	@ 0xff
 80011dc:	bfa8      	it	ge
 80011de:	23ff      	movge	r3, #255	@ 0xff
 80011e0:	76fb      	strb	r3, [r7, #27]
                    g = (g + existing_g > 255) ? 255 : g + existing_g;
 80011e2:	7eba      	ldrb	r2, [r7, #26]
 80011e4:	7dfb      	ldrb	r3, [r7, #23]
 80011e6:	4413      	add	r3, r2
 80011e8:	2bff      	cmp	r3, #255	@ 0xff
 80011ea:	bfa8      	it	ge
 80011ec:	23ff      	movge	r3, #255	@ 0xff
 80011ee:	76bb      	strb	r3, [r7, #26]
                    b = (b + existing_b > 255) ? 255 : b + existing_b;
 80011f0:	7e7a      	ldrb	r2, [r7, #25]
 80011f2:	7dbb      	ldrb	r3, [r7, #22]
 80011f4:	4413      	add	r3, r2
 80011f6:	2bff      	cmp	r3, #255	@ 0xff
 80011f8:	bfa8      	it	ge
 80011fa:	23ff      	movge	r3, #255	@ 0xff
 80011fc:	767b      	strb	r3, [r7, #25]

                    Set_LED(led_pos, r, g, b);
 80011fe:	7ef9      	ldrb	r1, [r7, #27]
 8001200:	7eba      	ldrb	r2, [r7, #26]
 8001202:	7e7b      	ldrb	r3, [r7, #25]
 8001204:	6a38      	ldr	r0, [r7, #32]
 8001206:	f7ff fa8b 	bl	8000720 <Set_LED>
            for (int j = 0; j < pulses[i].length; j++) {
 800120a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800120c:	3301      	adds	r3, #1
 800120e:	633b      	str	r3, [r7, #48]	@ 0x30
 8001210:	4928      	ldr	r1, [pc, #160]	@ (80012b4 <effect_frequency_chase_gradient+0x390>)
 8001212:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001214:	4613      	mov	r3, r2
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	4413      	add	r3, r2
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	440b      	add	r3, r1
 800121e:	3308      	adds	r3, #8
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	461a      	mov	r2, r3
 8001224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001226:	4293      	cmp	r3, r2
 8001228:	f6ff af50 	blt.w	80010cc <effect_frequency_chase_gradient+0x1a8>
                }
            }

            // Move pulse forward
            pulses[i].position++;
 800122c:	4921      	ldr	r1, [pc, #132]	@ (80012b4 <effect_frequency_chase_gradient+0x390>)
 800122e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001230:	4613      	mov	r3, r2
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	4413      	add	r3, r2
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	440b      	add	r3, r1
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	1c59      	adds	r1, r3, #1
 800123e:	481d      	ldr	r0, [pc, #116]	@ (80012b4 <effect_frequency_chase_gradient+0x390>)
 8001240:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001242:	4613      	mov	r3, r2
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	4413      	add	r3, r2
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	4403      	add	r3, r0
 800124c:	6019      	str	r1, [r3, #0]

            // Deactivate pulse if it's moved off the strip
            if (pulses[i].position >= MAX_LED + pulses[i].length) {
 800124e:	4919      	ldr	r1, [pc, #100]	@ (80012b4 <effect_frequency_chase_gradient+0x390>)
 8001250:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001252:	4613      	mov	r3, r2
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	4413      	add	r3, r2
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	440b      	add	r3, r1
 800125c:	3308      	adds	r3, #8
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	f103 0135 	add.w	r1, r3, #53	@ 0x35
 8001264:	4813      	ldr	r0, [pc, #76]	@ (80012b4 <effect_frequency_chase_gradient+0x390>)
 8001266:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001268:	4613      	mov	r3, r2
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	4413      	add	r3, r2
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	4403      	add	r3, r0
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4299      	cmp	r1, r3
 8001276:	da09      	bge.n	800128c <effect_frequency_chase_gradient+0x368>
                pulses[i].active = 0;
 8001278:	490e      	ldr	r1, [pc, #56]	@ (80012b4 <effect_frequency_chase_gradient+0x390>)
 800127a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800127c:	4613      	mov	r3, r2
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	4413      	add	r3, r2
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	440b      	add	r3, r1
 8001286:	3309      	adds	r3, #9
 8001288:	2200      	movs	r2, #0
 800128a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < MAX_PULSES; i++) {
 800128c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800128e:	3301      	adds	r3, #1
 8001290:	637b      	str	r3, [r7, #52]	@ 0x34
 8001292:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001294:	2b07      	cmp	r3, #7
 8001296:	f77f af00 	ble.w	800109a <effect_frequency_chase_gradient+0x176>
            }
        }
    }

    Set_Brightness(brightness_mode);
 800129a:	7afb      	ldrb	r3, [r7, #11]
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff fa6d 	bl	800077c <Set_Brightness>
    WS2812_Send();
 80012a2:	f7ff fae7 	bl	8000874 <WS2812_Send>

    last_amp = amplitude;
 80012a6:	4a05      	ldr	r2, [pc, #20]	@ (80012bc <effect_frequency_chase_gradient+0x398>)
 80012a8:	89fb      	ldrh	r3, [r7, #14]
 80012aa:	8013      	strh	r3, [r2, #0]
}
 80012ac:	bf00      	nop
 80012ae:	3744      	adds	r7, #68	@ 0x44
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd90      	pop	{r4, r7, pc}
 80012b4:	20004e24 	.word	0x20004e24
 80012b8:	200001c8 	.word	0x200001c8
 80012bc:	20004e84 	.word	0x20004e84

080012c0 <effect_rainbow_roll>:

void effect_rainbow_roll(uint16_t amplitude, uint16_t peak_freq, uint8_t brightness_mode) {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b088      	sub	sp, #32
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	80fb      	strh	r3, [r7, #6]
 80012ca:	460b      	mov	r3, r1
 80012cc:	80bb      	strh	r3, [r7, #4]
 80012ce:	4613      	mov	r3, r2
 80012d0:	70fb      	strb	r3, [r7, #3]
    static float offset = 0.0f;

    float ratio = (float)amplitude / amp_maxn;
 80012d2:	88fb      	ldrh	r3, [r7, #6]
 80012d4:	ee07 3a90 	vmov	s15, r3
 80012d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80012dc:	4b44      	ldr	r3, [pc, #272]	@ (80013f0 <effect_rainbow_roll+0x130>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	ee07 3a90 	vmov	s15, r3
 80012e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012ec:	edc7 7a07 	vstr	s15, [r7, #28]
    if (ratio > 1.0f) ratio = 1.0f;
 80012f0:	edd7 7a07 	vldr	s15, [r7, #28]
 80012f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80012f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001300:	dd02      	ble.n	8001308 <effect_rainbow_roll+0x48>
 8001302:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001306:	61fb      	str	r3, [r7, #28]

    // Cập nhật offset dựa vào tần số đỉnh
    offset += ((float)peak_freq / 100.0f);  // tốc độ cuộn
 8001308:	88bb      	ldrh	r3, [r7, #4]
 800130a:	ee07 3a90 	vmov	s15, r3
 800130e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001312:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80013f4 <effect_rainbow_roll+0x134>
 8001316:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800131a:	4b37      	ldr	r3, [pc, #220]	@ (80013f8 <effect_rainbow_roll+0x138>)
 800131c:	edd3 7a00 	vldr	s15, [r3]
 8001320:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001324:	4b34      	ldr	r3, [pc, #208]	@ (80013f8 <effect_rainbow_roll+0x138>)
 8001326:	edc3 7a00 	vstr	s15, [r3]
    if (offset >= 360.0f) offset -= 360.0f;
 800132a:	4b33      	ldr	r3, [pc, #204]	@ (80013f8 <effect_rainbow_roll+0x138>)
 800132c:	edd3 7a00 	vldr	s15, [r3]
 8001330:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80013fc <effect_rainbow_roll+0x13c>
 8001334:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800133c:	db09      	blt.n	8001352 <effect_rainbow_roll+0x92>
 800133e:	4b2e      	ldr	r3, [pc, #184]	@ (80013f8 <effect_rainbow_roll+0x138>)
 8001340:	edd3 7a00 	vldr	s15, [r3]
 8001344:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 80013fc <effect_rainbow_roll+0x13c>
 8001348:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800134c:	4b2a      	ldr	r3, [pc, #168]	@ (80013f8 <effect_rainbow_roll+0x138>)
 800134e:	edc3 7a00 	vstr	s15, [r3]

    for (int i = 0; i < MAX_LED; i++) {
 8001352:	2300      	movs	r3, #0
 8001354:	61bb      	str	r3, [r7, #24]
 8001356:	e02f      	b.n	80013b8 <effect_rainbow_roll+0xf8>
        float hue = fmodf(offset + (i * (360.0f / MAX_LED)), 360.0f);
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	ee07 3a90 	vmov	s15, r3
 800135e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001362:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8001400 <effect_rainbow_roll+0x140>
 8001366:	ee27 7a87 	vmul.f32	s14, s15, s14
 800136a:	4b23      	ldr	r3, [pc, #140]	@ (80013f8 <effect_rainbow_roll+0x138>)
 800136c:	edd3 7a00 	vldr	s15, [r3]
 8001370:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001374:	eddf 0a21 	vldr	s1, [pc, #132]	@ 80013fc <effect_rainbow_roll+0x13c>
 8001378:	eeb0 0a67 	vmov.f32	s0, s15
 800137c:	f006 f9d4 	bl	8007728 <fmodf>
 8001380:	ed87 0a04 	vstr	s0, [r7, #16]
        uint8_t r, g, b;
        HSV_to_RGB(hue, 1.0f, ratio, &r, &g, &b);
 8001384:	f107 020d 	add.w	r2, r7, #13
 8001388:	f107 010e 	add.w	r1, r7, #14
 800138c:	f107 030f 	add.w	r3, r7, #15
 8001390:	4618      	mov	r0, r3
 8001392:	ed97 1a07 	vldr	s2, [r7, #28]
 8001396:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800139a:	ed97 0a04 	vldr	s0, [r7, #16]
 800139e:	f7ff fad7 	bl	8000950 <HSV_to_RGB>
        Set_LED(i, r, g, b);
 80013a2:	7bfb      	ldrb	r3, [r7, #15]
 80013a4:	4619      	mov	r1, r3
 80013a6:	7bbb      	ldrb	r3, [r7, #14]
 80013a8:	461a      	mov	r2, r3
 80013aa:	7b7b      	ldrb	r3, [r7, #13]
 80013ac:	69b8      	ldr	r0, [r7, #24]
 80013ae:	f7ff f9b7 	bl	8000720 <Set_LED>
    for (int i = 0; i < MAX_LED; i++) {
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	3301      	adds	r3, #1
 80013b6:	61bb      	str	r3, [r7, #24]
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	2b35      	cmp	r3, #53	@ 0x35
 80013bc:	ddcc      	ble.n	8001358 <effect_rainbow_roll+0x98>
    }

    int brightness = 5 + (int)(ratio * (brightness_mode - 5));
 80013be:	78fb      	ldrb	r3, [r7, #3]
 80013c0:	3b05      	subs	r3, #5
 80013c2:	ee07 3a90 	vmov	s15, r3
 80013c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013ca:	edd7 7a07 	vldr	s15, [r7, #28]
 80013ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013d6:	ee17 3a90 	vmov	r3, s15
 80013da:	3305      	adds	r3, #5
 80013dc:	617b      	str	r3, [r7, #20]
    Set_Brightness(brightness);
 80013de:	6978      	ldr	r0, [r7, #20]
 80013e0:	f7ff f9cc 	bl	800077c <Set_Brightness>
    WS2812_Send();
 80013e4:	f7ff fa46 	bl	8000874 <WS2812_Send>
}
 80013e8:	bf00      	nop
 80013ea:	3720      	adds	r7, #32
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20000004 	.word	0x20000004
 80013f4:	42c80000 	.word	0x42c80000
 80013f8:	20004e90 	.word	0x20004e90
 80013fc:	43b40000 	.word	0x43b40000
 8001400:	40d55555 	.word	0x40d55555

08001404 <effect_bass_pulse_glow>:

#define BASS_THRESHOLD 1200		// tăng để LED sáng hơn
#define BASS_FADE_MS 300		// tăng để LED tắt chậm hơn

void effect_bass_pulse_glow(uint16_t amplitude, uint16_t peak_freq, uint8_t brightness_mode) {
 8001404:	b580      	push	{r7, lr}
 8001406:	b088      	sub	sp, #32
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	80fb      	strh	r3, [r7, #6]
 800140e:	460b      	mov	r3, r1
 8001410:	80bb      	strh	r3, [r7, #4]
 8001412:	4613      	mov	r3, r2
 8001414:	70fb      	strb	r3, [r7, #3]
    static uint32_t last_bass_time = 0;
    static float hue = 0.0f;
    uint32_t now = HAL_GetTick();
 8001416:	f000 ff17 	bl	8002248 <HAL_GetTick>
 800141a:	6178      	str	r0, [r7, #20]

    // Nếu là bass mạnh → cập nhật thời gian và màu sắc (hue)
    if (peak_freq <= 250 && amplitude > BASS_THRESHOLD) {
 800141c:	88bb      	ldrh	r3, [r7, #4]
 800141e:	2bfa      	cmp	r3, #250	@ 0xfa
 8001420:	d824      	bhi.n	800146c <effect_bass_pulse_glow+0x68>
 8001422:	88fb      	ldrh	r3, [r7, #6]
 8001424:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 8001428:	d920      	bls.n	800146c <effect_bass_pulse_glow+0x68>
        last_bass_time = now;
 800142a:	4a32      	ldr	r2, [pc, #200]	@ (80014f4 <effect_bass_pulse_glow+0xf0>)
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	6013      	str	r3, [r2, #0]

        hue += 30.0f;  // Tăng hue để chuyển màu theo dải cầu vồng
 8001430:	4b31      	ldr	r3, [pc, #196]	@ (80014f8 <effect_bass_pulse_glow+0xf4>)
 8001432:	edd3 7a00 	vldr	s15, [r3]
 8001436:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800143a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800143e:	4b2e      	ldr	r3, [pc, #184]	@ (80014f8 <effect_bass_pulse_glow+0xf4>)
 8001440:	edc3 7a00 	vstr	s15, [r3]
        if (hue >= 360.0f) hue -= 360.0f;
 8001444:	4b2c      	ldr	r3, [pc, #176]	@ (80014f8 <effect_bass_pulse_glow+0xf4>)
 8001446:	edd3 7a00 	vldr	s15, [r3]
 800144a:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 80014fc <effect_bass_pulse_glow+0xf8>
 800144e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001456:	db09      	blt.n	800146c <effect_bass_pulse_glow+0x68>
 8001458:	4b27      	ldr	r3, [pc, #156]	@ (80014f8 <effect_bass_pulse_glow+0xf4>)
 800145a:	edd3 7a00 	vldr	s15, [r3]
 800145e:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 80014fc <effect_bass_pulse_glow+0xf8>
 8001462:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001466:	4b24      	ldr	r3, [pc, #144]	@ (80014f8 <effect_bass_pulse_glow+0xf4>)
 8001468:	edc3 7a00 	vstr	s15, [r3]
    }

    // Tính độ sáng fade theo thời gian kể từ lần bass gần nhất
    uint32_t elapsed = now - last_bass_time;
 800146c:	4b21      	ldr	r3, [pc, #132]	@ (80014f4 <effect_bass_pulse_glow+0xf0>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	697a      	ldr	r2, [r7, #20]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	613b      	str	r3, [r7, #16]
    int brightness;

    if (elapsed >= BASS_FADE_MS) {
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800147c:	d302      	bcc.n	8001484 <effect_bass_pulse_glow+0x80>
        brightness = 0;
 800147e:	2300      	movs	r3, #0
 8001480:	61fb      	str	r3, [r7, #28]
 8001482:	e00a      	b.n	800149a <effect_bass_pulse_glow+0x96>
    } else {
        brightness = brightness_mode - (brightness_mode * elapsed) / BASS_FADE_MS;
 8001484:	78fa      	ldrb	r2, [r7, #3]
 8001486:	78fb      	ldrb	r3, [r7, #3]
 8001488:	6939      	ldr	r1, [r7, #16]
 800148a:	fb01 f303 	mul.w	r3, r1, r3
 800148e:	491c      	ldr	r1, [pc, #112]	@ (8001500 <effect_bass_pulse_glow+0xfc>)
 8001490:	fba1 1303 	umull	r1, r3, r1, r3
 8001494:	095b      	lsrs	r3, r3, #5
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	61fb      	str	r3, [r7, #28]
    }

    // Chuyển hue → RGB
    uint8_t r, g, b;
    HSV_to_RGB(hue, 1.0f, 1.0f, &r, &g, &b);  // Độ sáng sẽ được điều chỉnh sau bằng Set_Brightness()
 800149a:	4b17      	ldr	r3, [pc, #92]	@ (80014f8 <effect_bass_pulse_glow+0xf4>)
 800149c:	edd3 7a00 	vldr	s15, [r3]
 80014a0:	f107 020d 	add.w	r2, r7, #13
 80014a4:	f107 010e 	add.w	r1, r7, #14
 80014a8:	f107 030f 	add.w	r3, r7, #15
 80014ac:	4618      	mov	r0, r3
 80014ae:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 80014b2:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80014b6:	eeb0 0a67 	vmov.f32	s0, s15
 80014ba:	f7ff fa49 	bl	8000950 <HSV_to_RGB>

    // Set toàn bộ LED thành màu đang có
    for (int i = 0; i < MAX_LED; i++) {
 80014be:	2300      	movs	r3, #0
 80014c0:	61bb      	str	r3, [r7, #24]
 80014c2:	e00a      	b.n	80014da <effect_bass_pulse_glow+0xd6>
        Set_LED(i, r, g, b);
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
 80014c6:	4619      	mov	r1, r3
 80014c8:	7bbb      	ldrb	r3, [r7, #14]
 80014ca:	461a      	mov	r2, r3
 80014cc:	7b7b      	ldrb	r3, [r7, #13]
 80014ce:	69b8      	ldr	r0, [r7, #24]
 80014d0:	f7ff f926 	bl	8000720 <Set_LED>
    for (int i = 0; i < MAX_LED; i++) {
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	3301      	adds	r3, #1
 80014d8:	61bb      	str	r3, [r7, #24]
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	2b35      	cmp	r3, #53	@ 0x35
 80014de:	ddf1      	ble.n	80014c4 <effect_bass_pulse_glow+0xc0>
    }

    Set_Brightness(brightness);
 80014e0:	69f8      	ldr	r0, [r7, #28]
 80014e2:	f7ff f94b 	bl	800077c <Set_Brightness>
    WS2812_Send();
 80014e6:	f7ff f9c5 	bl	8000874 <WS2812_Send>
}
 80014ea:	bf00      	nop
 80014ec:	3720      	adds	r7, #32
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20004e94 	.word	0x20004e94
 80014f8:	20004e98 	.word	0x20004e98
 80014fc:	43b40000 	.word	0x43b40000
 8001500:	1b4e81b5 	.word	0x1b4e81b5

08001504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b088      	sub	sp, #32
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  srand(HAL_GetTick());
 800150a:	f000 fe9d 	bl	8002248 <HAL_GetTick>
 800150e:	4603      	mov	r3, r0
 8001510:	4618      	mov	r0, r3
 8001512:	f005 f8ff 	bl	8006714 <srand>
  uint8_t mode_button_index = 0;
 8001516:	2300      	movs	r3, #0
 8001518:	77fb      	strb	r3, [r7, #31]
  uint8_t brightness_button_count = 0;
 800151a:	2300      	movs	r3, #0
 800151c:	77bb      	strb	r3, [r7, #30]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800151e:	f000 fe2d 	bl	800217c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001522:	f000 f945 	bl	80017b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001526:	f000 fb0b 	bl	8001b40 <MX_GPIO_Init>
  MX_DMA_Init();
 800152a:	f000 fae9 	bl	8001b00 <MX_DMA_Init>
  MX_TIM1_Init();
 800152e:	f000 f9fb 	bl	8001928 <MX_TIM1_Init>
  MX_ADC1_Init();
 8001532:	f000 f9a7 	bl	8001884 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001536:	f000 fa97 	bl	8001a68 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */



  HAL_TIM_Base_Start(&htim2);
 800153a:	488d      	ldr	r0, [pc, #564]	@ (8001770 <main+0x26c>)
 800153c:	f002 fe3c 	bl	80041b8 <HAL_TIM_Base_Start>
  HAL_ADC_Start_IT(&hadc1);
 8001540:	488c      	ldr	r0, [pc, #560]	@ (8001774 <main+0x270>)
 8001542:	f000 fef5 	bl	8002330 <HAL_ADC_Start_IT>
  arm_rfft_fast_init_f32(&fftHandler, FFT_BUFFER_SIZE);
 8001546:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800154a:	488b      	ldr	r0, [pc, #556]	@ (8001778 <main+0x274>)
 800154c:	f004 f90e 	bl	800576c <arm_rfft_fast_init_f32>

  float	peakVal	= 0.0f;
 8001550:	f04f 0300 	mov.w	r3, #0
 8001554:	61bb      	str	r3, [r7, #24]
  HAL_Delay(50);
 8001556:	2032      	movs	r0, #50	@ 0x32
 8001558:	f000 fe82 	bl	8002260 <HAL_Delay>
	  while (1)
	  {

	/////////////////////////////////////////////////////////////////////////////////////////
	// KHONG DUOC DONG VAO
			  if (fftReady){
 800155c:	4b87      	ldr	r3, [pc, #540]	@ (800177c <main+0x278>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d053      	beq.n	800160c <main+0x108>
				  peakVal = 0.0f;
 8001564:	f04f 0300 	mov.w	r3, #0
 8001568:	61bb      	str	r3, [r7, #24]
				  peakHz = 0.0f;
 800156a:	4b85      	ldr	r3, [pc, #532]	@ (8001780 <main+0x27c>)
 800156c:	2200      	movs	r2, #0
 800156e:	801a      	strh	r2, [r3, #0]

				  uint16_t halfBins = FFT_BUFFER_SIZE / 2;
 8001570:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001574:	82bb      	strh	r3, [r7, #20]
					  for (uint16_t k = 1; k < halfBins; k++) {
 8001576:	2301      	movs	r3, #1
 8001578:	82fb      	strh	r3, [r7, #22]
 800157a:	e040      	b.n	80015fe <main+0xfa>
						  float re = fftBufOut[2 * k];
 800157c:	8afb      	ldrh	r3, [r7, #22]
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	4a80      	ldr	r2, [pc, #512]	@ (8001784 <main+0x280>)
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	4413      	add	r3, r2
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	613b      	str	r3, [r7, #16]
						  float im = fftBufOut[2 * k + 1];
 800158a:	8afb      	ldrh	r3, [r7, #22]
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	3301      	adds	r3, #1
 8001590:	4a7c      	ldr	r2, [pc, #496]	@ (8001784 <main+0x280>)
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	4413      	add	r3, r2
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	60fb      	str	r3, [r7, #12]
						  float mag = sqrtf(re * re + im * im);
 800159a:	edd7 7a04 	vldr	s15, [r7, #16]
 800159e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80015a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80015a6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80015aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ae:	eeb0 0a67 	vmov.f32	s0, s15
 80015b2:	f006 f8d9 	bl	8007768 <sqrtf>
 80015b6:	ed87 0a02 	vstr	s0, [r7, #8]
						  if (mag > peakVal) {
 80015ba:	ed97 7a02 	vldr	s14, [r7, #8]
 80015be:	edd7 7a06 	vldr	s15, [r7, #24]
 80015c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ca:	dd15      	ble.n	80015f8 <main+0xf4>
							  peakVal = mag;
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	61bb      	str	r3, [r7, #24]
							  peakHz  = (uint16_t)(k  * SAMPLE_RATE_HZ / (float)(FFT_BUFFER_SIZE));
 80015d0:	8afb      	ldrh	r3, [r7, #22]
 80015d2:	ee07 3a90 	vmov	s15, r3
 80015d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015da:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 8001788 <main+0x284>
 80015de:	ee27 7a87 	vmul.f32	s14, s15, s14
 80015e2:	eddf 6a6a 	vldr	s13, [pc, #424]	@ 800178c <main+0x288>
 80015e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015ee:	ee17 3a90 	vmov	r3, s15
 80015f2:	b29a      	uxth	r2, r3
 80015f4:	4b62      	ldr	r3, [pc, #392]	@ (8001780 <main+0x27c>)
 80015f6:	801a      	strh	r2, [r3, #0]
					  for (uint16_t k = 1; k < halfBins; k++) {
 80015f8:	8afb      	ldrh	r3, [r7, #22]
 80015fa:	3301      	adds	r3, #1
 80015fc:	82fb      	strh	r3, [r7, #22]
 80015fe:	8afa      	ldrh	r2, [r7, #22]
 8001600:	8abb      	ldrh	r3, [r7, #20]
 8001602:	429a      	cmp	r2, r3
 8001604:	d3ba      	bcc.n	800157c <main+0x78>
						  }
					  }

					  fftReady = 0;
 8001606:	4b5d      	ldr	r3, [pc, #372]	@ (800177c <main+0x278>)
 8001608:	2200      	movs	r2, #0
 800160a:	701a      	strb	r2, [r3, #0]
			  }
	/////////////////////////////////////////////////////////////////////////////////////////
	// CODE HIEU UNG BAT DAU TU DAY
			  if(HAL_GPIO_ReadPin(MODE_BUTTON_GPIO_Port, MODE_BUTTON_Pin) == 0)
 800160c:	2110      	movs	r1, #16
 800160e:	4860      	ldr	r0, [pc, #384]	@ (8001790 <main+0x28c>)
 8001610:	f002 f906 	bl	8003820 <HAL_GPIO_ReadPin>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d115      	bne.n	8001646 <main+0x142>
			  {
				  while(HAL_GPIO_ReadPin(MODE_BUTTON_GPIO_Port, MODE_BUTTON_Pin) == 0) {}
 800161a:	bf00      	nop
 800161c:	2110      	movs	r1, #16
 800161e:	485c      	ldr	r0, [pc, #368]	@ (8001790 <main+0x28c>)
 8001620:	f002 f8fe 	bl	8003820 <HAL_GPIO_ReadPin>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d0f8      	beq.n	800161c <main+0x118>
				  mode_button_index = (mode_button_index + 1) % 6;
 800162a:	7ffb      	ldrb	r3, [r7, #31]
 800162c:	1c5a      	adds	r2, r3, #1
 800162e:	4b59      	ldr	r3, [pc, #356]	@ (8001794 <main+0x290>)
 8001630:	fb83 3102 	smull	r3, r1, r3, r2
 8001634:	17d3      	asrs	r3, r2, #31
 8001636:	1ac9      	subs	r1, r1, r3
 8001638:	460b      	mov	r3, r1
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	440b      	add	r3, r1
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	1ad1      	subs	r1, r2, r3
 8001642:	460b      	mov	r3, r1
 8001644:	77fb      	strb	r3, [r7, #31]
			  }
			  switch (mode_button_index) {
 8001646:	7ffb      	ldrb	r3, [r7, #31]
 8001648:	2b05      	cmp	r3, #5
 800164a:	d84b      	bhi.n	80016e4 <main+0x1e0>
 800164c:	a201      	add	r2, pc, #4	@ (adr r2, 8001654 <main+0x150>)
 800164e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001652:	bf00      	nop
 8001654:	0800166d 	.word	0x0800166d
 8001658:	08001681 	.word	0x08001681
 800165c:	08001695 	.word	0x08001695
 8001660:	080016a9 	.word	0x080016a9
 8001664:	080016bd 	.word	0x080016bd
 8001668:	080016d1 	.word	0x080016d1
			  	  case 0: effect_flash_fade_random_color(amp, peakHz, brightness_mode); break;
 800166c:	4b4a      	ldr	r3, [pc, #296]	@ (8001798 <main+0x294>)
 800166e:	881b      	ldrh	r3, [r3, #0]
 8001670:	4a43      	ldr	r2, [pc, #268]	@ (8001780 <main+0x27c>)
 8001672:	8811      	ldrh	r1, [r2, #0]
 8001674:	4a49      	ldr	r2, [pc, #292]	@ (800179c <main+0x298>)
 8001676:	7812      	ldrb	r2, [r2, #0]
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff faa3 	bl	8000bc4 <effect_flash_fade_random_color>
 800167e:	e03b      	b.n	80016f8 <main+0x1f4>
			  	  case 1: effect_dynamic_vu_meter(amp, peakHz, brightness_mode); break;
 8001680:	4b45      	ldr	r3, [pc, #276]	@ (8001798 <main+0x294>)
 8001682:	881b      	ldrh	r3, [r3, #0]
 8001684:	4a3e      	ldr	r2, [pc, #248]	@ (8001780 <main+0x27c>)
 8001686:	8811      	ldrh	r1, [r2, #0]
 8001688:	4a44      	ldr	r2, [pc, #272]	@ (800179c <main+0x298>)
 800168a:	7812      	ldrb	r2, [r2, #0]
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff fafb 	bl	8000c88 <effect_dynamic_vu_meter>
 8001692:	e031      	b.n	80016f8 <main+0x1f4>
			  	  case 2: effect_spectrum_color_bands(amp, peakHz, brightness_mode); break;
 8001694:	4b40      	ldr	r3, [pc, #256]	@ (8001798 <main+0x294>)
 8001696:	881b      	ldrh	r3, [r3, #0]
 8001698:	4a39      	ldr	r2, [pc, #228]	@ (8001780 <main+0x27c>)
 800169a:	8811      	ldrh	r1, [r2, #0]
 800169c:	4a3f      	ldr	r2, [pc, #252]	@ (800179c <main+0x298>)
 800169e:	7812      	ldrb	r2, [r2, #0]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff fb99 	bl	8000dd8 <effect_spectrum_color_bands>
 80016a6:	e027      	b.n	80016f8 <main+0x1f4>
			  	  case 3: effect_frequency_chase_gradient(amp, peakHz, brightness_mode); break;
 80016a8:	4b3b      	ldr	r3, [pc, #236]	@ (8001798 <main+0x294>)
 80016aa:	881b      	ldrh	r3, [r3, #0]
 80016ac:	4a34      	ldr	r2, [pc, #208]	@ (8001780 <main+0x27c>)
 80016ae:	8811      	ldrh	r1, [r2, #0]
 80016b0:	4a3a      	ldr	r2, [pc, #232]	@ (800179c <main+0x298>)
 80016b2:	7812      	ldrb	r2, [r2, #0]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff fc35 	bl	8000f24 <effect_frequency_chase_gradient>
 80016ba:	e01d      	b.n	80016f8 <main+0x1f4>
			  	  case 4: effect_rainbow_roll(amp, peakHz, brightness_mode); break;
 80016bc:	4b36      	ldr	r3, [pc, #216]	@ (8001798 <main+0x294>)
 80016be:	881b      	ldrh	r3, [r3, #0]
 80016c0:	4a2f      	ldr	r2, [pc, #188]	@ (8001780 <main+0x27c>)
 80016c2:	8811      	ldrh	r1, [r2, #0]
 80016c4:	4a35      	ldr	r2, [pc, #212]	@ (800179c <main+0x298>)
 80016c6:	7812      	ldrb	r2, [r2, #0]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff fdf9 	bl	80012c0 <effect_rainbow_roll>
 80016ce:	e013      	b.n	80016f8 <main+0x1f4>
			  	  case 5: effect_bass_pulse_glow(amp, peakHz, brightness_mode); break;
 80016d0:	4b31      	ldr	r3, [pc, #196]	@ (8001798 <main+0x294>)
 80016d2:	881b      	ldrh	r3, [r3, #0]
 80016d4:	4a2a      	ldr	r2, [pc, #168]	@ (8001780 <main+0x27c>)
 80016d6:	8811      	ldrh	r1, [r2, #0]
 80016d8:	4a30      	ldr	r2, [pc, #192]	@ (800179c <main+0x298>)
 80016da:	7812      	ldrb	r2, [r2, #0]
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff fe91 	bl	8001404 <effect_bass_pulse_glow>
 80016e2:	e009      	b.n	80016f8 <main+0x1f4>
			  	  default: effect_flash_fade_random_color(amp, peakHz, brightness_mode); break;
 80016e4:	4b2c      	ldr	r3, [pc, #176]	@ (8001798 <main+0x294>)
 80016e6:	881b      	ldrh	r3, [r3, #0]
 80016e8:	4a25      	ldr	r2, [pc, #148]	@ (8001780 <main+0x27c>)
 80016ea:	8811      	ldrh	r1, [r2, #0]
 80016ec:	4a2b      	ldr	r2, [pc, #172]	@ (800179c <main+0x298>)
 80016ee:	7812      	ldrb	r2, [r2, #0]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff fa67 	bl	8000bc4 <effect_flash_fade_random_color>
 80016f6:	bf00      	nop
			  }

			  if(HAL_GPIO_ReadPin(BRIGHTNESS_MODE_BUTTON_GPIO_Port, BRIGHTNESS_MODE_BUTTON_Pin) == 0){
 80016f8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80016fc:	4828      	ldr	r0, [pc, #160]	@ (80017a0 <main+0x29c>)
 80016fe:	f002 f88f 	bl	8003820 <HAL_GPIO_ReadPin>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d12f      	bne.n	8001768 <main+0x264>
				  while(HAL_GPIO_ReadPin(BRIGHTNESS_MODE_BUTTON_GPIO_Port, BRIGHTNESS_MODE_BUTTON_Pin) == 0) {}
 8001708:	bf00      	nop
 800170a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800170e:	4824      	ldr	r0, [pc, #144]	@ (80017a0 <main+0x29c>)
 8001710:	f002 f886 	bl	8003820 <HAL_GPIO_ReadPin>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d0f7      	beq.n	800170a <main+0x206>
				  brightness_mode = (uint8_t)((float)MAX_BRIGHTNESS * ((25.0f * (float)brightness_button_count) / 100.0f));
 800171a:	7fbb      	ldrb	r3, [r7, #30]
 800171c:	ee07 3a90 	vmov	s15, r3
 8001720:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001724:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8001728:	ee27 7a87 	vmul.f32	s14, s15, s14
 800172c:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 80017a4 <main+0x2a0>
 8001730:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001734:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 80017a8 <main+0x2a4>
 8001738:	ee67 7a87 	vmul.f32	s15, s15, s14
 800173c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001740:	edc7 7a01 	vstr	s15, [r7, #4]
 8001744:	793b      	ldrb	r3, [r7, #4]
 8001746:	b2da      	uxtb	r2, r3
 8001748:	4b14      	ldr	r3, [pc, #80]	@ (800179c <main+0x298>)
 800174a:	701a      	strb	r2, [r3, #0]
				  brightness_button_count = (brightness_button_count + 1) % 5;
 800174c:	7fbb      	ldrb	r3, [r7, #30]
 800174e:	1c5a      	adds	r2, r3, #1
 8001750:	4b16      	ldr	r3, [pc, #88]	@ (80017ac <main+0x2a8>)
 8001752:	fb83 1302 	smull	r1, r3, r3, r2
 8001756:	1059      	asrs	r1, r3, #1
 8001758:	17d3      	asrs	r3, r2, #31
 800175a:	1ac9      	subs	r1, r1, r3
 800175c:	460b      	mov	r3, r1
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	440b      	add	r3, r1
 8001762:	1ad1      	subs	r1, r2, r3
 8001764:	460b      	mov	r3, r1
 8001766:	77bb      	strb	r3, [r7, #30]
			  }
		  HAL_Delay(2);
 8001768:	2002      	movs	r0, #2
 800176a:	f000 fd79 	bl	8002260 <HAL_Delay>
			  if (fftReady){
 800176e:	e6f5      	b.n	800155c <main+0x58>
 8001770:	2000011c 	.word	0x2000011c
 8001774:	2000008c 	.word	0x2000008c
 8001778:	20000e08 	.word	0x20000e08
 800177c:	20004e22 	.word	0x20004e22
 8001780:	20000e04 	.word	0x20000e04
 8001784:	20002e20 	.word	0x20002e20
 8001788:	46610000 	.word	0x46610000
 800178c:	45000000 	.word	0x45000000
 8001790:	40020000 	.word	0x40020000
 8001794:	2aaaaaab 	.word	0x2aaaaaab
 8001798:	200001c4 	.word	0x200001c4
 800179c:	20000000 	.word	0x20000000
 80017a0:	40021000 	.word	0x40021000
 80017a4:	42c80000 	.word	0x42c80000
 80017a8:	42340000 	.word	0x42340000
 80017ac:	66666667 	.word	0x66666667

080017b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b094      	sub	sp, #80	@ 0x50
 80017b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017b6:	f107 0320 	add.w	r3, r7, #32
 80017ba:	2230      	movs	r2, #48	@ 0x30
 80017bc:	2100      	movs	r1, #0
 80017be:	4618      	mov	r0, r3
 80017c0:	f005 f919 	bl	80069f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017c4:	f107 030c 	add.w	r3, r7, #12
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017d4:	2300      	movs	r3, #0
 80017d6:	60bb      	str	r3, [r7, #8]
 80017d8:	4b28      	ldr	r3, [pc, #160]	@ (800187c <SystemClock_Config+0xcc>)
 80017da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017dc:	4a27      	ldr	r2, [pc, #156]	@ (800187c <SystemClock_Config+0xcc>)
 80017de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80017e4:	4b25      	ldr	r3, [pc, #148]	@ (800187c <SystemClock_Config+0xcc>)
 80017e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017ec:	60bb      	str	r3, [r7, #8]
 80017ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017f0:	2300      	movs	r3, #0
 80017f2:	607b      	str	r3, [r7, #4]
 80017f4:	4b22      	ldr	r3, [pc, #136]	@ (8001880 <SystemClock_Config+0xd0>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a21      	ldr	r2, [pc, #132]	@ (8001880 <SystemClock_Config+0xd0>)
 80017fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017fe:	6013      	str	r3, [r2, #0]
 8001800:	4b1f      	ldr	r3, [pc, #124]	@ (8001880 <SystemClock_Config+0xd0>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001808:	607b      	str	r3, [r7, #4]
 800180a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800180c:	2302      	movs	r3, #2
 800180e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001810:	2301      	movs	r3, #1
 8001812:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001814:	2310      	movs	r3, #16
 8001816:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001818:	2302      	movs	r3, #2
 800181a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800181c:	2300      	movs	r3, #0
 800181e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001820:	2308      	movs	r3, #8
 8001822:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001824:	2348      	movs	r3, #72	@ 0x48
 8001826:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001828:	2302      	movs	r3, #2
 800182a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800182c:	2304      	movs	r3, #4
 800182e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001830:	f107 0320 	add.w	r3, r7, #32
 8001834:	4618      	mov	r0, r3
 8001836:	f002 f80b 	bl	8003850 <HAL_RCC_OscConfig>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001840:	f000 fa28 	bl	8001c94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001844:	230f      	movs	r3, #15
 8001846:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001848:	2302      	movs	r3, #2
 800184a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800184c:	2300      	movs	r3, #0
 800184e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001850:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001854:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001856:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800185a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800185c:	f107 030c 	add.w	r3, r7, #12
 8001860:	2102      	movs	r1, #2
 8001862:	4618      	mov	r0, r3
 8001864:	f002 fa6c 	bl	8003d40 <HAL_RCC_ClockConfig>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800186e:	f000 fa11 	bl	8001c94 <Error_Handler>
  }
}
 8001872:	bf00      	nop
 8001874:	3750      	adds	r7, #80	@ 0x50
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40023800 	.word	0x40023800
 8001880:	40007000 	.word	0x40007000

08001884 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800188a:	463b      	mov	r3, r7
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001896:	4b22      	ldr	r3, [pc, #136]	@ (8001920 <MX_ADC1_Init+0x9c>)
 8001898:	4a22      	ldr	r2, [pc, #136]	@ (8001924 <MX_ADC1_Init+0xa0>)
 800189a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800189c:	4b20      	ldr	r3, [pc, #128]	@ (8001920 <MX_ADC1_Init+0x9c>)
 800189e:	2200      	movs	r2, #0
 80018a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80018a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001920 <MX_ADC1_Init+0x9c>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80018a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001920 <MX_ADC1_Init+0x9c>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80018ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001920 <MX_ADC1_Init+0x9c>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001920 <MX_ADC1_Init+0x9c>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80018bc:	4b18      	ldr	r3, [pc, #96]	@ (8001920 <MX_ADC1_Init+0x9c>)
 80018be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80018c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80018c4:	4b16      	ldr	r3, [pc, #88]	@ (8001920 <MX_ADC1_Init+0x9c>)
 80018c6:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80018ca:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018cc:	4b14      	ldr	r3, [pc, #80]	@ (8001920 <MX_ADC1_Init+0x9c>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80018d2:	4b13      	ldr	r3, [pc, #76]	@ (8001920 <MX_ADC1_Init+0x9c>)
 80018d4:	2201      	movs	r2, #1
 80018d6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80018d8:	4b11      	ldr	r3, [pc, #68]	@ (8001920 <MX_ADC1_Init+0x9c>)
 80018da:	2200      	movs	r2, #0
 80018dc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001920 <MX_ADC1_Init+0x9c>)
 80018e2:	2201      	movs	r2, #1
 80018e4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80018e6:	480e      	ldr	r0, [pc, #56]	@ (8001920 <MX_ADC1_Init+0x9c>)
 80018e8:	f000 fcde 	bl	80022a8 <HAL_ADC_Init>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 80018f2:	f000 f9cf 	bl	8001c94 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80018f6:	2300      	movs	r3, #0
 80018f8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80018fa:	2301      	movs	r3, #1
 80018fc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80018fe:	2301      	movs	r3, #1
 8001900:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001902:	463b      	mov	r3, r7
 8001904:	4619      	mov	r1, r3
 8001906:	4806      	ldr	r0, [pc, #24]	@ (8001920 <MX_ADC1_Init+0x9c>)
 8001908:	f000 ff22 	bl	8002750 <HAL_ADC_ConfigChannel>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001912:	f000 f9bf 	bl	8001c94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001916:	bf00      	nop
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	2000008c 	.word	0x2000008c
 8001924:	40012000 	.word	0x40012000

08001928 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b096      	sub	sp, #88	@ 0x58
 800192c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800192e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	605a      	str	r2, [r3, #4]
 8001938:	609a      	str	r2, [r3, #8]
 800193a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800193c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001946:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	605a      	str	r2, [r3, #4]
 8001950:	609a      	str	r2, [r3, #8]
 8001952:	60da      	str	r2, [r3, #12]
 8001954:	611a      	str	r2, [r3, #16]
 8001956:	615a      	str	r2, [r3, #20]
 8001958:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800195a:	1d3b      	adds	r3, r7, #4
 800195c:	2220      	movs	r2, #32
 800195e:	2100      	movs	r1, #0
 8001960:	4618      	mov	r0, r3
 8001962:	f005 f848 	bl	80069f6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001966:	4b3e      	ldr	r3, [pc, #248]	@ (8001a60 <MX_TIM1_Init+0x138>)
 8001968:	4a3e      	ldr	r2, [pc, #248]	@ (8001a64 <MX_TIM1_Init+0x13c>)
 800196a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800196c:	4b3c      	ldr	r3, [pc, #240]	@ (8001a60 <MX_TIM1_Init+0x138>)
 800196e:	2200      	movs	r2, #0
 8001970:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001972:	4b3b      	ldr	r3, [pc, #236]	@ (8001a60 <MX_TIM1_Init+0x138>)
 8001974:	2200      	movs	r2, #0
 8001976:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90 - 1;
 8001978:	4b39      	ldr	r3, [pc, #228]	@ (8001a60 <MX_TIM1_Init+0x138>)
 800197a:	2259      	movs	r2, #89	@ 0x59
 800197c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800197e:	4b38      	ldr	r3, [pc, #224]	@ (8001a60 <MX_TIM1_Init+0x138>)
 8001980:	2200      	movs	r2, #0
 8001982:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001984:	4b36      	ldr	r3, [pc, #216]	@ (8001a60 <MX_TIM1_Init+0x138>)
 8001986:	2200      	movs	r2, #0
 8001988:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800198a:	4b35      	ldr	r3, [pc, #212]	@ (8001a60 <MX_TIM1_Init+0x138>)
 800198c:	2200      	movs	r2, #0
 800198e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001990:	4833      	ldr	r0, [pc, #204]	@ (8001a60 <MX_TIM1_Init+0x138>)
 8001992:	f002 fbc1 	bl	8004118 <HAL_TIM_Base_Init>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800199c:	f000 f97a 	bl	8001c94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80019a6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80019aa:	4619      	mov	r1, r3
 80019ac:	482c      	ldr	r0, [pc, #176]	@ (8001a60 <MX_TIM1_Init+0x138>)
 80019ae:	f003 f911 	bl	8004bd4 <HAL_TIM_ConfigClockSource>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80019b8:	f000 f96c 	bl	8001c94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80019bc:	4828      	ldr	r0, [pc, #160]	@ (8001a60 <MX_TIM1_Init+0x138>)
 80019be:	f002 fc63 	bl	8004288 <HAL_TIM_PWM_Init>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80019c8:	f000 f964 	bl	8001c94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019cc:	2300      	movs	r3, #0
 80019ce:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019d0:	2300      	movs	r3, #0
 80019d2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019d4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80019d8:	4619      	mov	r1, r3
 80019da:	4821      	ldr	r0, [pc, #132]	@ (8001a60 <MX_TIM1_Init+0x138>)
 80019dc:	f003 fde4 	bl	80055a8 <HAL_TIMEx_MasterConfigSynchronization>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80019e6:	f000 f955 	bl	8001c94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019ea:	2360      	movs	r3, #96	@ 0x60
 80019ec:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80019ee:	2300      	movs	r3, #0
 80019f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019f2:	2300      	movs	r3, #0
 80019f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019f6:	2300      	movs	r3, #0
 80019f8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019fa:	2300      	movs	r3, #0
 80019fc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019fe:	2300      	movs	r3, #0
 8001a00:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a02:	2300      	movs	r3, #0
 8001a04:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4814      	ldr	r0, [pc, #80]	@ (8001a60 <MX_TIM1_Init+0x138>)
 8001a10:	f003 f81e 	bl	8004a50 <HAL_TIM_PWM_ConfigChannel>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001a1a:	f000 f93b 	bl	8001c94 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a22:	2300      	movs	r3, #0
 8001a24:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a26:	2300      	movs	r3, #0
 8001a28:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a32:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a36:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a3c:	1d3b      	adds	r3, r7, #4
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4807      	ldr	r0, [pc, #28]	@ (8001a60 <MX_TIM1_Init+0x138>)
 8001a42:	f003 fe2d 	bl	80056a0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001a4c:	f000 f922 	bl	8001c94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a50:	4803      	ldr	r0, [pc, #12]	@ (8001a60 <MX_TIM1_Init+0x138>)
 8001a52:	f000 fa09 	bl	8001e68 <HAL_TIM_MspPostInit>

}
 8001a56:	bf00      	nop
 8001a58:	3758      	adds	r7, #88	@ 0x58
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	200000d4 	.word	0x200000d4
 8001a64:	40010000 	.word	0x40010000

08001a68 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a6e:	f107 0308 	add.w	r3, r7, #8
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	605a      	str	r2, [r3, #4]
 8001a78:	609a      	str	r2, [r3, #8]
 8001a7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a7c:	463b      	mov	r3, r7
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]
 8001a82:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a84:	4b1d      	ldr	r3, [pc, #116]	@ (8001afc <MX_TIM2_Init+0x94>)
 8001a86:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a8a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 8001a8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001afc <MX_TIM2_Init+0x94>)
 8001a8e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001a92:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a94:	4b19      	ldr	r3, [pc, #100]	@ (8001afc <MX_TIM2_Init+0x94>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4;
 8001a9a:	4b18      	ldr	r3, [pc, #96]	@ (8001afc <MX_TIM2_Init+0x94>)
 8001a9c:	2204      	movs	r2, #4
 8001a9e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aa0:	4b16      	ldr	r3, [pc, #88]	@ (8001afc <MX_TIM2_Init+0x94>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aa6:	4b15      	ldr	r3, [pc, #84]	@ (8001afc <MX_TIM2_Init+0x94>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001aac:	4813      	ldr	r0, [pc, #76]	@ (8001afc <MX_TIM2_Init+0x94>)
 8001aae:	f002 fb33 	bl	8004118 <HAL_TIM_Base_Init>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001ab8:	f000 f8ec 	bl	8001c94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001abc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ac0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ac2:	f107 0308 	add.w	r3, r7, #8
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	480c      	ldr	r0, [pc, #48]	@ (8001afc <MX_TIM2_Init+0x94>)
 8001aca:	f003 f883 	bl	8004bd4 <HAL_TIM_ConfigClockSource>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001ad4:	f000 f8de 	bl	8001c94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001ad8:	2320      	movs	r3, #32
 8001ada:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001adc:	2300      	movs	r3, #0
 8001ade:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ae0:	463b      	mov	r3, r7
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4805      	ldr	r0, [pc, #20]	@ (8001afc <MX_TIM2_Init+0x94>)
 8001ae6:	f003 fd5f 	bl	80055a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001af0:	f000 f8d0 	bl	8001c94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001af4:	bf00      	nop
 8001af6:	3718      	adds	r7, #24
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	2000011c 	.word	0x2000011c

08001b00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	607b      	str	r3, [r7, #4]
 8001b0a:	4b0c      	ldr	r3, [pc, #48]	@ (8001b3c <MX_DMA_Init+0x3c>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0e:	4a0b      	ldr	r2, [pc, #44]	@ (8001b3c <MX_DMA_Init+0x3c>)
 8001b10:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001b14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b16:	4b09      	ldr	r3, [pc, #36]	@ (8001b3c <MX_DMA_Init+0x3c>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b1e:	607b      	str	r3, [r7, #4]
 8001b20:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8001b22:	2200      	movs	r2, #0
 8001b24:	2105      	movs	r1, #5
 8001b26:	2039      	movs	r0, #57	@ 0x39
 8001b28:	f001 f915 	bl	8002d56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001b2c:	2039      	movs	r0, #57	@ 0x39
 8001b2e:	f001 f92e 	bl	8002d8e <HAL_NVIC_EnableIRQ>

}
 8001b32:	bf00      	nop
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40023800 	.word	0x40023800

08001b40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b088      	sub	sp, #32
 8001b44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b46:	f107 030c 	add.w	r3, r7, #12
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	605a      	str	r2, [r3, #4]
 8001b50:	609a      	str	r2, [r3, #8]
 8001b52:	60da      	str	r2, [r3, #12]
 8001b54:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	60bb      	str	r3, [r7, #8]
 8001b5a:	4b21      	ldr	r3, [pc, #132]	@ (8001be0 <MX_GPIO_Init+0xa0>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b5e:	4a20      	ldr	r2, [pc, #128]	@ (8001be0 <MX_GPIO_Init+0xa0>)
 8001b60:	f043 0301 	orr.w	r3, r3, #1
 8001b64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b66:	4b1e      	ldr	r3, [pc, #120]	@ (8001be0 <MX_GPIO_Init+0xa0>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	60bb      	str	r3, [r7, #8]
 8001b70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	607b      	str	r3, [r7, #4]
 8001b76:	4b1a      	ldr	r3, [pc, #104]	@ (8001be0 <MX_GPIO_Init+0xa0>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7a:	4a19      	ldr	r2, [pc, #100]	@ (8001be0 <MX_GPIO_Init+0xa0>)
 8001b7c:	f043 0310 	orr.w	r3, r3, #16
 8001b80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b82:	4b17      	ldr	r3, [pc, #92]	@ (8001be0 <MX_GPIO_Init+0xa0>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b86:	f003 0310 	and.w	r3, r3, #16
 8001b8a:	607b      	str	r3, [r7, #4]
 8001b8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : MODE_BUTTON_Pin */
  GPIO_InitStruct.Pin = MODE_BUTTON_Pin;
 8001b8e:	2310      	movs	r3, #16
 8001b90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b92:	2300      	movs	r3, #0
 8001b94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b96:	2301      	movs	r3, #1
 8001b98:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MODE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001b9a:	f107 030c 	add.w	r3, r7, #12
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4810      	ldr	r0, [pc, #64]	@ (8001be4 <MX_GPIO_Init+0xa4>)
 8001ba2:	f001 fca1 	bl	80034e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BRIGHTNESS_MODE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BRIGHTNESS_MODE_BUTTON_Pin;
 8001ba6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001baa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bac:	2300      	movs	r3, #0
 8001bae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BRIGHTNESS_MODE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001bb4:	f107 030c 	add.w	r3, r7, #12
 8001bb8:	4619      	mov	r1, r3
 8001bba:	480b      	ldr	r0, [pc, #44]	@ (8001be8 <MX_GPIO_Init+0xa8>)
 8001bbc:	f001 fc94 	bl	80034e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
     GPIO_InitStruct.Pin  = GPIO_PIN_0;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	60fb      	str	r3, [r7, #12]
     GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	613b      	str	r3, [r7, #16]
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	617b      	str	r3, [r7, #20]
     HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bcc:	f107 030c 	add.w	r3, r7, #12
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4804      	ldr	r0, [pc, #16]	@ (8001be4 <MX_GPIO_Init+0xa4>)
 8001bd4:	f001 fc88 	bl	80034e8 <HAL_GPIO_Init>
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001bd8:	bf00      	nop
 8001bda:	3720      	adds	r7, #32
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	40023800 	.word	0x40023800
 8001be4:	40020000 	.word	0x40020000
 8001be8:	40021000 	.word	0x40021000

08001bec <HAL_ADC_ConvCpltCallback>:
//        WS2812_Send();
//    }
//}
//
//// Called when second half of adc_buf is filled by DMA (another 32 samples)
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]

	if (hadc->Instance == ADC1)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a21      	ldr	r2, [pc, #132]	@ (8001c80 <HAL_ADC_ConvCpltCallback+0x94>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d13b      	bne.n	8001c76 <HAL_ADC_ConvCpltCallback+0x8a>
	    {
			if ( middle_point_index > 0){
 8001bfe:	4b21      	ldr	r3, [pc, #132]	@ (8001c84 <HAL_ADC_ConvCpltCallback+0x98>)
 8001c00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	dd12      	ble.n	8001c2e <HAL_ADC_ConvCpltCallback+0x42>
				middle_point += HAL_ADC_GetValue(&hadc1);
 8001c08:	481f      	ldr	r0, [pc, #124]	@ (8001c88 <HAL_ADC_ConvCpltCallback+0x9c>)
 8001c0a:	f000 fd7f 	bl	800270c <HAL_ADC_GetValue>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	4b1e      	ldr	r3, [pc, #120]	@ (8001c8c <HAL_ADC_ConvCpltCallback+0xa0>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4413      	add	r3, r2
 8001c16:	4a1d      	ldr	r2, [pc, #116]	@ (8001c8c <HAL_ADC_ConvCpltCallback+0xa0>)
 8001c18:	6013      	str	r3, [r2, #0]
				middle_point_index = middle_point_index - 1;
 8001c1a:	4b1a      	ldr	r3, [pc, #104]	@ (8001c84 <HAL_ADC_ConvCpltCallback+0x98>)
 8001c1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	3b01      	subs	r3, #1
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	b21a      	sxth	r2, r3
 8001c28:	4b16      	ldr	r3, [pc, #88]	@ (8001c84 <HAL_ADC_ConvCpltCallback+0x98>)
 8001c2a:	801a      	strh	r2, [r3, #0]
 8001c2c:	e015      	b.n	8001c5a <HAL_ADC_ConvCpltCallback+0x6e>
			}

			else if (middle_point_index == 0){
 8001c2e:	4b15      	ldr	r3, [pc, #84]	@ (8001c84 <HAL_ADC_ConvCpltCallback+0x98>)
 8001c30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d10e      	bne.n	8001c56 <HAL_ADC_ConvCpltCallback+0x6a>
				middle_point/= 32;
 8001c38:	4b14      	ldr	r3, [pc, #80]	@ (8001c8c <HAL_ADC_ConvCpltCallback+0xa0>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	095b      	lsrs	r3, r3, #5
 8001c3e:	4a13      	ldr	r2, [pc, #76]	@ (8001c8c <HAL_ADC_ConvCpltCallback+0xa0>)
 8001c40:	6013      	str	r3, [r2, #0]
				middle_point_index = middle_point_index - 1;
 8001c42:	4b10      	ldr	r3, [pc, #64]	@ (8001c84 <HAL_ADC_ConvCpltCallback+0x98>)
 8001c44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	b21a      	sxth	r2, r3
 8001c50:	4b0c      	ldr	r3, [pc, #48]	@ (8001c84 <HAL_ADC_ConvCpltCallback+0x98>)
 8001c52:	801a      	strh	r2, [r3, #0]
 8001c54:	e001      	b.n	8001c5a <HAL_ADC_ConvCpltCallback+0x6e>
			}
			else{
				record_sample_and_maybe_runFFT();
 8001c56:	f7fe fd01 	bl	800065c <record_sample_and_maybe_runFFT>
			}

	        amp = abs(HAL_ADC_GetValue(&hadc1) - (uint16_t)middle_point);
 8001c5a:	480b      	ldr	r0, [pc, #44]	@ (8001c88 <HAL_ADC_ConvCpltCallback+0x9c>)
 8001c5c:	f000 fd56 	bl	800270c <HAL_ADC_GetValue>
 8001c60:	4603      	mov	r3, r0
 8001c62:	4a0a      	ldr	r2, [pc, #40]	@ (8001c8c <HAL_ADC_ConvCpltCallback+0xa0>)
 8001c64:	6812      	ldr	r2, [r2, #0]
 8001c66:	b292      	uxth	r2, r2
 8001c68:	1a9b      	subs	r3, r3, r2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	bfb8      	it	lt
 8001c6e:	425b      	neglt	r3, r3
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	4b07      	ldr	r3, [pc, #28]	@ (8001c90 <HAL_ADC_ConvCpltCallback+0xa4>)
 8001c74:	801a      	strh	r2, [r3, #0]

	        // process “raw” or store into buffer or set a flag, etc.
	    }

}
 8001c76:	bf00      	nop
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40012000 	.word	0x40012000
 8001c84:	20000002 	.word	0x20000002
 8001c88:	2000008c 	.word	0x2000008c
 8001c8c:	20000e00 	.word	0x20000e00
 8001c90:	200001c4 	.word	0x200001c4

08001c94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c98:	b672      	cpsid	i
}
 8001c9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c9c:	bf00      	nop
 8001c9e:	e7fd      	b.n	8001c9c <Error_Handler+0x8>

08001ca0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	607b      	str	r3, [r7, #4]
 8001caa:	4b10      	ldr	r3, [pc, #64]	@ (8001cec <HAL_MspInit+0x4c>)
 8001cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cae:	4a0f      	ldr	r2, [pc, #60]	@ (8001cec <HAL_MspInit+0x4c>)
 8001cb0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8001cec <HAL_MspInit+0x4c>)
 8001cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cbe:	607b      	str	r3, [r7, #4]
 8001cc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	603b      	str	r3, [r7, #0]
 8001cc6:	4b09      	ldr	r3, [pc, #36]	@ (8001cec <HAL_MspInit+0x4c>)
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cca:	4a08      	ldr	r2, [pc, #32]	@ (8001cec <HAL_MspInit+0x4c>)
 8001ccc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cd2:	4b06      	ldr	r3, [pc, #24]	@ (8001cec <HAL_MspInit+0x4c>)
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cda:	603b      	str	r3, [r7, #0]
 8001cdc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	40023800 	.word	0x40023800

08001cf0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b08a      	sub	sp, #40	@ 0x28
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf8:	f107 0314 	add.w	r3, r7, #20
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	605a      	str	r2, [r3, #4]
 8001d02:	609a      	str	r2, [r3, #8]
 8001d04:	60da      	str	r2, [r3, #12]
 8001d06:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a1b      	ldr	r2, [pc, #108]	@ (8001d7c <HAL_ADC_MspInit+0x8c>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d12f      	bne.n	8001d72 <HAL_ADC_MspInit+0x82>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	613b      	str	r3, [r7, #16]
 8001d16:	4b1a      	ldr	r3, [pc, #104]	@ (8001d80 <HAL_ADC_MspInit+0x90>)
 8001d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d1a:	4a19      	ldr	r2, [pc, #100]	@ (8001d80 <HAL_ADC_MspInit+0x90>)
 8001d1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d20:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d22:	4b17      	ldr	r3, [pc, #92]	@ (8001d80 <HAL_ADC_MspInit+0x90>)
 8001d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d2a:	613b      	str	r3, [r7, #16]
 8001d2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	4b13      	ldr	r3, [pc, #76]	@ (8001d80 <HAL_ADC_MspInit+0x90>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d36:	4a12      	ldr	r2, [pc, #72]	@ (8001d80 <HAL_ADC_MspInit+0x90>)
 8001d38:	f043 0301 	orr.w	r3, r3, #1
 8001d3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d3e:	4b10      	ldr	r3, [pc, #64]	@ (8001d80 <HAL_ADC_MspInit+0x90>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	60fb      	str	r3, [r7, #12]
 8001d48:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d52:	2300      	movs	r3, #0
 8001d54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d56:	f107 0314 	add.w	r3, r7, #20
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4809      	ldr	r0, [pc, #36]	@ (8001d84 <HAL_ADC_MspInit+0x94>)
 8001d5e:	f001 fbc3 	bl	80034e8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001d62:	2200      	movs	r2, #0
 8001d64:	2100      	movs	r1, #0
 8001d66:	2012      	movs	r0, #18
 8001d68:	f000 fff5 	bl	8002d56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001d6c:	2012      	movs	r0, #18
 8001d6e:	f001 f80e 	bl	8002d8e <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001d72:	bf00      	nop
 8001d74:	3728      	adds	r7, #40	@ 0x28
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40012000 	.word	0x40012000
 8001d80:	40023800 	.word	0x40023800
 8001d84:	40020000 	.word	0x40020000

08001d88 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a30      	ldr	r2, [pc, #192]	@ (8001e58 <HAL_TIM_Base_MspInit+0xd0>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d13f      	bne.n	8001e1a <HAL_TIM_Base_MspInit+0x92>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	4b2f      	ldr	r3, [pc, #188]	@ (8001e5c <HAL_TIM_Base_MspInit+0xd4>)
 8001da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001da2:	4a2e      	ldr	r2, [pc, #184]	@ (8001e5c <HAL_TIM_Base_MspInit+0xd4>)
 8001da4:	f043 0301 	orr.w	r3, r3, #1
 8001da8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001daa:	4b2c      	ldr	r3, [pc, #176]	@ (8001e5c <HAL_TIM_Base_MspInit+0xd4>)
 8001dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8001db6:	4b2a      	ldr	r3, [pc, #168]	@ (8001e60 <HAL_TIM_Base_MspInit+0xd8>)
 8001db8:	4a2a      	ldr	r2, [pc, #168]	@ (8001e64 <HAL_TIM_Base_MspInit+0xdc>)
 8001dba:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8001dbc:	4b28      	ldr	r3, [pc, #160]	@ (8001e60 <HAL_TIM_Base_MspInit+0xd8>)
 8001dbe:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8001dc2:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001dc4:	4b26      	ldr	r3, [pc, #152]	@ (8001e60 <HAL_TIM_Base_MspInit+0xd8>)
 8001dc6:	2240      	movs	r2, #64	@ 0x40
 8001dc8:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dca:	4b25      	ldr	r3, [pc, #148]	@ (8001e60 <HAL_TIM_Base_MspInit+0xd8>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001dd0:	4b23      	ldr	r3, [pc, #140]	@ (8001e60 <HAL_TIM_Base_MspInit+0xd8>)
 8001dd2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001dd6:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001dd8:	4b21      	ldr	r3, [pc, #132]	@ (8001e60 <HAL_TIM_Base_MspInit+0xd8>)
 8001dda:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001dde:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001de0:	4b1f      	ldr	r3, [pc, #124]	@ (8001e60 <HAL_TIM_Base_MspInit+0xd8>)
 8001de2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001de6:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001de8:	4b1d      	ldr	r3, [pc, #116]	@ (8001e60 <HAL_TIM_Base_MspInit+0xd8>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8001dee:	4b1c      	ldr	r3, [pc, #112]	@ (8001e60 <HAL_TIM_Base_MspInit+0xd8>)
 8001df0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001df4:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001df6:	4b1a      	ldr	r3, [pc, #104]	@ (8001e60 <HAL_TIM_Base_MspInit+0xd8>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001dfc:	4818      	ldr	r0, [pc, #96]	@ (8001e60 <HAL_TIM_Base_MspInit+0xd8>)
 8001dfe:	f000 ffe1 	bl	8002dc4 <HAL_DMA_Init>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8001e08:	f7ff ff44 	bl	8001c94 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	4a14      	ldr	r2, [pc, #80]	@ (8001e60 <HAL_TIM_Base_MspInit+0xd8>)
 8001e10:	625a      	str	r2, [r3, #36]	@ 0x24
 8001e12:	4a13      	ldr	r2, [pc, #76]	@ (8001e60 <HAL_TIM_Base_MspInit+0xd8>)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6393      	str	r3, [r2, #56]	@ 0x38
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001e18:	e01a      	b.n	8001e50 <HAL_TIM_Base_MspInit+0xc8>
  else if(htim_base->Instance==TIM2)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e22:	d115      	bne.n	8001e50 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e24:	2300      	movs	r3, #0
 8001e26:	60bb      	str	r3, [r7, #8]
 8001e28:	4b0c      	ldr	r3, [pc, #48]	@ (8001e5c <HAL_TIM_Base_MspInit+0xd4>)
 8001e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2c:	4a0b      	ldr	r2, [pc, #44]	@ (8001e5c <HAL_TIM_Base_MspInit+0xd4>)
 8001e2e:	f043 0301 	orr.w	r3, r3, #1
 8001e32:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e34:	4b09      	ldr	r3, [pc, #36]	@ (8001e5c <HAL_TIM_Base_MspInit+0xd4>)
 8001e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e38:	f003 0301 	and.w	r3, r3, #1
 8001e3c:	60bb      	str	r3, [r7, #8]
 8001e3e:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e40:	2200      	movs	r2, #0
 8001e42:	2100      	movs	r1, #0
 8001e44:	201c      	movs	r0, #28
 8001e46:	f000 ff86 	bl	8002d56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e4a:	201c      	movs	r0, #28
 8001e4c:	f000 ff9f 	bl	8002d8e <HAL_NVIC_EnableIRQ>
}
 8001e50:	bf00      	nop
 8001e52:	3710      	adds	r7, #16
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40010000 	.word	0x40010000
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	20000164 	.word	0x20000164
 8001e64:	40026428 	.word	0x40026428

08001e68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b088      	sub	sp, #32
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e70:	f107 030c 	add.w	r3, r7, #12
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	605a      	str	r2, [r3, #4]
 8001e7a:	609a      	str	r2, [r3, #8]
 8001e7c:	60da      	str	r2, [r3, #12]
 8001e7e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a12      	ldr	r2, [pc, #72]	@ (8001ed0 <HAL_TIM_MspPostInit+0x68>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d11e      	bne.n	8001ec8 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	60bb      	str	r3, [r7, #8]
 8001e8e:	4b11      	ldr	r3, [pc, #68]	@ (8001ed4 <HAL_TIM_MspPostInit+0x6c>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e92:	4a10      	ldr	r2, [pc, #64]	@ (8001ed4 <HAL_TIM_MspPostInit+0x6c>)
 8001e94:	f043 0310 	orr.w	r3, r3, #16
 8001e98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e9a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ed4 <HAL_TIM_MspPostInit+0x6c>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9e:	f003 0310 	and.w	r3, r3, #16
 8001ea2:	60bb      	str	r3, [r7, #8]
 8001ea4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = RGB_LED_Pin;
 8001ea6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001eaa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eac:	2302      	movs	r3, #2
 8001eae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(RGB_LED_GPIO_Port, &GPIO_InitStruct);
 8001ebc:	f107 030c 	add.w	r3, r7, #12
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4805      	ldr	r0, [pc, #20]	@ (8001ed8 <HAL_TIM_MspPostInit+0x70>)
 8001ec4:	f001 fb10 	bl	80034e8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001ec8:	bf00      	nop
 8001eca:	3720      	adds	r7, #32
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40010000 	.word	0x40010000
 8001ed4:	40023800 	.word	0x40023800
 8001ed8:	40021000 	.word	0x40021000

08001edc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ee0:	bf00      	nop
 8001ee2:	e7fd      	b.n	8001ee0 <NMI_Handler+0x4>

08001ee4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ee8:	bf00      	nop
 8001eea:	e7fd      	b.n	8001ee8 <HardFault_Handler+0x4>

08001eec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ef0:	bf00      	nop
 8001ef2:	e7fd      	b.n	8001ef0 <MemManage_Handler+0x4>

08001ef4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ef8:	bf00      	nop
 8001efa:	e7fd      	b.n	8001ef8 <BusFault_Handler+0x4>

08001efc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f00:	bf00      	nop
 8001f02:	e7fd      	b.n	8001f00 <UsageFault_Handler+0x4>

08001f04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f08:	bf00      	nop
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr

08001f12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f12:	b480      	push	{r7}
 8001f14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f16:	bf00      	nop
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f24:	bf00      	nop
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f32:	f000 f975 	bl	8002220 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f36:	bf00      	nop
 8001f38:	bd80      	pop	{r7, pc}
	...

08001f3c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001f40:	4802      	ldr	r0, [pc, #8]	@ (8001f4c <ADC_IRQHandler+0x10>)
 8001f42:	f000 fad3 	bl	80024ec <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001f46:	bf00      	nop
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	2000008c 	.word	0x2000008c

08001f50 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f54:	4802      	ldr	r0, [pc, #8]	@ (8001f60 <TIM2_IRQHandler+0x10>)
 8001f56:	f002 fc8b 	bl	8004870 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	2000011c 	.word	0x2000011c

08001f64 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001f68:	4802      	ldr	r0, [pc, #8]	@ (8001f74 <DMA2_Stream1_IRQHandler+0x10>)
 8001f6a:	f001 f853 	bl	8003014 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20000164 	.word	0x20000164

08001f78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  return 1;
 8001f7c:	2301      	movs	r3, #1
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <_kill>:

int _kill(int pid, int sig)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f92:	f004 fd7f 	bl	8006a94 <__errno>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2216      	movs	r2, #22
 8001f9a:	601a      	str	r2, [r3, #0]
  return -1;
 8001f9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3708      	adds	r7, #8
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <_exit>:

void _exit (int status)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001fb0:	f04f 31ff 	mov.w	r1, #4294967295
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f7ff ffe7 	bl	8001f88 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001fba:	bf00      	nop
 8001fbc:	e7fd      	b.n	8001fba <_exit+0x12>

08001fbe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b086      	sub	sp, #24
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	60f8      	str	r0, [r7, #12]
 8001fc6:	60b9      	str	r1, [r7, #8]
 8001fc8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fca:	2300      	movs	r3, #0
 8001fcc:	617b      	str	r3, [r7, #20]
 8001fce:	e00a      	b.n	8001fe6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001fd0:	f3af 8000 	nop.w
 8001fd4:	4601      	mov	r1, r0
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	1c5a      	adds	r2, r3, #1
 8001fda:	60ba      	str	r2, [r7, #8]
 8001fdc:	b2ca      	uxtb	r2, r1
 8001fde:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	617b      	str	r3, [r7, #20]
 8001fe6:	697a      	ldr	r2, [r7, #20]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	dbf0      	blt.n	8001fd0 <_read+0x12>
  }

  return len;
 8001fee:	687b      	ldr	r3, [r7, #4]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3718      	adds	r7, #24
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002004:	2300      	movs	r3, #0
 8002006:	617b      	str	r3, [r7, #20]
 8002008:	e009      	b.n	800201e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	1c5a      	adds	r2, r3, #1
 800200e:	60ba      	str	r2, [r7, #8]
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	4618      	mov	r0, r3
 8002014:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	3301      	adds	r3, #1
 800201c:	617b      	str	r3, [r7, #20]
 800201e:	697a      	ldr	r2, [r7, #20]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	429a      	cmp	r2, r3
 8002024:	dbf1      	blt.n	800200a <_write+0x12>
  }
  return len;
 8002026:	687b      	ldr	r3, [r7, #4]
}
 8002028:	4618      	mov	r0, r3
 800202a:	3718      	adds	r7, #24
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <_close>:

int _close(int file)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002038:	f04f 33ff 	mov.w	r3, #4294967295
}
 800203c:	4618      	mov	r0, r3
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002058:	605a      	str	r2, [r3, #4]
  return 0;
 800205a:	2300      	movs	r3, #0
}
 800205c:	4618      	mov	r0, r3
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <_isatty>:

int _isatty(int file)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002070:	2301      	movs	r3, #1
}
 8002072:	4618      	mov	r0, r3
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr

0800207e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800207e:	b480      	push	{r7}
 8002080:	b085      	sub	sp, #20
 8002082:	af00      	add	r7, sp, #0
 8002084:	60f8      	str	r0, [r7, #12]
 8002086:	60b9      	str	r1, [r7, #8]
 8002088:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	3714      	adds	r7, #20
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020a0:	4a14      	ldr	r2, [pc, #80]	@ (80020f4 <_sbrk+0x5c>)
 80020a2:	4b15      	ldr	r3, [pc, #84]	@ (80020f8 <_sbrk+0x60>)
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020ac:	4b13      	ldr	r3, [pc, #76]	@ (80020fc <_sbrk+0x64>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d102      	bne.n	80020ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020b4:	4b11      	ldr	r3, [pc, #68]	@ (80020fc <_sbrk+0x64>)
 80020b6:	4a12      	ldr	r2, [pc, #72]	@ (8002100 <_sbrk+0x68>)
 80020b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020ba:	4b10      	ldr	r3, [pc, #64]	@ (80020fc <_sbrk+0x64>)
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4413      	add	r3, r2
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d207      	bcs.n	80020d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020c8:	f004 fce4 	bl	8006a94 <__errno>
 80020cc:	4603      	mov	r3, r0
 80020ce:	220c      	movs	r2, #12
 80020d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020d2:	f04f 33ff 	mov.w	r3, #4294967295
 80020d6:	e009      	b.n	80020ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020d8:	4b08      	ldr	r3, [pc, #32]	@ (80020fc <_sbrk+0x64>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020de:	4b07      	ldr	r3, [pc, #28]	@ (80020fc <_sbrk+0x64>)
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4413      	add	r3, r2
 80020e6:	4a05      	ldr	r2, [pc, #20]	@ (80020fc <_sbrk+0x64>)
 80020e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020ea:	68fb      	ldr	r3, [r7, #12]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3718      	adds	r7, #24
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	20020000 	.word	0x20020000
 80020f8:	00000400 	.word	0x00000400
 80020fc:	20004e9c 	.word	0x20004e9c
 8002100:	20004ff0 	.word	0x20004ff0

08002104 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002108:	4b06      	ldr	r3, [pc, #24]	@ (8002124 <SystemInit+0x20>)
 800210a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800210e:	4a05      	ldr	r2, [pc, #20]	@ (8002124 <SystemInit+0x20>)
 8002110:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002114:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002118:	bf00      	nop
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	e000ed00 	.word	0xe000ed00

08002128 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002128:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002160 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800212c:	f7ff ffea 	bl	8002104 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002130:	480c      	ldr	r0, [pc, #48]	@ (8002164 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002132:	490d      	ldr	r1, [pc, #52]	@ (8002168 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002134:	4a0d      	ldr	r2, [pc, #52]	@ (800216c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002136:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002138:	e002      	b.n	8002140 <LoopCopyDataInit>

0800213a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800213a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800213c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800213e:	3304      	adds	r3, #4

08002140 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002140:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002142:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002144:	d3f9      	bcc.n	800213a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002146:	4a0a      	ldr	r2, [pc, #40]	@ (8002170 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002148:	4c0a      	ldr	r4, [pc, #40]	@ (8002174 <LoopFillZerobss+0x22>)
  movs r3, #0
 800214a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800214c:	e001      	b.n	8002152 <LoopFillZerobss>

0800214e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800214e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002150:	3204      	adds	r2, #4

08002152 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002152:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002154:	d3fb      	bcc.n	800214e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002156:	f004 fca3 	bl	8006aa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800215a:	f7ff f9d3 	bl	8001504 <main>
  bx  lr    
 800215e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002160:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002164:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002168:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800216c:	0801ae30 	.word	0x0801ae30
  ldr r2, =_sbss
 8002170:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002174:	20004ff0 	.word	0x20004ff0

08002178 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002178:	e7fe      	b.n	8002178 <CAN1_RX0_IRQHandler>
	...

0800217c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002180:	4b0e      	ldr	r3, [pc, #56]	@ (80021bc <HAL_Init+0x40>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a0d      	ldr	r2, [pc, #52]	@ (80021bc <HAL_Init+0x40>)
 8002186:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800218a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800218c:	4b0b      	ldr	r3, [pc, #44]	@ (80021bc <HAL_Init+0x40>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a0a      	ldr	r2, [pc, #40]	@ (80021bc <HAL_Init+0x40>)
 8002192:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002196:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002198:	4b08      	ldr	r3, [pc, #32]	@ (80021bc <HAL_Init+0x40>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a07      	ldr	r2, [pc, #28]	@ (80021bc <HAL_Init+0x40>)
 800219e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021a4:	2003      	movs	r0, #3
 80021a6:	f000 fdcb 	bl	8002d40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021aa:	200f      	movs	r0, #15
 80021ac:	f000 f808 	bl	80021c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021b0:	f7ff fd76 	bl	8001ca0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40023c00 	.word	0x40023c00

080021c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021c8:	4b12      	ldr	r3, [pc, #72]	@ (8002214 <HAL_InitTick+0x54>)
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	4b12      	ldr	r3, [pc, #72]	@ (8002218 <HAL_InitTick+0x58>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	4619      	mov	r1, r3
 80021d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80021da:	fbb2 f3f3 	udiv	r3, r2, r3
 80021de:	4618      	mov	r0, r3
 80021e0:	f000 fde3 	bl	8002daa <HAL_SYSTICK_Config>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e00e      	b.n	800220c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2b0f      	cmp	r3, #15
 80021f2:	d80a      	bhi.n	800220a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021f4:	2200      	movs	r2, #0
 80021f6:	6879      	ldr	r1, [r7, #4]
 80021f8:	f04f 30ff 	mov.w	r0, #4294967295
 80021fc:	f000 fdab 	bl	8002d56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002200:	4a06      	ldr	r2, [pc, #24]	@ (800221c <HAL_InitTick+0x5c>)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002206:	2300      	movs	r3, #0
 8002208:	e000      	b.n	800220c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
}
 800220c:	4618      	mov	r0, r3
 800220e:	3708      	adds	r7, #8
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	20000008 	.word	0x20000008
 8002218:	20000010 	.word	0x20000010
 800221c:	2000000c 	.word	0x2000000c

08002220 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002224:	4b06      	ldr	r3, [pc, #24]	@ (8002240 <HAL_IncTick+0x20>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	461a      	mov	r2, r3
 800222a:	4b06      	ldr	r3, [pc, #24]	@ (8002244 <HAL_IncTick+0x24>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4413      	add	r3, r2
 8002230:	4a04      	ldr	r2, [pc, #16]	@ (8002244 <HAL_IncTick+0x24>)
 8002232:	6013      	str	r3, [r2, #0]
}
 8002234:	bf00      	nop
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	20000010 	.word	0x20000010
 8002244:	20004ea0 	.word	0x20004ea0

08002248 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  return uwTick;
 800224c:	4b03      	ldr	r3, [pc, #12]	@ (800225c <HAL_GetTick+0x14>)
 800224e:	681b      	ldr	r3, [r3, #0]
}
 8002250:	4618      	mov	r0, r3
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	20004ea0 	.word	0x20004ea0

08002260 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002268:	f7ff ffee 	bl	8002248 <HAL_GetTick>
 800226c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002278:	d005      	beq.n	8002286 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800227a:	4b0a      	ldr	r3, [pc, #40]	@ (80022a4 <HAL_Delay+0x44>)
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	461a      	mov	r2, r3
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	4413      	add	r3, r2
 8002284:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002286:	bf00      	nop
 8002288:	f7ff ffde 	bl	8002248 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	429a      	cmp	r2, r3
 8002296:	d8f7      	bhi.n	8002288 <HAL_Delay+0x28>
  {
  }
}
 8002298:	bf00      	nop
 800229a:	bf00      	nop
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	20000010 	.word	0x20000010

080022a8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022b0:	2300      	movs	r3, #0
 80022b2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d101      	bne.n	80022be <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e033      	b.n	8002326 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d109      	bne.n	80022da <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f7ff fd12 	bl	8001cf0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022de:	f003 0310 	and.w	r3, r3, #16
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d118      	bne.n	8002318 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ea:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80022ee:	f023 0302 	bic.w	r3, r3, #2
 80022f2:	f043 0202 	orr.w	r2, r3, #2
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f000 fb4a 	bl	8002994 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800230a:	f023 0303 	bic.w	r3, r3, #3
 800230e:	f043 0201 	orr.w	r2, r3, #1
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	641a      	str	r2, [r3, #64]	@ 0x40
 8002316:	e001      	b.n	800231c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002324:	7bfb      	ldrb	r3, [r7, #15]
}
 8002326:	4618      	mov	r0, r3
 8002328:	3710      	adds	r7, #16
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
	...

08002330 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002338:	2300      	movs	r3, #0
 800233a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002342:	2b01      	cmp	r3, #1
 8002344:	d101      	bne.n	800234a <HAL_ADC_Start_IT+0x1a>
 8002346:	2302      	movs	r3, #2
 8002348:	e0bd      	b.n	80024c6 <HAL_ADC_Start_IT+0x196>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2201      	movs	r2, #1
 800234e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f003 0301 	and.w	r3, r3, #1
 800235c:	2b01      	cmp	r3, #1
 800235e:	d018      	beq.n	8002392 <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	689a      	ldr	r2, [r3, #8]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f042 0201 	orr.w	r2, r2, #1
 800236e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002370:	4b58      	ldr	r3, [pc, #352]	@ (80024d4 <HAL_ADC_Start_IT+0x1a4>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a58      	ldr	r2, [pc, #352]	@ (80024d8 <HAL_ADC_Start_IT+0x1a8>)
 8002376:	fba2 2303 	umull	r2, r3, r2, r3
 800237a:	0c9a      	lsrs	r2, r3, #18
 800237c:	4613      	mov	r3, r2
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	4413      	add	r3, r2
 8002382:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002384:	e002      	b.n	800238c <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	3b01      	subs	r3, #1
 800238a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d1f9      	bne.n	8002386 <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f003 0301 	and.w	r3, r3, #1
 800239c:	2b01      	cmp	r3, #1
 800239e:	f040 8085 	bne.w	80024ac <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a6:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80023aa:	f023 0301 	bic.w	r3, r3, #1
 80023ae:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d007      	beq.n	80023d4 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80023cc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023e0:	d106      	bne.n	80023f0 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023e6:	f023 0206 	bic.w	r2, r3, #6
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	645a      	str	r2, [r3, #68]	@ 0x44
 80023ee:	e002      	b.n	80023f6 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023fe:	4b37      	ldr	r3, [pc, #220]	@ (80024dc <HAL_ADC_Start_IT+0x1ac>)
 8002400:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800240a:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	6812      	ldr	r2, [r2, #0]
 8002416:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800241a:	f043 0320 	orr.w	r3, r3, #32
 800241e:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f003 031f 	and.w	r3, r3, #31
 8002428:	2b00      	cmp	r3, #0
 800242a:	d12a      	bne.n	8002482 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a2b      	ldr	r2, [pc, #172]	@ (80024e0 <HAL_ADC_Start_IT+0x1b0>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d015      	beq.n	8002462 <HAL_ADC_Start_IT+0x132>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a2a      	ldr	r2, [pc, #168]	@ (80024e4 <HAL_ADC_Start_IT+0x1b4>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d105      	bne.n	800244c <HAL_ADC_Start_IT+0x11c>
 8002440:	4b26      	ldr	r3, [pc, #152]	@ (80024dc <HAL_ADC_Start_IT+0x1ac>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f003 031f 	and.w	r3, r3, #31
 8002448:	2b00      	cmp	r3, #0
 800244a:	d00a      	beq.n	8002462 <HAL_ADC_Start_IT+0x132>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a25      	ldr	r2, [pc, #148]	@ (80024e8 <HAL_ADC_Start_IT+0x1b8>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d136      	bne.n	80024c4 <HAL_ADC_Start_IT+0x194>
 8002456:	4b21      	ldr	r3, [pc, #132]	@ (80024dc <HAL_ADC_Start_IT+0x1ac>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f003 0310 	and.w	r3, r3, #16
 800245e:	2b00      	cmp	r3, #0
 8002460:	d130      	bne.n	80024c4 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d129      	bne.n	80024c4 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	689a      	ldr	r2, [r3, #8]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800247e:	609a      	str	r2, [r3, #8]
 8002480:	e020      	b.n	80024c4 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a16      	ldr	r2, [pc, #88]	@ (80024e0 <HAL_ADC_Start_IT+0x1b0>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d11b      	bne.n	80024c4 <HAL_ADC_Start_IT+0x194>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d114      	bne.n	80024c4 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	689a      	ldr	r2, [r3, #8]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80024a8:	609a      	str	r2, [r3, #8]
 80024aa:	e00b      	b.n	80024c4 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b0:	f043 0210 	orr.w	r2, r3, #16
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024bc:	f043 0201 	orr.w	r2, r3, #1
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3714      	adds	r7, #20
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	20000008 	.word	0x20000008
 80024d8:	431bde83 	.word	0x431bde83
 80024dc:	40012300 	.word	0x40012300
 80024e0:	40012000 	.word	0x40012000
 80024e4:	40012100 	.word	0x40012100
 80024e8:	40012200 	.word	0x40012200

080024ec <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80024f4:	2300      	movs	r3, #0
 80024f6:	617b      	str	r3, [r7, #20]
 80024f8:	2300      	movs	r3, #0
 80024fa:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	f003 0320 	and.w	r3, r3, #32
 800251a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d049      	beq.n	80025b6 <HAL_ADC_IRQHandler+0xca>
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d046      	beq.n	80025b6 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800252c:	f003 0310 	and.w	r3, r3, #16
 8002530:	2b00      	cmp	r3, #0
 8002532:	d105      	bne.n	8002540 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002538:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d12b      	bne.n	80025a6 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002552:	2b00      	cmp	r3, #0
 8002554:	d127      	bne.n	80025a6 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800255c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002560:	2b00      	cmp	r3, #0
 8002562:	d006      	beq.n	8002572 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800256e:	2b00      	cmp	r3, #0
 8002570:	d119      	bne.n	80025a6 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	685a      	ldr	r2, [r3, #4]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f022 0220 	bic.w	r2, r2, #32
 8002580:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002586:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002592:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d105      	bne.n	80025a6 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259e:	f043 0201 	orr.w	r2, r3, #1
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f7ff fb20 	bl	8001bec <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f06f 0212 	mvn.w	r2, #18
 80025b4:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f003 0304 	and.w	r3, r3, #4
 80025bc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025c4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d057      	beq.n	800267c <HAL_ADC_IRQHandler+0x190>
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d054      	beq.n	800267c <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d6:	f003 0310 	and.w	r3, r3, #16
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d105      	bne.n	80025ea <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e2:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d139      	bne.n	800266c <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025fe:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002602:	2b00      	cmp	r3, #0
 8002604:	d006      	beq.n	8002614 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002610:	2b00      	cmp	r3, #0
 8002612:	d12b      	bne.n	800266c <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800261e:	2b00      	cmp	r3, #0
 8002620:	d124      	bne.n	800266c <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800262c:	2b00      	cmp	r3, #0
 800262e:	d11d      	bne.n	800266c <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002634:	2b00      	cmp	r3, #0
 8002636:	d119      	bne.n	800266c <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	685a      	ldr	r2, [r3, #4]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002646:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002658:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800265c:	2b00      	cmp	r3, #0
 800265e:	d105      	bne.n	800266c <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002664:	f043 0201 	orr.w	r2, r3, #1
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f000 fa8d 	bl	8002b8c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f06f 020c 	mvn.w	r2, #12
 800267a:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800268a:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d017      	beq.n	80026c2 <HAL_ADC_IRQHandler+0x1d6>
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d014      	beq.n	80026c2 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d10d      	bne.n	80026c2 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026aa:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 f837 	bl	8002726 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f06f 0201 	mvn.w	r2, #1
 80026c0:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f003 0320 	and.w	r3, r3, #32
 80026c8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80026d0:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d015      	beq.n	8002704 <HAL_ADC_IRQHandler+0x218>
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d012      	beq.n	8002704 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026e2:	f043 0202 	orr.w	r2, r3, #2
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f06f 0220 	mvn.w	r2, #32
 80026f2:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f000 f820 	bl	800273a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f06f 0220 	mvn.w	r2, #32
 8002702:	601a      	str	r2, [r3, #0]
  }
}
 8002704:	bf00      	nop
 8002706:	3718      	adds	r7, #24
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800271a:	4618      	mov	r0, r3
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr

08002726 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002726:	b480      	push	{r7}
 8002728:	b083      	sub	sp, #12
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800272e:	bf00      	nop
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr

0800273a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800273a:	b480      	push	{r7}
 800273c:	b083      	sub	sp, #12
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002742:	bf00      	nop
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
	...

08002750 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002750:	b480      	push	{r7}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800275a:	2300      	movs	r3, #0
 800275c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002764:	2b01      	cmp	r3, #1
 8002766:	d101      	bne.n	800276c <HAL_ADC_ConfigChannel+0x1c>
 8002768:	2302      	movs	r3, #2
 800276a:	e105      	b.n	8002978 <HAL_ADC_ConfigChannel+0x228>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2b09      	cmp	r3, #9
 800277a:	d925      	bls.n	80027c8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68d9      	ldr	r1, [r3, #12]
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	b29b      	uxth	r3, r3
 8002788:	461a      	mov	r2, r3
 800278a:	4613      	mov	r3, r2
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	4413      	add	r3, r2
 8002790:	3b1e      	subs	r3, #30
 8002792:	2207      	movs	r2, #7
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	43da      	mvns	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	400a      	ands	r2, r1
 80027a0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68d9      	ldr	r1, [r3, #12]
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	4618      	mov	r0, r3
 80027b4:	4603      	mov	r3, r0
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	4403      	add	r3, r0
 80027ba:	3b1e      	subs	r3, #30
 80027bc:	409a      	lsls	r2, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	430a      	orrs	r2, r1
 80027c4:	60da      	str	r2, [r3, #12]
 80027c6:	e022      	b.n	800280e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	6919      	ldr	r1, [r3, #16]
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	461a      	mov	r2, r3
 80027d6:	4613      	mov	r3, r2
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	4413      	add	r3, r2
 80027dc:	2207      	movs	r2, #7
 80027de:	fa02 f303 	lsl.w	r3, r2, r3
 80027e2:	43da      	mvns	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	400a      	ands	r2, r1
 80027ea:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	6919      	ldr	r1, [r3, #16]
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	689a      	ldr	r2, [r3, #8]
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	4618      	mov	r0, r3
 80027fe:	4603      	mov	r3, r0
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	4403      	add	r3, r0
 8002804:	409a      	lsls	r2, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	430a      	orrs	r2, r1
 800280c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	2b06      	cmp	r3, #6
 8002814:	d824      	bhi.n	8002860 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685a      	ldr	r2, [r3, #4]
 8002820:	4613      	mov	r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	4413      	add	r3, r2
 8002826:	3b05      	subs	r3, #5
 8002828:	221f      	movs	r2, #31
 800282a:	fa02 f303 	lsl.w	r3, r2, r3
 800282e:	43da      	mvns	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	400a      	ands	r2, r1
 8002836:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	b29b      	uxth	r3, r3
 8002844:	4618      	mov	r0, r3
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	685a      	ldr	r2, [r3, #4]
 800284a:	4613      	mov	r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	4413      	add	r3, r2
 8002850:	3b05      	subs	r3, #5
 8002852:	fa00 f203 	lsl.w	r2, r0, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	430a      	orrs	r2, r1
 800285c:	635a      	str	r2, [r3, #52]	@ 0x34
 800285e:	e04c      	b.n	80028fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	2b0c      	cmp	r3, #12
 8002866:	d824      	bhi.n	80028b2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685a      	ldr	r2, [r3, #4]
 8002872:	4613      	mov	r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	4413      	add	r3, r2
 8002878:	3b23      	subs	r3, #35	@ 0x23
 800287a:	221f      	movs	r2, #31
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	43da      	mvns	r2, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	400a      	ands	r2, r1
 8002888:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	b29b      	uxth	r3, r3
 8002896:	4618      	mov	r0, r3
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685a      	ldr	r2, [r3, #4]
 800289c:	4613      	mov	r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	4413      	add	r3, r2
 80028a2:	3b23      	subs	r3, #35	@ 0x23
 80028a4:	fa00 f203 	lsl.w	r2, r0, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	430a      	orrs	r2, r1
 80028ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80028b0:	e023      	b.n	80028fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685a      	ldr	r2, [r3, #4]
 80028bc:	4613      	mov	r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	4413      	add	r3, r2
 80028c2:	3b41      	subs	r3, #65	@ 0x41
 80028c4:	221f      	movs	r2, #31
 80028c6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ca:	43da      	mvns	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	400a      	ands	r2, r1
 80028d2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	b29b      	uxth	r3, r3
 80028e0:	4618      	mov	r0, r3
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685a      	ldr	r2, [r3, #4]
 80028e6:	4613      	mov	r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	4413      	add	r3, r2
 80028ec:	3b41      	subs	r3, #65	@ 0x41
 80028ee:	fa00 f203 	lsl.w	r2, r0, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	430a      	orrs	r2, r1
 80028f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028fa:	4b22      	ldr	r3, [pc, #136]	@ (8002984 <HAL_ADC_ConfigChannel+0x234>)
 80028fc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a21      	ldr	r2, [pc, #132]	@ (8002988 <HAL_ADC_ConfigChannel+0x238>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d109      	bne.n	800291c <HAL_ADC_ConfigChannel+0x1cc>
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2b12      	cmp	r3, #18
 800290e:	d105      	bne.n	800291c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a19      	ldr	r2, [pc, #100]	@ (8002988 <HAL_ADC_ConfigChannel+0x238>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d123      	bne.n	800296e <HAL_ADC_ConfigChannel+0x21e>
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2b10      	cmp	r3, #16
 800292c:	d003      	beq.n	8002936 <HAL_ADC_ConfigChannel+0x1e6>
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2b11      	cmp	r3, #17
 8002934:	d11b      	bne.n	800296e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2b10      	cmp	r3, #16
 8002948:	d111      	bne.n	800296e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800294a:	4b10      	ldr	r3, [pc, #64]	@ (800298c <HAL_ADC_ConfigChannel+0x23c>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a10      	ldr	r2, [pc, #64]	@ (8002990 <HAL_ADC_ConfigChannel+0x240>)
 8002950:	fba2 2303 	umull	r2, r3, r2, r3
 8002954:	0c9a      	lsrs	r2, r3, #18
 8002956:	4613      	mov	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	4413      	add	r3, r2
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002960:	e002      	b.n	8002968 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	3b01      	subs	r3, #1
 8002966:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1f9      	bne.n	8002962 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002976:	2300      	movs	r3, #0
}
 8002978:	4618      	mov	r0, r3
 800297a:	3714      	adds	r7, #20
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr
 8002984:	40012300 	.word	0x40012300
 8002988:	40012000 	.word	0x40012000
 800298c:	20000008 	.word	0x20000008
 8002990:	431bde83 	.word	0x431bde83

08002994 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800299c:	4b79      	ldr	r3, [pc, #484]	@ (8002b84 <ADC_Init+0x1f0>)
 800299e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	685a      	ldr	r2, [r3, #4]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	431a      	orrs	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	685a      	ldr	r2, [r3, #4]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	6859      	ldr	r1, [r3, #4]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	021a      	lsls	r2, r3, #8
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	430a      	orrs	r2, r1
 80029dc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80029ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	6859      	ldr	r1, [r3, #4]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	430a      	orrs	r2, r1
 80029fe:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	689a      	ldr	r2, [r3, #8]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a0e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	6899      	ldr	r1, [r3, #8]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	68da      	ldr	r2, [r3, #12]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a26:	4a58      	ldr	r2, [pc, #352]	@ (8002b88 <ADC_Init+0x1f4>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d022      	beq.n	8002a72 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	689a      	ldr	r2, [r3, #8]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002a3a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	6899      	ldr	r1, [r3, #8]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	689a      	ldr	r2, [r3, #8]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002a5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	6899      	ldr	r1, [r3, #8]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	609a      	str	r2, [r3, #8]
 8002a70:	e00f      	b.n	8002a92 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	689a      	ldr	r2, [r3, #8]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002a80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	689a      	ldr	r2, [r3, #8]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002a90:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	689a      	ldr	r2, [r3, #8]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f022 0202 	bic.w	r2, r2, #2
 8002aa0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	6899      	ldr	r1, [r3, #8]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	7e1b      	ldrb	r3, [r3, #24]
 8002aac:	005a      	lsls	r2, r3, #1
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d01b      	beq.n	8002af8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	685a      	ldr	r2, [r3, #4]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ace:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	685a      	ldr	r2, [r3, #4]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002ade:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	6859      	ldr	r1, [r3, #4]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aea:	3b01      	subs	r3, #1
 8002aec:	035a      	lsls	r2, r3, #13
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	430a      	orrs	r2, r1
 8002af4:	605a      	str	r2, [r3, #4]
 8002af6:	e007      	b.n	8002b08 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	685a      	ldr	r2, [r3, #4]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b06:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002b16:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	69db      	ldr	r3, [r3, #28]
 8002b22:	3b01      	subs	r3, #1
 8002b24:	051a      	lsls	r2, r3, #20
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	689a      	ldr	r2, [r3, #8]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002b3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	6899      	ldr	r1, [r3, #8]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002b4a:	025a      	lsls	r2, r3, #9
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	430a      	orrs	r2, r1
 8002b52:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	689a      	ldr	r2, [r3, #8]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6899      	ldr	r1, [r3, #8]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	029a      	lsls	r2, r3, #10
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	430a      	orrs	r2, r1
 8002b76:	609a      	str	r2, [r3, #8]
}
 8002b78:	bf00      	nop
 8002b7a:	3714      	adds	r7, #20
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr
 8002b84:	40012300 	.word	0x40012300
 8002b88:	0f000001 	.word	0x0f000001

08002b8c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f003 0307 	and.w	r3, r3, #7
 8002bae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8002be4 <__NVIC_SetPriorityGrouping+0x44>)
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bb6:	68ba      	ldr	r2, [r7, #8]
 8002bb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bc8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002bcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bd2:	4a04      	ldr	r2, [pc, #16]	@ (8002be4 <__NVIC_SetPriorityGrouping+0x44>)
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	60d3      	str	r3, [r2, #12]
}
 8002bd8:	bf00      	nop
 8002bda:	3714      	adds	r7, #20
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr
 8002be4:	e000ed00 	.word	0xe000ed00

08002be8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bec:	4b04      	ldr	r3, [pc, #16]	@ (8002c00 <__NVIC_GetPriorityGrouping+0x18>)
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	0a1b      	lsrs	r3, r3, #8
 8002bf2:	f003 0307 	and.w	r3, r3, #7
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr
 8002c00:	e000ed00 	.word	0xe000ed00

08002c04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	db0b      	blt.n	8002c2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c16:	79fb      	ldrb	r3, [r7, #7]
 8002c18:	f003 021f 	and.w	r2, r3, #31
 8002c1c:	4907      	ldr	r1, [pc, #28]	@ (8002c3c <__NVIC_EnableIRQ+0x38>)
 8002c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c22:	095b      	lsrs	r3, r3, #5
 8002c24:	2001      	movs	r0, #1
 8002c26:	fa00 f202 	lsl.w	r2, r0, r2
 8002c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c2e:	bf00      	nop
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	e000e100 	.word	0xe000e100

08002c40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	4603      	mov	r3, r0
 8002c48:	6039      	str	r1, [r7, #0]
 8002c4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	db0a      	blt.n	8002c6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	b2da      	uxtb	r2, r3
 8002c58:	490c      	ldr	r1, [pc, #48]	@ (8002c8c <__NVIC_SetPriority+0x4c>)
 8002c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c5e:	0112      	lsls	r2, r2, #4
 8002c60:	b2d2      	uxtb	r2, r2
 8002c62:	440b      	add	r3, r1
 8002c64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c68:	e00a      	b.n	8002c80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	b2da      	uxtb	r2, r3
 8002c6e:	4908      	ldr	r1, [pc, #32]	@ (8002c90 <__NVIC_SetPriority+0x50>)
 8002c70:	79fb      	ldrb	r3, [r7, #7]
 8002c72:	f003 030f 	and.w	r3, r3, #15
 8002c76:	3b04      	subs	r3, #4
 8002c78:	0112      	lsls	r2, r2, #4
 8002c7a:	b2d2      	uxtb	r2, r2
 8002c7c:	440b      	add	r3, r1
 8002c7e:	761a      	strb	r2, [r3, #24]
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr
 8002c8c:	e000e100 	.word	0xe000e100
 8002c90:	e000ed00 	.word	0xe000ed00

08002c94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b089      	sub	sp, #36	@ 0x24
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f003 0307 	and.w	r3, r3, #7
 8002ca6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	f1c3 0307 	rsb	r3, r3, #7
 8002cae:	2b04      	cmp	r3, #4
 8002cb0:	bf28      	it	cs
 8002cb2:	2304      	movcs	r3, #4
 8002cb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	3304      	adds	r3, #4
 8002cba:	2b06      	cmp	r3, #6
 8002cbc:	d902      	bls.n	8002cc4 <NVIC_EncodePriority+0x30>
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	3b03      	subs	r3, #3
 8002cc2:	e000      	b.n	8002cc6 <NVIC_EncodePriority+0x32>
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd2:	43da      	mvns	r2, r3
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	401a      	ands	r2, r3
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cdc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce6:	43d9      	mvns	r1, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cec:	4313      	orrs	r3, r2
         );
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3724      	adds	r7, #36	@ 0x24
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
	...

08002cfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	3b01      	subs	r3, #1
 8002d08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d0c:	d301      	bcc.n	8002d12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e00f      	b.n	8002d32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d12:	4a0a      	ldr	r2, [pc, #40]	@ (8002d3c <SysTick_Config+0x40>)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	3b01      	subs	r3, #1
 8002d18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d1a:	210f      	movs	r1, #15
 8002d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d20:	f7ff ff8e 	bl	8002c40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d24:	4b05      	ldr	r3, [pc, #20]	@ (8002d3c <SysTick_Config+0x40>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d2a:	4b04      	ldr	r3, [pc, #16]	@ (8002d3c <SysTick_Config+0x40>)
 8002d2c:	2207      	movs	r2, #7
 8002d2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3708      	adds	r7, #8
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	e000e010 	.word	0xe000e010

08002d40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f7ff ff29 	bl	8002ba0 <__NVIC_SetPriorityGrouping>
}
 8002d4e:	bf00      	nop
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b086      	sub	sp, #24
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	60b9      	str	r1, [r7, #8]
 8002d60:	607a      	str	r2, [r7, #4]
 8002d62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d64:	2300      	movs	r3, #0
 8002d66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d68:	f7ff ff3e 	bl	8002be8 <__NVIC_GetPriorityGrouping>
 8002d6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	68b9      	ldr	r1, [r7, #8]
 8002d72:	6978      	ldr	r0, [r7, #20]
 8002d74:	f7ff ff8e 	bl	8002c94 <NVIC_EncodePriority>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d7e:	4611      	mov	r1, r2
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7ff ff5d 	bl	8002c40 <__NVIC_SetPriority>
}
 8002d86:	bf00      	nop
 8002d88:	3718      	adds	r7, #24
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b082      	sub	sp, #8
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	4603      	mov	r3, r0
 8002d96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7ff ff31 	bl	8002c04 <__NVIC_EnableIRQ>
}
 8002da2:	bf00      	nop
 8002da4:	3708      	adds	r7, #8
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b082      	sub	sp, #8
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f7ff ffa2 	bl	8002cfc <SysTick_Config>
 8002db8:	4603      	mov	r3, r0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3708      	adds	r7, #8
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
	...

08002dc4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002dd0:	f7ff fa3a 	bl	8002248 <HAL_GetTick>
 8002dd4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d101      	bne.n	8002de0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e099      	b.n	8002f14 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2202      	movs	r2, #2
 8002de4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f022 0201 	bic.w	r2, r2, #1
 8002dfe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e00:	e00f      	b.n	8002e22 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e02:	f7ff fa21 	bl	8002248 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	2b05      	cmp	r3, #5
 8002e0e:	d908      	bls.n	8002e22 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2220      	movs	r2, #32
 8002e14:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2203      	movs	r2, #3
 8002e1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e078      	b.n	8002f14 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0301 	and.w	r3, r3, #1
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d1e8      	bne.n	8002e02 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e38:	697a      	ldr	r2, [r7, #20]
 8002e3a:	4b38      	ldr	r3, [pc, #224]	@ (8002f1c <HAL_DMA_Init+0x158>)
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685a      	ldr	r2, [r3, #4]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	699b      	ldr	r3, [r3, #24]
 8002e60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a1b      	ldr	r3, [r3, #32]
 8002e6c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e6e:	697a      	ldr	r2, [r7, #20]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e78:	2b04      	cmp	r3, #4
 8002e7a:	d107      	bne.n	8002e8c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e84:	4313      	orrs	r3, r2
 8002e86:	697a      	ldr	r2, [r7, #20]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	697a      	ldr	r2, [r7, #20]
 8002e92:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	f023 0307 	bic.w	r3, r3, #7
 8002ea2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea8:	697a      	ldr	r2, [r7, #20]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb2:	2b04      	cmp	r3, #4
 8002eb4:	d117      	bne.n	8002ee6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eba:	697a      	ldr	r2, [r7, #20]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00e      	beq.n	8002ee6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f000 fa91 	bl	80033f0 <DMA_CheckFifoParam>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d008      	beq.n	8002ee6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2240      	movs	r2, #64	@ 0x40
 8002ed8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e016      	b.n	8002f14 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 fa48 	bl	8003384 <DMA_CalcBaseAndBitshift>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002efc:	223f      	movs	r2, #63	@ 0x3f
 8002efe:	409a      	lsls	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3718      	adds	r7, #24
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	f010803f 	.word	0xf010803f

08002f20 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
 8002f2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f36:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d101      	bne.n	8002f46 <HAL_DMA_Start_IT+0x26>
 8002f42:	2302      	movs	r3, #2
 8002f44:	e040      	b.n	8002fc8 <HAL_DMA_Start_IT+0xa8>
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d12f      	bne.n	8002fba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2202      	movs	r2, #2
 8002f5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2200      	movs	r2, #0
 8002f66:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	68b9      	ldr	r1, [r7, #8]
 8002f6e:	68f8      	ldr	r0, [r7, #12]
 8002f70:	f000 f9da 	bl	8003328 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f78:	223f      	movs	r2, #63	@ 0x3f
 8002f7a:	409a      	lsls	r2, r3
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f042 0216 	orr.w	r2, r2, #22
 8002f8e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d007      	beq.n	8002fa8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f042 0208 	orr.w	r2, r2, #8
 8002fa6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f042 0201 	orr.w	r2, r2, #1
 8002fb6:	601a      	str	r2, [r3, #0]
 8002fb8:	e005      	b.n	8002fc6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002fc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3718      	adds	r7, #24
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d004      	beq.n	8002fee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2280      	movs	r2, #128	@ 0x80
 8002fe8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e00c      	b.n	8003008 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2205      	movs	r2, #5
 8002ff2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f022 0201 	bic.w	r2, r2, #1
 8003004:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b086      	sub	sp, #24
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800301c:	2300      	movs	r3, #0
 800301e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003020:	4b8e      	ldr	r3, [pc, #568]	@ (800325c <HAL_DMA_IRQHandler+0x248>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a8e      	ldr	r2, [pc, #568]	@ (8003260 <HAL_DMA_IRQHandler+0x24c>)
 8003026:	fba2 2303 	umull	r2, r3, r2, r3
 800302a:	0a9b      	lsrs	r3, r3, #10
 800302c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003032:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800303e:	2208      	movs	r2, #8
 8003040:	409a      	lsls	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	4013      	ands	r3, r2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d01a      	beq.n	8003080 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0304 	and.w	r3, r3, #4
 8003054:	2b00      	cmp	r3, #0
 8003056:	d013      	beq.n	8003080 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f022 0204 	bic.w	r2, r2, #4
 8003066:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800306c:	2208      	movs	r2, #8
 800306e:	409a      	lsls	r2, r3
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003078:	f043 0201 	orr.w	r2, r3, #1
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003084:	2201      	movs	r2, #1
 8003086:	409a      	lsls	r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	4013      	ands	r3, r2
 800308c:	2b00      	cmp	r3, #0
 800308e:	d012      	beq.n	80030b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00b      	beq.n	80030b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030a2:	2201      	movs	r2, #1
 80030a4:	409a      	lsls	r2, r3
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030ae:	f043 0202 	orr.w	r2, r3, #2
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030ba:	2204      	movs	r2, #4
 80030bc:	409a      	lsls	r2, r3
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	4013      	ands	r3, r2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d012      	beq.n	80030ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00b      	beq.n	80030ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030d8:	2204      	movs	r2, #4
 80030da:	409a      	lsls	r2, r3
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030e4:	f043 0204 	orr.w	r2, r3, #4
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030f0:	2210      	movs	r2, #16
 80030f2:	409a      	lsls	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	4013      	ands	r3, r2
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d043      	beq.n	8003184 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0308 	and.w	r3, r3, #8
 8003106:	2b00      	cmp	r3, #0
 8003108:	d03c      	beq.n	8003184 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800310e:	2210      	movs	r2, #16
 8003110:	409a      	lsls	r2, r3
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d018      	beq.n	8003156 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d108      	bne.n	8003144 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003136:	2b00      	cmp	r3, #0
 8003138:	d024      	beq.n	8003184 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	4798      	blx	r3
 8003142:	e01f      	b.n	8003184 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003148:	2b00      	cmp	r3, #0
 800314a:	d01b      	beq.n	8003184 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	4798      	blx	r3
 8003154:	e016      	b.n	8003184 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003160:	2b00      	cmp	r3, #0
 8003162:	d107      	bne.n	8003174 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f022 0208 	bic.w	r2, r2, #8
 8003172:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003178:	2b00      	cmp	r3, #0
 800317a:	d003      	beq.n	8003184 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003188:	2220      	movs	r2, #32
 800318a:	409a      	lsls	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	4013      	ands	r3, r2
 8003190:	2b00      	cmp	r3, #0
 8003192:	f000 808f 	beq.w	80032b4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0310 	and.w	r3, r3, #16
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	f000 8087 	beq.w	80032b4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031aa:	2220      	movs	r2, #32
 80031ac:	409a      	lsls	r2, r3
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b05      	cmp	r3, #5
 80031bc:	d136      	bne.n	800322c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f022 0216 	bic.w	r2, r2, #22
 80031cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	695a      	ldr	r2, [r3, #20]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80031dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d103      	bne.n	80031ee <HAL_DMA_IRQHandler+0x1da>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d007      	beq.n	80031fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f022 0208 	bic.w	r2, r2, #8
 80031fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003202:	223f      	movs	r2, #63	@ 0x3f
 8003204:	409a      	lsls	r2, r3
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2201      	movs	r2, #1
 800320e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800321e:	2b00      	cmp	r3, #0
 8003220:	d07e      	beq.n	8003320 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	4798      	blx	r3
        }
        return;
 800322a:	e079      	b.n	8003320 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d01d      	beq.n	8003276 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d10d      	bne.n	8003264 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800324c:	2b00      	cmp	r3, #0
 800324e:	d031      	beq.n	80032b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	4798      	blx	r3
 8003258:	e02c      	b.n	80032b4 <HAL_DMA_IRQHandler+0x2a0>
 800325a:	bf00      	nop
 800325c:	20000008 	.word	0x20000008
 8003260:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003268:	2b00      	cmp	r3, #0
 800326a:	d023      	beq.n	80032b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	4798      	blx	r3
 8003274:	e01e      	b.n	80032b4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003280:	2b00      	cmp	r3, #0
 8003282:	d10f      	bne.n	80032a4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f022 0210 	bic.w	r2, r2, #16
 8003292:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d003      	beq.n	80032b4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d032      	beq.n	8003322 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032c0:	f003 0301 	and.w	r3, r3, #1
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d022      	beq.n	800330e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2205      	movs	r2, #5
 80032cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f022 0201 	bic.w	r2, r2, #1
 80032de:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	3301      	adds	r3, #1
 80032e4:	60bb      	str	r3, [r7, #8]
 80032e6:	697a      	ldr	r2, [r7, #20]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d307      	bcc.n	80032fc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1f2      	bne.n	80032e0 <HAL_DMA_IRQHandler+0x2cc>
 80032fa:	e000      	b.n	80032fe <HAL_DMA_IRQHandler+0x2ea>
          break;
 80032fc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2201      	movs	r2, #1
 8003302:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003312:	2b00      	cmp	r3, #0
 8003314:	d005      	beq.n	8003322 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	4798      	blx	r3
 800331e:	e000      	b.n	8003322 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003320:	bf00      	nop
    }
  }
}
 8003322:	3718      	adds	r7, #24
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003328:	b480      	push	{r7}
 800332a:	b085      	sub	sp, #20
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
 8003334:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003344:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	683a      	ldr	r2, [r7, #0]
 800334c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	2b40      	cmp	r3, #64	@ 0x40
 8003354:	d108      	bne.n	8003368 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68ba      	ldr	r2, [r7, #8]
 8003364:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003366:	e007      	b.n	8003378 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68ba      	ldr	r2, [r7, #8]
 800336e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	60da      	str	r2, [r3, #12]
}
 8003378:	bf00      	nop
 800337a:	3714      	adds	r7, #20
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	b2db      	uxtb	r3, r3
 8003392:	3b10      	subs	r3, #16
 8003394:	4a14      	ldr	r2, [pc, #80]	@ (80033e8 <DMA_CalcBaseAndBitshift+0x64>)
 8003396:	fba2 2303 	umull	r2, r3, r2, r3
 800339a:	091b      	lsrs	r3, r3, #4
 800339c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800339e:	4a13      	ldr	r2, [pc, #76]	@ (80033ec <DMA_CalcBaseAndBitshift+0x68>)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	4413      	add	r3, r2
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	461a      	mov	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2b03      	cmp	r3, #3
 80033b0:	d909      	bls.n	80033c6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80033ba:	f023 0303 	bic.w	r3, r3, #3
 80033be:	1d1a      	adds	r2, r3, #4
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	659a      	str	r2, [r3, #88]	@ 0x58
 80033c4:	e007      	b.n	80033d6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80033ce:	f023 0303 	bic.w	r3, r3, #3
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3714      	adds	r7, #20
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	aaaaaaab 	.word	0xaaaaaaab
 80033ec:	080078d8 	.word	0x080078d8

080033f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b085      	sub	sp, #20
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033f8:	2300      	movs	r3, #0
 80033fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003400:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	699b      	ldr	r3, [r3, #24]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d11f      	bne.n	800344a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	2b03      	cmp	r3, #3
 800340e:	d856      	bhi.n	80034be <DMA_CheckFifoParam+0xce>
 8003410:	a201      	add	r2, pc, #4	@ (adr r2, 8003418 <DMA_CheckFifoParam+0x28>)
 8003412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003416:	bf00      	nop
 8003418:	08003429 	.word	0x08003429
 800341c:	0800343b 	.word	0x0800343b
 8003420:	08003429 	.word	0x08003429
 8003424:	080034bf 	.word	0x080034bf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800342c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d046      	beq.n	80034c2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003438:	e043      	b.n	80034c2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800343e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003442:	d140      	bne.n	80034c6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003448:	e03d      	b.n	80034c6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003452:	d121      	bne.n	8003498 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	2b03      	cmp	r3, #3
 8003458:	d837      	bhi.n	80034ca <DMA_CheckFifoParam+0xda>
 800345a:	a201      	add	r2, pc, #4	@ (adr r2, 8003460 <DMA_CheckFifoParam+0x70>)
 800345c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003460:	08003471 	.word	0x08003471
 8003464:	08003477 	.word	0x08003477
 8003468:	08003471 	.word	0x08003471
 800346c:	08003489 	.word	0x08003489
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	73fb      	strb	r3, [r7, #15]
      break;
 8003474:	e030      	b.n	80034d8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800347a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d025      	beq.n	80034ce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003486:	e022      	b.n	80034ce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800348c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003490:	d11f      	bne.n	80034d2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003496:	e01c      	b.n	80034d2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	2b02      	cmp	r3, #2
 800349c:	d903      	bls.n	80034a6 <DMA_CheckFifoParam+0xb6>
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	2b03      	cmp	r3, #3
 80034a2:	d003      	beq.n	80034ac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80034a4:	e018      	b.n	80034d8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	73fb      	strb	r3, [r7, #15]
      break;
 80034aa:	e015      	b.n	80034d8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d00e      	beq.n	80034d6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	73fb      	strb	r3, [r7, #15]
      break;
 80034bc:	e00b      	b.n	80034d6 <DMA_CheckFifoParam+0xe6>
      break;
 80034be:	bf00      	nop
 80034c0:	e00a      	b.n	80034d8 <DMA_CheckFifoParam+0xe8>
      break;
 80034c2:	bf00      	nop
 80034c4:	e008      	b.n	80034d8 <DMA_CheckFifoParam+0xe8>
      break;
 80034c6:	bf00      	nop
 80034c8:	e006      	b.n	80034d8 <DMA_CheckFifoParam+0xe8>
      break;
 80034ca:	bf00      	nop
 80034cc:	e004      	b.n	80034d8 <DMA_CheckFifoParam+0xe8>
      break;
 80034ce:	bf00      	nop
 80034d0:	e002      	b.n	80034d8 <DMA_CheckFifoParam+0xe8>
      break;   
 80034d2:	bf00      	nop
 80034d4:	e000      	b.n	80034d8 <DMA_CheckFifoParam+0xe8>
      break;
 80034d6:	bf00      	nop
    }
  } 
  
  return status; 
 80034d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3714      	adds	r7, #20
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop

080034e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b089      	sub	sp, #36	@ 0x24
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034f2:	2300      	movs	r3, #0
 80034f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80034f6:	2300      	movs	r3, #0
 80034f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80034fa:	2300      	movs	r3, #0
 80034fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034fe:	2300      	movs	r3, #0
 8003500:	61fb      	str	r3, [r7, #28]
 8003502:	e16b      	b.n	80037dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003504:	2201      	movs	r2, #1
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	fa02 f303 	lsl.w	r3, r2, r3
 800350c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	697a      	ldr	r2, [r7, #20]
 8003514:	4013      	ands	r3, r2
 8003516:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	429a      	cmp	r2, r3
 800351e:	f040 815a 	bne.w	80037d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f003 0303 	and.w	r3, r3, #3
 800352a:	2b01      	cmp	r3, #1
 800352c:	d005      	beq.n	800353a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003536:	2b02      	cmp	r3, #2
 8003538:	d130      	bne.n	800359c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	005b      	lsls	r3, r3, #1
 8003544:	2203      	movs	r2, #3
 8003546:	fa02 f303 	lsl.w	r3, r2, r3
 800354a:	43db      	mvns	r3, r3
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	4013      	ands	r3, r2
 8003550:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	68da      	ldr	r2, [r3, #12]
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	005b      	lsls	r3, r3, #1
 800355a:	fa02 f303 	lsl.w	r3, r2, r3
 800355e:	69ba      	ldr	r2, [r7, #24]
 8003560:	4313      	orrs	r3, r2
 8003562:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	69ba      	ldr	r2, [r7, #24]
 8003568:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003570:	2201      	movs	r2, #1
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	fa02 f303 	lsl.w	r3, r2, r3
 8003578:	43db      	mvns	r3, r3
 800357a:	69ba      	ldr	r2, [r7, #24]
 800357c:	4013      	ands	r3, r2
 800357e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	091b      	lsrs	r3, r3, #4
 8003586:	f003 0201 	and.w	r2, r3, #1
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	fa02 f303 	lsl.w	r3, r2, r3
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	4313      	orrs	r3, r2
 8003594:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	69ba      	ldr	r2, [r7, #24]
 800359a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f003 0303 	and.w	r3, r3, #3
 80035a4:	2b03      	cmp	r3, #3
 80035a6:	d017      	beq.n	80035d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	005b      	lsls	r3, r3, #1
 80035b2:	2203      	movs	r2, #3
 80035b4:	fa02 f303 	lsl.w	r3, r2, r3
 80035b8:	43db      	mvns	r3, r3
 80035ba:	69ba      	ldr	r2, [r7, #24]
 80035bc:	4013      	ands	r3, r2
 80035be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	689a      	ldr	r2, [r3, #8]
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	fa02 f303 	lsl.w	r3, r2, r3
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f003 0303 	and.w	r3, r3, #3
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d123      	bne.n	800362c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	08da      	lsrs	r2, r3, #3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	3208      	adds	r2, #8
 80035ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	f003 0307 	and.w	r3, r3, #7
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	220f      	movs	r2, #15
 80035fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003600:	43db      	mvns	r3, r3
 8003602:	69ba      	ldr	r2, [r7, #24]
 8003604:	4013      	ands	r3, r2
 8003606:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	691a      	ldr	r2, [r3, #16]
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	f003 0307 	and.w	r3, r3, #7
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	fa02 f303 	lsl.w	r3, r2, r3
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	4313      	orrs	r3, r2
 800361c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	08da      	lsrs	r2, r3, #3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	3208      	adds	r2, #8
 8003626:	69b9      	ldr	r1, [r7, #24]
 8003628:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	005b      	lsls	r3, r3, #1
 8003636:	2203      	movs	r2, #3
 8003638:	fa02 f303 	lsl.w	r3, r2, r3
 800363c:	43db      	mvns	r3, r3
 800363e:	69ba      	ldr	r2, [r7, #24]
 8003640:	4013      	ands	r3, r2
 8003642:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f003 0203 	and.w	r2, r3, #3
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	005b      	lsls	r3, r3, #1
 8003650:	fa02 f303 	lsl.w	r3, r2, r3
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	4313      	orrs	r3, r2
 8003658:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003668:	2b00      	cmp	r3, #0
 800366a:	f000 80b4 	beq.w	80037d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800366e:	2300      	movs	r3, #0
 8003670:	60fb      	str	r3, [r7, #12]
 8003672:	4b60      	ldr	r3, [pc, #384]	@ (80037f4 <HAL_GPIO_Init+0x30c>)
 8003674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003676:	4a5f      	ldr	r2, [pc, #380]	@ (80037f4 <HAL_GPIO_Init+0x30c>)
 8003678:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800367c:	6453      	str	r3, [r2, #68]	@ 0x44
 800367e:	4b5d      	ldr	r3, [pc, #372]	@ (80037f4 <HAL_GPIO_Init+0x30c>)
 8003680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003682:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003686:	60fb      	str	r3, [r7, #12]
 8003688:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800368a:	4a5b      	ldr	r2, [pc, #364]	@ (80037f8 <HAL_GPIO_Init+0x310>)
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	089b      	lsrs	r3, r3, #2
 8003690:	3302      	adds	r3, #2
 8003692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003696:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	f003 0303 	and.w	r3, r3, #3
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	220f      	movs	r2, #15
 80036a2:	fa02 f303 	lsl.w	r3, r2, r3
 80036a6:	43db      	mvns	r3, r3
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	4013      	ands	r3, r2
 80036ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a52      	ldr	r2, [pc, #328]	@ (80037fc <HAL_GPIO_Init+0x314>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d02b      	beq.n	800370e <HAL_GPIO_Init+0x226>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a51      	ldr	r2, [pc, #324]	@ (8003800 <HAL_GPIO_Init+0x318>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d025      	beq.n	800370a <HAL_GPIO_Init+0x222>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a50      	ldr	r2, [pc, #320]	@ (8003804 <HAL_GPIO_Init+0x31c>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d01f      	beq.n	8003706 <HAL_GPIO_Init+0x21e>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a4f      	ldr	r2, [pc, #316]	@ (8003808 <HAL_GPIO_Init+0x320>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d019      	beq.n	8003702 <HAL_GPIO_Init+0x21a>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a4e      	ldr	r2, [pc, #312]	@ (800380c <HAL_GPIO_Init+0x324>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d013      	beq.n	80036fe <HAL_GPIO_Init+0x216>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a4d      	ldr	r2, [pc, #308]	@ (8003810 <HAL_GPIO_Init+0x328>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d00d      	beq.n	80036fa <HAL_GPIO_Init+0x212>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a4c      	ldr	r2, [pc, #304]	@ (8003814 <HAL_GPIO_Init+0x32c>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d007      	beq.n	80036f6 <HAL_GPIO_Init+0x20e>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a4b      	ldr	r2, [pc, #300]	@ (8003818 <HAL_GPIO_Init+0x330>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d101      	bne.n	80036f2 <HAL_GPIO_Init+0x20a>
 80036ee:	2307      	movs	r3, #7
 80036f0:	e00e      	b.n	8003710 <HAL_GPIO_Init+0x228>
 80036f2:	2308      	movs	r3, #8
 80036f4:	e00c      	b.n	8003710 <HAL_GPIO_Init+0x228>
 80036f6:	2306      	movs	r3, #6
 80036f8:	e00a      	b.n	8003710 <HAL_GPIO_Init+0x228>
 80036fa:	2305      	movs	r3, #5
 80036fc:	e008      	b.n	8003710 <HAL_GPIO_Init+0x228>
 80036fe:	2304      	movs	r3, #4
 8003700:	e006      	b.n	8003710 <HAL_GPIO_Init+0x228>
 8003702:	2303      	movs	r3, #3
 8003704:	e004      	b.n	8003710 <HAL_GPIO_Init+0x228>
 8003706:	2302      	movs	r3, #2
 8003708:	e002      	b.n	8003710 <HAL_GPIO_Init+0x228>
 800370a:	2301      	movs	r3, #1
 800370c:	e000      	b.n	8003710 <HAL_GPIO_Init+0x228>
 800370e:	2300      	movs	r3, #0
 8003710:	69fa      	ldr	r2, [r7, #28]
 8003712:	f002 0203 	and.w	r2, r2, #3
 8003716:	0092      	lsls	r2, r2, #2
 8003718:	4093      	lsls	r3, r2
 800371a:	69ba      	ldr	r2, [r7, #24]
 800371c:	4313      	orrs	r3, r2
 800371e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003720:	4935      	ldr	r1, [pc, #212]	@ (80037f8 <HAL_GPIO_Init+0x310>)
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	089b      	lsrs	r3, r3, #2
 8003726:	3302      	adds	r3, #2
 8003728:	69ba      	ldr	r2, [r7, #24]
 800372a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800372e:	4b3b      	ldr	r3, [pc, #236]	@ (800381c <HAL_GPIO_Init+0x334>)
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	43db      	mvns	r3, r3
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	4013      	ands	r3, r2
 800373c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d003      	beq.n	8003752 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800374a:	69ba      	ldr	r2, [r7, #24]
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	4313      	orrs	r3, r2
 8003750:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003752:	4a32      	ldr	r2, [pc, #200]	@ (800381c <HAL_GPIO_Init+0x334>)
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003758:	4b30      	ldr	r3, [pc, #192]	@ (800381c <HAL_GPIO_Init+0x334>)
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	43db      	mvns	r3, r3
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	4013      	ands	r3, r2
 8003766:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d003      	beq.n	800377c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003774:	69ba      	ldr	r2, [r7, #24]
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	4313      	orrs	r3, r2
 800377a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800377c:	4a27      	ldr	r2, [pc, #156]	@ (800381c <HAL_GPIO_Init+0x334>)
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003782:	4b26      	ldr	r3, [pc, #152]	@ (800381c <HAL_GPIO_Init+0x334>)
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	43db      	mvns	r3, r3
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	4013      	ands	r3, r2
 8003790:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d003      	beq.n	80037a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800379e:	69ba      	ldr	r2, [r7, #24]
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037a6:	4a1d      	ldr	r2, [pc, #116]	@ (800381c <HAL_GPIO_Init+0x334>)
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037ac:	4b1b      	ldr	r3, [pc, #108]	@ (800381c <HAL_GPIO_Init+0x334>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	43db      	mvns	r3, r3
 80037b6:	69ba      	ldr	r2, [r7, #24]
 80037b8:	4013      	ands	r3, r2
 80037ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d003      	beq.n	80037d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80037c8:	69ba      	ldr	r2, [r7, #24]
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037d0:	4a12      	ldr	r2, [pc, #72]	@ (800381c <HAL_GPIO_Init+0x334>)
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	3301      	adds	r3, #1
 80037da:	61fb      	str	r3, [r7, #28]
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	2b0f      	cmp	r3, #15
 80037e0:	f67f ae90 	bls.w	8003504 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80037e4:	bf00      	nop
 80037e6:	bf00      	nop
 80037e8:	3724      	adds	r7, #36	@ 0x24
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	40023800 	.word	0x40023800
 80037f8:	40013800 	.word	0x40013800
 80037fc:	40020000 	.word	0x40020000
 8003800:	40020400 	.word	0x40020400
 8003804:	40020800 	.word	0x40020800
 8003808:	40020c00 	.word	0x40020c00
 800380c:	40021000 	.word	0x40021000
 8003810:	40021400 	.word	0x40021400
 8003814:	40021800 	.word	0x40021800
 8003818:	40021c00 	.word	0x40021c00
 800381c:	40013c00 	.word	0x40013c00

08003820 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003820:	b480      	push	{r7}
 8003822:	b085      	sub	sp, #20
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	460b      	mov	r3, r1
 800382a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	691a      	ldr	r2, [r3, #16]
 8003830:	887b      	ldrh	r3, [r7, #2]
 8003832:	4013      	ands	r3, r2
 8003834:	2b00      	cmp	r3, #0
 8003836:	d002      	beq.n	800383e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003838:	2301      	movs	r3, #1
 800383a:	73fb      	strb	r3, [r7, #15]
 800383c:	e001      	b.n	8003842 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800383e:	2300      	movs	r3, #0
 8003840:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003842:	7bfb      	ldrb	r3, [r7, #15]
}
 8003844:	4618      	mov	r0, r3
 8003846:	3714      	adds	r7, #20
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b086      	sub	sp, #24
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d101      	bne.n	8003862 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e267      	b.n	8003d32 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0301 	and.w	r3, r3, #1
 800386a:	2b00      	cmp	r3, #0
 800386c:	d075      	beq.n	800395a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800386e:	4b88      	ldr	r3, [pc, #544]	@ (8003a90 <HAL_RCC_OscConfig+0x240>)
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f003 030c 	and.w	r3, r3, #12
 8003876:	2b04      	cmp	r3, #4
 8003878:	d00c      	beq.n	8003894 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800387a:	4b85      	ldr	r3, [pc, #532]	@ (8003a90 <HAL_RCC_OscConfig+0x240>)
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003882:	2b08      	cmp	r3, #8
 8003884:	d112      	bne.n	80038ac <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003886:	4b82      	ldr	r3, [pc, #520]	@ (8003a90 <HAL_RCC_OscConfig+0x240>)
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800388e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003892:	d10b      	bne.n	80038ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003894:	4b7e      	ldr	r3, [pc, #504]	@ (8003a90 <HAL_RCC_OscConfig+0x240>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d05b      	beq.n	8003958 <HAL_RCC_OscConfig+0x108>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d157      	bne.n	8003958 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e242      	b.n	8003d32 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038b4:	d106      	bne.n	80038c4 <HAL_RCC_OscConfig+0x74>
 80038b6:	4b76      	ldr	r3, [pc, #472]	@ (8003a90 <HAL_RCC_OscConfig+0x240>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a75      	ldr	r2, [pc, #468]	@ (8003a90 <HAL_RCC_OscConfig+0x240>)
 80038bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038c0:	6013      	str	r3, [r2, #0]
 80038c2:	e01d      	b.n	8003900 <HAL_RCC_OscConfig+0xb0>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038cc:	d10c      	bne.n	80038e8 <HAL_RCC_OscConfig+0x98>
 80038ce:	4b70      	ldr	r3, [pc, #448]	@ (8003a90 <HAL_RCC_OscConfig+0x240>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a6f      	ldr	r2, [pc, #444]	@ (8003a90 <HAL_RCC_OscConfig+0x240>)
 80038d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038d8:	6013      	str	r3, [r2, #0]
 80038da:	4b6d      	ldr	r3, [pc, #436]	@ (8003a90 <HAL_RCC_OscConfig+0x240>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a6c      	ldr	r2, [pc, #432]	@ (8003a90 <HAL_RCC_OscConfig+0x240>)
 80038e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038e4:	6013      	str	r3, [r2, #0]
 80038e6:	e00b      	b.n	8003900 <HAL_RCC_OscConfig+0xb0>
 80038e8:	4b69      	ldr	r3, [pc, #420]	@ (8003a90 <HAL_RCC_OscConfig+0x240>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a68      	ldr	r2, [pc, #416]	@ (8003a90 <HAL_RCC_OscConfig+0x240>)
 80038ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038f2:	6013      	str	r3, [r2, #0]
 80038f4:	4b66      	ldr	r3, [pc, #408]	@ (8003a90 <HAL_RCC_OscConfig+0x240>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a65      	ldr	r2, [pc, #404]	@ (8003a90 <HAL_RCC_OscConfig+0x240>)
 80038fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d013      	beq.n	8003930 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003908:	f7fe fc9e 	bl	8002248 <HAL_GetTick>
 800390c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800390e:	e008      	b.n	8003922 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003910:	f7fe fc9a 	bl	8002248 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	2b64      	cmp	r3, #100	@ 0x64
 800391c:	d901      	bls.n	8003922 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e207      	b.n	8003d32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003922:	4b5b      	ldr	r3, [pc, #364]	@ (8003a90 <HAL_RCC_OscConfig+0x240>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d0f0      	beq.n	8003910 <HAL_RCC_OscConfig+0xc0>
 800392e:	e014      	b.n	800395a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003930:	f7fe fc8a 	bl	8002248 <HAL_GetTick>
 8003934:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003936:	e008      	b.n	800394a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003938:	f7fe fc86 	bl	8002248 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	2b64      	cmp	r3, #100	@ 0x64
 8003944:	d901      	bls.n	800394a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e1f3      	b.n	8003d32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800394a:	4b51      	ldr	r3, [pc, #324]	@ (8003a90 <HAL_RCC_OscConfig+0x240>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1f0      	bne.n	8003938 <HAL_RCC_OscConfig+0xe8>
 8003956:	e000      	b.n	800395a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003958:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d063      	beq.n	8003a2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003966:	4b4a      	ldr	r3, [pc, #296]	@ (8003a90 <HAL_RCC_OscConfig+0x240>)
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f003 030c 	and.w	r3, r3, #12
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00b      	beq.n	800398a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003972:	4b47      	ldr	r3, [pc, #284]	@ (8003a90 <HAL_RCC_OscConfig+0x240>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800397a:	2b08      	cmp	r3, #8
 800397c:	d11c      	bne.n	80039b8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800397e:	4b44      	ldr	r3, [pc, #272]	@ (8003a90 <HAL_RCC_OscConfig+0x240>)
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d116      	bne.n	80039b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800398a:	4b41      	ldr	r3, [pc, #260]	@ (8003a90 <HAL_RCC_OscConfig+0x240>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	2b00      	cmp	r3, #0
 8003994:	d005      	beq.n	80039a2 <HAL_RCC_OscConfig+0x152>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	2b01      	cmp	r3, #1
 800399c:	d001      	beq.n	80039a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e1c7      	b.n	8003d32 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039a2:	4b3b      	ldr	r3, [pc, #236]	@ (8003a90 <HAL_RCC_OscConfig+0x240>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	00db      	lsls	r3, r3, #3
 80039b0:	4937      	ldr	r1, [pc, #220]	@ (8003a90 <HAL_RCC_OscConfig+0x240>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039b6:	e03a      	b.n	8003a2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d020      	beq.n	8003a02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039c0:	4b34      	ldr	r3, [pc, #208]	@ (8003a94 <HAL_RCC_OscConfig+0x244>)
 80039c2:	2201      	movs	r2, #1
 80039c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c6:	f7fe fc3f 	bl	8002248 <HAL_GetTick>
 80039ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039cc:	e008      	b.n	80039e0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039ce:	f7fe fc3b 	bl	8002248 <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d901      	bls.n	80039e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e1a8      	b.n	8003d32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039e0:	4b2b      	ldr	r3, [pc, #172]	@ (8003a90 <HAL_RCC_OscConfig+0x240>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0302 	and.w	r3, r3, #2
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d0f0      	beq.n	80039ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039ec:	4b28      	ldr	r3, [pc, #160]	@ (8003a90 <HAL_RCC_OscConfig+0x240>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	00db      	lsls	r3, r3, #3
 80039fa:	4925      	ldr	r1, [pc, #148]	@ (8003a90 <HAL_RCC_OscConfig+0x240>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	600b      	str	r3, [r1, #0]
 8003a00:	e015      	b.n	8003a2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a02:	4b24      	ldr	r3, [pc, #144]	@ (8003a94 <HAL_RCC_OscConfig+0x244>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a08:	f7fe fc1e 	bl	8002248 <HAL_GetTick>
 8003a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a0e:	e008      	b.n	8003a22 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a10:	f7fe fc1a 	bl	8002248 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e187      	b.n	8003d32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a22:	4b1b      	ldr	r3, [pc, #108]	@ (8003a90 <HAL_RCC_OscConfig+0x240>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0302 	and.w	r3, r3, #2
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1f0      	bne.n	8003a10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0308 	and.w	r3, r3, #8
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d036      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d016      	beq.n	8003a70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a42:	4b15      	ldr	r3, [pc, #84]	@ (8003a98 <HAL_RCC_OscConfig+0x248>)
 8003a44:	2201      	movs	r2, #1
 8003a46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a48:	f7fe fbfe 	bl	8002248 <HAL_GetTick>
 8003a4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a4e:	e008      	b.n	8003a62 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a50:	f7fe fbfa 	bl	8002248 <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d901      	bls.n	8003a62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e167      	b.n	8003d32 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a62:	4b0b      	ldr	r3, [pc, #44]	@ (8003a90 <HAL_RCC_OscConfig+0x240>)
 8003a64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a66:	f003 0302 	and.w	r3, r3, #2
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d0f0      	beq.n	8003a50 <HAL_RCC_OscConfig+0x200>
 8003a6e:	e01b      	b.n	8003aa8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a70:	4b09      	ldr	r3, [pc, #36]	@ (8003a98 <HAL_RCC_OscConfig+0x248>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a76:	f7fe fbe7 	bl	8002248 <HAL_GetTick>
 8003a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a7c:	e00e      	b.n	8003a9c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a7e:	f7fe fbe3 	bl	8002248 <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d907      	bls.n	8003a9c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e150      	b.n	8003d32 <HAL_RCC_OscConfig+0x4e2>
 8003a90:	40023800 	.word	0x40023800
 8003a94:	42470000 	.word	0x42470000
 8003a98:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a9c:	4b88      	ldr	r3, [pc, #544]	@ (8003cc0 <HAL_RCC_OscConfig+0x470>)
 8003a9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d1ea      	bne.n	8003a7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0304 	and.w	r3, r3, #4
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	f000 8097 	beq.w	8003be4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003aba:	4b81      	ldr	r3, [pc, #516]	@ (8003cc0 <HAL_RCC_OscConfig+0x470>)
 8003abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003abe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d10f      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	60bb      	str	r3, [r7, #8]
 8003aca:	4b7d      	ldr	r3, [pc, #500]	@ (8003cc0 <HAL_RCC_OscConfig+0x470>)
 8003acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ace:	4a7c      	ldr	r2, [pc, #496]	@ (8003cc0 <HAL_RCC_OscConfig+0x470>)
 8003ad0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ad4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ad6:	4b7a      	ldr	r3, [pc, #488]	@ (8003cc0 <HAL_RCC_OscConfig+0x470>)
 8003ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ada:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ade:	60bb      	str	r3, [r7, #8]
 8003ae0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ae6:	4b77      	ldr	r3, [pc, #476]	@ (8003cc4 <HAL_RCC_OscConfig+0x474>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d118      	bne.n	8003b24 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003af2:	4b74      	ldr	r3, [pc, #464]	@ (8003cc4 <HAL_RCC_OscConfig+0x474>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a73      	ldr	r2, [pc, #460]	@ (8003cc4 <HAL_RCC_OscConfig+0x474>)
 8003af8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003afc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003afe:	f7fe fba3 	bl	8002248 <HAL_GetTick>
 8003b02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b04:	e008      	b.n	8003b18 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b06:	f7fe fb9f 	bl	8002248 <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d901      	bls.n	8003b18 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e10c      	b.n	8003d32 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b18:	4b6a      	ldr	r3, [pc, #424]	@ (8003cc4 <HAL_RCC_OscConfig+0x474>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d0f0      	beq.n	8003b06 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d106      	bne.n	8003b3a <HAL_RCC_OscConfig+0x2ea>
 8003b2c:	4b64      	ldr	r3, [pc, #400]	@ (8003cc0 <HAL_RCC_OscConfig+0x470>)
 8003b2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b30:	4a63      	ldr	r2, [pc, #396]	@ (8003cc0 <HAL_RCC_OscConfig+0x470>)
 8003b32:	f043 0301 	orr.w	r3, r3, #1
 8003b36:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b38:	e01c      	b.n	8003b74 <HAL_RCC_OscConfig+0x324>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	2b05      	cmp	r3, #5
 8003b40:	d10c      	bne.n	8003b5c <HAL_RCC_OscConfig+0x30c>
 8003b42:	4b5f      	ldr	r3, [pc, #380]	@ (8003cc0 <HAL_RCC_OscConfig+0x470>)
 8003b44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b46:	4a5e      	ldr	r2, [pc, #376]	@ (8003cc0 <HAL_RCC_OscConfig+0x470>)
 8003b48:	f043 0304 	orr.w	r3, r3, #4
 8003b4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b4e:	4b5c      	ldr	r3, [pc, #368]	@ (8003cc0 <HAL_RCC_OscConfig+0x470>)
 8003b50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b52:	4a5b      	ldr	r2, [pc, #364]	@ (8003cc0 <HAL_RCC_OscConfig+0x470>)
 8003b54:	f043 0301 	orr.w	r3, r3, #1
 8003b58:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b5a:	e00b      	b.n	8003b74 <HAL_RCC_OscConfig+0x324>
 8003b5c:	4b58      	ldr	r3, [pc, #352]	@ (8003cc0 <HAL_RCC_OscConfig+0x470>)
 8003b5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b60:	4a57      	ldr	r2, [pc, #348]	@ (8003cc0 <HAL_RCC_OscConfig+0x470>)
 8003b62:	f023 0301 	bic.w	r3, r3, #1
 8003b66:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b68:	4b55      	ldr	r3, [pc, #340]	@ (8003cc0 <HAL_RCC_OscConfig+0x470>)
 8003b6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b6c:	4a54      	ldr	r2, [pc, #336]	@ (8003cc0 <HAL_RCC_OscConfig+0x470>)
 8003b6e:	f023 0304 	bic.w	r3, r3, #4
 8003b72:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d015      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b7c:	f7fe fb64 	bl	8002248 <HAL_GetTick>
 8003b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b82:	e00a      	b.n	8003b9a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b84:	f7fe fb60 	bl	8002248 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d901      	bls.n	8003b9a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e0cb      	b.n	8003d32 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b9a:	4b49      	ldr	r3, [pc, #292]	@ (8003cc0 <HAL_RCC_OscConfig+0x470>)
 8003b9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b9e:	f003 0302 	and.w	r3, r3, #2
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d0ee      	beq.n	8003b84 <HAL_RCC_OscConfig+0x334>
 8003ba6:	e014      	b.n	8003bd2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ba8:	f7fe fb4e 	bl	8002248 <HAL_GetTick>
 8003bac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bae:	e00a      	b.n	8003bc6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bb0:	f7fe fb4a 	bl	8002248 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d901      	bls.n	8003bc6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e0b5      	b.n	8003d32 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bc6:	4b3e      	ldr	r3, [pc, #248]	@ (8003cc0 <HAL_RCC_OscConfig+0x470>)
 8003bc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1ee      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003bd2:	7dfb      	ldrb	r3, [r7, #23]
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d105      	bne.n	8003be4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bd8:	4b39      	ldr	r3, [pc, #228]	@ (8003cc0 <HAL_RCC_OscConfig+0x470>)
 8003bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bdc:	4a38      	ldr	r2, [pc, #224]	@ (8003cc0 <HAL_RCC_OscConfig+0x470>)
 8003bde:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003be2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	699b      	ldr	r3, [r3, #24]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	f000 80a1 	beq.w	8003d30 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bee:	4b34      	ldr	r3, [pc, #208]	@ (8003cc0 <HAL_RCC_OscConfig+0x470>)
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f003 030c 	and.w	r3, r3, #12
 8003bf6:	2b08      	cmp	r3, #8
 8003bf8:	d05c      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	699b      	ldr	r3, [r3, #24]
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d141      	bne.n	8003c86 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c02:	4b31      	ldr	r3, [pc, #196]	@ (8003cc8 <HAL_RCC_OscConfig+0x478>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c08:	f7fe fb1e 	bl	8002248 <HAL_GetTick>
 8003c0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c0e:	e008      	b.n	8003c22 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c10:	f7fe fb1a 	bl	8002248 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e087      	b.n	8003d32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c22:	4b27      	ldr	r3, [pc, #156]	@ (8003cc0 <HAL_RCC_OscConfig+0x470>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d1f0      	bne.n	8003c10 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	69da      	ldr	r2, [r3, #28]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a1b      	ldr	r3, [r3, #32]
 8003c36:	431a      	orrs	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3c:	019b      	lsls	r3, r3, #6
 8003c3e:	431a      	orrs	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c44:	085b      	lsrs	r3, r3, #1
 8003c46:	3b01      	subs	r3, #1
 8003c48:	041b      	lsls	r3, r3, #16
 8003c4a:	431a      	orrs	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c50:	061b      	lsls	r3, r3, #24
 8003c52:	491b      	ldr	r1, [pc, #108]	@ (8003cc0 <HAL_RCC_OscConfig+0x470>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c58:	4b1b      	ldr	r3, [pc, #108]	@ (8003cc8 <HAL_RCC_OscConfig+0x478>)
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c5e:	f7fe faf3 	bl	8002248 <HAL_GetTick>
 8003c62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c64:	e008      	b.n	8003c78 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c66:	f7fe faef 	bl	8002248 <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d901      	bls.n	8003c78 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e05c      	b.n	8003d32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c78:	4b11      	ldr	r3, [pc, #68]	@ (8003cc0 <HAL_RCC_OscConfig+0x470>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d0f0      	beq.n	8003c66 <HAL_RCC_OscConfig+0x416>
 8003c84:	e054      	b.n	8003d30 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c86:	4b10      	ldr	r3, [pc, #64]	@ (8003cc8 <HAL_RCC_OscConfig+0x478>)
 8003c88:	2200      	movs	r2, #0
 8003c8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c8c:	f7fe fadc 	bl	8002248 <HAL_GetTick>
 8003c90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c92:	e008      	b.n	8003ca6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c94:	f7fe fad8 	bl	8002248 <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e045      	b.n	8003d32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ca6:	4b06      	ldr	r3, [pc, #24]	@ (8003cc0 <HAL_RCC_OscConfig+0x470>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d1f0      	bne.n	8003c94 <HAL_RCC_OscConfig+0x444>
 8003cb2:	e03d      	b.n	8003d30 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d107      	bne.n	8003ccc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e038      	b.n	8003d32 <HAL_RCC_OscConfig+0x4e2>
 8003cc0:	40023800 	.word	0x40023800
 8003cc4:	40007000 	.word	0x40007000
 8003cc8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ccc:	4b1b      	ldr	r3, [pc, #108]	@ (8003d3c <HAL_RCC_OscConfig+0x4ec>)
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d028      	beq.n	8003d2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d121      	bne.n	8003d2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d11a      	bne.n	8003d2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003d02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d111      	bne.n	8003d2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d12:	085b      	lsrs	r3, r3, #1
 8003d14:	3b01      	subs	r3, #1
 8003d16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d107      	bne.n	8003d2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d001      	beq.n	8003d30 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e000      	b.n	8003d32 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3718      	adds	r7, #24
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	40023800 	.word	0x40023800

08003d40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d101      	bne.n	8003d54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e0cc      	b.n	8003eee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d54:	4b68      	ldr	r3, [pc, #416]	@ (8003ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0307 	and.w	r3, r3, #7
 8003d5c:	683a      	ldr	r2, [r7, #0]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d90c      	bls.n	8003d7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d62:	4b65      	ldr	r3, [pc, #404]	@ (8003ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d64:	683a      	ldr	r2, [r7, #0]
 8003d66:	b2d2      	uxtb	r2, r2
 8003d68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d6a:	4b63      	ldr	r3, [pc, #396]	@ (8003ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0307 	and.w	r3, r3, #7
 8003d72:	683a      	ldr	r2, [r7, #0]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d001      	beq.n	8003d7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e0b8      	b.n	8003eee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0302 	and.w	r3, r3, #2
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d020      	beq.n	8003dca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0304 	and.w	r3, r3, #4
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d005      	beq.n	8003da0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d94:	4b59      	ldr	r3, [pc, #356]	@ (8003efc <HAL_RCC_ClockConfig+0x1bc>)
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	4a58      	ldr	r2, [pc, #352]	@ (8003efc <HAL_RCC_ClockConfig+0x1bc>)
 8003d9a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003d9e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0308 	and.w	r3, r3, #8
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d005      	beq.n	8003db8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003dac:	4b53      	ldr	r3, [pc, #332]	@ (8003efc <HAL_RCC_ClockConfig+0x1bc>)
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	4a52      	ldr	r2, [pc, #328]	@ (8003efc <HAL_RCC_ClockConfig+0x1bc>)
 8003db2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003db6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003db8:	4b50      	ldr	r3, [pc, #320]	@ (8003efc <HAL_RCC_ClockConfig+0x1bc>)
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	494d      	ldr	r1, [pc, #308]	@ (8003efc <HAL_RCC_ClockConfig+0x1bc>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0301 	and.w	r3, r3, #1
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d044      	beq.n	8003e60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d107      	bne.n	8003dee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dde:	4b47      	ldr	r3, [pc, #284]	@ (8003efc <HAL_RCC_ClockConfig+0x1bc>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d119      	bne.n	8003e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e07f      	b.n	8003eee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d003      	beq.n	8003dfe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dfa:	2b03      	cmp	r3, #3
 8003dfc:	d107      	bne.n	8003e0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dfe:	4b3f      	ldr	r3, [pc, #252]	@ (8003efc <HAL_RCC_ClockConfig+0x1bc>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d109      	bne.n	8003e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e06f      	b.n	8003eee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e0e:	4b3b      	ldr	r3, [pc, #236]	@ (8003efc <HAL_RCC_ClockConfig+0x1bc>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0302 	and.w	r3, r3, #2
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d101      	bne.n	8003e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e067      	b.n	8003eee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e1e:	4b37      	ldr	r3, [pc, #220]	@ (8003efc <HAL_RCC_ClockConfig+0x1bc>)
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f023 0203 	bic.w	r2, r3, #3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	4934      	ldr	r1, [pc, #208]	@ (8003efc <HAL_RCC_ClockConfig+0x1bc>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e30:	f7fe fa0a 	bl	8002248 <HAL_GetTick>
 8003e34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e36:	e00a      	b.n	8003e4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e38:	f7fe fa06 	bl	8002248 <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d901      	bls.n	8003e4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e04f      	b.n	8003eee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e4e:	4b2b      	ldr	r3, [pc, #172]	@ (8003efc <HAL_RCC_ClockConfig+0x1bc>)
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f003 020c 	and.w	r2, r3, #12
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d1eb      	bne.n	8003e38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e60:	4b25      	ldr	r3, [pc, #148]	@ (8003ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0307 	and.w	r3, r3, #7
 8003e68:	683a      	ldr	r2, [r7, #0]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d20c      	bcs.n	8003e88 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e6e:	4b22      	ldr	r3, [pc, #136]	@ (8003ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e70:	683a      	ldr	r2, [r7, #0]
 8003e72:	b2d2      	uxtb	r2, r2
 8003e74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e76:	4b20      	ldr	r3, [pc, #128]	@ (8003ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0307 	and.w	r3, r3, #7
 8003e7e:	683a      	ldr	r2, [r7, #0]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d001      	beq.n	8003e88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e032      	b.n	8003eee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0304 	and.w	r3, r3, #4
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d008      	beq.n	8003ea6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e94:	4b19      	ldr	r3, [pc, #100]	@ (8003efc <HAL_RCC_ClockConfig+0x1bc>)
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	4916      	ldr	r1, [pc, #88]	@ (8003efc <HAL_RCC_ClockConfig+0x1bc>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0308 	and.w	r3, r3, #8
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d009      	beq.n	8003ec6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003eb2:	4b12      	ldr	r3, [pc, #72]	@ (8003efc <HAL_RCC_ClockConfig+0x1bc>)
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	00db      	lsls	r3, r3, #3
 8003ec0:	490e      	ldr	r1, [pc, #56]	@ (8003efc <HAL_RCC_ClockConfig+0x1bc>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ec6:	f000 f821 	bl	8003f0c <HAL_RCC_GetSysClockFreq>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8003efc <HAL_RCC_ClockConfig+0x1bc>)
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	091b      	lsrs	r3, r3, #4
 8003ed2:	f003 030f 	and.w	r3, r3, #15
 8003ed6:	490a      	ldr	r1, [pc, #40]	@ (8003f00 <HAL_RCC_ClockConfig+0x1c0>)
 8003ed8:	5ccb      	ldrb	r3, [r1, r3]
 8003eda:	fa22 f303 	lsr.w	r3, r2, r3
 8003ede:	4a09      	ldr	r2, [pc, #36]	@ (8003f04 <HAL_RCC_ClockConfig+0x1c4>)
 8003ee0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003ee2:	4b09      	ldr	r3, [pc, #36]	@ (8003f08 <HAL_RCC_ClockConfig+0x1c8>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7fe f96a 	bl	80021c0 <HAL_InitTick>

  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3710      	adds	r7, #16
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	40023c00 	.word	0x40023c00
 8003efc:	40023800 	.word	0x40023800
 8003f00:	080078c8 	.word	0x080078c8
 8003f04:	20000008 	.word	0x20000008
 8003f08:	2000000c 	.word	0x2000000c

08003f0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f10:	b094      	sub	sp, #80	@ 0x50
 8003f12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003f14:	2300      	movs	r3, #0
 8003f16:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003f20:	2300      	movs	r3, #0
 8003f22:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f24:	4b79      	ldr	r3, [pc, #484]	@ (800410c <HAL_RCC_GetSysClockFreq+0x200>)
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	f003 030c 	and.w	r3, r3, #12
 8003f2c:	2b08      	cmp	r3, #8
 8003f2e:	d00d      	beq.n	8003f4c <HAL_RCC_GetSysClockFreq+0x40>
 8003f30:	2b08      	cmp	r3, #8
 8003f32:	f200 80e1 	bhi.w	80040f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d002      	beq.n	8003f40 <HAL_RCC_GetSysClockFreq+0x34>
 8003f3a:	2b04      	cmp	r3, #4
 8003f3c:	d003      	beq.n	8003f46 <HAL_RCC_GetSysClockFreq+0x3a>
 8003f3e:	e0db      	b.n	80040f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f40:	4b73      	ldr	r3, [pc, #460]	@ (8004110 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f42:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f44:	e0db      	b.n	80040fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f46:	4b73      	ldr	r3, [pc, #460]	@ (8004114 <HAL_RCC_GetSysClockFreq+0x208>)
 8003f48:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f4a:	e0d8      	b.n	80040fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f4c:	4b6f      	ldr	r3, [pc, #444]	@ (800410c <HAL_RCC_GetSysClockFreq+0x200>)
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f54:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f56:	4b6d      	ldr	r3, [pc, #436]	@ (800410c <HAL_RCC_GetSysClockFreq+0x200>)
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d063      	beq.n	800402a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f62:	4b6a      	ldr	r3, [pc, #424]	@ (800410c <HAL_RCC_GetSysClockFreq+0x200>)
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	099b      	lsrs	r3, r3, #6
 8003f68:	2200      	movs	r2, #0
 8003f6a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f6c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f74:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f76:	2300      	movs	r3, #0
 8003f78:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f7a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003f7e:	4622      	mov	r2, r4
 8003f80:	462b      	mov	r3, r5
 8003f82:	f04f 0000 	mov.w	r0, #0
 8003f86:	f04f 0100 	mov.w	r1, #0
 8003f8a:	0159      	lsls	r1, r3, #5
 8003f8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f90:	0150      	lsls	r0, r2, #5
 8003f92:	4602      	mov	r2, r0
 8003f94:	460b      	mov	r3, r1
 8003f96:	4621      	mov	r1, r4
 8003f98:	1a51      	subs	r1, r2, r1
 8003f9a:	6139      	str	r1, [r7, #16]
 8003f9c:	4629      	mov	r1, r5
 8003f9e:	eb63 0301 	sbc.w	r3, r3, r1
 8003fa2:	617b      	str	r3, [r7, #20]
 8003fa4:	f04f 0200 	mov.w	r2, #0
 8003fa8:	f04f 0300 	mov.w	r3, #0
 8003fac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003fb0:	4659      	mov	r1, fp
 8003fb2:	018b      	lsls	r3, r1, #6
 8003fb4:	4651      	mov	r1, sl
 8003fb6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fba:	4651      	mov	r1, sl
 8003fbc:	018a      	lsls	r2, r1, #6
 8003fbe:	4651      	mov	r1, sl
 8003fc0:	ebb2 0801 	subs.w	r8, r2, r1
 8003fc4:	4659      	mov	r1, fp
 8003fc6:	eb63 0901 	sbc.w	r9, r3, r1
 8003fca:	f04f 0200 	mov.w	r2, #0
 8003fce:	f04f 0300 	mov.w	r3, #0
 8003fd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fde:	4690      	mov	r8, r2
 8003fe0:	4699      	mov	r9, r3
 8003fe2:	4623      	mov	r3, r4
 8003fe4:	eb18 0303 	adds.w	r3, r8, r3
 8003fe8:	60bb      	str	r3, [r7, #8]
 8003fea:	462b      	mov	r3, r5
 8003fec:	eb49 0303 	adc.w	r3, r9, r3
 8003ff0:	60fb      	str	r3, [r7, #12]
 8003ff2:	f04f 0200 	mov.w	r2, #0
 8003ff6:	f04f 0300 	mov.w	r3, #0
 8003ffa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003ffe:	4629      	mov	r1, r5
 8004000:	024b      	lsls	r3, r1, #9
 8004002:	4621      	mov	r1, r4
 8004004:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004008:	4621      	mov	r1, r4
 800400a:	024a      	lsls	r2, r1, #9
 800400c:	4610      	mov	r0, r2
 800400e:	4619      	mov	r1, r3
 8004010:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004012:	2200      	movs	r2, #0
 8004014:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004016:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004018:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800401c:	f7fc f988 	bl	8000330 <__aeabi_uldivmod>
 8004020:	4602      	mov	r2, r0
 8004022:	460b      	mov	r3, r1
 8004024:	4613      	mov	r3, r2
 8004026:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004028:	e058      	b.n	80040dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800402a:	4b38      	ldr	r3, [pc, #224]	@ (800410c <HAL_RCC_GetSysClockFreq+0x200>)
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	099b      	lsrs	r3, r3, #6
 8004030:	2200      	movs	r2, #0
 8004032:	4618      	mov	r0, r3
 8004034:	4611      	mov	r1, r2
 8004036:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800403a:	623b      	str	r3, [r7, #32]
 800403c:	2300      	movs	r3, #0
 800403e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004040:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004044:	4642      	mov	r2, r8
 8004046:	464b      	mov	r3, r9
 8004048:	f04f 0000 	mov.w	r0, #0
 800404c:	f04f 0100 	mov.w	r1, #0
 8004050:	0159      	lsls	r1, r3, #5
 8004052:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004056:	0150      	lsls	r0, r2, #5
 8004058:	4602      	mov	r2, r0
 800405a:	460b      	mov	r3, r1
 800405c:	4641      	mov	r1, r8
 800405e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004062:	4649      	mov	r1, r9
 8004064:	eb63 0b01 	sbc.w	fp, r3, r1
 8004068:	f04f 0200 	mov.w	r2, #0
 800406c:	f04f 0300 	mov.w	r3, #0
 8004070:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004074:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004078:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800407c:	ebb2 040a 	subs.w	r4, r2, sl
 8004080:	eb63 050b 	sbc.w	r5, r3, fp
 8004084:	f04f 0200 	mov.w	r2, #0
 8004088:	f04f 0300 	mov.w	r3, #0
 800408c:	00eb      	lsls	r3, r5, #3
 800408e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004092:	00e2      	lsls	r2, r4, #3
 8004094:	4614      	mov	r4, r2
 8004096:	461d      	mov	r5, r3
 8004098:	4643      	mov	r3, r8
 800409a:	18e3      	adds	r3, r4, r3
 800409c:	603b      	str	r3, [r7, #0]
 800409e:	464b      	mov	r3, r9
 80040a0:	eb45 0303 	adc.w	r3, r5, r3
 80040a4:	607b      	str	r3, [r7, #4]
 80040a6:	f04f 0200 	mov.w	r2, #0
 80040aa:	f04f 0300 	mov.w	r3, #0
 80040ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040b2:	4629      	mov	r1, r5
 80040b4:	028b      	lsls	r3, r1, #10
 80040b6:	4621      	mov	r1, r4
 80040b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040bc:	4621      	mov	r1, r4
 80040be:	028a      	lsls	r2, r1, #10
 80040c0:	4610      	mov	r0, r2
 80040c2:	4619      	mov	r1, r3
 80040c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040c6:	2200      	movs	r2, #0
 80040c8:	61bb      	str	r3, [r7, #24]
 80040ca:	61fa      	str	r2, [r7, #28]
 80040cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040d0:	f7fc f92e 	bl	8000330 <__aeabi_uldivmod>
 80040d4:	4602      	mov	r2, r0
 80040d6:	460b      	mov	r3, r1
 80040d8:	4613      	mov	r3, r2
 80040da:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80040dc:	4b0b      	ldr	r3, [pc, #44]	@ (800410c <HAL_RCC_GetSysClockFreq+0x200>)
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	0c1b      	lsrs	r3, r3, #16
 80040e2:	f003 0303 	and.w	r3, r3, #3
 80040e6:	3301      	adds	r3, #1
 80040e8:	005b      	lsls	r3, r3, #1
 80040ea:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80040ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80040ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040f4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80040f6:	e002      	b.n	80040fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040f8:	4b05      	ldr	r3, [pc, #20]	@ (8004110 <HAL_RCC_GetSysClockFreq+0x204>)
 80040fa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80040fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004100:	4618      	mov	r0, r3
 8004102:	3750      	adds	r7, #80	@ 0x50
 8004104:	46bd      	mov	sp, r7
 8004106:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800410a:	bf00      	nop
 800410c:	40023800 	.word	0x40023800
 8004110:	00f42400 	.word	0x00f42400
 8004114:	007a1200 	.word	0x007a1200

08004118 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d101      	bne.n	800412a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e041      	b.n	80041ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004130:	b2db      	uxtb	r3, r3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d106      	bne.n	8004144 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f7fd fe22 	bl	8001d88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2202      	movs	r2, #2
 8004148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	3304      	adds	r3, #4
 8004154:	4619      	mov	r1, r3
 8004156:	4610      	mov	r0, r2
 8004158:	f000 ff10 	bl	8004f7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3708      	adds	r7, #8
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
	...

080041b8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d001      	beq.n	80041d0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e046      	b.n	800425e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2202      	movs	r2, #2
 80041d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a23      	ldr	r2, [pc, #140]	@ (800426c <HAL_TIM_Base_Start+0xb4>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d022      	beq.n	8004228 <HAL_TIM_Base_Start+0x70>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041ea:	d01d      	beq.n	8004228 <HAL_TIM_Base_Start+0x70>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a1f      	ldr	r2, [pc, #124]	@ (8004270 <HAL_TIM_Base_Start+0xb8>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d018      	beq.n	8004228 <HAL_TIM_Base_Start+0x70>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a1e      	ldr	r2, [pc, #120]	@ (8004274 <HAL_TIM_Base_Start+0xbc>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d013      	beq.n	8004228 <HAL_TIM_Base_Start+0x70>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a1c      	ldr	r2, [pc, #112]	@ (8004278 <HAL_TIM_Base_Start+0xc0>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d00e      	beq.n	8004228 <HAL_TIM_Base_Start+0x70>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a1b      	ldr	r2, [pc, #108]	@ (800427c <HAL_TIM_Base_Start+0xc4>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d009      	beq.n	8004228 <HAL_TIM_Base_Start+0x70>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a19      	ldr	r2, [pc, #100]	@ (8004280 <HAL_TIM_Base_Start+0xc8>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d004      	beq.n	8004228 <HAL_TIM_Base_Start+0x70>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a18      	ldr	r2, [pc, #96]	@ (8004284 <HAL_TIM_Base_Start+0xcc>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d111      	bne.n	800424c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f003 0307 	and.w	r3, r3, #7
 8004232:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2b06      	cmp	r3, #6
 8004238:	d010      	beq.n	800425c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f042 0201 	orr.w	r2, r2, #1
 8004248:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800424a:	e007      	b.n	800425c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f042 0201 	orr.w	r2, r2, #1
 800425a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3714      	adds	r7, #20
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	40010000 	.word	0x40010000
 8004270:	40000400 	.word	0x40000400
 8004274:	40000800 	.word	0x40000800
 8004278:	40000c00 	.word	0x40000c00
 800427c:	40010400 	.word	0x40010400
 8004280:	40014000 	.word	0x40014000
 8004284:	40001800 	.word	0x40001800

08004288 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d101      	bne.n	800429a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e041      	b.n	800431e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d106      	bne.n	80042b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 f839 	bl	8004326 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2202      	movs	r2, #2
 80042b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	3304      	adds	r3, #4
 80042c4:	4619      	mov	r1, r3
 80042c6:	4610      	mov	r0, r2
 80042c8:	f000 fe58 	bl	8004f7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3708      	adds	r7, #8
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}

08004326 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004326:	b480      	push	{r7}
 8004328:	b083      	sub	sp, #12
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800432e:	bf00      	nop
 8004330:	370c      	adds	r7, #12
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
	...

0800433c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b086      	sub	sp, #24
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
 8004348:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800434a:	2300      	movs	r3, #0
 800434c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d109      	bne.n	8004368 <HAL_TIM_PWM_Start_DMA+0x2c>
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800435a:	b2db      	uxtb	r3, r3
 800435c:	2b02      	cmp	r3, #2
 800435e:	bf0c      	ite	eq
 8004360:	2301      	moveq	r3, #1
 8004362:	2300      	movne	r3, #0
 8004364:	b2db      	uxtb	r3, r3
 8004366:	e022      	b.n	80043ae <HAL_TIM_PWM_Start_DMA+0x72>
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	2b04      	cmp	r3, #4
 800436c:	d109      	bne.n	8004382 <HAL_TIM_PWM_Start_DMA+0x46>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004374:	b2db      	uxtb	r3, r3
 8004376:	2b02      	cmp	r3, #2
 8004378:	bf0c      	ite	eq
 800437a:	2301      	moveq	r3, #1
 800437c:	2300      	movne	r3, #0
 800437e:	b2db      	uxtb	r3, r3
 8004380:	e015      	b.n	80043ae <HAL_TIM_PWM_Start_DMA+0x72>
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	2b08      	cmp	r3, #8
 8004386:	d109      	bne.n	800439c <HAL_TIM_PWM_Start_DMA+0x60>
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800438e:	b2db      	uxtb	r3, r3
 8004390:	2b02      	cmp	r3, #2
 8004392:	bf0c      	ite	eq
 8004394:	2301      	moveq	r3, #1
 8004396:	2300      	movne	r3, #0
 8004398:	b2db      	uxtb	r3, r3
 800439a:	e008      	b.n	80043ae <HAL_TIM_PWM_Start_DMA+0x72>
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	bf0c      	ite	eq
 80043a8:	2301      	moveq	r3, #1
 80043aa:	2300      	movne	r3, #0
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d001      	beq.n	80043b6 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80043b2:	2302      	movs	r3, #2
 80043b4:	e171      	b.n	800469a <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d109      	bne.n	80043d0 <HAL_TIM_PWM_Start_DMA+0x94>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	bf0c      	ite	eq
 80043c8:	2301      	moveq	r3, #1
 80043ca:	2300      	movne	r3, #0
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	e022      	b.n	8004416 <HAL_TIM_PWM_Start_DMA+0xda>
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	2b04      	cmp	r3, #4
 80043d4:	d109      	bne.n	80043ea <HAL_TIM_PWM_Start_DMA+0xae>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	2b01      	cmp	r3, #1
 80043e0:	bf0c      	ite	eq
 80043e2:	2301      	moveq	r3, #1
 80043e4:	2300      	movne	r3, #0
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	e015      	b.n	8004416 <HAL_TIM_PWM_Start_DMA+0xda>
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	2b08      	cmp	r3, #8
 80043ee:	d109      	bne.n	8004404 <HAL_TIM_PWM_Start_DMA+0xc8>
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	bf0c      	ite	eq
 80043fc:	2301      	moveq	r3, #1
 80043fe:	2300      	movne	r3, #0
 8004400:	b2db      	uxtb	r3, r3
 8004402:	e008      	b.n	8004416 <HAL_TIM_PWM_Start_DMA+0xda>
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800440a:	b2db      	uxtb	r3, r3
 800440c:	2b01      	cmp	r3, #1
 800440e:	bf0c      	ite	eq
 8004410:	2301      	moveq	r3, #1
 8004412:	2300      	movne	r3, #0
 8004414:	b2db      	uxtb	r3, r3
 8004416:	2b00      	cmp	r3, #0
 8004418:	d024      	beq.n	8004464 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d002      	beq.n	8004426 <HAL_TIM_PWM_Start_DMA+0xea>
 8004420:	887b      	ldrh	r3, [r7, #2]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d101      	bne.n	800442a <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e137      	b.n	800469a <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d104      	bne.n	800443a <HAL_TIM_PWM_Start_DMA+0xfe>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2202      	movs	r2, #2
 8004434:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004438:	e016      	b.n	8004468 <HAL_TIM_PWM_Start_DMA+0x12c>
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	2b04      	cmp	r3, #4
 800443e:	d104      	bne.n	800444a <HAL_TIM_PWM_Start_DMA+0x10e>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2202      	movs	r2, #2
 8004444:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004448:	e00e      	b.n	8004468 <HAL_TIM_PWM_Start_DMA+0x12c>
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	2b08      	cmp	r3, #8
 800444e:	d104      	bne.n	800445a <HAL_TIM_PWM_Start_DMA+0x11e>
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2202      	movs	r2, #2
 8004454:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004458:	e006      	b.n	8004468 <HAL_TIM_PWM_Start_DMA+0x12c>
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2202      	movs	r2, #2
 800445e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004462:	e001      	b.n	8004468 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e118      	b.n	800469a <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	2b0c      	cmp	r3, #12
 800446c:	f200 80ae 	bhi.w	80045cc <HAL_TIM_PWM_Start_DMA+0x290>
 8004470:	a201      	add	r2, pc, #4	@ (adr r2, 8004478 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8004472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004476:	bf00      	nop
 8004478:	080044ad 	.word	0x080044ad
 800447c:	080045cd 	.word	0x080045cd
 8004480:	080045cd 	.word	0x080045cd
 8004484:	080045cd 	.word	0x080045cd
 8004488:	080044f5 	.word	0x080044f5
 800448c:	080045cd 	.word	0x080045cd
 8004490:	080045cd 	.word	0x080045cd
 8004494:	080045cd 	.word	0x080045cd
 8004498:	0800453d 	.word	0x0800453d
 800449c:	080045cd 	.word	0x080045cd
 80044a0:	080045cd 	.word	0x080045cd
 80044a4:	080045cd 	.word	0x080045cd
 80044a8:	08004585 	.word	0x08004585
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b0:	4a7c      	ldr	r2, [pc, #496]	@ (80046a4 <HAL_TIM_PWM_Start_DMA+0x368>)
 80044b2:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b8:	4a7b      	ldr	r2, [pc, #492]	@ (80046a8 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80044ba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c0:	4a7a      	ldr	r2, [pc, #488]	@ (80046ac <HAL_TIM_PWM_Start_DMA+0x370>)
 80044c2:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80044c8:	6879      	ldr	r1, [r7, #4]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	3334      	adds	r3, #52	@ 0x34
 80044d0:	461a      	mov	r2, r3
 80044d2:	887b      	ldrh	r3, [r7, #2]
 80044d4:	f7fe fd24 	bl	8002f20 <HAL_DMA_Start_IT>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d001      	beq.n	80044e2 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e0db      	b.n	800469a <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68da      	ldr	r2, [r3, #12]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044f0:	60da      	str	r2, [r3, #12]
      break;
 80044f2:	e06e      	b.n	80045d2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044f8:	4a6a      	ldr	r2, [pc, #424]	@ (80046a4 <HAL_TIM_PWM_Start_DMA+0x368>)
 80044fa:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004500:	4a69      	ldr	r2, [pc, #420]	@ (80046a8 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8004502:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004508:	4a68      	ldr	r2, [pc, #416]	@ (80046ac <HAL_TIM_PWM_Start_DMA+0x370>)
 800450a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8004510:	6879      	ldr	r1, [r7, #4]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	3338      	adds	r3, #56	@ 0x38
 8004518:	461a      	mov	r2, r3
 800451a:	887b      	ldrh	r3, [r7, #2]
 800451c:	f7fe fd00 	bl	8002f20 <HAL_DMA_Start_IT>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d001      	beq.n	800452a <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e0b7      	b.n	800469a <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	68da      	ldr	r2, [r3, #12]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004538:	60da      	str	r2, [r3, #12]
      break;
 800453a:	e04a      	b.n	80045d2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004540:	4a58      	ldr	r2, [pc, #352]	@ (80046a4 <HAL_TIM_PWM_Start_DMA+0x368>)
 8004542:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004548:	4a57      	ldr	r2, [pc, #348]	@ (80046a8 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800454a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004550:	4a56      	ldr	r2, [pc, #344]	@ (80046ac <HAL_TIM_PWM_Start_DMA+0x370>)
 8004552:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8004558:	6879      	ldr	r1, [r7, #4]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	333c      	adds	r3, #60	@ 0x3c
 8004560:	461a      	mov	r2, r3
 8004562:	887b      	ldrh	r3, [r7, #2]
 8004564:	f7fe fcdc 	bl	8002f20 <HAL_DMA_Start_IT>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d001      	beq.n	8004572 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e093      	b.n	800469a <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	68da      	ldr	r2, [r3, #12]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004580:	60da      	str	r2, [r3, #12]
      break;
 8004582:	e026      	b.n	80045d2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004588:	4a46      	ldr	r2, [pc, #280]	@ (80046a4 <HAL_TIM_PWM_Start_DMA+0x368>)
 800458a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004590:	4a45      	ldr	r2, [pc, #276]	@ (80046a8 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8004592:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004598:	4a44      	ldr	r2, [pc, #272]	@ (80046ac <HAL_TIM_PWM_Start_DMA+0x370>)
 800459a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80045a0:	6879      	ldr	r1, [r7, #4]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	3340      	adds	r3, #64	@ 0x40
 80045a8:	461a      	mov	r2, r3
 80045aa:	887b      	ldrh	r3, [r7, #2]
 80045ac:	f7fe fcb8 	bl	8002f20 <HAL_DMA_Start_IT>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d001      	beq.n	80045ba <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e06f      	b.n	800469a <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68da      	ldr	r2, [r3, #12]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80045c8:	60da      	str	r2, [r3, #12]
      break;
 80045ca:	e002      	b.n	80045d2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	75fb      	strb	r3, [r7, #23]
      break;
 80045d0:	bf00      	nop
  }

  if (status == HAL_OK)
 80045d2:	7dfb      	ldrb	r3, [r7, #23]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d15f      	bne.n	8004698 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2201      	movs	r2, #1
 80045de:	68b9      	ldr	r1, [r7, #8]
 80045e0:	4618      	mov	r0, r3
 80045e2:	f000 ffbb 	bl	800555c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a31      	ldr	r2, [pc, #196]	@ (80046b0 <HAL_TIM_PWM_Start_DMA+0x374>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d004      	beq.n	80045fa <HAL_TIM_PWM_Start_DMA+0x2be>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a2f      	ldr	r2, [pc, #188]	@ (80046b4 <HAL_TIM_PWM_Start_DMA+0x378>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d101      	bne.n	80045fe <HAL_TIM_PWM_Start_DMA+0x2c2>
 80045fa:	2301      	movs	r3, #1
 80045fc:	e000      	b.n	8004600 <HAL_TIM_PWM_Start_DMA+0x2c4>
 80045fe:	2300      	movs	r3, #0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d007      	beq.n	8004614 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004612:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a25      	ldr	r2, [pc, #148]	@ (80046b0 <HAL_TIM_PWM_Start_DMA+0x374>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d022      	beq.n	8004664 <HAL_TIM_PWM_Start_DMA+0x328>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004626:	d01d      	beq.n	8004664 <HAL_TIM_PWM_Start_DMA+0x328>
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a22      	ldr	r2, [pc, #136]	@ (80046b8 <HAL_TIM_PWM_Start_DMA+0x37c>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d018      	beq.n	8004664 <HAL_TIM_PWM_Start_DMA+0x328>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a21      	ldr	r2, [pc, #132]	@ (80046bc <HAL_TIM_PWM_Start_DMA+0x380>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d013      	beq.n	8004664 <HAL_TIM_PWM_Start_DMA+0x328>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a1f      	ldr	r2, [pc, #124]	@ (80046c0 <HAL_TIM_PWM_Start_DMA+0x384>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d00e      	beq.n	8004664 <HAL_TIM_PWM_Start_DMA+0x328>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a1a      	ldr	r2, [pc, #104]	@ (80046b4 <HAL_TIM_PWM_Start_DMA+0x378>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d009      	beq.n	8004664 <HAL_TIM_PWM_Start_DMA+0x328>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a1b      	ldr	r2, [pc, #108]	@ (80046c4 <HAL_TIM_PWM_Start_DMA+0x388>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d004      	beq.n	8004664 <HAL_TIM_PWM_Start_DMA+0x328>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a1a      	ldr	r2, [pc, #104]	@ (80046c8 <HAL_TIM_PWM_Start_DMA+0x38c>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d111      	bne.n	8004688 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	f003 0307 	and.w	r3, r3, #7
 800466e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	2b06      	cmp	r3, #6
 8004674:	d010      	beq.n	8004698 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f042 0201 	orr.w	r2, r2, #1
 8004684:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004686:	e007      	b.n	8004698 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f042 0201 	orr.w	r2, r2, #1
 8004696:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004698:	7dfb      	ldrb	r3, [r7, #23]
}
 800469a:	4618      	mov	r0, r3
 800469c:	3718      	adds	r7, #24
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	08004e6d 	.word	0x08004e6d
 80046a8:	08004f15 	.word	0x08004f15
 80046ac:	08004ddb 	.word	0x08004ddb
 80046b0:	40010000 	.word	0x40010000
 80046b4:	40010400 	.word	0x40010400
 80046b8:	40000400 	.word	0x40000400
 80046bc:	40000800 	.word	0x40000800
 80046c0:	40000c00 	.word	0x40000c00
 80046c4:	40014000 	.word	0x40014000
 80046c8:	40001800 	.word	0x40001800

080046cc <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046d6:	2300      	movs	r3, #0
 80046d8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	2b0c      	cmp	r3, #12
 80046de:	d855      	bhi.n	800478c <HAL_TIM_PWM_Stop_DMA+0xc0>
 80046e0:	a201      	add	r2, pc, #4	@ (adr r2, 80046e8 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80046e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e6:	bf00      	nop
 80046e8:	0800471d 	.word	0x0800471d
 80046ec:	0800478d 	.word	0x0800478d
 80046f0:	0800478d 	.word	0x0800478d
 80046f4:	0800478d 	.word	0x0800478d
 80046f8:	08004739 	.word	0x08004739
 80046fc:	0800478d 	.word	0x0800478d
 8004700:	0800478d 	.word	0x0800478d
 8004704:	0800478d 	.word	0x0800478d
 8004708:	08004755 	.word	0x08004755
 800470c:	0800478d 	.word	0x0800478d
 8004710:	0800478d 	.word	0x0800478d
 8004714:	0800478d 	.word	0x0800478d
 8004718:	08004771 	.word	0x08004771
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68da      	ldr	r2, [r3, #12]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800472a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004730:	4618      	mov	r0, r3
 8004732:	f7fe fc4d 	bl	8002fd0 <HAL_DMA_Abort_IT>
      break;
 8004736:	e02c      	b.n	8004792 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68da      	ldr	r2, [r3, #12]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004746:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800474c:	4618      	mov	r0, r3
 800474e:	f7fe fc3f 	bl	8002fd0 <HAL_DMA_Abort_IT>
      break;
 8004752:	e01e      	b.n	8004792 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68da      	ldr	r2, [r3, #12]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004762:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004768:	4618      	mov	r0, r3
 800476a:	f7fe fc31 	bl	8002fd0 <HAL_DMA_Abort_IT>
      break;
 800476e:	e010      	b.n	8004792 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68da      	ldr	r2, [r3, #12]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800477e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004784:	4618      	mov	r0, r3
 8004786:	f7fe fc23 	bl	8002fd0 <HAL_DMA_Abort_IT>
      break;
 800478a:	e002      	b.n	8004792 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	73fb      	strb	r3, [r7, #15]
      break;
 8004790:	bf00      	nop
  }

  if (status == HAL_OK)
 8004792:	7bfb      	ldrb	r3, [r7, #15]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d161      	bne.n	800485c <HAL_TIM_PWM_Stop_DMA+0x190>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2200      	movs	r2, #0
 800479e:	6839      	ldr	r1, [r7, #0]
 80047a0:	4618      	mov	r0, r3
 80047a2:	f000 fedb 	bl	800555c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a2f      	ldr	r2, [pc, #188]	@ (8004868 <HAL_TIM_PWM_Stop_DMA+0x19c>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d004      	beq.n	80047ba <HAL_TIM_PWM_Stop_DMA+0xee>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a2d      	ldr	r2, [pc, #180]	@ (800486c <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d101      	bne.n	80047be <HAL_TIM_PWM_Stop_DMA+0xf2>
 80047ba:	2301      	movs	r3, #1
 80047bc:	e000      	b.n	80047c0 <HAL_TIM_PWM_Stop_DMA+0xf4>
 80047be:	2300      	movs	r3, #0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d017      	beq.n	80047f4 <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	6a1a      	ldr	r2, [r3, #32]
 80047ca:	f241 1311 	movw	r3, #4369	@ 0x1111
 80047ce:	4013      	ands	r3, r2
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d10f      	bne.n	80047f4 <HAL_TIM_PWM_Stop_DMA+0x128>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	6a1a      	ldr	r2, [r3, #32]
 80047da:	f240 4344 	movw	r3, #1092	@ 0x444
 80047de:	4013      	ands	r3, r2
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d107      	bne.n	80047f4 <HAL_TIM_PWM_Stop_DMA+0x128>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80047f2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	6a1a      	ldr	r2, [r3, #32]
 80047fa:	f241 1311 	movw	r3, #4369	@ 0x1111
 80047fe:	4013      	ands	r3, r2
 8004800:	2b00      	cmp	r3, #0
 8004802:	d10f      	bne.n	8004824 <HAL_TIM_PWM_Stop_DMA+0x158>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	6a1a      	ldr	r2, [r3, #32]
 800480a:	f240 4344 	movw	r3, #1092	@ 0x444
 800480e:	4013      	ands	r3, r2
 8004810:	2b00      	cmp	r3, #0
 8004812:	d107      	bne.n	8004824 <HAL_TIM_PWM_Stop_DMA+0x158>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f022 0201 	bic.w	r2, r2, #1
 8004822:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d104      	bne.n	8004834 <HAL_TIM_PWM_Stop_DMA+0x168>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2201      	movs	r2, #1
 800482e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004832:	e013      	b.n	800485c <HAL_TIM_PWM_Stop_DMA+0x190>
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	2b04      	cmp	r3, #4
 8004838:	d104      	bne.n	8004844 <HAL_TIM_PWM_Stop_DMA+0x178>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2201      	movs	r2, #1
 800483e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004842:	e00b      	b.n	800485c <HAL_TIM_PWM_Stop_DMA+0x190>
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	2b08      	cmp	r3, #8
 8004848:	d104      	bne.n	8004854 <HAL_TIM_PWM_Stop_DMA+0x188>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2201      	movs	r2, #1
 800484e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004852:	e003      	b.n	800485c <HAL_TIM_PWM_Stop_DMA+0x190>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 800485c:	7bfb      	ldrb	r3, [r7, #15]
}
 800485e:	4618      	mov	r0, r3
 8004860:	3710      	adds	r7, #16
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	40010000 	.word	0x40010000
 800486c:	40010400 	.word	0x40010400

08004870 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	f003 0302 	and.w	r3, r3, #2
 800488e:	2b00      	cmp	r3, #0
 8004890:	d020      	beq.n	80048d4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f003 0302 	and.w	r3, r3, #2
 8004898:	2b00      	cmp	r3, #0
 800489a:	d01b      	beq.n	80048d4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f06f 0202 	mvn.w	r2, #2
 80048a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2201      	movs	r2, #1
 80048aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	699b      	ldr	r3, [r3, #24]
 80048b2:	f003 0303 	and.w	r3, r3, #3
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d003      	beq.n	80048c2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 fa65 	bl	8004d8a <HAL_TIM_IC_CaptureCallback>
 80048c0:	e005      	b.n	80048ce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 fa57 	bl	8004d76 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f7fb ff11 	bl	80006f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	f003 0304 	and.w	r3, r3, #4
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d020      	beq.n	8004920 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f003 0304 	and.w	r3, r3, #4
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d01b      	beq.n	8004920 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f06f 0204 	mvn.w	r2, #4
 80048f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2202      	movs	r2, #2
 80048f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	699b      	ldr	r3, [r3, #24]
 80048fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004902:	2b00      	cmp	r3, #0
 8004904:	d003      	beq.n	800490e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 fa3f 	bl	8004d8a <HAL_TIM_IC_CaptureCallback>
 800490c:	e005      	b.n	800491a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 fa31 	bl	8004d76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f7fb feeb 	bl	80006f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	f003 0308 	and.w	r3, r3, #8
 8004926:	2b00      	cmp	r3, #0
 8004928:	d020      	beq.n	800496c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f003 0308 	and.w	r3, r3, #8
 8004930:	2b00      	cmp	r3, #0
 8004932:	d01b      	beq.n	800496c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f06f 0208 	mvn.w	r2, #8
 800493c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2204      	movs	r2, #4
 8004942:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	69db      	ldr	r3, [r3, #28]
 800494a:	f003 0303 	and.w	r3, r3, #3
 800494e:	2b00      	cmp	r3, #0
 8004950:	d003      	beq.n	800495a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 fa19 	bl	8004d8a <HAL_TIM_IC_CaptureCallback>
 8004958:	e005      	b.n	8004966 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 fa0b 	bl	8004d76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f7fb fec5 	bl	80006f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	f003 0310 	and.w	r3, r3, #16
 8004972:	2b00      	cmp	r3, #0
 8004974:	d020      	beq.n	80049b8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f003 0310 	and.w	r3, r3, #16
 800497c:	2b00      	cmp	r3, #0
 800497e:	d01b      	beq.n	80049b8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f06f 0210 	mvn.w	r2, #16
 8004988:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2208      	movs	r2, #8
 800498e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	69db      	ldr	r3, [r3, #28]
 8004996:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800499a:	2b00      	cmp	r3, #0
 800499c:	d003      	beq.n	80049a6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 f9f3 	bl	8004d8a <HAL_TIM_IC_CaptureCallback>
 80049a4:	e005      	b.n	80049b2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 f9e5 	bl	8004d76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f7fb fe9f 	bl	80006f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	f003 0301 	and.w	r3, r3, #1
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d00c      	beq.n	80049dc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f003 0301 	and.w	r3, r3, #1
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d007      	beq.n	80049dc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f06f 0201 	mvn.w	r2, #1
 80049d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 f9c3 	bl	8004d62 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00c      	beq.n	8004a00 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d007      	beq.n	8004a00 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80049f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 feac 	bl	8005758 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d00c      	beq.n	8004a24 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d007      	beq.n	8004a24 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004a1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 f9c7 	bl	8004db2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	f003 0320 	and.w	r3, r3, #32
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00c      	beq.n	8004a48 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f003 0320 	and.w	r3, r3, #32
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d007      	beq.n	8004a48 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f06f 0220 	mvn.w	r2, #32
 8004a40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f000 fe7e 	bl	8005744 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a48:	bf00      	nop
 8004a4a:	3710      	adds	r7, #16
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b086      	sub	sp, #24
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d101      	bne.n	8004a6e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a6a:	2302      	movs	r3, #2
 8004a6c:	e0ae      	b.n	8004bcc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2201      	movs	r2, #1
 8004a72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2b0c      	cmp	r3, #12
 8004a7a:	f200 809f 	bhi.w	8004bbc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004a7e:	a201      	add	r2, pc, #4	@ (adr r2, 8004a84 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a84:	08004ab9 	.word	0x08004ab9
 8004a88:	08004bbd 	.word	0x08004bbd
 8004a8c:	08004bbd 	.word	0x08004bbd
 8004a90:	08004bbd 	.word	0x08004bbd
 8004a94:	08004af9 	.word	0x08004af9
 8004a98:	08004bbd 	.word	0x08004bbd
 8004a9c:	08004bbd 	.word	0x08004bbd
 8004aa0:	08004bbd 	.word	0x08004bbd
 8004aa4:	08004b3b 	.word	0x08004b3b
 8004aa8:	08004bbd 	.word	0x08004bbd
 8004aac:	08004bbd 	.word	0x08004bbd
 8004ab0:	08004bbd 	.word	0x08004bbd
 8004ab4:	08004b7b 	.word	0x08004b7b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68b9      	ldr	r1, [r7, #8]
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f000 fb02 	bl	80050c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	699a      	ldr	r2, [r3, #24]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f042 0208 	orr.w	r2, r2, #8
 8004ad2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	699a      	ldr	r2, [r3, #24]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f022 0204 	bic.w	r2, r2, #4
 8004ae2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	6999      	ldr	r1, [r3, #24]
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	691a      	ldr	r2, [r3, #16]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	430a      	orrs	r2, r1
 8004af4:	619a      	str	r2, [r3, #24]
      break;
 8004af6:	e064      	b.n	8004bc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68b9      	ldr	r1, [r7, #8]
 8004afe:	4618      	mov	r0, r3
 8004b00:	f000 fb52 	bl	80051a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	699a      	ldr	r2, [r3, #24]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	699a      	ldr	r2, [r3, #24]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	6999      	ldr	r1, [r3, #24]
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	021a      	lsls	r2, r3, #8
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	430a      	orrs	r2, r1
 8004b36:	619a      	str	r2, [r3, #24]
      break;
 8004b38:	e043      	b.n	8004bc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68b9      	ldr	r1, [r7, #8]
 8004b40:	4618      	mov	r0, r3
 8004b42:	f000 fba7 	bl	8005294 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	69da      	ldr	r2, [r3, #28]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f042 0208 	orr.w	r2, r2, #8
 8004b54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	69da      	ldr	r2, [r3, #28]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f022 0204 	bic.w	r2, r2, #4
 8004b64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	69d9      	ldr	r1, [r3, #28]
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	691a      	ldr	r2, [r3, #16]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	430a      	orrs	r2, r1
 8004b76:	61da      	str	r2, [r3, #28]
      break;
 8004b78:	e023      	b.n	8004bc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68b9      	ldr	r1, [r7, #8]
 8004b80:	4618      	mov	r0, r3
 8004b82:	f000 fbfb 	bl	800537c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	69da      	ldr	r2, [r3, #28]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	69da      	ldr	r2, [r3, #28]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ba4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	69d9      	ldr	r1, [r3, #28]
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	691b      	ldr	r3, [r3, #16]
 8004bb0:	021a      	lsls	r2, r3, #8
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	61da      	str	r2, [r3, #28]
      break;
 8004bba:	e002      	b.n	8004bc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	75fb      	strb	r3, [r7, #23]
      break;
 8004bc0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004bca:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3718      	adds	r7, #24
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b084      	sub	sp, #16
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bde:	2300      	movs	r3, #0
 8004be0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d101      	bne.n	8004bf0 <HAL_TIM_ConfigClockSource+0x1c>
 8004bec:	2302      	movs	r3, #2
 8004bee:	e0b4      	b.n	8004d5a <HAL_TIM_ConfigClockSource+0x186>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2202      	movs	r2, #2
 8004bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004c0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68ba      	ldr	r2, [r7, #8]
 8004c1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c28:	d03e      	beq.n	8004ca8 <HAL_TIM_ConfigClockSource+0xd4>
 8004c2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c2e:	f200 8087 	bhi.w	8004d40 <HAL_TIM_ConfigClockSource+0x16c>
 8004c32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c36:	f000 8086 	beq.w	8004d46 <HAL_TIM_ConfigClockSource+0x172>
 8004c3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c3e:	d87f      	bhi.n	8004d40 <HAL_TIM_ConfigClockSource+0x16c>
 8004c40:	2b70      	cmp	r3, #112	@ 0x70
 8004c42:	d01a      	beq.n	8004c7a <HAL_TIM_ConfigClockSource+0xa6>
 8004c44:	2b70      	cmp	r3, #112	@ 0x70
 8004c46:	d87b      	bhi.n	8004d40 <HAL_TIM_ConfigClockSource+0x16c>
 8004c48:	2b60      	cmp	r3, #96	@ 0x60
 8004c4a:	d050      	beq.n	8004cee <HAL_TIM_ConfigClockSource+0x11a>
 8004c4c:	2b60      	cmp	r3, #96	@ 0x60
 8004c4e:	d877      	bhi.n	8004d40 <HAL_TIM_ConfigClockSource+0x16c>
 8004c50:	2b50      	cmp	r3, #80	@ 0x50
 8004c52:	d03c      	beq.n	8004cce <HAL_TIM_ConfigClockSource+0xfa>
 8004c54:	2b50      	cmp	r3, #80	@ 0x50
 8004c56:	d873      	bhi.n	8004d40 <HAL_TIM_ConfigClockSource+0x16c>
 8004c58:	2b40      	cmp	r3, #64	@ 0x40
 8004c5a:	d058      	beq.n	8004d0e <HAL_TIM_ConfigClockSource+0x13a>
 8004c5c:	2b40      	cmp	r3, #64	@ 0x40
 8004c5e:	d86f      	bhi.n	8004d40 <HAL_TIM_ConfigClockSource+0x16c>
 8004c60:	2b30      	cmp	r3, #48	@ 0x30
 8004c62:	d064      	beq.n	8004d2e <HAL_TIM_ConfigClockSource+0x15a>
 8004c64:	2b30      	cmp	r3, #48	@ 0x30
 8004c66:	d86b      	bhi.n	8004d40 <HAL_TIM_ConfigClockSource+0x16c>
 8004c68:	2b20      	cmp	r3, #32
 8004c6a:	d060      	beq.n	8004d2e <HAL_TIM_ConfigClockSource+0x15a>
 8004c6c:	2b20      	cmp	r3, #32
 8004c6e:	d867      	bhi.n	8004d40 <HAL_TIM_ConfigClockSource+0x16c>
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d05c      	beq.n	8004d2e <HAL_TIM_ConfigClockSource+0x15a>
 8004c74:	2b10      	cmp	r3, #16
 8004c76:	d05a      	beq.n	8004d2e <HAL_TIM_ConfigClockSource+0x15a>
 8004c78:	e062      	b.n	8004d40 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c8a:	f000 fc47 	bl	800551c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004c9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	68ba      	ldr	r2, [r7, #8]
 8004ca4:	609a      	str	r2, [r3, #8]
      break;
 8004ca6:	e04f      	b.n	8004d48 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004cb8:	f000 fc30 	bl	800551c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	689a      	ldr	r2, [r3, #8]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004cca:	609a      	str	r2, [r3, #8]
      break;
 8004ccc:	e03c      	b.n	8004d48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cda:	461a      	mov	r2, r3
 8004cdc:	f000 fba4 	bl	8005428 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2150      	movs	r1, #80	@ 0x50
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f000 fbfd 	bl	80054e6 <TIM_ITRx_SetConfig>
      break;
 8004cec:	e02c      	b.n	8004d48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	f000 fbc3 	bl	8005486 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2160      	movs	r1, #96	@ 0x60
 8004d06:	4618      	mov	r0, r3
 8004d08:	f000 fbed 	bl	80054e6 <TIM_ITRx_SetConfig>
      break;
 8004d0c:	e01c      	b.n	8004d48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	f000 fb84 	bl	8005428 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2140      	movs	r1, #64	@ 0x40
 8004d26:	4618      	mov	r0, r3
 8004d28:	f000 fbdd 	bl	80054e6 <TIM_ITRx_SetConfig>
      break;
 8004d2c:	e00c      	b.n	8004d48 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4619      	mov	r1, r3
 8004d38:	4610      	mov	r0, r2
 8004d3a:	f000 fbd4 	bl	80054e6 <TIM_ITRx_SetConfig>
      break;
 8004d3e:	e003      	b.n	8004d48 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	73fb      	strb	r3, [r7, #15]
      break;
 8004d44:	e000      	b.n	8004d48 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3710      	adds	r7, #16
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}

08004d62 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d62:	b480      	push	{r7}
 8004d64:	b083      	sub	sp, #12
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004d6a:	bf00      	nop
 8004d6c:	370c      	adds	r7, #12
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr

08004d76 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d76:	b480      	push	{r7}
 8004d78:	b083      	sub	sp, #12
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d7e:	bf00      	nop
 8004d80:	370c      	adds	r7, #12
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr

08004d8a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d8a:	b480      	push	{r7}
 8004d8c:	b083      	sub	sp, #12
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d92:	bf00      	nop
 8004d94:	370c      	adds	r7, #12
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr

08004d9e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004d9e:	b480      	push	{r7}
 8004da0:	b083      	sub	sp, #12
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004da6:	bf00      	nop
 8004da8:	370c      	adds	r7, #12
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr

08004db2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004db2:	b480      	push	{r7}
 8004db4:	b083      	sub	sp, #12
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004dba:	bf00      	nop
 8004dbc:	370c      	adds	r7, #12
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr

08004dc6 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004dc6:	b480      	push	{r7}
 8004dc8:	b083      	sub	sp, #12
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004dce:	bf00      	nop
 8004dd0:	370c      	adds	r7, #12
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr

08004dda <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004dda:	b580      	push	{r7, lr}
 8004ddc:	b084      	sub	sp, #16
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004de6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d107      	bne.n	8004e02 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2201      	movs	r2, #1
 8004df6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e00:	e02a      	b.n	8004e58 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d107      	bne.n	8004e1c <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2202      	movs	r2, #2
 8004e10:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2201      	movs	r2, #1
 8004e16:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e1a:	e01d      	b.n	8004e58 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d107      	bne.n	8004e36 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2204      	movs	r2, #4
 8004e2a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e34:	e010      	b.n	8004e58 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d107      	bne.n	8004e50 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2208      	movs	r2, #8
 8004e44:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004e4e:	e003      	b.n	8004e58 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004e58:	68f8      	ldr	r0, [r7, #12]
 8004e5a:	f7ff ffb4 	bl	8004dc6 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2200      	movs	r2, #0
 8004e62:	771a      	strb	r2, [r3, #28]
}
 8004e64:	bf00      	nop
 8004e66:	3710      	adds	r7, #16
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e78:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d10b      	bne.n	8004e9c <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2201      	movs	r2, #1
 8004e88:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	69db      	ldr	r3, [r3, #28]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d136      	bne.n	8004f00 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2201      	movs	r2, #1
 8004e96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e9a:	e031      	b.n	8004f00 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d10b      	bne.n	8004ebe <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2202      	movs	r2, #2
 8004eaa:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	69db      	ldr	r3, [r3, #28]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d125      	bne.n	8004f00 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ebc:	e020      	b.n	8004f00 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d10b      	bne.n	8004ee0 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2204      	movs	r2, #4
 8004ecc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	69db      	ldr	r3, [r3, #28]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d114      	bne.n	8004f00 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ede:	e00f      	b.n	8004f00 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d10a      	bne.n	8004f00 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2208      	movs	r2, #8
 8004eee:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	69db      	ldr	r3, [r3, #28]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d103      	bne.n	8004f00 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f00:	68f8      	ldr	r0, [r7, #12]
 8004f02:	f7fb fbf5 	bl	80006f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	771a      	strb	r2, [r3, #28]
}
 8004f0c:	bf00      	nop
 8004f0e:	3710      	adds	r7, #16
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f20:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d103      	bne.n	8004f34 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	771a      	strb	r2, [r3, #28]
 8004f32:	e019      	b.n	8004f68 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d103      	bne.n	8004f46 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2202      	movs	r2, #2
 8004f42:	771a      	strb	r2, [r3, #28]
 8004f44:	e010      	b.n	8004f68 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d103      	bne.n	8004f58 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2204      	movs	r2, #4
 8004f54:	771a      	strb	r2, [r3, #28]
 8004f56:	e007      	b.n	8004f68 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d102      	bne.n	8004f68 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2208      	movs	r2, #8
 8004f66:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004f68:	68f8      	ldr	r0, [r7, #12]
 8004f6a:	f7ff ff18 	bl	8004d9e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2200      	movs	r2, #0
 8004f72:	771a      	strb	r2, [r3, #28]
}
 8004f74:	bf00      	nop
 8004f76:	3710      	adds	r7, #16
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b085      	sub	sp, #20
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4a43      	ldr	r2, [pc, #268]	@ (800509c <TIM_Base_SetConfig+0x120>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d013      	beq.n	8004fbc <TIM_Base_SetConfig+0x40>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f9a:	d00f      	beq.n	8004fbc <TIM_Base_SetConfig+0x40>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4a40      	ldr	r2, [pc, #256]	@ (80050a0 <TIM_Base_SetConfig+0x124>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d00b      	beq.n	8004fbc <TIM_Base_SetConfig+0x40>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a3f      	ldr	r2, [pc, #252]	@ (80050a4 <TIM_Base_SetConfig+0x128>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d007      	beq.n	8004fbc <TIM_Base_SetConfig+0x40>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4a3e      	ldr	r2, [pc, #248]	@ (80050a8 <TIM_Base_SetConfig+0x12c>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d003      	beq.n	8004fbc <TIM_Base_SetConfig+0x40>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4a3d      	ldr	r2, [pc, #244]	@ (80050ac <TIM_Base_SetConfig+0x130>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d108      	bne.n	8004fce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a32      	ldr	r2, [pc, #200]	@ (800509c <TIM_Base_SetConfig+0x120>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d02b      	beq.n	800502e <TIM_Base_SetConfig+0xb2>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fdc:	d027      	beq.n	800502e <TIM_Base_SetConfig+0xb2>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a2f      	ldr	r2, [pc, #188]	@ (80050a0 <TIM_Base_SetConfig+0x124>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d023      	beq.n	800502e <TIM_Base_SetConfig+0xb2>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a2e      	ldr	r2, [pc, #184]	@ (80050a4 <TIM_Base_SetConfig+0x128>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d01f      	beq.n	800502e <TIM_Base_SetConfig+0xb2>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a2d      	ldr	r2, [pc, #180]	@ (80050a8 <TIM_Base_SetConfig+0x12c>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d01b      	beq.n	800502e <TIM_Base_SetConfig+0xb2>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a2c      	ldr	r2, [pc, #176]	@ (80050ac <TIM_Base_SetConfig+0x130>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d017      	beq.n	800502e <TIM_Base_SetConfig+0xb2>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a2b      	ldr	r2, [pc, #172]	@ (80050b0 <TIM_Base_SetConfig+0x134>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d013      	beq.n	800502e <TIM_Base_SetConfig+0xb2>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a2a      	ldr	r2, [pc, #168]	@ (80050b4 <TIM_Base_SetConfig+0x138>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d00f      	beq.n	800502e <TIM_Base_SetConfig+0xb2>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a29      	ldr	r2, [pc, #164]	@ (80050b8 <TIM_Base_SetConfig+0x13c>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d00b      	beq.n	800502e <TIM_Base_SetConfig+0xb2>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a28      	ldr	r2, [pc, #160]	@ (80050bc <TIM_Base_SetConfig+0x140>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d007      	beq.n	800502e <TIM_Base_SetConfig+0xb2>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a27      	ldr	r2, [pc, #156]	@ (80050c0 <TIM_Base_SetConfig+0x144>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d003      	beq.n	800502e <TIM_Base_SetConfig+0xb2>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a26      	ldr	r2, [pc, #152]	@ (80050c4 <TIM_Base_SetConfig+0x148>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d108      	bne.n	8005040 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005034:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	4313      	orrs	r3, r2
 800503e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	695b      	ldr	r3, [r3, #20]
 800504a:	4313      	orrs	r3, r2
 800504c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	689a      	ldr	r2, [r3, #8]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a0e      	ldr	r2, [pc, #56]	@ (800509c <TIM_Base_SetConfig+0x120>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d003      	beq.n	800506e <TIM_Base_SetConfig+0xf2>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a10      	ldr	r2, [pc, #64]	@ (80050ac <TIM_Base_SetConfig+0x130>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d103      	bne.n	8005076 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	691a      	ldr	r2, [r3, #16]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f043 0204 	orr.w	r2, r3, #4
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2201      	movs	r2, #1
 8005086:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	601a      	str	r2, [r3, #0]
}
 800508e:	bf00      	nop
 8005090:	3714      	adds	r7, #20
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	40010000 	.word	0x40010000
 80050a0:	40000400 	.word	0x40000400
 80050a4:	40000800 	.word	0x40000800
 80050a8:	40000c00 	.word	0x40000c00
 80050ac:	40010400 	.word	0x40010400
 80050b0:	40014000 	.word	0x40014000
 80050b4:	40014400 	.word	0x40014400
 80050b8:	40014800 	.word	0x40014800
 80050bc:	40001800 	.word	0x40001800
 80050c0:	40001c00 	.word	0x40001c00
 80050c4:	40002000 	.word	0x40002000

080050c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b087      	sub	sp, #28
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a1b      	ldr	r3, [r3, #32]
 80050d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6a1b      	ldr	r3, [r3, #32]
 80050dc:	f023 0201 	bic.w	r2, r3, #1
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	699b      	ldr	r3, [r3, #24]
 80050ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f023 0303 	bic.w	r3, r3, #3
 80050fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68fa      	ldr	r2, [r7, #12]
 8005106:	4313      	orrs	r3, r2
 8005108:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	f023 0302 	bic.w	r3, r3, #2
 8005110:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	697a      	ldr	r2, [r7, #20]
 8005118:	4313      	orrs	r3, r2
 800511a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a20      	ldr	r2, [pc, #128]	@ (80051a0 <TIM_OC1_SetConfig+0xd8>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d003      	beq.n	800512c <TIM_OC1_SetConfig+0x64>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a1f      	ldr	r2, [pc, #124]	@ (80051a4 <TIM_OC1_SetConfig+0xdc>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d10c      	bne.n	8005146 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	f023 0308 	bic.w	r3, r3, #8
 8005132:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	697a      	ldr	r2, [r7, #20]
 800513a:	4313      	orrs	r3, r2
 800513c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	f023 0304 	bic.w	r3, r3, #4
 8005144:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a15      	ldr	r2, [pc, #84]	@ (80051a0 <TIM_OC1_SetConfig+0xd8>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d003      	beq.n	8005156 <TIM_OC1_SetConfig+0x8e>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a14      	ldr	r2, [pc, #80]	@ (80051a4 <TIM_OC1_SetConfig+0xdc>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d111      	bne.n	800517a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800515c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005164:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	695b      	ldr	r3, [r3, #20]
 800516a:	693a      	ldr	r2, [r7, #16]
 800516c:	4313      	orrs	r3, r2
 800516e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	699b      	ldr	r3, [r3, #24]
 8005174:	693a      	ldr	r2, [r7, #16]
 8005176:	4313      	orrs	r3, r2
 8005178:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	693a      	ldr	r2, [r7, #16]
 800517e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	685a      	ldr	r2, [r3, #4]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	697a      	ldr	r2, [r7, #20]
 8005192:	621a      	str	r2, [r3, #32]
}
 8005194:	bf00      	nop
 8005196:	371c      	adds	r7, #28
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr
 80051a0:	40010000 	.word	0x40010000
 80051a4:	40010400 	.word	0x40010400

080051a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b087      	sub	sp, #28
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a1b      	ldr	r3, [r3, #32]
 80051b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6a1b      	ldr	r3, [r3, #32]
 80051bc:	f023 0210 	bic.w	r2, r3, #16
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	021b      	lsls	r3, r3, #8
 80051e6:	68fa      	ldr	r2, [r7, #12]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	f023 0320 	bic.w	r3, r3, #32
 80051f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	011b      	lsls	r3, r3, #4
 80051fa:	697a      	ldr	r2, [r7, #20]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a22      	ldr	r2, [pc, #136]	@ (800528c <TIM_OC2_SetConfig+0xe4>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d003      	beq.n	8005210 <TIM_OC2_SetConfig+0x68>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a21      	ldr	r2, [pc, #132]	@ (8005290 <TIM_OC2_SetConfig+0xe8>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d10d      	bne.n	800522c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005216:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	011b      	lsls	r3, r3, #4
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	4313      	orrs	r3, r2
 8005222:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800522a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a17      	ldr	r2, [pc, #92]	@ (800528c <TIM_OC2_SetConfig+0xe4>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d003      	beq.n	800523c <TIM_OC2_SetConfig+0x94>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a16      	ldr	r2, [pc, #88]	@ (8005290 <TIM_OC2_SetConfig+0xe8>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d113      	bne.n	8005264 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005242:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800524a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	695b      	ldr	r3, [r3, #20]
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	693a      	ldr	r2, [r7, #16]
 8005254:	4313      	orrs	r3, r2
 8005256:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	699b      	ldr	r3, [r3, #24]
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	693a      	ldr	r2, [r7, #16]
 8005260:	4313      	orrs	r3, r2
 8005262:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	693a      	ldr	r2, [r7, #16]
 8005268:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	68fa      	ldr	r2, [r7, #12]
 800526e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	685a      	ldr	r2, [r3, #4]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	697a      	ldr	r2, [r7, #20]
 800527c:	621a      	str	r2, [r3, #32]
}
 800527e:	bf00      	nop
 8005280:	371c      	adds	r7, #28
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr
 800528a:	bf00      	nop
 800528c:	40010000 	.word	0x40010000
 8005290:	40010400 	.word	0x40010400

08005294 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005294:	b480      	push	{r7}
 8005296:	b087      	sub	sp, #28
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a1b      	ldr	r3, [r3, #32]
 80052a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a1b      	ldr	r3, [r3, #32]
 80052a8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	69db      	ldr	r3, [r3, #28]
 80052ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f023 0303 	bic.w	r3, r3, #3
 80052ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80052dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	021b      	lsls	r3, r3, #8
 80052e4:	697a      	ldr	r2, [r7, #20]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4a21      	ldr	r2, [pc, #132]	@ (8005374 <TIM_OC3_SetConfig+0xe0>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d003      	beq.n	80052fa <TIM_OC3_SetConfig+0x66>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a20      	ldr	r2, [pc, #128]	@ (8005378 <TIM_OC3_SetConfig+0xe4>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d10d      	bne.n	8005316 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005300:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	021b      	lsls	r3, r3, #8
 8005308:	697a      	ldr	r2, [r7, #20]
 800530a:	4313      	orrs	r3, r2
 800530c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005314:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a16      	ldr	r2, [pc, #88]	@ (8005374 <TIM_OC3_SetConfig+0xe0>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d003      	beq.n	8005326 <TIM_OC3_SetConfig+0x92>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a15      	ldr	r2, [pc, #84]	@ (8005378 <TIM_OC3_SetConfig+0xe4>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d113      	bne.n	800534e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800532c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005334:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	695b      	ldr	r3, [r3, #20]
 800533a:	011b      	lsls	r3, r3, #4
 800533c:	693a      	ldr	r2, [r7, #16]
 800533e:	4313      	orrs	r3, r2
 8005340:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	699b      	ldr	r3, [r3, #24]
 8005346:	011b      	lsls	r3, r3, #4
 8005348:	693a      	ldr	r2, [r7, #16]
 800534a:	4313      	orrs	r3, r2
 800534c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	693a      	ldr	r2, [r7, #16]
 8005352:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	685a      	ldr	r2, [r3, #4]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	697a      	ldr	r2, [r7, #20]
 8005366:	621a      	str	r2, [r3, #32]
}
 8005368:	bf00      	nop
 800536a:	371c      	adds	r7, #28
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr
 8005374:	40010000 	.word	0x40010000
 8005378:	40010400 	.word	0x40010400

0800537c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800537c:	b480      	push	{r7}
 800537e:	b087      	sub	sp, #28
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a1b      	ldr	r3, [r3, #32]
 800538a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a1b      	ldr	r3, [r3, #32]
 8005390:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	69db      	ldr	r3, [r3, #28]
 80053a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	021b      	lsls	r3, r3, #8
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	4313      	orrs	r3, r2
 80053be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80053c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	031b      	lsls	r3, r3, #12
 80053ce:	693a      	ldr	r2, [r7, #16]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a12      	ldr	r2, [pc, #72]	@ (8005420 <TIM_OC4_SetConfig+0xa4>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d003      	beq.n	80053e4 <TIM_OC4_SetConfig+0x68>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a11      	ldr	r2, [pc, #68]	@ (8005424 <TIM_OC4_SetConfig+0xa8>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d109      	bne.n	80053f8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80053ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	695b      	ldr	r3, [r3, #20]
 80053f0:	019b      	lsls	r3, r3, #6
 80053f2:	697a      	ldr	r2, [r7, #20]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	697a      	ldr	r2, [r7, #20]
 80053fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	68fa      	ldr	r2, [r7, #12]
 8005402:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	685a      	ldr	r2, [r3, #4]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	693a      	ldr	r2, [r7, #16]
 8005410:	621a      	str	r2, [r3, #32]
}
 8005412:	bf00      	nop
 8005414:	371c      	adds	r7, #28
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr
 800541e:	bf00      	nop
 8005420:	40010000 	.word	0x40010000
 8005424:	40010400 	.word	0x40010400

08005428 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005428:	b480      	push	{r7}
 800542a:	b087      	sub	sp, #28
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6a1b      	ldr	r3, [r3, #32]
 8005438:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6a1b      	ldr	r3, [r3, #32]
 800543e:	f023 0201 	bic.w	r2, r3, #1
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	699b      	ldr	r3, [r3, #24]
 800544a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005452:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	011b      	lsls	r3, r3, #4
 8005458:	693a      	ldr	r2, [r7, #16]
 800545a:	4313      	orrs	r3, r2
 800545c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	f023 030a 	bic.w	r3, r3, #10
 8005464:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005466:	697a      	ldr	r2, [r7, #20]
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	4313      	orrs	r3, r2
 800546c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	693a      	ldr	r2, [r7, #16]
 8005472:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	697a      	ldr	r2, [r7, #20]
 8005478:	621a      	str	r2, [r3, #32]
}
 800547a:	bf00      	nop
 800547c:	371c      	adds	r7, #28
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr

08005486 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005486:	b480      	push	{r7}
 8005488:	b087      	sub	sp, #28
 800548a:	af00      	add	r7, sp, #0
 800548c:	60f8      	str	r0, [r7, #12]
 800548e:	60b9      	str	r1, [r7, #8]
 8005490:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6a1b      	ldr	r3, [r3, #32]
 8005496:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6a1b      	ldr	r3, [r3, #32]
 800549c:	f023 0210 	bic.w	r2, r3, #16
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	699b      	ldr	r3, [r3, #24]
 80054a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80054b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	031b      	lsls	r3, r3, #12
 80054b6:	693a      	ldr	r2, [r7, #16]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80054c2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	011b      	lsls	r3, r3, #4
 80054c8:	697a      	ldr	r2, [r7, #20]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	693a      	ldr	r2, [r7, #16]
 80054d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	697a      	ldr	r2, [r7, #20]
 80054d8:	621a      	str	r2, [r3, #32]
}
 80054da:	bf00      	nop
 80054dc:	371c      	adds	r7, #28
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr

080054e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054e6:	b480      	push	{r7}
 80054e8:	b085      	sub	sp, #20
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
 80054ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054fe:	683a      	ldr	r2, [r7, #0]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	4313      	orrs	r3, r2
 8005504:	f043 0307 	orr.w	r3, r3, #7
 8005508:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	609a      	str	r2, [r3, #8]
}
 8005510:	bf00      	nop
 8005512:	3714      	adds	r7, #20
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800551c:	b480      	push	{r7}
 800551e:	b087      	sub	sp, #28
 8005520:	af00      	add	r7, sp, #0
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	607a      	str	r2, [r7, #4]
 8005528:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005536:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	021a      	lsls	r2, r3, #8
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	431a      	orrs	r2, r3
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	4313      	orrs	r3, r2
 8005544:	697a      	ldr	r2, [r7, #20]
 8005546:	4313      	orrs	r3, r2
 8005548:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	697a      	ldr	r2, [r7, #20]
 800554e:	609a      	str	r2, [r3, #8]
}
 8005550:	bf00      	nop
 8005552:	371c      	adds	r7, #28
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800555c:	b480      	push	{r7}
 800555e:	b087      	sub	sp, #28
 8005560:	af00      	add	r7, sp, #0
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	60b9      	str	r1, [r7, #8]
 8005566:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	f003 031f 	and.w	r3, r3, #31
 800556e:	2201      	movs	r2, #1
 8005570:	fa02 f303 	lsl.w	r3, r2, r3
 8005574:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	6a1a      	ldr	r2, [r3, #32]
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	43db      	mvns	r3, r3
 800557e:	401a      	ands	r2, r3
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6a1a      	ldr	r2, [r3, #32]
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	f003 031f 	and.w	r3, r3, #31
 800558e:	6879      	ldr	r1, [r7, #4]
 8005590:	fa01 f303 	lsl.w	r3, r1, r3
 8005594:	431a      	orrs	r2, r3
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	621a      	str	r2, [r3, #32]
}
 800559a:	bf00      	nop
 800559c:	371c      	adds	r7, #28
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr
	...

080055a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d101      	bne.n	80055c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055bc:	2302      	movs	r3, #2
 80055be:	e05a      	b.n	8005676 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2202      	movs	r2, #2
 80055cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a21      	ldr	r2, [pc, #132]	@ (8005684 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d022      	beq.n	800564a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800560c:	d01d      	beq.n	800564a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a1d      	ldr	r2, [pc, #116]	@ (8005688 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d018      	beq.n	800564a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a1b      	ldr	r2, [pc, #108]	@ (800568c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d013      	beq.n	800564a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a1a      	ldr	r2, [pc, #104]	@ (8005690 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d00e      	beq.n	800564a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a18      	ldr	r2, [pc, #96]	@ (8005694 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d009      	beq.n	800564a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a17      	ldr	r2, [pc, #92]	@ (8005698 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d004      	beq.n	800564a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a15      	ldr	r2, [pc, #84]	@ (800569c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d10c      	bne.n	8005664 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005650:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	68ba      	ldr	r2, [r7, #8]
 8005658:	4313      	orrs	r3, r2
 800565a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	68ba      	ldr	r2, [r7, #8]
 8005662:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005674:	2300      	movs	r3, #0
}
 8005676:	4618      	mov	r0, r3
 8005678:	3714      	adds	r7, #20
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr
 8005682:	bf00      	nop
 8005684:	40010000 	.word	0x40010000
 8005688:	40000400 	.word	0x40000400
 800568c:	40000800 	.word	0x40000800
 8005690:	40000c00 	.word	0x40000c00
 8005694:	40010400 	.word	0x40010400
 8005698:	40014000 	.word	0x40014000
 800569c:	40001800 	.word	0x40001800

080056a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b085      	sub	sp, #20
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80056aa:	2300      	movs	r3, #0
 80056ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d101      	bne.n	80056bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80056b8:	2302      	movs	r3, #2
 80056ba:	e03d      	b.n	8005738 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	4313      	orrs	r3, r2
 80056de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4313      	orrs	r3, r2
 80056fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	4313      	orrs	r3, r2
 8005708:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	695b      	ldr	r3, [r3, #20]
 8005714:	4313      	orrs	r3, r2
 8005716:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	69db      	ldr	r3, [r3, #28]
 8005722:	4313      	orrs	r3, r2
 8005724:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005736:	2300      	movs	r3, #0
}
 8005738:	4618      	mov	r0, r3
 800573a:	3714      	adds	r7, #20
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800574c:	bf00      	nop
 800574e:	370c      	adds	r7, #12
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr

08005758 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005760:	bf00      	nop
 8005762:	370c      	adds	r7, #12
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <arm_rfft_fast_init_f32>:
 800576c:	084b      	lsrs	r3, r1, #1
 800576e:	2b80      	cmp	r3, #128	@ 0x80
 8005770:	b410      	push	{r4}
 8005772:	8201      	strh	r1, [r0, #16]
 8005774:	8003      	strh	r3, [r0, #0]
 8005776:	d047      	beq.n	8005808 <arm_rfft_fast_init_f32+0x9c>
 8005778:	d917      	bls.n	80057aa <arm_rfft_fast_init_f32+0x3e>
 800577a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800577e:	d03d      	beq.n	80057fc <arm_rfft_fast_init_f32+0x90>
 8005780:	d929      	bls.n	80057d6 <arm_rfft_fast_init_f32+0x6a>
 8005782:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005786:	d020      	beq.n	80057ca <arm_rfft_fast_init_f32+0x5e>
 8005788:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800578c:	d113      	bne.n	80057b6 <arm_rfft_fast_init_f32+0x4a>
 800578e:	4921      	ldr	r1, [pc, #132]	@ (8005814 <arm_rfft_fast_init_f32+0xa8>)
 8005790:	4a21      	ldr	r2, [pc, #132]	@ (8005818 <arm_rfft_fast_init_f32+0xac>)
 8005792:	4b22      	ldr	r3, [pc, #136]	@ (800581c <arm_rfft_fast_init_f32+0xb0>)
 8005794:	f44f 646e 	mov.w	r4, #3808	@ 0xee0
 8005798:	8184      	strh	r4, [r0, #12]
 800579a:	6081      	str	r1, [r0, #8]
 800579c:	6042      	str	r2, [r0, #4]
 800579e:	6143      	str	r3, [r0, #20]
 80057a0:	2000      	movs	r0, #0
 80057a2:	b240      	sxtb	r0, r0
 80057a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80057a8:	4770      	bx	lr
 80057aa:	2b20      	cmp	r3, #32
 80057ac:	d01c      	beq.n	80057e8 <arm_rfft_fast_init_f32+0x7c>
 80057ae:	2b40      	cmp	r3, #64	@ 0x40
 80057b0:	d006      	beq.n	80057c0 <arm_rfft_fast_init_f32+0x54>
 80057b2:	2b10      	cmp	r3, #16
 80057b4:	d01d      	beq.n	80057f2 <arm_rfft_fast_init_f32+0x86>
 80057b6:	20ff      	movs	r0, #255	@ 0xff
 80057b8:	b240      	sxtb	r0, r0
 80057ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80057be:	4770      	bx	lr
 80057c0:	2438      	movs	r4, #56	@ 0x38
 80057c2:	4917      	ldr	r1, [pc, #92]	@ (8005820 <arm_rfft_fast_init_f32+0xb4>)
 80057c4:	4a17      	ldr	r2, [pc, #92]	@ (8005824 <arm_rfft_fast_init_f32+0xb8>)
 80057c6:	4b18      	ldr	r3, [pc, #96]	@ (8005828 <arm_rfft_fast_init_f32+0xbc>)
 80057c8:	e7e6      	b.n	8005798 <arm_rfft_fast_init_f32+0x2c>
 80057ca:	f44f 64e1 	mov.w	r4, #1800	@ 0x708
 80057ce:	4917      	ldr	r1, [pc, #92]	@ (800582c <arm_rfft_fast_init_f32+0xc0>)
 80057d0:	4a17      	ldr	r2, [pc, #92]	@ (8005830 <arm_rfft_fast_init_f32+0xc4>)
 80057d2:	4b18      	ldr	r3, [pc, #96]	@ (8005834 <arm_rfft_fast_init_f32+0xc8>)
 80057d4:	e7e0      	b.n	8005798 <arm_rfft_fast_init_f32+0x2c>
 80057d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057da:	d1ec      	bne.n	80057b6 <arm_rfft_fast_init_f32+0x4a>
 80057dc:	f44f 74dc 	mov.w	r4, #440	@ 0x1b8
 80057e0:	4915      	ldr	r1, [pc, #84]	@ (8005838 <arm_rfft_fast_init_f32+0xcc>)
 80057e2:	4a16      	ldr	r2, [pc, #88]	@ (800583c <arm_rfft_fast_init_f32+0xd0>)
 80057e4:	4b16      	ldr	r3, [pc, #88]	@ (8005840 <arm_rfft_fast_init_f32+0xd4>)
 80057e6:	e7d7      	b.n	8005798 <arm_rfft_fast_init_f32+0x2c>
 80057e8:	2430      	movs	r4, #48	@ 0x30
 80057ea:	4916      	ldr	r1, [pc, #88]	@ (8005844 <arm_rfft_fast_init_f32+0xd8>)
 80057ec:	4a16      	ldr	r2, [pc, #88]	@ (8005848 <arm_rfft_fast_init_f32+0xdc>)
 80057ee:	4b17      	ldr	r3, [pc, #92]	@ (800584c <arm_rfft_fast_init_f32+0xe0>)
 80057f0:	e7d2      	b.n	8005798 <arm_rfft_fast_init_f32+0x2c>
 80057f2:	2414      	movs	r4, #20
 80057f4:	4916      	ldr	r1, [pc, #88]	@ (8005850 <arm_rfft_fast_init_f32+0xe4>)
 80057f6:	4a17      	ldr	r2, [pc, #92]	@ (8005854 <arm_rfft_fast_init_f32+0xe8>)
 80057f8:	4b17      	ldr	r3, [pc, #92]	@ (8005858 <arm_rfft_fast_init_f32+0xec>)
 80057fa:	e7cd      	b.n	8005798 <arm_rfft_fast_init_f32+0x2c>
 80057fc:	f44f 74e0 	mov.w	r4, #448	@ 0x1c0
 8005800:	4916      	ldr	r1, [pc, #88]	@ (800585c <arm_rfft_fast_init_f32+0xf0>)
 8005802:	4a17      	ldr	r2, [pc, #92]	@ (8005860 <arm_rfft_fast_init_f32+0xf4>)
 8005804:	4b17      	ldr	r3, [pc, #92]	@ (8005864 <arm_rfft_fast_init_f32+0xf8>)
 8005806:	e7c7      	b.n	8005798 <arm_rfft_fast_init_f32+0x2c>
 8005808:	24d0      	movs	r4, #208	@ 0xd0
 800580a:	4917      	ldr	r1, [pc, #92]	@ (8005868 <arm_rfft_fast_init_f32+0xfc>)
 800580c:	4a17      	ldr	r2, [pc, #92]	@ (800586c <arm_rfft_fast_init_f32+0x100>)
 800580e:	4b18      	ldr	r3, [pc, #96]	@ (8005870 <arm_rfft_fast_init_f32+0x104>)
 8005810:	e7c2      	b.n	8005798 <arm_rfft_fast_init_f32+0x2c>
 8005812:	bf00      	nop
 8005814:	080166e8 	.word	0x080166e8
 8005818:	080078e0 	.word	0x080078e0
 800581c:	0800da50 	.word	0x0800da50
 8005820:	0800b9e0 	.word	0x0800b9e0
 8005824:	080184a8 	.word	0x080184a8
 8005828:	0801a998 	.word	0x0801a998
 800582c:	080143d0 	.word	0x080143d0
 8005830:	080122d0 	.word	0x080122d0
 8005834:	0800ba50 	.word	0x0800ba50
 8005838:	0801a628 	.word	0x0801a628
 800583c:	08011a50 	.word	0x08011a50
 8005840:	080186a8 	.word	0x080186a8
 8005844:	08015288 	.word	0x08015288
 8005848:	080142d0 	.word	0x080142d0
 800584c:	0800b8e0 	.word	0x0800b8e0
 8005850:	080151e0 	.word	0x080151e0
 8005854:	08012250 	.word	0x08012250
 8005858:	08015208 	.word	0x08015208
 800585c:	08018ea8 	.word	0x08018ea8
 8005860:	080156e8 	.word	0x080156e8
 8005864:	08019228 	.word	0x08019228
 8005868:	0801ab98 	.word	0x0801ab98
 800586c:	080152e8 	.word	0x080152e8
 8005870:	0801a228 	.word	0x0801a228

08005874 <arm_rfft_fast_f32>:
 8005874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005878:	8a06      	ldrh	r6, [r0, #16]
 800587a:	0876      	lsrs	r6, r6, #1
 800587c:	4607      	mov	r7, r0
 800587e:	4615      	mov	r5, r2
 8005880:	8006      	strh	r6, [r0, #0]
 8005882:	460c      	mov	r4, r1
 8005884:	2b00      	cmp	r3, #0
 8005886:	d15c      	bne.n	8005942 <arm_rfft_fast_f32+0xce>
 8005888:	461a      	mov	r2, r3
 800588a:	2301      	movs	r3, #1
 800588c:	f000 fbe6 	bl	800605c <arm_cfft_f32>
 8005890:	edd4 7a00 	vldr	s15, [r4]
 8005894:	ed94 7a01 	vldr	s14, [r4, #4]
 8005898:	883e      	ldrh	r6, [r7, #0]
 800589a:	6978      	ldr	r0, [r7, #20]
 800589c:	ee37 7a07 	vadd.f32	s14, s14, s14
 80058a0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80058a4:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 80058a8:	ee77 6a87 	vadd.f32	s13, s15, s14
 80058ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80058b0:	3e01      	subs	r6, #1
 80058b2:	ee26 7aa3 	vmul.f32	s14, s13, s7
 80058b6:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80058ba:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 80058be:	ed85 7a00 	vstr	s14, [r5]
 80058c2:	edc5 7a01 	vstr	s15, [r5, #4]
 80058c6:	3010      	adds	r0, #16
 80058c8:	f105 0210 	add.w	r2, r5, #16
 80058cc:	3b08      	subs	r3, #8
 80058ce:	f104 0110 	add.w	r1, r4, #16
 80058d2:	ed51 4a02 	vldr	s9, [r1, #-8]
 80058d6:	ed93 5a02 	vldr	s10, [r3, #8]
 80058da:	ed11 7a01 	vldr	s14, [r1, #-4]
 80058de:	ed10 6a02 	vldr	s12, [r0, #-8]
 80058e2:	edd3 5a03 	vldr	s11, [r3, #12]
 80058e6:	ed50 6a01 	vldr	s13, [r0, #-4]
 80058ea:	ee75 7a64 	vsub.f32	s15, s10, s9
 80058ee:	ee35 4a87 	vadd.f32	s8, s11, s14
 80058f2:	ee35 5a24 	vadd.f32	s10, s10, s9
 80058f6:	ee77 5a65 	vsub.f32	s11, s14, s11
 80058fa:	ee66 4a27 	vmul.f32	s9, s12, s15
 80058fe:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8005902:	ee34 5a85 	vadd.f32	s10, s9, s10
 8005906:	ee26 6a04 	vmul.f32	s12, s12, s8
 800590a:	ee66 6a84 	vmul.f32	s13, s13, s8
 800590e:	ee77 7a25 	vadd.f32	s15, s14, s11
 8005912:	ee76 6a85 	vadd.f32	s13, s13, s10
 8005916:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800591a:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800591e:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8005922:	3e01      	subs	r6, #1
 8005924:	ed42 6a02 	vstr	s13, [r2, #-8]
 8005928:	ed42 7a01 	vstr	s15, [r2, #-4]
 800592c:	f1a3 0308 	sub.w	r3, r3, #8
 8005930:	f101 0108 	add.w	r1, r1, #8
 8005934:	f100 0008 	add.w	r0, r0, #8
 8005938:	f102 0208 	add.w	r2, r2, #8
 800593c:	d1c9      	bne.n	80058d2 <arm_rfft_fast_f32+0x5e>
 800593e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005942:	edd1 7a00 	vldr	s15, [r1]
 8005946:	edd1 6a01 	vldr	s13, [r1, #4]
 800594a:	6941      	ldr	r1, [r0, #20]
 800594c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005950:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005954:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 8005958:	ee27 7a23 	vmul.f32	s14, s14, s7
 800595c:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8005960:	3e01      	subs	r6, #1
 8005962:	ed82 7a00 	vstr	s14, [r2]
 8005966:	edc2 7a01 	vstr	s15, [r2, #4]
 800596a:	00f0      	lsls	r0, r6, #3
 800596c:	b3ee      	cbz	r6, 80059ea <arm_rfft_fast_f32+0x176>
 800596e:	3808      	subs	r0, #8
 8005970:	f101 0e10 	add.w	lr, r1, #16
 8005974:	4420      	add	r0, r4
 8005976:	f104 0110 	add.w	r1, r4, #16
 800597a:	f102 0c10 	add.w	ip, r2, #16
 800597e:	ed90 7a02 	vldr	s14, [r0, #8]
 8005982:	ed51 6a02 	vldr	s13, [r1, #-8]
 8005986:	ed1e 6a02 	vldr	s12, [lr, #-8]
 800598a:	ed90 4a03 	vldr	s8, [r0, #12]
 800598e:	ed11 5a01 	vldr	s10, [r1, #-4]
 8005992:	ed5e 5a01 	vldr	s11, [lr, #-4]
 8005996:	ee76 7ac7 	vsub.f32	s15, s13, s14
 800599a:	ee74 4a05 	vadd.f32	s9, s8, s10
 800599e:	ee26 3a27 	vmul.f32	s6, s12, s15
 80059a2:	ee77 6a26 	vadd.f32	s13, s14, s13
 80059a6:	ee35 5a44 	vsub.f32	s10, s10, s8
 80059aa:	ee25 7aa7 	vmul.f32	s14, s11, s15
 80059ae:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80059b2:	ee77 7a05 	vadd.f32	s15, s14, s10
 80059b6:	ee26 6a24 	vmul.f32	s12, s12, s9
 80059ba:	ee65 5aa4 	vmul.f32	s11, s11, s9
 80059be:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80059c2:	ee36 7ae5 	vsub.f32	s14, s13, s11
 80059c6:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80059ca:	ee27 7a23 	vmul.f32	s14, s14, s7
 80059ce:	3e01      	subs	r6, #1
 80059d0:	ed0c 7a02 	vstr	s14, [ip, #-8]
 80059d4:	ed4c 7a01 	vstr	s15, [ip, #-4]
 80059d8:	f1a0 0008 	sub.w	r0, r0, #8
 80059dc:	f101 0108 	add.w	r1, r1, #8
 80059e0:	f10e 0e08 	add.w	lr, lr, #8
 80059e4:	f10c 0c08 	add.w	ip, ip, #8
 80059e8:	d1c9      	bne.n	800597e <arm_rfft_fast_f32+0x10a>
 80059ea:	4638      	mov	r0, r7
 80059ec:	4629      	mov	r1, r5
 80059ee:	461a      	mov	r2, r3
 80059f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80059f4:	2301      	movs	r3, #1
 80059f6:	f000 bb31 	b.w	800605c <arm_cfft_f32>
 80059fa:	bf00      	nop

080059fc <arm_cfft_radix8by2_f32>:
 80059fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a00:	ed2d 8b08 	vpush	{d8-d11}
 8005a04:	f8b0 e000 	ldrh.w	lr, [r0]
 8005a08:	6842      	ldr	r2, [r0, #4]
 8005a0a:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8005a0e:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 8005a12:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8005a16:	4607      	mov	r7, r0
 8005a18:	ea4f 038c 	mov.w	r3, ip, lsl #2
 8005a1c:	f000 80af 	beq.w	8005b7e <arm_cfft_radix8by2_f32+0x182>
 8005a20:	3310      	adds	r3, #16
 8005a22:	18ce      	adds	r6, r1, r3
 8005a24:	3210      	adds	r2, #16
 8005a26:	4443      	add	r3, r8
 8005a28:	f101 0510 	add.w	r5, r1, #16
 8005a2c:	f108 0410 	add.w	r4, r8, #16
 8005a30:	ed54 1a04 	vldr	s3, [r4, #-16]
 8005a34:	ed13 4a04 	vldr	s8, [r3, #-16]
 8005a38:	ed53 3a03 	vldr	s7, [r3, #-12]
 8005a3c:	ed53 5a02 	vldr	s11, [r3, #-8]
 8005a40:	ed13 5a01 	vldr	s10, [r3, #-4]
 8005a44:	ed54 6a03 	vldr	s13, [r4, #-12]
 8005a48:	ed14 0a02 	vldr	s0, [r4, #-8]
 8005a4c:	ed16 2a04 	vldr	s4, [r6, #-16]
 8005a50:	ed56 2a03 	vldr	s5, [r6, #-12]
 8005a54:	ed15 6a03 	vldr	s12, [r5, #-12]
 8005a58:	ed15 7a01 	vldr	s14, [r5, #-4]
 8005a5c:	ed15 3a04 	vldr	s6, [r5, #-16]
 8005a60:	ed54 7a01 	vldr	s15, [r4, #-4]
 8005a64:	ed56 0a02 	vldr	s1, [r6, #-8]
 8005a68:	ed16 1a01 	vldr	s2, [r6, #-4]
 8005a6c:	ed55 4a02 	vldr	s9, [r5, #-8]
 8005a70:	ee73 ba21 	vadd.f32	s23, s6, s3
 8005a74:	ee36 ba26 	vadd.f32	s22, s12, s13
 8005a78:	ee37 aa27 	vadd.f32	s20, s14, s15
 8005a7c:	ee72 9a04 	vadd.f32	s19, s4, s8
 8005a80:	ee32 9aa3 	vadd.f32	s18, s5, s7
 8005a84:	ee31 8a05 	vadd.f32	s16, s2, s10
 8005a88:	ee74 aa80 	vadd.f32	s21, s9, s0
 8005a8c:	ee70 8aa5 	vadd.f32	s17, s1, s11
 8005a90:	ed45 ba04 	vstr	s23, [r5, #-16]
 8005a94:	ed05 ba03 	vstr	s22, [r5, #-12]
 8005a98:	ed45 aa02 	vstr	s21, [r5, #-8]
 8005a9c:	ed05 aa01 	vstr	s20, [r5, #-4]
 8005aa0:	ed06 8a01 	vstr	s16, [r6, #-4]
 8005aa4:	ed46 9a04 	vstr	s19, [r6, #-16]
 8005aa8:	ed06 9a03 	vstr	s18, [r6, #-12]
 8005aac:	ed46 8a02 	vstr	s17, [r6, #-8]
 8005ab0:	ee76 6a66 	vsub.f32	s13, s12, s13
 8005ab4:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8005ab8:	ed12 6a03 	vldr	s12, [r2, #-12]
 8005abc:	ed52 2a04 	vldr	s5, [r2, #-16]
 8005ac0:	ee33 3a61 	vsub.f32	s6, s6, s3
 8005ac4:	ee34 4a42 	vsub.f32	s8, s8, s4
 8005ac8:	ee26 8a86 	vmul.f32	s16, s13, s12
 8005acc:	ee24 2a06 	vmul.f32	s4, s8, s12
 8005ad0:	ee63 1a22 	vmul.f32	s3, s6, s5
 8005ad4:	ee24 4a22 	vmul.f32	s8, s8, s5
 8005ad8:	ee23 3a06 	vmul.f32	s6, s6, s12
 8005adc:	ee66 6aa2 	vmul.f32	s13, s13, s5
 8005ae0:	ee23 6a86 	vmul.f32	s12, s7, s12
 8005ae4:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8005ae8:	ee36 6a04 	vadd.f32	s12, s12, s8
 8005aec:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8005af0:	ee72 3a63 	vsub.f32	s7, s4, s7
 8005af4:	ee71 2a88 	vadd.f32	s5, s3, s16
 8005af8:	ed44 6a03 	vstr	s13, [r4, #-12]
 8005afc:	ed44 2a04 	vstr	s5, [r4, #-16]
 8005b00:	ed43 3a04 	vstr	s7, [r3, #-16]
 8005b04:	ed03 6a03 	vstr	s12, [r3, #-12]
 8005b08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b0c:	ee75 6ae0 	vsub.f32	s13, s11, s1
 8005b10:	ed12 7a01 	vldr	s14, [r2, #-4]
 8005b14:	ed52 5a02 	vldr	s11, [r2, #-8]
 8005b18:	ee35 6a41 	vsub.f32	s12, s10, s2
 8005b1c:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8005b20:	ee67 3a87 	vmul.f32	s7, s15, s14
 8005b24:	ee26 5a87 	vmul.f32	s10, s13, s14
 8005b28:	ee24 4aa5 	vmul.f32	s8, s9, s11
 8005b2c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8005b30:	ee64 4a87 	vmul.f32	s9, s9, s14
 8005b34:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8005b38:	ee26 7a07 	vmul.f32	s14, s12, s14
 8005b3c:	ee26 6a25 	vmul.f32	s12, s12, s11
 8005b40:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8005b44:	ee74 5a23 	vadd.f32	s11, s8, s7
 8005b48:	ee35 6a46 	vsub.f32	s12, s10, s12
 8005b4c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005b50:	f1be 0e01 	subs.w	lr, lr, #1
 8005b54:	ed44 5a02 	vstr	s11, [r4, #-8]
 8005b58:	f105 0510 	add.w	r5, r5, #16
 8005b5c:	ed44 7a01 	vstr	s15, [r4, #-4]
 8005b60:	f106 0610 	add.w	r6, r6, #16
 8005b64:	ed03 6a02 	vstr	s12, [r3, #-8]
 8005b68:	ed03 7a01 	vstr	s14, [r3, #-4]
 8005b6c:	f102 0210 	add.w	r2, r2, #16
 8005b70:	f104 0410 	add.w	r4, r4, #16
 8005b74:	f103 0310 	add.w	r3, r3, #16
 8005b78:	f47f af5a 	bne.w	8005a30 <arm_cfft_radix8by2_f32+0x34>
 8005b7c:	687a      	ldr	r2, [r7, #4]
 8005b7e:	fa1f f48c 	uxth.w	r4, ip
 8005b82:	4608      	mov	r0, r1
 8005b84:	2302      	movs	r3, #2
 8005b86:	4621      	mov	r1, r4
 8005b88:	f000 fae2 	bl	8006150 <arm_radix8_butterfly_f32>
 8005b8c:	ecbd 8b08 	vpop	{d8-d11}
 8005b90:	4640      	mov	r0, r8
 8005b92:	4621      	mov	r1, r4
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	2302      	movs	r3, #2
 8005b98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b9c:	f000 bad8 	b.w	8006150 <arm_radix8_butterfly_f32>

08005ba0 <arm_cfft_radix8by4_f32>:
 8005ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ba4:	ed2d 8b0a 	vpush	{d8-d12}
 8005ba8:	8802      	ldrh	r2, [r0, #0]
 8005baa:	ed91 6a00 	vldr	s12, [r1]
 8005bae:	b08f      	sub	sp, #60	@ 0x3c
 8005bb0:	460f      	mov	r7, r1
 8005bb2:	0852      	lsrs	r2, r2, #1
 8005bb4:	0093      	lsls	r3, r2, #2
 8005bb6:	900c      	str	r0, [sp, #48]	@ 0x30
 8005bb8:	9103      	str	r1, [sp, #12]
 8005bba:	6841      	ldr	r1, [r0, #4]
 8005bbc:	ed97 7a01 	vldr	s14, [r7, #4]
 8005bc0:	4638      	mov	r0, r7
 8005bc2:	4418      	add	r0, r3
 8005bc4:	4606      	mov	r6, r0
 8005bc6:	9009      	str	r0, [sp, #36]	@ 0x24
 8005bc8:	4418      	add	r0, r3
 8005bca:	edd0 6a00 	vldr	s13, [r0]
 8005bce:	edd6 3a00 	vldr	s7, [r6]
 8005bd2:	edd6 2a01 	vldr	s5, [r6, #4]
 8005bd6:	edd0 7a01 	vldr	s15, [r0, #4]
 8005bda:	900a      	str	r0, [sp, #40]	@ 0x28
 8005bdc:	ee76 5a26 	vadd.f32	s11, s12, s13
 8005be0:	4604      	mov	r4, r0
 8005be2:	4625      	mov	r5, r4
 8005be4:	441c      	add	r4, r3
 8005be6:	ed94 4a00 	vldr	s8, [r4]
 8005bea:	ed94 5a01 	vldr	s10, [r4, #4]
 8005bee:	9401      	str	r4, [sp, #4]
 8005bf0:	ee75 4aa3 	vadd.f32	s9, s11, s7
 8005bf4:	4630      	mov	r0, r6
 8005bf6:	ee74 4a24 	vadd.f32	s9, s8, s9
 8005bfa:	463e      	mov	r6, r7
 8005bfc:	ee14 ea90 	vmov	lr, s9
 8005c00:	ee76 6a66 	vsub.f32	s13, s12, s13
 8005c04:	f846 eb08 	str.w	lr, [r6], #8
 8005c08:	ee37 6a27 	vadd.f32	s12, s14, s15
 8005c0c:	edd0 4a01 	vldr	s9, [r0, #4]
 8005c10:	9604      	str	r6, [sp, #16]
 8005c12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c16:	9e01      	ldr	r6, [sp, #4]
 8005c18:	ee32 3aa6 	vadd.f32	s6, s5, s13
 8005c1c:	ed96 2a01 	vldr	s4, [r6, #4]
 8005c20:	ee36 7a24 	vadd.f32	s14, s12, s9
 8005c24:	ee75 5ae3 	vsub.f32	s11, s11, s7
 8005c28:	ee77 4ae3 	vsub.f32	s9, s15, s7
 8005c2c:	ee36 6a62 	vsub.f32	s12, s12, s5
 8005c30:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8005c34:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8005c38:	ee73 3a45 	vsub.f32	s7, s6, s10
 8005c3c:	4604      	mov	r4, r0
 8005c3e:	ee36 6a45 	vsub.f32	s12, s12, s10
 8005c42:	ee75 6a26 	vadd.f32	s13, s10, s13
 8005c46:	46a3      	mov	fp, r4
 8005c48:	ee37 7a02 	vadd.f32	s14, s14, s4
 8005c4c:	ee34 5a84 	vadd.f32	s10, s9, s8
 8005c50:	ee13 8a90 	vmov	r8, s7
 8005c54:	46a4      	mov	ip, r4
 8005c56:	ee75 5ac4 	vsub.f32	s11, s11, s8
 8005c5a:	ed87 7a01 	vstr	s14, [r7, #4]
 8005c5e:	f84b 8b08 	str.w	r8, [fp], #8
 8005c62:	f1ac 0704 	sub.w	r7, ip, #4
 8005c66:	ed8c 5a01 	vstr	s10, [ip, #4]
 8005c6a:	f101 0c08 	add.w	ip, r1, #8
 8005c6e:	462c      	mov	r4, r5
 8005c70:	f8cd c014 	str.w	ip, [sp, #20]
 8005c74:	ee15 ca90 	vmov	ip, s11
 8005c78:	f844 cb08 	str.w	ip, [r4], #8
 8005c7c:	9407      	str	r4, [sp, #28]
 8005c7e:	f101 0410 	add.w	r4, r1, #16
 8005c82:	ed85 6a01 	vstr	s12, [r5, #4]
 8005c86:	0852      	lsrs	r2, r2, #1
 8005c88:	9402      	str	r4, [sp, #8]
 8005c8a:	462c      	mov	r4, r5
 8005c8c:	f101 0518 	add.w	r5, r1, #24
 8005c90:	920b      	str	r2, [sp, #44]	@ 0x2c
 8005c92:	46b2      	mov	sl, r6
 8005c94:	9506      	str	r5, [sp, #24]
 8005c96:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8005c9a:	3a02      	subs	r2, #2
 8005c9c:	ee16 5a90 	vmov	r5, s13
 8005ca0:	46b6      	mov	lr, r6
 8005ca2:	4630      	mov	r0, r6
 8005ca4:	0852      	lsrs	r2, r2, #1
 8005ca6:	f84a 5b08 	str.w	r5, [sl], #8
 8005caa:	f1a0 0604 	sub.w	r6, r0, #4
 8005cae:	edce 7a01 	vstr	s15, [lr, #4]
 8005cb2:	9208      	str	r2, [sp, #32]
 8005cb4:	f000 8130 	beq.w	8005f18 <arm_cfft_radix8by4_f32+0x378>
 8005cb8:	4691      	mov	r9, r2
 8005cba:	9a03      	ldr	r2, [sp, #12]
 8005cbc:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005cc0:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
 8005cc4:	3b08      	subs	r3, #8
 8005cc6:	f102 0510 	add.w	r5, r2, #16
 8005cca:	f101 0c20 	add.w	ip, r1, #32
 8005cce:	f1a4 020c 	sub.w	r2, r4, #12
 8005cd2:	f101 0e30 	add.w	lr, r1, #48	@ 0x30
 8005cd6:	4433      	add	r3, r6
 8005cd8:	3410      	adds	r4, #16
 8005cda:	4650      	mov	r0, sl
 8005cdc:	4659      	mov	r1, fp
 8005cde:	ed55 3a02 	vldr	s7, [r5, #-8]
 8005ce2:	ed14 5a02 	vldr	s10, [r4, #-8]
 8005ce6:	ed91 7a00 	vldr	s14, [r1]
 8005cea:	edd0 7a00 	vldr	s15, [r0]
 8005cee:	ed15 4a01 	vldr	s8, [r5, #-4]
 8005cf2:	ed54 5a01 	vldr	s11, [r4, #-4]
 8005cf6:	edd0 6a01 	vldr	s13, [r0, #4]
 8005cfa:	ed91 6a01 	vldr	s12, [r1, #4]
 8005cfe:	ee33 8a85 	vadd.f32	s16, s7, s10
 8005d02:	ee34 0a25 	vadd.f32	s0, s8, s11
 8005d06:	ee78 4a07 	vadd.f32	s9, s16, s14
 8005d0a:	ee74 5a65 	vsub.f32	s11, s8, s11
 8005d0e:	ee77 4aa4 	vadd.f32	s9, s15, s9
 8005d12:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8005d16:	ed45 4a02 	vstr	s9, [r5, #-8]
 8005d1a:	edd1 4a01 	vldr	s9, [r1, #4]
 8005d1e:	ed90 4a01 	vldr	s8, [r0, #4]
 8005d22:	ee70 4a24 	vadd.f32	s9, s0, s9
 8005d26:	ee76 aa05 	vadd.f32	s21, s12, s10
 8005d2a:	ee74 4a84 	vadd.f32	s9, s9, s8
 8005d2e:	ee35 aac7 	vsub.f32	s20, s11, s14
 8005d32:	ed45 4a01 	vstr	s9, [r5, #-4]
 8005d36:	edd6 1a00 	vldr	s3, [r6]
 8005d3a:	edd7 0a00 	vldr	s1, [r7]
 8005d3e:	ed92 4a02 	vldr	s8, [r2, #8]
 8005d42:	edd3 3a02 	vldr	s7, [r3, #8]
 8005d46:	ed93 2a01 	vldr	s4, [r3, #4]
 8005d4a:	ed16 1a01 	vldr	s2, [r6, #-4]
 8005d4e:	edd2 2a01 	vldr	s5, [r2, #4]
 8005d52:	ed57 9a01 	vldr	s19, [r7, #-4]
 8005d56:	ee70 4aa1 	vadd.f32	s9, s1, s3
 8005d5a:	ee39 3a81 	vadd.f32	s6, s19, s2
 8005d5e:	ee74 8a84 	vadd.f32	s17, s9, s8
 8005d62:	ee70 1ae1 	vsub.f32	s3, s1, s3
 8005d66:	ee73 8aa8 	vadd.f32	s17, s7, s17
 8005d6a:	ee7a aae6 	vsub.f32	s21, s21, s13
 8005d6e:	ee18 aa90 	vmov	sl, s17
 8005d72:	f847 a908 	str.w	sl, [r7], #-8
 8005d76:	edd2 8a01 	vldr	s17, [r2, #4]
 8005d7a:	ed93 9a01 	vldr	s18, [r3, #4]
 8005d7e:	ee73 8a28 	vadd.f32	s17, s6, s17
 8005d82:	ee3a aa27 	vadd.f32	s20, s20, s15
 8005d86:	ee78 8a89 	vadd.f32	s17, s17, s18
 8005d8a:	ee74 0a63 	vsub.f32	s1, s8, s7
 8005d8e:	edc7 8a01 	vstr	s17, [r7, #4]
 8005d92:	ed18 ba02 	vldr	s22, [r8, #-8]
 8005d96:	ed58 8a01 	vldr	s17, [r8, #-4]
 8005d9a:	ee39 1ac1 	vsub.f32	s2, s19, s2
 8005d9e:	ee6a ba28 	vmul.f32	s23, s20, s17
 8005da2:	ee2a ca8b 	vmul.f32	s24, s21, s22
 8005da6:	ee71 9ae2 	vsub.f32	s19, s3, s5
 8005daa:	ee30 9a81 	vadd.f32	s18, s1, s2
 8005dae:	ee79 9a82 	vadd.f32	s19, s19, s4
 8005db2:	ee3c ca2b 	vadd.f32	s24, s24, s23
 8005db6:	ee6a aaa8 	vmul.f32	s21, s21, s17
 8005dba:	ee69 baa8 	vmul.f32	s23, s19, s17
 8005dbe:	ee2a aa0b 	vmul.f32	s20, s20, s22
 8005dc2:	ee69 9a8b 	vmul.f32	s19, s19, s22
 8005dc6:	ee69 8a28 	vmul.f32	s17, s18, s17
 8005dca:	ee29 ba0b 	vmul.f32	s22, s18, s22
 8005dce:	ee1c aa10 	vmov	sl, s24
 8005dd2:	ee78 8aa9 	vadd.f32	s17, s17, s19
 8005dd6:	f841 ab08 	str.w	sl, [r1], #8
 8005dda:	ee3a aa6a 	vsub.f32	s20, s20, s21
 8005dde:	ee3b bacb 	vsub.f32	s22, s23, s22
 8005de2:	ee34 4ac4 	vsub.f32	s8, s9, s8
 8005de6:	ee33 3a62 	vsub.f32	s6, s6, s5
 8005dea:	ed01 aa01 	vstr	s20, [r1, #-4]
 8005dee:	edc2 8a01 	vstr	s17, [r2, #4]
 8005df2:	ed82 ba02 	vstr	s22, [r2, #8]
 8005df6:	ed5c 4a04 	vldr	s9, [ip, #-16]
 8005dfa:	ee74 3a63 	vsub.f32	s7, s8, s7
 8005dfe:	ee38 8a47 	vsub.f32	s16, s16, s14
 8005e02:	ed1c 4a03 	vldr	s8, [ip, #-12]
 8005e06:	ee30 0a46 	vsub.f32	s0, s0, s12
 8005e0a:	ee33 3a42 	vsub.f32	s6, s6, s4
 8005e0e:	ee38 8a67 	vsub.f32	s16, s16, s15
 8005e12:	ee30 0a66 	vsub.f32	s0, s0, s13
 8005e16:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 8005e1a:	ee63 8a04 	vmul.f32	s17, s6, s8
 8005e1e:	ee28 aa24 	vmul.f32	s20, s16, s9
 8005e22:	ee60 9a04 	vmul.f32	s19, s0, s8
 8005e26:	ee28 8a04 	vmul.f32	s16, s16, s8
 8005e2a:	ee20 0a24 	vmul.f32	s0, s0, s9
 8005e2e:	ee63 3a84 	vmul.f32	s7, s7, s8
 8005e32:	ee39 4a68 	vsub.f32	s8, s18, s17
 8005e36:	ee7a 9a29 	vadd.f32	s19, s20, s19
 8005e3a:	ee14 aa10 	vmov	sl, s8
 8005e3e:	ee30 0a48 	vsub.f32	s0, s0, s16
 8005e42:	ee63 4a24 	vmul.f32	s9, s6, s9
 8005e46:	ed44 9a02 	vstr	s19, [r4, #-8]
 8005e4a:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8005e4e:	ed04 0a01 	vstr	s0, [r4, #-4]
 8005e52:	f846 a908 	str.w	sl, [r6], #-8
 8005e56:	ee35 6a46 	vsub.f32	s12, s10, s12
 8005e5a:	ee35 7a87 	vadd.f32	s14, s11, s14
 8005e5e:	edc6 3a01 	vstr	s7, [r6, #4]
 8005e62:	ee76 6a86 	vadd.f32	s13, s13, s12
 8005e66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e6a:	ed1e 6a05 	vldr	s12, [lr, #-20]	@ 0xffffffec
 8005e6e:	ed1e 7a06 	vldr	s14, [lr, #-24]	@ 0xffffffe8
 8005e72:	ee67 5a86 	vmul.f32	s11, s15, s12
 8005e76:	ee26 5a87 	vmul.f32	s10, s13, s14
 8005e7a:	ee72 2a62 	vsub.f32	s5, s4, s5
 8005e7e:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8005e82:	ee72 2ae1 	vsub.f32	s5, s5, s3
 8005e86:	ee75 5a25 	vadd.f32	s11, s10, s11
 8005e8a:	ee62 0a86 	vmul.f32	s1, s5, s12
 8005e8e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8005e92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005e96:	ee21 6a06 	vmul.f32	s12, s2, s12
 8005e9a:	ee62 2a87 	vmul.f32	s5, s5, s14
 8005e9e:	ee21 1a07 	vmul.f32	s2, s2, s14
 8005ea2:	ee15 aa90 	vmov	sl, s11
 8005ea6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005eaa:	f840 ab08 	str.w	sl, [r0], #8
 8005eae:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8005eb2:	ee76 2a22 	vadd.f32	s5, s12, s5
 8005eb6:	f1b9 0901 	subs.w	r9, r9, #1
 8005eba:	ed40 7a01 	vstr	s15, [r0, #-4]
 8005ebe:	f105 0508 	add.w	r5, r5, #8
 8005ec2:	ed83 1a02 	vstr	s2, [r3, #8]
 8005ec6:	edc3 2a01 	vstr	s5, [r3, #4]
 8005eca:	f108 0808 	add.w	r8, r8, #8
 8005ece:	f1a2 0208 	sub.w	r2, r2, #8
 8005ed2:	f10c 0c10 	add.w	ip, ip, #16
 8005ed6:	f104 0408 	add.w	r4, r4, #8
 8005eda:	f10e 0e18 	add.w	lr, lr, #24
 8005ede:	f1a3 0308 	sub.w	r3, r3, #8
 8005ee2:	f47f aefc 	bne.w	8005cde <arm_cfft_radix8by4_f32+0x13e>
 8005ee6:	9908      	ldr	r1, [sp, #32]
 8005ee8:	9802      	ldr	r0, [sp, #8]
 8005eea:	f8dd a034 	ldr.w	sl, [sp, #52]	@ 0x34
 8005eee:	00cb      	lsls	r3, r1, #3
 8005ef0:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8005ef4:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8005ef8:	9102      	str	r1, [sp, #8]
 8005efa:	9904      	ldr	r1, [sp, #16]
 8005efc:	4419      	add	r1, r3
 8005efe:	9104      	str	r1, [sp, #16]
 8005f00:	9905      	ldr	r1, [sp, #20]
 8005f02:	4419      	add	r1, r3
 8005f04:	9105      	str	r1, [sp, #20]
 8005f06:	9907      	ldr	r1, [sp, #28]
 8005f08:	449b      	add	fp, r3
 8005f0a:	4419      	add	r1, r3
 8005f0c:	449a      	add	sl, r3
 8005f0e:	9b06      	ldr	r3, [sp, #24]
 8005f10:	9107      	str	r1, [sp, #28]
 8005f12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f16:	9306      	str	r3, [sp, #24]
 8005f18:	9a04      	ldr	r2, [sp, #16]
 8005f1a:	9807      	ldr	r0, [sp, #28]
 8005f1c:	edd2 3a00 	vldr	s7, [r2]
 8005f20:	ed90 4a00 	vldr	s8, [r0]
 8005f24:	eddb 7a00 	vldr	s15, [fp]
 8005f28:	ed9a 3a00 	vldr	s6, [sl]
 8005f2c:	edd2 4a01 	vldr	s9, [r2, #4]
 8005f30:	ed90 7a01 	vldr	s14, [r0, #4]
 8005f34:	ed9b 2a01 	vldr	s4, [fp, #4]
 8005f38:	edda 5a01 	vldr	s11, [sl, #4]
 8005f3c:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 8005f40:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005f42:	ee73 6a84 	vadd.f32	s13, s7, s8
 8005f46:	ee34 6a87 	vadd.f32	s12, s9, s14
 8005f4a:	ee36 5aa7 	vadd.f32	s10, s13, s15
 8005f4e:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8005f52:	ee33 5a05 	vadd.f32	s10, s6, s10
 8005f56:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8005f5a:	ed82 5a00 	vstr	s10, [r2]
 8005f5e:	ed9b 5a01 	vldr	s10, [fp, #4]
 8005f62:	edda 4a01 	vldr	s9, [sl, #4]
 8005f66:	ee36 5a05 	vadd.f32	s10, s12, s10
 8005f6a:	ee72 3a04 	vadd.f32	s7, s4, s8
 8005f6e:	ee35 5a24 	vadd.f32	s10, s10, s9
 8005f72:	ee77 4a67 	vsub.f32	s9, s14, s15
 8005f76:	ed82 5a01 	vstr	s10, [r2, #4]
 8005f7a:	9a05      	ldr	r2, [sp, #20]
 8005f7c:	ee34 5a83 	vadd.f32	s10, s9, s6
 8005f80:	edd2 1a00 	vldr	s3, [r2]
 8005f84:	edd2 2a01 	vldr	s5, [r2, #4]
 8005f88:	9a02      	ldr	r2, [sp, #8]
 8005f8a:	ee73 3ae5 	vsub.f32	s7, s7, s11
 8005f8e:	ee36 6a42 	vsub.f32	s12, s12, s4
 8005f92:	ee63 4aa1 	vmul.f32	s9, s7, s3
 8005f96:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8005f9a:	ee65 2a22 	vmul.f32	s5, s10, s5
 8005f9e:	ee25 5a21 	vmul.f32	s10, s10, s3
 8005fa2:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8005fa6:	ee35 5a63 	vsub.f32	s10, s10, s7
 8005faa:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005fae:	edcb 2a00 	vstr	s5, [fp]
 8005fb2:	ed8b 5a01 	vstr	s10, [fp, #4]
 8005fb6:	edd2 3a01 	vldr	s7, [r2, #4]
 8005fba:	ed92 5a00 	vldr	s10, [r2]
 8005fbe:	9a06      	ldr	r2, [sp, #24]
 8005fc0:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8005fc4:	ee36 6a65 	vsub.f32	s12, s12, s11
 8005fc8:	ee66 4a85 	vmul.f32	s9, s13, s10
 8005fcc:	ee26 5a05 	vmul.f32	s10, s12, s10
 8005fd0:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8005fd4:	ee26 6a23 	vmul.f32	s12, s12, s7
 8005fd8:	ee75 6a66 	vsub.f32	s13, s10, s13
 8005fdc:	ee34 6a86 	vadd.f32	s12, s9, s12
 8005fe0:	ee34 4a42 	vsub.f32	s8, s8, s4
 8005fe4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005fe8:	edc0 6a01 	vstr	s13, [r0, #4]
 8005fec:	ed80 6a00 	vstr	s12, [r0]
 8005ff0:	ed92 6a01 	vldr	s12, [r2, #4]
 8005ff4:	9803      	ldr	r0, [sp, #12]
 8005ff6:	ee77 7a43 	vsub.f32	s15, s14, s6
 8005ffa:	ee75 5a84 	vadd.f32	s11, s11, s8
 8005ffe:	ed92 7a00 	vldr	s14, [r2]
 8006002:	ee65 6a87 	vmul.f32	s13, s11, s14
 8006006:	ee27 7a87 	vmul.f32	s14, s15, s14
 800600a:	ee65 5a86 	vmul.f32	s11, s11, s12
 800600e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006012:	ee77 5a65 	vsub.f32	s11, s14, s11
 8006016:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800601a:	edca 5a01 	vstr	s11, [sl, #4]
 800601e:	edca 7a00 	vstr	s15, [sl]
 8006022:	6872      	ldr	r2, [r6, #4]
 8006024:	4621      	mov	r1, r4
 8006026:	2304      	movs	r3, #4
 8006028:	f000 f892 	bl	8006150 <arm_radix8_butterfly_f32>
 800602c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800602e:	6872      	ldr	r2, [r6, #4]
 8006030:	4621      	mov	r1, r4
 8006032:	2304      	movs	r3, #4
 8006034:	f000 f88c 	bl	8006150 <arm_radix8_butterfly_f32>
 8006038:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800603a:	6872      	ldr	r2, [r6, #4]
 800603c:	4621      	mov	r1, r4
 800603e:	2304      	movs	r3, #4
 8006040:	f000 f886 	bl	8006150 <arm_radix8_butterfly_f32>
 8006044:	9801      	ldr	r0, [sp, #4]
 8006046:	6872      	ldr	r2, [r6, #4]
 8006048:	4621      	mov	r1, r4
 800604a:	2304      	movs	r3, #4
 800604c:	b00f      	add	sp, #60	@ 0x3c
 800604e:	ecbd 8b0a 	vpop	{d8-d12}
 8006052:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006056:	f000 b87b 	b.w	8006150 <arm_radix8_butterfly_f32>
 800605a:	bf00      	nop

0800605c <arm_cfft_f32>:
 800605c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006060:	2a01      	cmp	r2, #1
 8006062:	4606      	mov	r6, r0
 8006064:	4617      	mov	r7, r2
 8006066:	460c      	mov	r4, r1
 8006068:	4698      	mov	r8, r3
 800606a:	8805      	ldrh	r5, [r0, #0]
 800606c:	d054      	beq.n	8006118 <arm_cfft_f32+0xbc>
 800606e:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8006072:	d04c      	beq.n	800610e <arm_cfft_f32+0xb2>
 8006074:	d916      	bls.n	80060a4 <arm_cfft_f32+0x48>
 8006076:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 800607a:	d01a      	beq.n	80060b2 <arm_cfft_f32+0x56>
 800607c:	d95c      	bls.n	8006138 <arm_cfft_f32+0xdc>
 800607e:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 8006082:	d044      	beq.n	800610e <arm_cfft_f32+0xb2>
 8006084:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8006088:	d105      	bne.n	8006096 <arm_cfft_f32+0x3a>
 800608a:	4620      	mov	r0, r4
 800608c:	4629      	mov	r1, r5
 800608e:	6872      	ldr	r2, [r6, #4]
 8006090:	2301      	movs	r3, #1
 8006092:	f000 f85d 	bl	8006150 <arm_radix8_butterfly_f32>
 8006096:	f1b8 0f00 	cmp.w	r8, #0
 800609a:	d111      	bne.n	80060c0 <arm_cfft_f32+0x64>
 800609c:	2f01      	cmp	r7, #1
 800609e:	d016      	beq.n	80060ce <arm_cfft_f32+0x72>
 80060a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060a4:	2d20      	cmp	r5, #32
 80060a6:	d032      	beq.n	800610e <arm_cfft_f32+0xb2>
 80060a8:	d94a      	bls.n	8006140 <arm_cfft_f32+0xe4>
 80060aa:	2d40      	cmp	r5, #64	@ 0x40
 80060ac:	d0ed      	beq.n	800608a <arm_cfft_f32+0x2e>
 80060ae:	2d80      	cmp	r5, #128	@ 0x80
 80060b0:	d1f1      	bne.n	8006096 <arm_cfft_f32+0x3a>
 80060b2:	4630      	mov	r0, r6
 80060b4:	4621      	mov	r1, r4
 80060b6:	f7ff fca1 	bl	80059fc <arm_cfft_radix8by2_f32>
 80060ba:	f1b8 0f00 	cmp.w	r8, #0
 80060be:	d0ed      	beq.n	800609c <arm_cfft_f32+0x40>
 80060c0:	4620      	mov	r0, r4
 80060c2:	89b1      	ldrh	r1, [r6, #12]
 80060c4:	68b2      	ldr	r2, [r6, #8]
 80060c6:	f7fa f883 	bl	80001d0 <arm_bitreversal_32>
 80060ca:	2f01      	cmp	r7, #1
 80060cc:	d1e8      	bne.n	80060a0 <arm_cfft_f32+0x44>
 80060ce:	ee07 5a90 	vmov	s15, r5
 80060d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060d6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80060da:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 80060de:	2d00      	cmp	r5, #0
 80060e0:	d0de      	beq.n	80060a0 <arm_cfft_f32+0x44>
 80060e2:	f104 0108 	add.w	r1, r4, #8
 80060e6:	2300      	movs	r3, #0
 80060e8:	3301      	adds	r3, #1
 80060ea:	429d      	cmp	r5, r3
 80060ec:	f101 0108 	add.w	r1, r1, #8
 80060f0:	ed11 7a04 	vldr	s14, [r1, #-16]
 80060f4:	ed51 7a03 	vldr	s15, [r1, #-12]
 80060f8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80060fc:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8006100:	ed01 7a04 	vstr	s14, [r1, #-16]
 8006104:	ed41 7a03 	vstr	s15, [r1, #-12]
 8006108:	d1ee      	bne.n	80060e8 <arm_cfft_f32+0x8c>
 800610a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800610e:	4630      	mov	r0, r6
 8006110:	4621      	mov	r1, r4
 8006112:	f7ff fd45 	bl	8005ba0 <arm_cfft_radix8by4_f32>
 8006116:	e7be      	b.n	8006096 <arm_cfft_f32+0x3a>
 8006118:	b1ad      	cbz	r5, 8006146 <arm_cfft_f32+0xea>
 800611a:	f101 030c 	add.w	r3, r1, #12
 800611e:	2200      	movs	r2, #0
 8006120:	ed53 7a02 	vldr	s15, [r3, #-8]
 8006124:	3201      	adds	r2, #1
 8006126:	eef1 7a67 	vneg.f32	s15, s15
 800612a:	4295      	cmp	r5, r2
 800612c:	ed43 7a02 	vstr	s15, [r3, #-8]
 8006130:	f103 0308 	add.w	r3, r3, #8
 8006134:	d1f4      	bne.n	8006120 <arm_cfft_f32+0xc4>
 8006136:	e79a      	b.n	800606e <arm_cfft_f32+0x12>
 8006138:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 800613c:	d0a5      	beq.n	800608a <arm_cfft_f32+0x2e>
 800613e:	e7aa      	b.n	8006096 <arm_cfft_f32+0x3a>
 8006140:	2d10      	cmp	r5, #16
 8006142:	d0b6      	beq.n	80060b2 <arm_cfft_f32+0x56>
 8006144:	e7a7      	b.n	8006096 <arm_cfft_f32+0x3a>
 8006146:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800614a:	d894      	bhi.n	8006076 <arm_cfft_f32+0x1a>
 800614c:	e7aa      	b.n	80060a4 <arm_cfft_f32+0x48>
 800614e:	bf00      	nop

08006150 <arm_radix8_butterfly_f32>:
 8006150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006154:	ed2d 8b10 	vpush	{d8-d15}
 8006158:	b09d      	sub	sp, #116	@ 0x74
 800615a:	461c      	mov	r4, r3
 800615c:	ed9f bac8 	vldr	s22, [pc, #800]	@ 8006480 <arm_radix8_butterfly_f32+0x330>
 8006160:	921a      	str	r2, [sp, #104]	@ 0x68
 8006162:	1d03      	adds	r3, r0, #4
 8006164:	4682      	mov	sl, r0
 8006166:	4689      	mov	r9, r1
 8006168:	468b      	mov	fp, r1
 800616a:	931b      	str	r3, [sp, #108]	@ 0x6c
 800616c:	9400      	str	r4, [sp, #0]
 800616e:	469e      	mov	lr, r3
 8006170:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8006174:	005a      	lsls	r2, r3, #1
 8006176:	18d6      	adds	r6, r2, r3
 8006178:	18f5      	adds	r5, r6, r3
 800617a:	9203      	str	r2, [sp, #12]
 800617c:	195a      	adds	r2, r3, r5
 800617e:	18d0      	adds	r0, r2, r3
 8006180:	00df      	lsls	r7, r3, #3
 8006182:	1819      	adds	r1, r3, r0
 8006184:	463c      	mov	r4, r7
 8006186:	9701      	str	r7, [sp, #4]
 8006188:	4457      	add	r7, sl
 800618a:	930c      	str	r3, [sp, #48]	@ 0x30
 800618c:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 8006190:	011b      	lsls	r3, r3, #4
 8006192:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
 8006196:	eb07 0c04 	add.w	ip, r7, r4
 800619a:	9c00      	ldr	r4, [sp, #0]
 800619c:	9302      	str	r3, [sp, #8]
 800619e:	eb0a 06c6 	add.w	r6, sl, r6, lsl #3
 80061a2:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
 80061a6:	3204      	adds	r2, #4
 80061a8:	3104      	adds	r1, #4
 80061aa:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
 80061ae:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80061b2:	f04f 0800 	mov.w	r8, #0
 80061b6:	eddc 7a00 	vldr	s15, [ip]
 80061ba:	edd7 6a00 	vldr	s13, [r7]
 80061be:	edd6 3a00 	vldr	s7, [r6]
 80061c2:	ed5e aa01 	vldr	s21, [lr, #-4]
 80061c6:	edd5 4a00 	vldr	s9, [r5]
 80061ca:	ed90 2a00 	vldr	s4, [r0]
 80061ce:	ed12 7a01 	vldr	s14, [r2, #-4]
 80061d2:	ed51 0a01 	vldr	s1, [r1, #-4]
 80061d6:	ee77 8a82 	vadd.f32	s17, s15, s4
 80061da:	ee33 4aa0 	vadd.f32	s8, s7, s1
 80061de:	ee76 1a87 	vadd.f32	s3, s13, s14
 80061e2:	ee3a 3aa4 	vadd.f32	s6, s21, s9
 80061e6:	ee31 6a84 	vadd.f32	s12, s3, s8
 80061ea:	ee33 5a28 	vadd.f32	s10, s6, s17
 80061ee:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80061f2:	ee75 6a06 	vadd.f32	s13, s10, s12
 80061f6:	ee35 5a46 	vsub.f32	s10, s10, s12
 80061fa:	ed4e 6a01 	vstr	s13, [lr, #-4]
 80061fe:	ed85 5a00 	vstr	s10, [r5]
 8006202:	ed96 1a01 	vldr	s2, [r6, #4]
 8006206:	edd7 5a01 	vldr	s11, [r7, #4]
 800620a:	ed92 aa00 	vldr	s20, [r2]
 800620e:	ed91 6a00 	vldr	s12, [r1]
 8006212:	ed9e 9a00 	vldr	s18, [lr]
 8006216:	ed95 5a01 	vldr	s10, [r5, #4]
 800621a:	eddc 6a01 	vldr	s13, [ip, #4]
 800621e:	edd0 9a01 	vldr	s19, [r0, #4]
 8006222:	ee73 0ae0 	vsub.f32	s1, s7, s1
 8006226:	ee71 2a46 	vsub.f32	s5, s2, s12
 800622a:	ee75 3aca 	vsub.f32	s7, s11, s20
 800622e:	ee37 0a60 	vsub.f32	s0, s14, s1
 8006232:	ee33 8aa2 	vadd.f32	s16, s7, s5
 8006236:	ee37 7a20 	vadd.f32	s14, s14, s1
 800623a:	ee73 2ae2 	vsub.f32	s5, s7, s5
 800623e:	ee37 2ac2 	vsub.f32	s4, s15, s4
 8006242:	ee79 3a05 	vadd.f32	s7, s18, s10
 8006246:	ee60 0a0b 	vmul.f32	s1, s0, s22
 800624a:	ee39 5a45 	vsub.f32	s10, s18, s10
 800624e:	ee7a 4ae4 	vsub.f32	s9, s21, s9
 8006252:	ee36 9aa9 	vadd.f32	s18, s13, s19
 8006256:	ee75 5a8a 	vadd.f32	s11, s11, s20
 800625a:	ee31 6a06 	vadd.f32	s12, s2, s12
 800625e:	ee76 6ae9 	vsub.f32	s13, s13, s19
 8006262:	ee28 8a0b 	vmul.f32	s16, s16, s22
 8006266:	ee62 2a8b 	vmul.f32	s5, s5, s22
 800626a:	ee67 7a0b 	vmul.f32	s15, s14, s22
 800626e:	ee33 3a68 	vsub.f32	s6, s6, s17
 8006272:	ee36 0a88 	vadd.f32	s0, s13, s16
 8006276:	ee75 8a86 	vadd.f32	s17, s11, s12
 800627a:	ee36 7ac8 	vsub.f32	s14, s13, s16
 800627e:	ee71 1ac4 	vsub.f32	s3, s3, s8
 8006282:	ee75 6a62 	vsub.f32	s13, s10, s5
 8006286:	ee33 4ac9 	vsub.f32	s8, s7, s18
 800628a:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800628e:	ee33 1a89 	vadd.f32	s2, s7, s18
 8006292:	ee74 5ae0 	vsub.f32	s11, s9, s1
 8006296:	ee74 3aa0 	vadd.f32	s7, s9, s1
 800629a:	ee75 4a22 	vadd.f32	s9, s10, s5
 800629e:	ee32 5a27 	vadd.f32	s10, s4, s15
 80062a2:	ee72 7a67 	vsub.f32	s15, s4, s15
 80062a6:	ee33 8a06 	vadd.f32	s16, s6, s12
 80062aa:	ee75 2a87 	vadd.f32	s5, s11, s14
 80062ae:	ee31 9a28 	vadd.f32	s18, s2, s17
 80062b2:	ee33 6a46 	vsub.f32	s12, s6, s12
 80062b6:	ee74 0a61 	vsub.f32	s1, s8, s3
 80062ba:	ee33 2a80 	vadd.f32	s4, s7, s0
 80062be:	ee35 7ac7 	vsub.f32	s14, s11, s14
 80062c2:	ee34 3ac5 	vsub.f32	s6, s9, s10
 80062c6:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80062ca:	ee31 1a68 	vsub.f32	s2, s2, s17
 80062ce:	ee34 4a21 	vadd.f32	s8, s8, s3
 80062d2:	ee73 3ac0 	vsub.f32	s7, s7, s0
 80062d6:	ee74 4a85 	vadd.f32	s9, s9, s10
 80062da:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80062de:	44d8      	add	r8, fp
 80062e0:	45c1      	cmp	r9, r8
 80062e2:	ed8e 9a00 	vstr	s18, [lr]
 80062e6:	ed85 1a01 	vstr	s2, [r5, #4]
 80062ea:	449e      	add	lr, r3
 80062ec:	ed8c 8a00 	vstr	s16, [ip]
 80062f0:	441d      	add	r5, r3
 80062f2:	ed80 6a00 	vstr	s12, [r0]
 80062f6:	edcc 0a01 	vstr	s1, [ip, #4]
 80062fa:	ed80 4a01 	vstr	s8, [r0, #4]
 80062fe:	449c      	add	ip, r3
 8006300:	ed87 2a00 	vstr	s4, [r7]
 8006304:	4418      	add	r0, r3
 8006306:	ed41 3a01 	vstr	s7, [r1, #-4]
 800630a:	ed42 2a01 	vstr	s5, [r2, #-4]
 800630e:	ed86 7a00 	vstr	s14, [r6]
 8006312:	ed87 3a01 	vstr	s6, [r7, #4]
 8006316:	edc1 4a00 	vstr	s9, [r1]
 800631a:	441f      	add	r7, r3
 800631c:	edc2 5a00 	vstr	s11, [r2]
 8006320:	4419      	add	r1, r3
 8006322:	edc6 6a01 	vstr	s13, [r6, #4]
 8006326:	441a      	add	r2, r3
 8006328:	441e      	add	r6, r3
 800632a:	f63f af44 	bhi.w	80061b6 <arm_radix8_butterfly_f32+0x66>
 800632e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006330:	2907      	cmp	r1, #7
 8006332:	4620      	mov	r0, r4
 8006334:	f240 81e9 	bls.w	800670a <arm_radix8_butterfly_f32+0x5ba>
 8006338:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 800633c:	193e      	adds	r6, r7, r4
 800633e:	1935      	adds	r5, r6, r4
 8006340:	9c03      	ldr	r4, [sp, #12]
 8006342:	9000      	str	r0, [sp, #0]
 8006344:	4622      	mov	r2, r4
 8006346:	3201      	adds	r2, #1
 8006348:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800634c:	9900      	ldr	r1, [sp, #0]
 800634e:	1828      	adds	r0, r5, r0
 8006350:	eb00 0e01 	add.w	lr, r0, r1
 8006354:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006356:	440a      	add	r2, r1
 8006358:	eb04 0c01 	add.w	ip, r4, r1
 800635c:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 8006360:	eb0a 0ec2 	add.w	lr, sl, r2, lsl #3
 8006364:	9a00      	ldr	r2, [sp, #0]
 8006366:	940f      	str	r4, [sp, #60]	@ 0x3c
 8006368:	00ed      	lsls	r5, r5, #3
 800636a:	9511      	str	r5, [sp, #68]	@ 0x44
 800636c:	00d5      	lsls	r5, r2, #3
 800636e:	950d      	str	r5, [sp, #52]	@ 0x34
 8006370:	9d01      	ldr	r5, [sp, #4]
 8006372:	3508      	adds	r5, #8
 8006374:	9516      	str	r5, [sp, #88]	@ 0x58
 8006376:	9d02      	ldr	r5, [sp, #8]
 8006378:	3508      	adds	r5, #8
 800637a:	0114      	lsls	r4, r2, #4
 800637c:	9517      	str	r5, [sp, #92]	@ 0x5c
 800637e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006380:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8006382:	940e      	str	r4, [sp, #56]	@ 0x38
 8006384:	00c0      	lsls	r0, r0, #3
 8006386:	9010      	str	r0, [sp, #64]	@ 0x40
 8006388:	18aa      	adds	r2, r5, r2
 800638a:	9207      	str	r2, [sp, #28]
 800638c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800638e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8006390:	18aa      	adds	r2, r5, r2
 8006392:	9208      	str	r2, [sp, #32]
 8006394:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006396:	18aa      	adds	r2, r5, r2
 8006398:	9209      	str	r2, [sp, #36]	@ 0x24
 800639a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800639e:	f10e 0204 	add.w	r2, lr, #4
 80063a2:	920a      	str	r2, [sp, #40]	@ 0x28
 80063a4:	00c9      	lsls	r1, r1, #3
 80063a6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80063a8:	310c      	adds	r1, #12
 80063aa:	00f6      	lsls	r6, r6, #3
 80063ac:	ea4f 00cc 	mov.w	r0, ip, lsl #3
 80063b0:	9114      	str	r1, [sp, #80]	@ 0x50
 80063b2:	18a9      	adds	r1, r5, r2
 80063b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80063b6:	9612      	str	r6, [sp, #72]	@ 0x48
 80063b8:	00ff      	lsls	r7, r7, #3
 80063ba:	19ae      	adds	r6, r5, r6
 80063bc:	3008      	adds	r0, #8
 80063be:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 80063c2:	9606      	str	r6, [sp, #24]
 80063c4:	9019      	str	r0, [sp, #100]	@ 0x64
 80063c6:	18aa      	adds	r2, r5, r2
 80063c8:	0164      	lsls	r4, r4, #5
 80063ca:	19ee      	adds	r6, r5, r7
 80063cc:	f10c 000c 	add.w	r0, ip, #12
 80063d0:	9713      	str	r7, [sp, #76]	@ 0x4c
 80063d2:	9604      	str	r6, [sp, #16]
 80063d4:	9015      	str	r0, [sp, #84]	@ 0x54
 80063d6:	9103      	str	r1, [sp, #12]
 80063d8:	9205      	str	r2, [sp, #20]
 80063da:	f104 0208 	add.w	r2, r4, #8
 80063de:	9218      	str	r2, [sp, #96]	@ 0x60
 80063e0:	f04f 0801 	mov.w	r8, #1
 80063e4:	2200      	movs	r2, #0
 80063e6:	f102 0108 	add.w	r1, r2, #8
 80063ea:	460f      	mov	r7, r1
 80063ec:	910b      	str	r1, [sp, #44]	@ 0x2c
 80063ee:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80063f0:	188e      	adds	r6, r1, r2
 80063f2:	9916      	ldr	r1, [sp, #88]	@ 0x58
 80063f4:	188d      	adds	r5, r1, r2
 80063f6:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80063f8:	188c      	adds	r4, r1, r2
 80063fa:	9919      	ldr	r1, [sp, #100]	@ 0x64
 80063fc:	1888      	adds	r0, r1, r2
 80063fe:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8006400:	eb01 0c02 	add.w	ip, r1, r2
 8006404:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8006406:	440a      	add	r2, r1
 8006408:	9903      	ldr	r1, [sp, #12]
 800640a:	edd1 fa00 	vldr	s31, [r1]
 800640e:	9905      	ldr	r1, [sp, #20]
 8006410:	ed91 fa00 	vldr	s30, [r1]
 8006414:	9904      	ldr	r1, [sp, #16]
 8006416:	edd1 ea00 	vldr	s29, [r1]
 800641a:	9906      	ldr	r1, [sp, #24]
 800641c:	ed91 ea00 	vldr	s28, [r1]
 8006420:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006422:	edd1 da00 	vldr	s27, [r1]
 8006426:	9908      	ldr	r1, [sp, #32]
 8006428:	ed91 da00 	vldr	s26, [r1]
 800642c:	9907      	ldr	r1, [sp, #28]
 800642e:	edd1 ca00 	vldr	s25, [r1]
 8006432:	9903      	ldr	r1, [sp, #12]
 8006434:	ed91 ca01 	vldr	s24, [r1, #4]
 8006438:	9905      	ldr	r1, [sp, #20]
 800643a:	edd1 ba01 	vldr	s23, [r1, #4]
 800643e:	9904      	ldr	r1, [sp, #16]
 8006440:	edd1 aa01 	vldr	s21, [r1, #4]
 8006444:	9906      	ldr	r1, [sp, #24]
 8006446:	ed91 aa01 	vldr	s20, [r1, #4]
 800644a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800644c:	edd1 7a01 	vldr	s15, [r1, #4]
 8006450:	9908      	ldr	r1, [sp, #32]
 8006452:	edcd 7a00 	vstr	s15, [sp]
 8006456:	edd1 7a01 	vldr	s15, [r1, #4]
 800645a:	9907      	ldr	r1, [sp, #28]
 800645c:	edcd 7a01 	vstr	s15, [sp, #4]
 8006460:	edd1 7a01 	vldr	s15, [r1, #4]
 8006464:	eb0a 0e07 	add.w	lr, sl, r7
 8006468:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 800646a:	edcd 7a02 	vstr	s15, [sp, #8]
 800646e:	eb0c 010a 	add.w	r1, ip, sl
 8006472:	4456      	add	r6, sl
 8006474:	4455      	add	r5, sl
 8006476:	4454      	add	r4, sl
 8006478:	4450      	add	r0, sl
 800647a:	4452      	add	r2, sl
 800647c:	46c4      	mov	ip, r8
 800647e:	e001      	b.n	8006484 <arm_radix8_butterfly_f32+0x334>
 8006480:	3f3504f3 	.word	0x3f3504f3
 8006484:	ed96 5a00 	vldr	s10, [r6]
 8006488:	ed52 9a01 	vldr	s19, [r2, #-4]
 800648c:	ed11 6a01 	vldr	s12, [r1, #-4]
 8006490:	edd0 7a00 	vldr	s15, [r0]
 8006494:	ed17 7a01 	vldr	s14, [r7, #-4]
 8006498:	edde 3a00 	vldr	s7, [lr]
 800649c:	ed94 3a00 	vldr	s6, [r4]
 80064a0:	ed95 2a00 	vldr	s4, [r5]
 80064a4:	ed9e 0a01 	vldr	s0, [lr, #4]
 80064a8:	ee33 8a85 	vadd.f32	s16, s7, s10
 80064ac:	ee32 1a06 	vadd.f32	s2, s4, s12
 80064b0:	ee33 4a29 	vadd.f32	s8, s6, s19
 80064b4:	ee77 4a87 	vadd.f32	s9, s15, s14
 80064b8:	ee78 1a04 	vadd.f32	s3, s16, s8
 80064bc:	ee71 6a24 	vadd.f32	s13, s2, s9
 80064c0:	ee32 2a46 	vsub.f32	s4, s4, s12
 80064c4:	ee31 6aa6 	vadd.f32	s12, s3, s13
 80064c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80064cc:	ed8e 6a00 	vstr	s12, [lr]
 80064d0:	edd0 8a01 	vldr	s17, [r0, #4]
 80064d4:	ed95 9a01 	vldr	s18, [r5, #4]
 80064d8:	edd1 2a00 	vldr	s5, [r1]
 80064dc:	ed97 7a00 	vldr	s14, [r7]
 80064e0:	edd4 0a01 	vldr	s1, [r4, #4]
 80064e4:	ed96 6a01 	vldr	s12, [r6, #4]
 80064e8:	edd2 5a00 	vldr	s11, [r2]
 80064ec:	ee73 3ac5 	vsub.f32	s7, s7, s10
 80064f0:	ee33 3a69 	vsub.f32	s6, s6, s19
 80064f4:	ee39 5a62 	vsub.f32	s10, s18, s5
 80064f8:	ee78 9ac7 	vsub.f32	s19, s17, s14
 80064fc:	ee38 4a44 	vsub.f32	s8, s16, s8
 8006500:	ee38 7a87 	vadd.f32	s14, s17, s14
 8006504:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8006508:	ee79 2a22 	vadd.f32	s5, s18, s5
 800650c:	ee75 8a69 	vsub.f32	s17, s10, s19
 8006510:	ee32 9a27 	vadd.f32	s18, s4, s15
 8006514:	ee35 5a29 	vadd.f32	s10, s10, s19
 8006518:	ee72 7a67 	vsub.f32	s15, s4, s15
 800651c:	ee30 2a06 	vadd.f32	s4, s0, s12
 8006520:	ee69 9a0b 	vmul.f32	s19, s18, s22
 8006524:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8006528:	ee32 9a08 	vadd.f32	s18, s4, s16
 800652c:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8006530:	ee32 2a48 	vsub.f32	s4, s4, s16
 8006534:	ee71 4a64 	vsub.f32	s9, s2, s9
 8006538:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800653c:	ee32 1a87 	vadd.f32	s2, s5, s14
 8006540:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8006544:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8006548:	ee30 6a46 	vsub.f32	s12, s0, s12
 800654c:	ee73 0a29 	vadd.f32	s1, s6, s19
 8006550:	ee36 0a28 	vadd.f32	s0, s12, s17
 8006554:	ee33 3a69 	vsub.f32	s6, s6, s19
 8006558:	ee32 7a64 	vsub.f32	s14, s4, s9
 800655c:	ee73 9aa7 	vadd.f32	s19, s7, s15
 8006560:	ee36 6a68 	vsub.f32	s12, s12, s17
 8006564:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8006568:	ee75 8a85 	vadd.f32	s17, s11, s10
 800656c:	ee74 3a22 	vadd.f32	s7, s8, s5
 8006570:	ee35 5ac5 	vsub.f32	s10, s11, s10
 8006574:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8006578:	ee79 1a41 	vsub.f32	s3, s18, s2
 800657c:	ee39 8aa8 	vadd.f32	s16, s19, s17
 8006580:	ee76 5a43 	vsub.f32	s11, s12, s6
 8006584:	ee74 2a62 	vsub.f32	s5, s8, s5
 8006588:	ee72 4a24 	vadd.f32	s9, s4, s9
 800658c:	ee30 4a60 	vsub.f32	s8, s0, s1
 8006590:	ee79 8ae8 	vsub.f32	s17, s19, s17
 8006594:	ee30 0a20 	vadd.f32	s0, s0, s1
 8006598:	ee77 9a85 	vadd.f32	s19, s15, s10
 800659c:	ee36 6a03 	vadd.f32	s12, s12, s6
 80065a0:	ee77 7ac5 	vsub.f32	s15, s15, s10
 80065a4:	ee2e 2a21 	vmul.f32	s4, s28, s3
 80065a8:	ee2e 5a26 	vmul.f32	s10, s28, s13
 80065ac:	ee6f 0a23 	vmul.f32	s1, s30, s7
 80065b0:	ee2a 3a21 	vmul.f32	s6, s20, s3
 80065b4:	ee39 1a01 	vadd.f32	s2, s18, s2
 80065b8:	ee6a 6a26 	vmul.f32	s13, s20, s13
 80065bc:	ee2b 9a87 	vmul.f32	s18, s23, s14
 80065c0:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 80065c4:	ee2f 7a07 	vmul.f32	s14, s30, s14
 80065c8:	ee6f 1a84 	vmul.f32	s3, s31, s8
 80065cc:	ee35 3a03 	vadd.f32	s6, s10, s6
 80065d0:	ee72 6a66 	vsub.f32	s13, s4, s13
 80065d4:	ee2c 5a04 	vmul.f32	s10, s24, s8
 80065d8:	ee2f 2a88 	vmul.f32	s4, s31, s16
 80065dc:	ed9d 4a02 	vldr	s8, [sp, #8]
 80065e0:	ed8e 1a01 	vstr	s2, [lr, #4]
 80065e4:	ee77 3a63 	vsub.f32	s7, s14, s7
 80065e8:	ee2c 8a08 	vmul.f32	s16, s24, s16
 80065ec:	ed9d 7a01 	vldr	s14, [sp, #4]
 80065f0:	ed86 3a00 	vstr	s6, [r6]
 80065f4:	ee30 9a89 	vadd.f32	s18, s1, s18
 80065f8:	ee32 2a05 	vadd.f32	s4, s4, s10
 80065fc:	ee6d 0a22 	vmul.f32	s1, s26, s5
 8006600:	ee31 8ac8 	vsub.f32	s16, s3, s16
 8006604:	ee67 2a22 	vmul.f32	s5, s14, s5
 8006608:	ee64 1a00 	vmul.f32	s3, s8, s0
 800660c:	ee27 7a24 	vmul.f32	s14, s14, s9
 8006610:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 8006614:	ee6d 4a24 	vmul.f32	s9, s26, s9
 8006618:	ee64 8a28 	vmul.f32	s17, s8, s17
 800661c:	ed9d 4a00 	vldr	s8, [sp]
 8006620:	edc6 6a01 	vstr	s13, [r6, #4]
 8006624:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8006628:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 800662c:	ee64 9a29 	vmul.f32	s19, s8, s19
 8006630:	ee24 4a25 	vmul.f32	s8, s8, s11
 8006634:	ee30 7a87 	vadd.f32	s14, s1, s14
 8006638:	ee74 4a84 	vadd.f32	s9, s9, s8
 800663c:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 8006640:	ee2a 4a86 	vmul.f32	s8, s21, s12
 8006644:	ee2c 0a80 	vmul.f32	s0, s25, s0
 8006648:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 800664c:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 8006650:	ee2e 6a86 	vmul.f32	s12, s29, s12
 8006654:	ee75 1a21 	vadd.f32	s3, s10, s3
 8006658:	ee30 0a68 	vsub.f32	s0, s0, s17
 800665c:	ee75 9ae9 	vsub.f32	s19, s11, s19
 8006660:	ee70 0a84 	vadd.f32	s1, s1, s8
 8006664:	ee36 6a67 	vsub.f32	s12, s12, s15
 8006668:	44dc      	add	ip, fp
 800666a:	45e1      	cmp	r9, ip
 800666c:	ed84 9a00 	vstr	s18, [r4]
 8006670:	edc4 3a01 	vstr	s7, [r4, #4]
 8006674:	449e      	add	lr, r3
 8006676:	ed02 7a01 	vstr	s14, [r2, #-4]
 800667a:	edc2 2a00 	vstr	s5, [r2]
 800667e:	441e      	add	r6, r3
 8006680:	ed85 2a00 	vstr	s4, [r5]
 8006684:	ed85 8a01 	vstr	s16, [r5, #4]
 8006688:	441c      	add	r4, r3
 800668a:	ed47 1a01 	vstr	s3, [r7, #-4]
 800668e:	ed87 0a00 	vstr	s0, [r7]
 8006692:	441a      	add	r2, r3
 8006694:	ed41 4a01 	vstr	s9, [r1, #-4]
 8006698:	edc1 9a00 	vstr	s19, [r1]
 800669c:	441d      	add	r5, r3
 800669e:	edc0 0a00 	vstr	s1, [r0]
 80066a2:	441f      	add	r7, r3
 80066a4:	ed80 6a01 	vstr	s12, [r0, #4]
 80066a8:	4419      	add	r1, r3
 80066aa:	4418      	add	r0, r3
 80066ac:	f63f aeea 	bhi.w	8006484 <arm_radix8_butterfly_f32+0x334>
 80066b0:	9a03      	ldr	r2, [sp, #12]
 80066b2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80066b4:	440a      	add	r2, r1
 80066b6:	9203      	str	r2, [sp, #12]
 80066b8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80066ba:	9a05      	ldr	r2, [sp, #20]
 80066bc:	440a      	add	r2, r1
 80066be:	9205      	str	r2, [sp, #20]
 80066c0:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80066c2:	9a04      	ldr	r2, [sp, #16]
 80066c4:	440a      	add	r2, r1
 80066c6:	9204      	str	r2, [sp, #16]
 80066c8:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80066ca:	9a06      	ldr	r2, [sp, #24]
 80066cc:	440a      	add	r2, r1
 80066ce:	9206      	str	r2, [sp, #24]
 80066d0:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80066d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80066d4:	440a      	add	r2, r1
 80066d6:	9209      	str	r2, [sp, #36]	@ 0x24
 80066d8:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80066da:	9a08      	ldr	r2, [sp, #32]
 80066dc:	440a      	add	r2, r1
 80066de:	9208      	str	r2, [sp, #32]
 80066e0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80066e2:	9a07      	ldr	r2, [sp, #28]
 80066e4:	440a      	add	r2, r1
 80066e6:	9207      	str	r2, [sp, #28]
 80066e8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80066ea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80066ec:	f108 0801 	add.w	r8, r8, #1
 80066f0:	3208      	adds	r2, #8
 80066f2:	4588      	cmp	r8, r1
 80066f4:	920a      	str	r2, [sp, #40]	@ 0x28
 80066f6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80066f8:	f47f ae75 	bne.w	80063e6 <arm_radix8_butterfly_f32+0x296>
 80066fc:	f8bd 3034 	ldrh.w	r3, [sp, #52]	@ 0x34
 8006700:	9300      	str	r3, [sp, #0]
 8006702:	46c3      	mov	fp, r8
 8006704:	f8dd e06c 	ldr.w	lr, [sp, #108]	@ 0x6c
 8006708:	e532      	b.n	8006170 <arm_radix8_butterfly_f32+0x20>
 800670a:	b01d      	add	sp, #116	@ 0x74
 800670c:	ecbd 8b10 	vpop	{d8-d15}
 8006710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006714 <srand>:
 8006714:	b538      	push	{r3, r4, r5, lr}
 8006716:	4b10      	ldr	r3, [pc, #64]	@ (8006758 <srand+0x44>)
 8006718:	681d      	ldr	r5, [r3, #0]
 800671a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800671c:	4604      	mov	r4, r0
 800671e:	b9b3      	cbnz	r3, 800674e <srand+0x3a>
 8006720:	2018      	movs	r0, #24
 8006722:	f000 fa4d 	bl	8006bc0 <malloc>
 8006726:	4602      	mov	r2, r0
 8006728:	6328      	str	r0, [r5, #48]	@ 0x30
 800672a:	b920      	cbnz	r0, 8006736 <srand+0x22>
 800672c:	4b0b      	ldr	r3, [pc, #44]	@ (800675c <srand+0x48>)
 800672e:	480c      	ldr	r0, [pc, #48]	@ (8006760 <srand+0x4c>)
 8006730:	2146      	movs	r1, #70	@ 0x46
 8006732:	f000 f9dd 	bl	8006af0 <__assert_func>
 8006736:	490b      	ldr	r1, [pc, #44]	@ (8006764 <srand+0x50>)
 8006738:	4b0b      	ldr	r3, [pc, #44]	@ (8006768 <srand+0x54>)
 800673a:	e9c0 1300 	strd	r1, r3, [r0]
 800673e:	4b0b      	ldr	r3, [pc, #44]	@ (800676c <srand+0x58>)
 8006740:	6083      	str	r3, [r0, #8]
 8006742:	230b      	movs	r3, #11
 8006744:	8183      	strh	r3, [r0, #12]
 8006746:	2100      	movs	r1, #0
 8006748:	2001      	movs	r0, #1
 800674a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800674e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8006750:	2200      	movs	r2, #0
 8006752:	611c      	str	r4, [r3, #16]
 8006754:	615a      	str	r2, [r3, #20]
 8006756:	bd38      	pop	{r3, r4, r5, pc}
 8006758:	20000020 	.word	0x20000020
 800675c:	0801ad38 	.word	0x0801ad38
 8006760:	0801ad4f 	.word	0x0801ad4f
 8006764:	abcd330e 	.word	0xabcd330e
 8006768:	e66d1234 	.word	0xe66d1234
 800676c:	0005deec 	.word	0x0005deec

08006770 <rand>:
 8006770:	4b16      	ldr	r3, [pc, #88]	@ (80067cc <rand+0x5c>)
 8006772:	b510      	push	{r4, lr}
 8006774:	681c      	ldr	r4, [r3, #0]
 8006776:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006778:	b9b3      	cbnz	r3, 80067a8 <rand+0x38>
 800677a:	2018      	movs	r0, #24
 800677c:	f000 fa20 	bl	8006bc0 <malloc>
 8006780:	4602      	mov	r2, r0
 8006782:	6320      	str	r0, [r4, #48]	@ 0x30
 8006784:	b920      	cbnz	r0, 8006790 <rand+0x20>
 8006786:	4b12      	ldr	r3, [pc, #72]	@ (80067d0 <rand+0x60>)
 8006788:	4812      	ldr	r0, [pc, #72]	@ (80067d4 <rand+0x64>)
 800678a:	2152      	movs	r1, #82	@ 0x52
 800678c:	f000 f9b0 	bl	8006af0 <__assert_func>
 8006790:	4911      	ldr	r1, [pc, #68]	@ (80067d8 <rand+0x68>)
 8006792:	4b12      	ldr	r3, [pc, #72]	@ (80067dc <rand+0x6c>)
 8006794:	e9c0 1300 	strd	r1, r3, [r0]
 8006798:	4b11      	ldr	r3, [pc, #68]	@ (80067e0 <rand+0x70>)
 800679a:	6083      	str	r3, [r0, #8]
 800679c:	230b      	movs	r3, #11
 800679e:	8183      	strh	r3, [r0, #12]
 80067a0:	2100      	movs	r1, #0
 80067a2:	2001      	movs	r0, #1
 80067a4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80067a8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80067aa:	480e      	ldr	r0, [pc, #56]	@ (80067e4 <rand+0x74>)
 80067ac:	690b      	ldr	r3, [r1, #16]
 80067ae:	694c      	ldr	r4, [r1, #20]
 80067b0:	4a0d      	ldr	r2, [pc, #52]	@ (80067e8 <rand+0x78>)
 80067b2:	4358      	muls	r0, r3
 80067b4:	fb02 0004 	mla	r0, r2, r4, r0
 80067b8:	fba3 3202 	umull	r3, r2, r3, r2
 80067bc:	3301      	adds	r3, #1
 80067be:	eb40 0002 	adc.w	r0, r0, r2
 80067c2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80067c6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80067ca:	bd10      	pop	{r4, pc}
 80067cc:	20000020 	.word	0x20000020
 80067d0:	0801ad38 	.word	0x0801ad38
 80067d4:	0801ad4f 	.word	0x0801ad4f
 80067d8:	abcd330e 	.word	0xabcd330e
 80067dc:	e66d1234 	.word	0xe66d1234
 80067e0:	0005deec 	.word	0x0005deec
 80067e4:	5851f42d 	.word	0x5851f42d
 80067e8:	4c957f2d 	.word	0x4c957f2d

080067ec <std>:
 80067ec:	2300      	movs	r3, #0
 80067ee:	b510      	push	{r4, lr}
 80067f0:	4604      	mov	r4, r0
 80067f2:	e9c0 3300 	strd	r3, r3, [r0]
 80067f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80067fa:	6083      	str	r3, [r0, #8]
 80067fc:	8181      	strh	r1, [r0, #12]
 80067fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8006800:	81c2      	strh	r2, [r0, #14]
 8006802:	6183      	str	r3, [r0, #24]
 8006804:	4619      	mov	r1, r3
 8006806:	2208      	movs	r2, #8
 8006808:	305c      	adds	r0, #92	@ 0x5c
 800680a:	f000 f8f4 	bl	80069f6 <memset>
 800680e:	4b0d      	ldr	r3, [pc, #52]	@ (8006844 <std+0x58>)
 8006810:	6263      	str	r3, [r4, #36]	@ 0x24
 8006812:	4b0d      	ldr	r3, [pc, #52]	@ (8006848 <std+0x5c>)
 8006814:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006816:	4b0d      	ldr	r3, [pc, #52]	@ (800684c <std+0x60>)
 8006818:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800681a:	4b0d      	ldr	r3, [pc, #52]	@ (8006850 <std+0x64>)
 800681c:	6323      	str	r3, [r4, #48]	@ 0x30
 800681e:	4b0d      	ldr	r3, [pc, #52]	@ (8006854 <std+0x68>)
 8006820:	6224      	str	r4, [r4, #32]
 8006822:	429c      	cmp	r4, r3
 8006824:	d006      	beq.n	8006834 <std+0x48>
 8006826:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800682a:	4294      	cmp	r4, r2
 800682c:	d002      	beq.n	8006834 <std+0x48>
 800682e:	33d0      	adds	r3, #208	@ 0xd0
 8006830:	429c      	cmp	r4, r3
 8006832:	d105      	bne.n	8006840 <std+0x54>
 8006834:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800683c:	f000 b954 	b.w	8006ae8 <__retarget_lock_init_recursive>
 8006840:	bd10      	pop	{r4, pc}
 8006842:	bf00      	nop
 8006844:	08006971 	.word	0x08006971
 8006848:	08006993 	.word	0x08006993
 800684c:	080069cb 	.word	0x080069cb
 8006850:	080069ef 	.word	0x080069ef
 8006854:	20004ea4 	.word	0x20004ea4

08006858 <stdio_exit_handler>:
 8006858:	4a02      	ldr	r2, [pc, #8]	@ (8006864 <stdio_exit_handler+0xc>)
 800685a:	4903      	ldr	r1, [pc, #12]	@ (8006868 <stdio_exit_handler+0x10>)
 800685c:	4803      	ldr	r0, [pc, #12]	@ (800686c <stdio_exit_handler+0x14>)
 800685e:	f000 b869 	b.w	8006934 <_fwalk_sglue>
 8006862:	bf00      	nop
 8006864:	20000014 	.word	0x20000014
 8006868:	08006e35 	.word	0x08006e35
 800686c:	20000024 	.word	0x20000024

08006870 <cleanup_stdio>:
 8006870:	6841      	ldr	r1, [r0, #4]
 8006872:	4b0c      	ldr	r3, [pc, #48]	@ (80068a4 <cleanup_stdio+0x34>)
 8006874:	4299      	cmp	r1, r3
 8006876:	b510      	push	{r4, lr}
 8006878:	4604      	mov	r4, r0
 800687a:	d001      	beq.n	8006880 <cleanup_stdio+0x10>
 800687c:	f000 fada 	bl	8006e34 <_fflush_r>
 8006880:	68a1      	ldr	r1, [r4, #8]
 8006882:	4b09      	ldr	r3, [pc, #36]	@ (80068a8 <cleanup_stdio+0x38>)
 8006884:	4299      	cmp	r1, r3
 8006886:	d002      	beq.n	800688e <cleanup_stdio+0x1e>
 8006888:	4620      	mov	r0, r4
 800688a:	f000 fad3 	bl	8006e34 <_fflush_r>
 800688e:	68e1      	ldr	r1, [r4, #12]
 8006890:	4b06      	ldr	r3, [pc, #24]	@ (80068ac <cleanup_stdio+0x3c>)
 8006892:	4299      	cmp	r1, r3
 8006894:	d004      	beq.n	80068a0 <cleanup_stdio+0x30>
 8006896:	4620      	mov	r0, r4
 8006898:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800689c:	f000 baca 	b.w	8006e34 <_fflush_r>
 80068a0:	bd10      	pop	{r4, pc}
 80068a2:	bf00      	nop
 80068a4:	20004ea4 	.word	0x20004ea4
 80068a8:	20004f0c 	.word	0x20004f0c
 80068ac:	20004f74 	.word	0x20004f74

080068b0 <global_stdio_init.part.0>:
 80068b0:	b510      	push	{r4, lr}
 80068b2:	4b0b      	ldr	r3, [pc, #44]	@ (80068e0 <global_stdio_init.part.0+0x30>)
 80068b4:	4c0b      	ldr	r4, [pc, #44]	@ (80068e4 <global_stdio_init.part.0+0x34>)
 80068b6:	4a0c      	ldr	r2, [pc, #48]	@ (80068e8 <global_stdio_init.part.0+0x38>)
 80068b8:	601a      	str	r2, [r3, #0]
 80068ba:	4620      	mov	r0, r4
 80068bc:	2200      	movs	r2, #0
 80068be:	2104      	movs	r1, #4
 80068c0:	f7ff ff94 	bl	80067ec <std>
 80068c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80068c8:	2201      	movs	r2, #1
 80068ca:	2109      	movs	r1, #9
 80068cc:	f7ff ff8e 	bl	80067ec <std>
 80068d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80068d4:	2202      	movs	r2, #2
 80068d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068da:	2112      	movs	r1, #18
 80068dc:	f7ff bf86 	b.w	80067ec <std>
 80068e0:	20004fdc 	.word	0x20004fdc
 80068e4:	20004ea4 	.word	0x20004ea4
 80068e8:	08006859 	.word	0x08006859

080068ec <__sfp_lock_acquire>:
 80068ec:	4801      	ldr	r0, [pc, #4]	@ (80068f4 <__sfp_lock_acquire+0x8>)
 80068ee:	f000 b8fc 	b.w	8006aea <__retarget_lock_acquire_recursive>
 80068f2:	bf00      	nop
 80068f4:	20004fe5 	.word	0x20004fe5

080068f8 <__sfp_lock_release>:
 80068f8:	4801      	ldr	r0, [pc, #4]	@ (8006900 <__sfp_lock_release+0x8>)
 80068fa:	f000 b8f7 	b.w	8006aec <__retarget_lock_release_recursive>
 80068fe:	bf00      	nop
 8006900:	20004fe5 	.word	0x20004fe5

08006904 <__sinit>:
 8006904:	b510      	push	{r4, lr}
 8006906:	4604      	mov	r4, r0
 8006908:	f7ff fff0 	bl	80068ec <__sfp_lock_acquire>
 800690c:	6a23      	ldr	r3, [r4, #32]
 800690e:	b11b      	cbz	r3, 8006918 <__sinit+0x14>
 8006910:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006914:	f7ff bff0 	b.w	80068f8 <__sfp_lock_release>
 8006918:	4b04      	ldr	r3, [pc, #16]	@ (800692c <__sinit+0x28>)
 800691a:	6223      	str	r3, [r4, #32]
 800691c:	4b04      	ldr	r3, [pc, #16]	@ (8006930 <__sinit+0x2c>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d1f5      	bne.n	8006910 <__sinit+0xc>
 8006924:	f7ff ffc4 	bl	80068b0 <global_stdio_init.part.0>
 8006928:	e7f2      	b.n	8006910 <__sinit+0xc>
 800692a:	bf00      	nop
 800692c:	08006871 	.word	0x08006871
 8006930:	20004fdc 	.word	0x20004fdc

08006934 <_fwalk_sglue>:
 8006934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006938:	4607      	mov	r7, r0
 800693a:	4688      	mov	r8, r1
 800693c:	4614      	mov	r4, r2
 800693e:	2600      	movs	r6, #0
 8006940:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006944:	f1b9 0901 	subs.w	r9, r9, #1
 8006948:	d505      	bpl.n	8006956 <_fwalk_sglue+0x22>
 800694a:	6824      	ldr	r4, [r4, #0]
 800694c:	2c00      	cmp	r4, #0
 800694e:	d1f7      	bne.n	8006940 <_fwalk_sglue+0xc>
 8006950:	4630      	mov	r0, r6
 8006952:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006956:	89ab      	ldrh	r3, [r5, #12]
 8006958:	2b01      	cmp	r3, #1
 800695a:	d907      	bls.n	800696c <_fwalk_sglue+0x38>
 800695c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006960:	3301      	adds	r3, #1
 8006962:	d003      	beq.n	800696c <_fwalk_sglue+0x38>
 8006964:	4629      	mov	r1, r5
 8006966:	4638      	mov	r0, r7
 8006968:	47c0      	blx	r8
 800696a:	4306      	orrs	r6, r0
 800696c:	3568      	adds	r5, #104	@ 0x68
 800696e:	e7e9      	b.n	8006944 <_fwalk_sglue+0x10>

08006970 <__sread>:
 8006970:	b510      	push	{r4, lr}
 8006972:	460c      	mov	r4, r1
 8006974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006978:	f000 f868 	bl	8006a4c <_read_r>
 800697c:	2800      	cmp	r0, #0
 800697e:	bfab      	itete	ge
 8006980:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006982:	89a3      	ldrhlt	r3, [r4, #12]
 8006984:	181b      	addge	r3, r3, r0
 8006986:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800698a:	bfac      	ite	ge
 800698c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800698e:	81a3      	strhlt	r3, [r4, #12]
 8006990:	bd10      	pop	{r4, pc}

08006992 <__swrite>:
 8006992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006996:	461f      	mov	r7, r3
 8006998:	898b      	ldrh	r3, [r1, #12]
 800699a:	05db      	lsls	r3, r3, #23
 800699c:	4605      	mov	r5, r0
 800699e:	460c      	mov	r4, r1
 80069a0:	4616      	mov	r6, r2
 80069a2:	d505      	bpl.n	80069b0 <__swrite+0x1e>
 80069a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069a8:	2302      	movs	r3, #2
 80069aa:	2200      	movs	r2, #0
 80069ac:	f000 f83c 	bl	8006a28 <_lseek_r>
 80069b0:	89a3      	ldrh	r3, [r4, #12]
 80069b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80069b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80069ba:	81a3      	strh	r3, [r4, #12]
 80069bc:	4632      	mov	r2, r6
 80069be:	463b      	mov	r3, r7
 80069c0:	4628      	mov	r0, r5
 80069c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80069c6:	f000 b853 	b.w	8006a70 <_write_r>

080069ca <__sseek>:
 80069ca:	b510      	push	{r4, lr}
 80069cc:	460c      	mov	r4, r1
 80069ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069d2:	f000 f829 	bl	8006a28 <_lseek_r>
 80069d6:	1c43      	adds	r3, r0, #1
 80069d8:	89a3      	ldrh	r3, [r4, #12]
 80069da:	bf15      	itete	ne
 80069dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80069de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80069e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80069e6:	81a3      	strheq	r3, [r4, #12]
 80069e8:	bf18      	it	ne
 80069ea:	81a3      	strhne	r3, [r4, #12]
 80069ec:	bd10      	pop	{r4, pc}

080069ee <__sclose>:
 80069ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069f2:	f000 b809 	b.w	8006a08 <_close_r>

080069f6 <memset>:
 80069f6:	4402      	add	r2, r0
 80069f8:	4603      	mov	r3, r0
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d100      	bne.n	8006a00 <memset+0xa>
 80069fe:	4770      	bx	lr
 8006a00:	f803 1b01 	strb.w	r1, [r3], #1
 8006a04:	e7f9      	b.n	80069fa <memset+0x4>
	...

08006a08 <_close_r>:
 8006a08:	b538      	push	{r3, r4, r5, lr}
 8006a0a:	4d06      	ldr	r5, [pc, #24]	@ (8006a24 <_close_r+0x1c>)
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	4604      	mov	r4, r0
 8006a10:	4608      	mov	r0, r1
 8006a12:	602b      	str	r3, [r5, #0]
 8006a14:	f7fb fb0c 	bl	8002030 <_close>
 8006a18:	1c43      	adds	r3, r0, #1
 8006a1a:	d102      	bne.n	8006a22 <_close_r+0x1a>
 8006a1c:	682b      	ldr	r3, [r5, #0]
 8006a1e:	b103      	cbz	r3, 8006a22 <_close_r+0x1a>
 8006a20:	6023      	str	r3, [r4, #0]
 8006a22:	bd38      	pop	{r3, r4, r5, pc}
 8006a24:	20004fe0 	.word	0x20004fe0

08006a28 <_lseek_r>:
 8006a28:	b538      	push	{r3, r4, r5, lr}
 8006a2a:	4d07      	ldr	r5, [pc, #28]	@ (8006a48 <_lseek_r+0x20>)
 8006a2c:	4604      	mov	r4, r0
 8006a2e:	4608      	mov	r0, r1
 8006a30:	4611      	mov	r1, r2
 8006a32:	2200      	movs	r2, #0
 8006a34:	602a      	str	r2, [r5, #0]
 8006a36:	461a      	mov	r2, r3
 8006a38:	f7fb fb21 	bl	800207e <_lseek>
 8006a3c:	1c43      	adds	r3, r0, #1
 8006a3e:	d102      	bne.n	8006a46 <_lseek_r+0x1e>
 8006a40:	682b      	ldr	r3, [r5, #0]
 8006a42:	b103      	cbz	r3, 8006a46 <_lseek_r+0x1e>
 8006a44:	6023      	str	r3, [r4, #0]
 8006a46:	bd38      	pop	{r3, r4, r5, pc}
 8006a48:	20004fe0 	.word	0x20004fe0

08006a4c <_read_r>:
 8006a4c:	b538      	push	{r3, r4, r5, lr}
 8006a4e:	4d07      	ldr	r5, [pc, #28]	@ (8006a6c <_read_r+0x20>)
 8006a50:	4604      	mov	r4, r0
 8006a52:	4608      	mov	r0, r1
 8006a54:	4611      	mov	r1, r2
 8006a56:	2200      	movs	r2, #0
 8006a58:	602a      	str	r2, [r5, #0]
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	f7fb faaf 	bl	8001fbe <_read>
 8006a60:	1c43      	adds	r3, r0, #1
 8006a62:	d102      	bne.n	8006a6a <_read_r+0x1e>
 8006a64:	682b      	ldr	r3, [r5, #0]
 8006a66:	b103      	cbz	r3, 8006a6a <_read_r+0x1e>
 8006a68:	6023      	str	r3, [r4, #0]
 8006a6a:	bd38      	pop	{r3, r4, r5, pc}
 8006a6c:	20004fe0 	.word	0x20004fe0

08006a70 <_write_r>:
 8006a70:	b538      	push	{r3, r4, r5, lr}
 8006a72:	4d07      	ldr	r5, [pc, #28]	@ (8006a90 <_write_r+0x20>)
 8006a74:	4604      	mov	r4, r0
 8006a76:	4608      	mov	r0, r1
 8006a78:	4611      	mov	r1, r2
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	602a      	str	r2, [r5, #0]
 8006a7e:	461a      	mov	r2, r3
 8006a80:	f7fb faba 	bl	8001ff8 <_write>
 8006a84:	1c43      	adds	r3, r0, #1
 8006a86:	d102      	bne.n	8006a8e <_write_r+0x1e>
 8006a88:	682b      	ldr	r3, [r5, #0]
 8006a8a:	b103      	cbz	r3, 8006a8e <_write_r+0x1e>
 8006a8c:	6023      	str	r3, [r4, #0]
 8006a8e:	bd38      	pop	{r3, r4, r5, pc}
 8006a90:	20004fe0 	.word	0x20004fe0

08006a94 <__errno>:
 8006a94:	4b01      	ldr	r3, [pc, #4]	@ (8006a9c <__errno+0x8>)
 8006a96:	6818      	ldr	r0, [r3, #0]
 8006a98:	4770      	bx	lr
 8006a9a:	bf00      	nop
 8006a9c:	20000020 	.word	0x20000020

08006aa0 <__libc_init_array>:
 8006aa0:	b570      	push	{r4, r5, r6, lr}
 8006aa2:	4d0d      	ldr	r5, [pc, #52]	@ (8006ad8 <__libc_init_array+0x38>)
 8006aa4:	4c0d      	ldr	r4, [pc, #52]	@ (8006adc <__libc_init_array+0x3c>)
 8006aa6:	1b64      	subs	r4, r4, r5
 8006aa8:	10a4      	asrs	r4, r4, #2
 8006aaa:	2600      	movs	r6, #0
 8006aac:	42a6      	cmp	r6, r4
 8006aae:	d109      	bne.n	8006ac4 <__libc_init_array+0x24>
 8006ab0:	4d0b      	ldr	r5, [pc, #44]	@ (8006ae0 <__libc_init_array+0x40>)
 8006ab2:	4c0c      	ldr	r4, [pc, #48]	@ (8006ae4 <__libc_init_array+0x44>)
 8006ab4:	f000 fefc 	bl	80078b0 <_init>
 8006ab8:	1b64      	subs	r4, r4, r5
 8006aba:	10a4      	asrs	r4, r4, #2
 8006abc:	2600      	movs	r6, #0
 8006abe:	42a6      	cmp	r6, r4
 8006ac0:	d105      	bne.n	8006ace <__libc_init_array+0x2e>
 8006ac2:	bd70      	pop	{r4, r5, r6, pc}
 8006ac4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ac8:	4798      	blx	r3
 8006aca:	3601      	adds	r6, #1
 8006acc:	e7ee      	b.n	8006aac <__libc_init_array+0xc>
 8006ace:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ad2:	4798      	blx	r3
 8006ad4:	3601      	adds	r6, #1
 8006ad6:	e7f2      	b.n	8006abe <__libc_init_array+0x1e>
 8006ad8:	0801ae28 	.word	0x0801ae28
 8006adc:	0801ae28 	.word	0x0801ae28
 8006ae0:	0801ae28 	.word	0x0801ae28
 8006ae4:	0801ae2c 	.word	0x0801ae2c

08006ae8 <__retarget_lock_init_recursive>:
 8006ae8:	4770      	bx	lr

08006aea <__retarget_lock_acquire_recursive>:
 8006aea:	4770      	bx	lr

08006aec <__retarget_lock_release_recursive>:
 8006aec:	4770      	bx	lr
	...

08006af0 <__assert_func>:
 8006af0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006af2:	4614      	mov	r4, r2
 8006af4:	461a      	mov	r2, r3
 8006af6:	4b09      	ldr	r3, [pc, #36]	@ (8006b1c <__assert_func+0x2c>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4605      	mov	r5, r0
 8006afc:	68d8      	ldr	r0, [r3, #12]
 8006afe:	b14c      	cbz	r4, 8006b14 <__assert_func+0x24>
 8006b00:	4b07      	ldr	r3, [pc, #28]	@ (8006b20 <__assert_func+0x30>)
 8006b02:	9100      	str	r1, [sp, #0]
 8006b04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006b08:	4906      	ldr	r1, [pc, #24]	@ (8006b24 <__assert_func+0x34>)
 8006b0a:	462b      	mov	r3, r5
 8006b0c:	f000 f9ba 	bl	8006e84 <fiprintf>
 8006b10:	f000 f9da 	bl	8006ec8 <abort>
 8006b14:	4b04      	ldr	r3, [pc, #16]	@ (8006b28 <__assert_func+0x38>)
 8006b16:	461c      	mov	r4, r3
 8006b18:	e7f3      	b.n	8006b02 <__assert_func+0x12>
 8006b1a:	bf00      	nop
 8006b1c:	20000020 	.word	0x20000020
 8006b20:	0801ada7 	.word	0x0801ada7
 8006b24:	0801adb4 	.word	0x0801adb4
 8006b28:	0801ade2 	.word	0x0801ade2

08006b2c <_free_r>:
 8006b2c:	b538      	push	{r3, r4, r5, lr}
 8006b2e:	4605      	mov	r5, r0
 8006b30:	2900      	cmp	r1, #0
 8006b32:	d041      	beq.n	8006bb8 <_free_r+0x8c>
 8006b34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b38:	1f0c      	subs	r4, r1, #4
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	bfb8      	it	lt
 8006b3e:	18e4      	addlt	r4, r4, r3
 8006b40:	f000 f8e8 	bl	8006d14 <__malloc_lock>
 8006b44:	4a1d      	ldr	r2, [pc, #116]	@ (8006bbc <_free_r+0x90>)
 8006b46:	6813      	ldr	r3, [r2, #0]
 8006b48:	b933      	cbnz	r3, 8006b58 <_free_r+0x2c>
 8006b4a:	6063      	str	r3, [r4, #4]
 8006b4c:	6014      	str	r4, [r2, #0]
 8006b4e:	4628      	mov	r0, r5
 8006b50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b54:	f000 b8e4 	b.w	8006d20 <__malloc_unlock>
 8006b58:	42a3      	cmp	r3, r4
 8006b5a:	d908      	bls.n	8006b6e <_free_r+0x42>
 8006b5c:	6820      	ldr	r0, [r4, #0]
 8006b5e:	1821      	adds	r1, r4, r0
 8006b60:	428b      	cmp	r3, r1
 8006b62:	bf01      	itttt	eq
 8006b64:	6819      	ldreq	r1, [r3, #0]
 8006b66:	685b      	ldreq	r3, [r3, #4]
 8006b68:	1809      	addeq	r1, r1, r0
 8006b6a:	6021      	streq	r1, [r4, #0]
 8006b6c:	e7ed      	b.n	8006b4a <_free_r+0x1e>
 8006b6e:	461a      	mov	r2, r3
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	b10b      	cbz	r3, 8006b78 <_free_r+0x4c>
 8006b74:	42a3      	cmp	r3, r4
 8006b76:	d9fa      	bls.n	8006b6e <_free_r+0x42>
 8006b78:	6811      	ldr	r1, [r2, #0]
 8006b7a:	1850      	adds	r0, r2, r1
 8006b7c:	42a0      	cmp	r0, r4
 8006b7e:	d10b      	bne.n	8006b98 <_free_r+0x6c>
 8006b80:	6820      	ldr	r0, [r4, #0]
 8006b82:	4401      	add	r1, r0
 8006b84:	1850      	adds	r0, r2, r1
 8006b86:	4283      	cmp	r3, r0
 8006b88:	6011      	str	r1, [r2, #0]
 8006b8a:	d1e0      	bne.n	8006b4e <_free_r+0x22>
 8006b8c:	6818      	ldr	r0, [r3, #0]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	6053      	str	r3, [r2, #4]
 8006b92:	4408      	add	r0, r1
 8006b94:	6010      	str	r0, [r2, #0]
 8006b96:	e7da      	b.n	8006b4e <_free_r+0x22>
 8006b98:	d902      	bls.n	8006ba0 <_free_r+0x74>
 8006b9a:	230c      	movs	r3, #12
 8006b9c:	602b      	str	r3, [r5, #0]
 8006b9e:	e7d6      	b.n	8006b4e <_free_r+0x22>
 8006ba0:	6820      	ldr	r0, [r4, #0]
 8006ba2:	1821      	adds	r1, r4, r0
 8006ba4:	428b      	cmp	r3, r1
 8006ba6:	bf04      	itt	eq
 8006ba8:	6819      	ldreq	r1, [r3, #0]
 8006baa:	685b      	ldreq	r3, [r3, #4]
 8006bac:	6063      	str	r3, [r4, #4]
 8006bae:	bf04      	itt	eq
 8006bb0:	1809      	addeq	r1, r1, r0
 8006bb2:	6021      	streq	r1, [r4, #0]
 8006bb4:	6054      	str	r4, [r2, #4]
 8006bb6:	e7ca      	b.n	8006b4e <_free_r+0x22>
 8006bb8:	bd38      	pop	{r3, r4, r5, pc}
 8006bba:	bf00      	nop
 8006bbc:	20004fec 	.word	0x20004fec

08006bc0 <malloc>:
 8006bc0:	4b02      	ldr	r3, [pc, #8]	@ (8006bcc <malloc+0xc>)
 8006bc2:	4601      	mov	r1, r0
 8006bc4:	6818      	ldr	r0, [r3, #0]
 8006bc6:	f000 b825 	b.w	8006c14 <_malloc_r>
 8006bca:	bf00      	nop
 8006bcc:	20000020 	.word	0x20000020

08006bd0 <sbrk_aligned>:
 8006bd0:	b570      	push	{r4, r5, r6, lr}
 8006bd2:	4e0f      	ldr	r6, [pc, #60]	@ (8006c10 <sbrk_aligned+0x40>)
 8006bd4:	460c      	mov	r4, r1
 8006bd6:	6831      	ldr	r1, [r6, #0]
 8006bd8:	4605      	mov	r5, r0
 8006bda:	b911      	cbnz	r1, 8006be2 <sbrk_aligned+0x12>
 8006bdc:	f000 f964 	bl	8006ea8 <_sbrk_r>
 8006be0:	6030      	str	r0, [r6, #0]
 8006be2:	4621      	mov	r1, r4
 8006be4:	4628      	mov	r0, r5
 8006be6:	f000 f95f 	bl	8006ea8 <_sbrk_r>
 8006bea:	1c43      	adds	r3, r0, #1
 8006bec:	d103      	bne.n	8006bf6 <sbrk_aligned+0x26>
 8006bee:	f04f 34ff 	mov.w	r4, #4294967295
 8006bf2:	4620      	mov	r0, r4
 8006bf4:	bd70      	pop	{r4, r5, r6, pc}
 8006bf6:	1cc4      	adds	r4, r0, #3
 8006bf8:	f024 0403 	bic.w	r4, r4, #3
 8006bfc:	42a0      	cmp	r0, r4
 8006bfe:	d0f8      	beq.n	8006bf2 <sbrk_aligned+0x22>
 8006c00:	1a21      	subs	r1, r4, r0
 8006c02:	4628      	mov	r0, r5
 8006c04:	f000 f950 	bl	8006ea8 <_sbrk_r>
 8006c08:	3001      	adds	r0, #1
 8006c0a:	d1f2      	bne.n	8006bf2 <sbrk_aligned+0x22>
 8006c0c:	e7ef      	b.n	8006bee <sbrk_aligned+0x1e>
 8006c0e:	bf00      	nop
 8006c10:	20004fe8 	.word	0x20004fe8

08006c14 <_malloc_r>:
 8006c14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c18:	1ccd      	adds	r5, r1, #3
 8006c1a:	f025 0503 	bic.w	r5, r5, #3
 8006c1e:	3508      	adds	r5, #8
 8006c20:	2d0c      	cmp	r5, #12
 8006c22:	bf38      	it	cc
 8006c24:	250c      	movcc	r5, #12
 8006c26:	2d00      	cmp	r5, #0
 8006c28:	4606      	mov	r6, r0
 8006c2a:	db01      	blt.n	8006c30 <_malloc_r+0x1c>
 8006c2c:	42a9      	cmp	r1, r5
 8006c2e:	d904      	bls.n	8006c3a <_malloc_r+0x26>
 8006c30:	230c      	movs	r3, #12
 8006c32:	6033      	str	r3, [r6, #0]
 8006c34:	2000      	movs	r0, #0
 8006c36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c3a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006d10 <_malloc_r+0xfc>
 8006c3e:	f000 f869 	bl	8006d14 <__malloc_lock>
 8006c42:	f8d8 3000 	ldr.w	r3, [r8]
 8006c46:	461c      	mov	r4, r3
 8006c48:	bb44      	cbnz	r4, 8006c9c <_malloc_r+0x88>
 8006c4a:	4629      	mov	r1, r5
 8006c4c:	4630      	mov	r0, r6
 8006c4e:	f7ff ffbf 	bl	8006bd0 <sbrk_aligned>
 8006c52:	1c43      	adds	r3, r0, #1
 8006c54:	4604      	mov	r4, r0
 8006c56:	d158      	bne.n	8006d0a <_malloc_r+0xf6>
 8006c58:	f8d8 4000 	ldr.w	r4, [r8]
 8006c5c:	4627      	mov	r7, r4
 8006c5e:	2f00      	cmp	r7, #0
 8006c60:	d143      	bne.n	8006cea <_malloc_r+0xd6>
 8006c62:	2c00      	cmp	r4, #0
 8006c64:	d04b      	beq.n	8006cfe <_malloc_r+0xea>
 8006c66:	6823      	ldr	r3, [r4, #0]
 8006c68:	4639      	mov	r1, r7
 8006c6a:	4630      	mov	r0, r6
 8006c6c:	eb04 0903 	add.w	r9, r4, r3
 8006c70:	f000 f91a 	bl	8006ea8 <_sbrk_r>
 8006c74:	4581      	cmp	r9, r0
 8006c76:	d142      	bne.n	8006cfe <_malloc_r+0xea>
 8006c78:	6821      	ldr	r1, [r4, #0]
 8006c7a:	1a6d      	subs	r5, r5, r1
 8006c7c:	4629      	mov	r1, r5
 8006c7e:	4630      	mov	r0, r6
 8006c80:	f7ff ffa6 	bl	8006bd0 <sbrk_aligned>
 8006c84:	3001      	adds	r0, #1
 8006c86:	d03a      	beq.n	8006cfe <_malloc_r+0xea>
 8006c88:	6823      	ldr	r3, [r4, #0]
 8006c8a:	442b      	add	r3, r5
 8006c8c:	6023      	str	r3, [r4, #0]
 8006c8e:	f8d8 3000 	ldr.w	r3, [r8]
 8006c92:	685a      	ldr	r2, [r3, #4]
 8006c94:	bb62      	cbnz	r2, 8006cf0 <_malloc_r+0xdc>
 8006c96:	f8c8 7000 	str.w	r7, [r8]
 8006c9a:	e00f      	b.n	8006cbc <_malloc_r+0xa8>
 8006c9c:	6822      	ldr	r2, [r4, #0]
 8006c9e:	1b52      	subs	r2, r2, r5
 8006ca0:	d420      	bmi.n	8006ce4 <_malloc_r+0xd0>
 8006ca2:	2a0b      	cmp	r2, #11
 8006ca4:	d917      	bls.n	8006cd6 <_malloc_r+0xc2>
 8006ca6:	1961      	adds	r1, r4, r5
 8006ca8:	42a3      	cmp	r3, r4
 8006caa:	6025      	str	r5, [r4, #0]
 8006cac:	bf18      	it	ne
 8006cae:	6059      	strne	r1, [r3, #4]
 8006cb0:	6863      	ldr	r3, [r4, #4]
 8006cb2:	bf08      	it	eq
 8006cb4:	f8c8 1000 	streq.w	r1, [r8]
 8006cb8:	5162      	str	r2, [r4, r5]
 8006cba:	604b      	str	r3, [r1, #4]
 8006cbc:	4630      	mov	r0, r6
 8006cbe:	f000 f82f 	bl	8006d20 <__malloc_unlock>
 8006cc2:	f104 000b 	add.w	r0, r4, #11
 8006cc6:	1d23      	adds	r3, r4, #4
 8006cc8:	f020 0007 	bic.w	r0, r0, #7
 8006ccc:	1ac2      	subs	r2, r0, r3
 8006cce:	bf1c      	itt	ne
 8006cd0:	1a1b      	subne	r3, r3, r0
 8006cd2:	50a3      	strne	r3, [r4, r2]
 8006cd4:	e7af      	b.n	8006c36 <_malloc_r+0x22>
 8006cd6:	6862      	ldr	r2, [r4, #4]
 8006cd8:	42a3      	cmp	r3, r4
 8006cda:	bf0c      	ite	eq
 8006cdc:	f8c8 2000 	streq.w	r2, [r8]
 8006ce0:	605a      	strne	r2, [r3, #4]
 8006ce2:	e7eb      	b.n	8006cbc <_malloc_r+0xa8>
 8006ce4:	4623      	mov	r3, r4
 8006ce6:	6864      	ldr	r4, [r4, #4]
 8006ce8:	e7ae      	b.n	8006c48 <_malloc_r+0x34>
 8006cea:	463c      	mov	r4, r7
 8006cec:	687f      	ldr	r7, [r7, #4]
 8006cee:	e7b6      	b.n	8006c5e <_malloc_r+0x4a>
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	42a3      	cmp	r3, r4
 8006cf6:	d1fb      	bne.n	8006cf0 <_malloc_r+0xdc>
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	6053      	str	r3, [r2, #4]
 8006cfc:	e7de      	b.n	8006cbc <_malloc_r+0xa8>
 8006cfe:	230c      	movs	r3, #12
 8006d00:	6033      	str	r3, [r6, #0]
 8006d02:	4630      	mov	r0, r6
 8006d04:	f000 f80c 	bl	8006d20 <__malloc_unlock>
 8006d08:	e794      	b.n	8006c34 <_malloc_r+0x20>
 8006d0a:	6005      	str	r5, [r0, #0]
 8006d0c:	e7d6      	b.n	8006cbc <_malloc_r+0xa8>
 8006d0e:	bf00      	nop
 8006d10:	20004fec 	.word	0x20004fec

08006d14 <__malloc_lock>:
 8006d14:	4801      	ldr	r0, [pc, #4]	@ (8006d1c <__malloc_lock+0x8>)
 8006d16:	f7ff bee8 	b.w	8006aea <__retarget_lock_acquire_recursive>
 8006d1a:	bf00      	nop
 8006d1c:	20004fe4 	.word	0x20004fe4

08006d20 <__malloc_unlock>:
 8006d20:	4801      	ldr	r0, [pc, #4]	@ (8006d28 <__malloc_unlock+0x8>)
 8006d22:	f7ff bee3 	b.w	8006aec <__retarget_lock_release_recursive>
 8006d26:	bf00      	nop
 8006d28:	20004fe4 	.word	0x20004fe4

08006d2c <__sflush_r>:
 8006d2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d34:	0716      	lsls	r6, r2, #28
 8006d36:	4605      	mov	r5, r0
 8006d38:	460c      	mov	r4, r1
 8006d3a:	d454      	bmi.n	8006de6 <__sflush_r+0xba>
 8006d3c:	684b      	ldr	r3, [r1, #4]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	dc02      	bgt.n	8006d48 <__sflush_r+0x1c>
 8006d42:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	dd48      	ble.n	8006dda <__sflush_r+0xae>
 8006d48:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006d4a:	2e00      	cmp	r6, #0
 8006d4c:	d045      	beq.n	8006dda <__sflush_r+0xae>
 8006d4e:	2300      	movs	r3, #0
 8006d50:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006d54:	682f      	ldr	r7, [r5, #0]
 8006d56:	6a21      	ldr	r1, [r4, #32]
 8006d58:	602b      	str	r3, [r5, #0]
 8006d5a:	d030      	beq.n	8006dbe <__sflush_r+0x92>
 8006d5c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006d5e:	89a3      	ldrh	r3, [r4, #12]
 8006d60:	0759      	lsls	r1, r3, #29
 8006d62:	d505      	bpl.n	8006d70 <__sflush_r+0x44>
 8006d64:	6863      	ldr	r3, [r4, #4]
 8006d66:	1ad2      	subs	r2, r2, r3
 8006d68:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006d6a:	b10b      	cbz	r3, 8006d70 <__sflush_r+0x44>
 8006d6c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006d6e:	1ad2      	subs	r2, r2, r3
 8006d70:	2300      	movs	r3, #0
 8006d72:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006d74:	6a21      	ldr	r1, [r4, #32]
 8006d76:	4628      	mov	r0, r5
 8006d78:	47b0      	blx	r6
 8006d7a:	1c43      	adds	r3, r0, #1
 8006d7c:	89a3      	ldrh	r3, [r4, #12]
 8006d7e:	d106      	bne.n	8006d8e <__sflush_r+0x62>
 8006d80:	6829      	ldr	r1, [r5, #0]
 8006d82:	291d      	cmp	r1, #29
 8006d84:	d82b      	bhi.n	8006dde <__sflush_r+0xb2>
 8006d86:	4a2a      	ldr	r2, [pc, #168]	@ (8006e30 <__sflush_r+0x104>)
 8006d88:	40ca      	lsrs	r2, r1
 8006d8a:	07d6      	lsls	r6, r2, #31
 8006d8c:	d527      	bpl.n	8006dde <__sflush_r+0xb2>
 8006d8e:	2200      	movs	r2, #0
 8006d90:	6062      	str	r2, [r4, #4]
 8006d92:	04d9      	lsls	r1, r3, #19
 8006d94:	6922      	ldr	r2, [r4, #16]
 8006d96:	6022      	str	r2, [r4, #0]
 8006d98:	d504      	bpl.n	8006da4 <__sflush_r+0x78>
 8006d9a:	1c42      	adds	r2, r0, #1
 8006d9c:	d101      	bne.n	8006da2 <__sflush_r+0x76>
 8006d9e:	682b      	ldr	r3, [r5, #0]
 8006da0:	b903      	cbnz	r3, 8006da4 <__sflush_r+0x78>
 8006da2:	6560      	str	r0, [r4, #84]	@ 0x54
 8006da4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006da6:	602f      	str	r7, [r5, #0]
 8006da8:	b1b9      	cbz	r1, 8006dda <__sflush_r+0xae>
 8006daa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006dae:	4299      	cmp	r1, r3
 8006db0:	d002      	beq.n	8006db8 <__sflush_r+0x8c>
 8006db2:	4628      	mov	r0, r5
 8006db4:	f7ff feba 	bl	8006b2c <_free_r>
 8006db8:	2300      	movs	r3, #0
 8006dba:	6363      	str	r3, [r4, #52]	@ 0x34
 8006dbc:	e00d      	b.n	8006dda <__sflush_r+0xae>
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	4628      	mov	r0, r5
 8006dc2:	47b0      	blx	r6
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	1c50      	adds	r0, r2, #1
 8006dc8:	d1c9      	bne.n	8006d5e <__sflush_r+0x32>
 8006dca:	682b      	ldr	r3, [r5, #0]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d0c6      	beq.n	8006d5e <__sflush_r+0x32>
 8006dd0:	2b1d      	cmp	r3, #29
 8006dd2:	d001      	beq.n	8006dd8 <__sflush_r+0xac>
 8006dd4:	2b16      	cmp	r3, #22
 8006dd6:	d11e      	bne.n	8006e16 <__sflush_r+0xea>
 8006dd8:	602f      	str	r7, [r5, #0]
 8006dda:	2000      	movs	r0, #0
 8006ddc:	e022      	b.n	8006e24 <__sflush_r+0xf8>
 8006dde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006de2:	b21b      	sxth	r3, r3
 8006de4:	e01b      	b.n	8006e1e <__sflush_r+0xf2>
 8006de6:	690f      	ldr	r7, [r1, #16]
 8006de8:	2f00      	cmp	r7, #0
 8006dea:	d0f6      	beq.n	8006dda <__sflush_r+0xae>
 8006dec:	0793      	lsls	r3, r2, #30
 8006dee:	680e      	ldr	r6, [r1, #0]
 8006df0:	bf08      	it	eq
 8006df2:	694b      	ldreq	r3, [r1, #20]
 8006df4:	600f      	str	r7, [r1, #0]
 8006df6:	bf18      	it	ne
 8006df8:	2300      	movne	r3, #0
 8006dfa:	eba6 0807 	sub.w	r8, r6, r7
 8006dfe:	608b      	str	r3, [r1, #8]
 8006e00:	f1b8 0f00 	cmp.w	r8, #0
 8006e04:	dde9      	ble.n	8006dda <__sflush_r+0xae>
 8006e06:	6a21      	ldr	r1, [r4, #32]
 8006e08:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006e0a:	4643      	mov	r3, r8
 8006e0c:	463a      	mov	r2, r7
 8006e0e:	4628      	mov	r0, r5
 8006e10:	47b0      	blx	r6
 8006e12:	2800      	cmp	r0, #0
 8006e14:	dc08      	bgt.n	8006e28 <__sflush_r+0xfc>
 8006e16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e1e:	81a3      	strh	r3, [r4, #12]
 8006e20:	f04f 30ff 	mov.w	r0, #4294967295
 8006e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e28:	4407      	add	r7, r0
 8006e2a:	eba8 0800 	sub.w	r8, r8, r0
 8006e2e:	e7e7      	b.n	8006e00 <__sflush_r+0xd4>
 8006e30:	20400001 	.word	0x20400001

08006e34 <_fflush_r>:
 8006e34:	b538      	push	{r3, r4, r5, lr}
 8006e36:	690b      	ldr	r3, [r1, #16]
 8006e38:	4605      	mov	r5, r0
 8006e3a:	460c      	mov	r4, r1
 8006e3c:	b913      	cbnz	r3, 8006e44 <_fflush_r+0x10>
 8006e3e:	2500      	movs	r5, #0
 8006e40:	4628      	mov	r0, r5
 8006e42:	bd38      	pop	{r3, r4, r5, pc}
 8006e44:	b118      	cbz	r0, 8006e4e <_fflush_r+0x1a>
 8006e46:	6a03      	ldr	r3, [r0, #32]
 8006e48:	b90b      	cbnz	r3, 8006e4e <_fflush_r+0x1a>
 8006e4a:	f7ff fd5b 	bl	8006904 <__sinit>
 8006e4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d0f3      	beq.n	8006e3e <_fflush_r+0xa>
 8006e56:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006e58:	07d0      	lsls	r0, r2, #31
 8006e5a:	d404      	bmi.n	8006e66 <_fflush_r+0x32>
 8006e5c:	0599      	lsls	r1, r3, #22
 8006e5e:	d402      	bmi.n	8006e66 <_fflush_r+0x32>
 8006e60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e62:	f7ff fe42 	bl	8006aea <__retarget_lock_acquire_recursive>
 8006e66:	4628      	mov	r0, r5
 8006e68:	4621      	mov	r1, r4
 8006e6a:	f7ff ff5f 	bl	8006d2c <__sflush_r>
 8006e6e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006e70:	07da      	lsls	r2, r3, #31
 8006e72:	4605      	mov	r5, r0
 8006e74:	d4e4      	bmi.n	8006e40 <_fflush_r+0xc>
 8006e76:	89a3      	ldrh	r3, [r4, #12]
 8006e78:	059b      	lsls	r3, r3, #22
 8006e7a:	d4e1      	bmi.n	8006e40 <_fflush_r+0xc>
 8006e7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e7e:	f7ff fe35 	bl	8006aec <__retarget_lock_release_recursive>
 8006e82:	e7dd      	b.n	8006e40 <_fflush_r+0xc>

08006e84 <fiprintf>:
 8006e84:	b40e      	push	{r1, r2, r3}
 8006e86:	b503      	push	{r0, r1, lr}
 8006e88:	4601      	mov	r1, r0
 8006e8a:	ab03      	add	r3, sp, #12
 8006e8c:	4805      	ldr	r0, [pc, #20]	@ (8006ea4 <fiprintf+0x20>)
 8006e8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e92:	6800      	ldr	r0, [r0, #0]
 8006e94:	9301      	str	r3, [sp, #4]
 8006e96:	f000 f847 	bl	8006f28 <_vfiprintf_r>
 8006e9a:	b002      	add	sp, #8
 8006e9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ea0:	b003      	add	sp, #12
 8006ea2:	4770      	bx	lr
 8006ea4:	20000020 	.word	0x20000020

08006ea8 <_sbrk_r>:
 8006ea8:	b538      	push	{r3, r4, r5, lr}
 8006eaa:	4d06      	ldr	r5, [pc, #24]	@ (8006ec4 <_sbrk_r+0x1c>)
 8006eac:	2300      	movs	r3, #0
 8006eae:	4604      	mov	r4, r0
 8006eb0:	4608      	mov	r0, r1
 8006eb2:	602b      	str	r3, [r5, #0]
 8006eb4:	f7fb f8f0 	bl	8002098 <_sbrk>
 8006eb8:	1c43      	adds	r3, r0, #1
 8006eba:	d102      	bne.n	8006ec2 <_sbrk_r+0x1a>
 8006ebc:	682b      	ldr	r3, [r5, #0]
 8006ebe:	b103      	cbz	r3, 8006ec2 <_sbrk_r+0x1a>
 8006ec0:	6023      	str	r3, [r4, #0]
 8006ec2:	bd38      	pop	{r3, r4, r5, pc}
 8006ec4:	20004fe0 	.word	0x20004fe0

08006ec8 <abort>:
 8006ec8:	b508      	push	{r3, lr}
 8006eca:	2006      	movs	r0, #6
 8006ecc:	f000 fb8c 	bl	80075e8 <raise>
 8006ed0:	2001      	movs	r0, #1
 8006ed2:	f7fb f869 	bl	8001fa8 <_exit>

08006ed6 <__sfputc_r>:
 8006ed6:	6893      	ldr	r3, [r2, #8]
 8006ed8:	3b01      	subs	r3, #1
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	b410      	push	{r4}
 8006ede:	6093      	str	r3, [r2, #8]
 8006ee0:	da08      	bge.n	8006ef4 <__sfputc_r+0x1e>
 8006ee2:	6994      	ldr	r4, [r2, #24]
 8006ee4:	42a3      	cmp	r3, r4
 8006ee6:	db01      	blt.n	8006eec <__sfputc_r+0x16>
 8006ee8:	290a      	cmp	r1, #10
 8006eea:	d103      	bne.n	8006ef4 <__sfputc_r+0x1e>
 8006eec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ef0:	f000 babe 	b.w	8007470 <__swbuf_r>
 8006ef4:	6813      	ldr	r3, [r2, #0]
 8006ef6:	1c58      	adds	r0, r3, #1
 8006ef8:	6010      	str	r0, [r2, #0]
 8006efa:	7019      	strb	r1, [r3, #0]
 8006efc:	4608      	mov	r0, r1
 8006efe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f02:	4770      	bx	lr

08006f04 <__sfputs_r>:
 8006f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f06:	4606      	mov	r6, r0
 8006f08:	460f      	mov	r7, r1
 8006f0a:	4614      	mov	r4, r2
 8006f0c:	18d5      	adds	r5, r2, r3
 8006f0e:	42ac      	cmp	r4, r5
 8006f10:	d101      	bne.n	8006f16 <__sfputs_r+0x12>
 8006f12:	2000      	movs	r0, #0
 8006f14:	e007      	b.n	8006f26 <__sfputs_r+0x22>
 8006f16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f1a:	463a      	mov	r2, r7
 8006f1c:	4630      	mov	r0, r6
 8006f1e:	f7ff ffda 	bl	8006ed6 <__sfputc_r>
 8006f22:	1c43      	adds	r3, r0, #1
 8006f24:	d1f3      	bne.n	8006f0e <__sfputs_r+0xa>
 8006f26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006f28 <_vfiprintf_r>:
 8006f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f2c:	460d      	mov	r5, r1
 8006f2e:	b09d      	sub	sp, #116	@ 0x74
 8006f30:	4614      	mov	r4, r2
 8006f32:	4698      	mov	r8, r3
 8006f34:	4606      	mov	r6, r0
 8006f36:	b118      	cbz	r0, 8006f40 <_vfiprintf_r+0x18>
 8006f38:	6a03      	ldr	r3, [r0, #32]
 8006f3a:	b90b      	cbnz	r3, 8006f40 <_vfiprintf_r+0x18>
 8006f3c:	f7ff fce2 	bl	8006904 <__sinit>
 8006f40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006f42:	07d9      	lsls	r1, r3, #31
 8006f44:	d405      	bmi.n	8006f52 <_vfiprintf_r+0x2a>
 8006f46:	89ab      	ldrh	r3, [r5, #12]
 8006f48:	059a      	lsls	r2, r3, #22
 8006f4a:	d402      	bmi.n	8006f52 <_vfiprintf_r+0x2a>
 8006f4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006f4e:	f7ff fdcc 	bl	8006aea <__retarget_lock_acquire_recursive>
 8006f52:	89ab      	ldrh	r3, [r5, #12]
 8006f54:	071b      	lsls	r3, r3, #28
 8006f56:	d501      	bpl.n	8006f5c <_vfiprintf_r+0x34>
 8006f58:	692b      	ldr	r3, [r5, #16]
 8006f5a:	b99b      	cbnz	r3, 8006f84 <_vfiprintf_r+0x5c>
 8006f5c:	4629      	mov	r1, r5
 8006f5e:	4630      	mov	r0, r6
 8006f60:	f000 fac4 	bl	80074ec <__swsetup_r>
 8006f64:	b170      	cbz	r0, 8006f84 <_vfiprintf_r+0x5c>
 8006f66:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006f68:	07dc      	lsls	r4, r3, #31
 8006f6a:	d504      	bpl.n	8006f76 <_vfiprintf_r+0x4e>
 8006f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f70:	b01d      	add	sp, #116	@ 0x74
 8006f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f76:	89ab      	ldrh	r3, [r5, #12]
 8006f78:	0598      	lsls	r0, r3, #22
 8006f7a:	d4f7      	bmi.n	8006f6c <_vfiprintf_r+0x44>
 8006f7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006f7e:	f7ff fdb5 	bl	8006aec <__retarget_lock_release_recursive>
 8006f82:	e7f3      	b.n	8006f6c <_vfiprintf_r+0x44>
 8006f84:	2300      	movs	r3, #0
 8006f86:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f88:	2320      	movs	r3, #32
 8006f8a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006f8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f92:	2330      	movs	r3, #48	@ 0x30
 8006f94:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007144 <_vfiprintf_r+0x21c>
 8006f98:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006f9c:	f04f 0901 	mov.w	r9, #1
 8006fa0:	4623      	mov	r3, r4
 8006fa2:	469a      	mov	sl, r3
 8006fa4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006fa8:	b10a      	cbz	r2, 8006fae <_vfiprintf_r+0x86>
 8006faa:	2a25      	cmp	r2, #37	@ 0x25
 8006fac:	d1f9      	bne.n	8006fa2 <_vfiprintf_r+0x7a>
 8006fae:	ebba 0b04 	subs.w	fp, sl, r4
 8006fb2:	d00b      	beq.n	8006fcc <_vfiprintf_r+0xa4>
 8006fb4:	465b      	mov	r3, fp
 8006fb6:	4622      	mov	r2, r4
 8006fb8:	4629      	mov	r1, r5
 8006fba:	4630      	mov	r0, r6
 8006fbc:	f7ff ffa2 	bl	8006f04 <__sfputs_r>
 8006fc0:	3001      	adds	r0, #1
 8006fc2:	f000 80a7 	beq.w	8007114 <_vfiprintf_r+0x1ec>
 8006fc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006fc8:	445a      	add	r2, fp
 8006fca:	9209      	str	r2, [sp, #36]	@ 0x24
 8006fcc:	f89a 3000 	ldrb.w	r3, [sl]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	f000 809f 	beq.w	8007114 <_vfiprintf_r+0x1ec>
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8006fdc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006fe0:	f10a 0a01 	add.w	sl, sl, #1
 8006fe4:	9304      	str	r3, [sp, #16]
 8006fe6:	9307      	str	r3, [sp, #28]
 8006fe8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006fec:	931a      	str	r3, [sp, #104]	@ 0x68
 8006fee:	4654      	mov	r4, sl
 8006ff0:	2205      	movs	r2, #5
 8006ff2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ff6:	4853      	ldr	r0, [pc, #332]	@ (8007144 <_vfiprintf_r+0x21c>)
 8006ff8:	f7f9 f94a 	bl	8000290 <memchr>
 8006ffc:	9a04      	ldr	r2, [sp, #16]
 8006ffe:	b9d8      	cbnz	r0, 8007038 <_vfiprintf_r+0x110>
 8007000:	06d1      	lsls	r1, r2, #27
 8007002:	bf44      	itt	mi
 8007004:	2320      	movmi	r3, #32
 8007006:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800700a:	0713      	lsls	r3, r2, #28
 800700c:	bf44      	itt	mi
 800700e:	232b      	movmi	r3, #43	@ 0x2b
 8007010:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007014:	f89a 3000 	ldrb.w	r3, [sl]
 8007018:	2b2a      	cmp	r3, #42	@ 0x2a
 800701a:	d015      	beq.n	8007048 <_vfiprintf_r+0x120>
 800701c:	9a07      	ldr	r2, [sp, #28]
 800701e:	4654      	mov	r4, sl
 8007020:	2000      	movs	r0, #0
 8007022:	f04f 0c0a 	mov.w	ip, #10
 8007026:	4621      	mov	r1, r4
 8007028:	f811 3b01 	ldrb.w	r3, [r1], #1
 800702c:	3b30      	subs	r3, #48	@ 0x30
 800702e:	2b09      	cmp	r3, #9
 8007030:	d94b      	bls.n	80070ca <_vfiprintf_r+0x1a2>
 8007032:	b1b0      	cbz	r0, 8007062 <_vfiprintf_r+0x13a>
 8007034:	9207      	str	r2, [sp, #28]
 8007036:	e014      	b.n	8007062 <_vfiprintf_r+0x13a>
 8007038:	eba0 0308 	sub.w	r3, r0, r8
 800703c:	fa09 f303 	lsl.w	r3, r9, r3
 8007040:	4313      	orrs	r3, r2
 8007042:	9304      	str	r3, [sp, #16]
 8007044:	46a2      	mov	sl, r4
 8007046:	e7d2      	b.n	8006fee <_vfiprintf_r+0xc6>
 8007048:	9b03      	ldr	r3, [sp, #12]
 800704a:	1d19      	adds	r1, r3, #4
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	9103      	str	r1, [sp, #12]
 8007050:	2b00      	cmp	r3, #0
 8007052:	bfbb      	ittet	lt
 8007054:	425b      	neglt	r3, r3
 8007056:	f042 0202 	orrlt.w	r2, r2, #2
 800705a:	9307      	strge	r3, [sp, #28]
 800705c:	9307      	strlt	r3, [sp, #28]
 800705e:	bfb8      	it	lt
 8007060:	9204      	strlt	r2, [sp, #16]
 8007062:	7823      	ldrb	r3, [r4, #0]
 8007064:	2b2e      	cmp	r3, #46	@ 0x2e
 8007066:	d10a      	bne.n	800707e <_vfiprintf_r+0x156>
 8007068:	7863      	ldrb	r3, [r4, #1]
 800706a:	2b2a      	cmp	r3, #42	@ 0x2a
 800706c:	d132      	bne.n	80070d4 <_vfiprintf_r+0x1ac>
 800706e:	9b03      	ldr	r3, [sp, #12]
 8007070:	1d1a      	adds	r2, r3, #4
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	9203      	str	r2, [sp, #12]
 8007076:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800707a:	3402      	adds	r4, #2
 800707c:	9305      	str	r3, [sp, #20]
 800707e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007154 <_vfiprintf_r+0x22c>
 8007082:	7821      	ldrb	r1, [r4, #0]
 8007084:	2203      	movs	r2, #3
 8007086:	4650      	mov	r0, sl
 8007088:	f7f9 f902 	bl	8000290 <memchr>
 800708c:	b138      	cbz	r0, 800709e <_vfiprintf_r+0x176>
 800708e:	9b04      	ldr	r3, [sp, #16]
 8007090:	eba0 000a 	sub.w	r0, r0, sl
 8007094:	2240      	movs	r2, #64	@ 0x40
 8007096:	4082      	lsls	r2, r0
 8007098:	4313      	orrs	r3, r2
 800709a:	3401      	adds	r4, #1
 800709c:	9304      	str	r3, [sp, #16]
 800709e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070a2:	4829      	ldr	r0, [pc, #164]	@ (8007148 <_vfiprintf_r+0x220>)
 80070a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80070a8:	2206      	movs	r2, #6
 80070aa:	f7f9 f8f1 	bl	8000290 <memchr>
 80070ae:	2800      	cmp	r0, #0
 80070b0:	d03f      	beq.n	8007132 <_vfiprintf_r+0x20a>
 80070b2:	4b26      	ldr	r3, [pc, #152]	@ (800714c <_vfiprintf_r+0x224>)
 80070b4:	bb1b      	cbnz	r3, 80070fe <_vfiprintf_r+0x1d6>
 80070b6:	9b03      	ldr	r3, [sp, #12]
 80070b8:	3307      	adds	r3, #7
 80070ba:	f023 0307 	bic.w	r3, r3, #7
 80070be:	3308      	adds	r3, #8
 80070c0:	9303      	str	r3, [sp, #12]
 80070c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070c4:	443b      	add	r3, r7
 80070c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80070c8:	e76a      	b.n	8006fa0 <_vfiprintf_r+0x78>
 80070ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80070ce:	460c      	mov	r4, r1
 80070d0:	2001      	movs	r0, #1
 80070d2:	e7a8      	b.n	8007026 <_vfiprintf_r+0xfe>
 80070d4:	2300      	movs	r3, #0
 80070d6:	3401      	adds	r4, #1
 80070d8:	9305      	str	r3, [sp, #20]
 80070da:	4619      	mov	r1, r3
 80070dc:	f04f 0c0a 	mov.w	ip, #10
 80070e0:	4620      	mov	r0, r4
 80070e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80070e6:	3a30      	subs	r2, #48	@ 0x30
 80070e8:	2a09      	cmp	r2, #9
 80070ea:	d903      	bls.n	80070f4 <_vfiprintf_r+0x1cc>
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d0c6      	beq.n	800707e <_vfiprintf_r+0x156>
 80070f0:	9105      	str	r1, [sp, #20]
 80070f2:	e7c4      	b.n	800707e <_vfiprintf_r+0x156>
 80070f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80070f8:	4604      	mov	r4, r0
 80070fa:	2301      	movs	r3, #1
 80070fc:	e7f0      	b.n	80070e0 <_vfiprintf_r+0x1b8>
 80070fe:	ab03      	add	r3, sp, #12
 8007100:	9300      	str	r3, [sp, #0]
 8007102:	462a      	mov	r2, r5
 8007104:	4b12      	ldr	r3, [pc, #72]	@ (8007150 <_vfiprintf_r+0x228>)
 8007106:	a904      	add	r1, sp, #16
 8007108:	4630      	mov	r0, r6
 800710a:	f3af 8000 	nop.w
 800710e:	4607      	mov	r7, r0
 8007110:	1c78      	adds	r0, r7, #1
 8007112:	d1d6      	bne.n	80070c2 <_vfiprintf_r+0x19a>
 8007114:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007116:	07d9      	lsls	r1, r3, #31
 8007118:	d405      	bmi.n	8007126 <_vfiprintf_r+0x1fe>
 800711a:	89ab      	ldrh	r3, [r5, #12]
 800711c:	059a      	lsls	r2, r3, #22
 800711e:	d402      	bmi.n	8007126 <_vfiprintf_r+0x1fe>
 8007120:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007122:	f7ff fce3 	bl	8006aec <__retarget_lock_release_recursive>
 8007126:	89ab      	ldrh	r3, [r5, #12]
 8007128:	065b      	lsls	r3, r3, #25
 800712a:	f53f af1f 	bmi.w	8006f6c <_vfiprintf_r+0x44>
 800712e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007130:	e71e      	b.n	8006f70 <_vfiprintf_r+0x48>
 8007132:	ab03      	add	r3, sp, #12
 8007134:	9300      	str	r3, [sp, #0]
 8007136:	462a      	mov	r2, r5
 8007138:	4b05      	ldr	r3, [pc, #20]	@ (8007150 <_vfiprintf_r+0x228>)
 800713a:	a904      	add	r1, sp, #16
 800713c:	4630      	mov	r0, r6
 800713e:	f000 f879 	bl	8007234 <_printf_i>
 8007142:	e7e4      	b.n	800710e <_vfiprintf_r+0x1e6>
 8007144:	0801ade3 	.word	0x0801ade3
 8007148:	0801aded 	.word	0x0801aded
 800714c:	00000000 	.word	0x00000000
 8007150:	08006f05 	.word	0x08006f05
 8007154:	0801ade9 	.word	0x0801ade9

08007158 <_printf_common>:
 8007158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800715c:	4616      	mov	r6, r2
 800715e:	4698      	mov	r8, r3
 8007160:	688a      	ldr	r2, [r1, #8]
 8007162:	690b      	ldr	r3, [r1, #16]
 8007164:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007168:	4293      	cmp	r3, r2
 800716a:	bfb8      	it	lt
 800716c:	4613      	movlt	r3, r2
 800716e:	6033      	str	r3, [r6, #0]
 8007170:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007174:	4607      	mov	r7, r0
 8007176:	460c      	mov	r4, r1
 8007178:	b10a      	cbz	r2, 800717e <_printf_common+0x26>
 800717a:	3301      	adds	r3, #1
 800717c:	6033      	str	r3, [r6, #0]
 800717e:	6823      	ldr	r3, [r4, #0]
 8007180:	0699      	lsls	r1, r3, #26
 8007182:	bf42      	ittt	mi
 8007184:	6833      	ldrmi	r3, [r6, #0]
 8007186:	3302      	addmi	r3, #2
 8007188:	6033      	strmi	r3, [r6, #0]
 800718a:	6825      	ldr	r5, [r4, #0]
 800718c:	f015 0506 	ands.w	r5, r5, #6
 8007190:	d106      	bne.n	80071a0 <_printf_common+0x48>
 8007192:	f104 0a19 	add.w	sl, r4, #25
 8007196:	68e3      	ldr	r3, [r4, #12]
 8007198:	6832      	ldr	r2, [r6, #0]
 800719a:	1a9b      	subs	r3, r3, r2
 800719c:	42ab      	cmp	r3, r5
 800719e:	dc26      	bgt.n	80071ee <_printf_common+0x96>
 80071a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80071a4:	6822      	ldr	r2, [r4, #0]
 80071a6:	3b00      	subs	r3, #0
 80071a8:	bf18      	it	ne
 80071aa:	2301      	movne	r3, #1
 80071ac:	0692      	lsls	r2, r2, #26
 80071ae:	d42b      	bmi.n	8007208 <_printf_common+0xb0>
 80071b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80071b4:	4641      	mov	r1, r8
 80071b6:	4638      	mov	r0, r7
 80071b8:	47c8      	blx	r9
 80071ba:	3001      	adds	r0, #1
 80071bc:	d01e      	beq.n	80071fc <_printf_common+0xa4>
 80071be:	6823      	ldr	r3, [r4, #0]
 80071c0:	6922      	ldr	r2, [r4, #16]
 80071c2:	f003 0306 	and.w	r3, r3, #6
 80071c6:	2b04      	cmp	r3, #4
 80071c8:	bf02      	ittt	eq
 80071ca:	68e5      	ldreq	r5, [r4, #12]
 80071cc:	6833      	ldreq	r3, [r6, #0]
 80071ce:	1aed      	subeq	r5, r5, r3
 80071d0:	68a3      	ldr	r3, [r4, #8]
 80071d2:	bf0c      	ite	eq
 80071d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80071d8:	2500      	movne	r5, #0
 80071da:	4293      	cmp	r3, r2
 80071dc:	bfc4      	itt	gt
 80071de:	1a9b      	subgt	r3, r3, r2
 80071e0:	18ed      	addgt	r5, r5, r3
 80071e2:	2600      	movs	r6, #0
 80071e4:	341a      	adds	r4, #26
 80071e6:	42b5      	cmp	r5, r6
 80071e8:	d11a      	bne.n	8007220 <_printf_common+0xc8>
 80071ea:	2000      	movs	r0, #0
 80071ec:	e008      	b.n	8007200 <_printf_common+0xa8>
 80071ee:	2301      	movs	r3, #1
 80071f0:	4652      	mov	r2, sl
 80071f2:	4641      	mov	r1, r8
 80071f4:	4638      	mov	r0, r7
 80071f6:	47c8      	blx	r9
 80071f8:	3001      	adds	r0, #1
 80071fa:	d103      	bne.n	8007204 <_printf_common+0xac>
 80071fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007204:	3501      	adds	r5, #1
 8007206:	e7c6      	b.n	8007196 <_printf_common+0x3e>
 8007208:	18e1      	adds	r1, r4, r3
 800720a:	1c5a      	adds	r2, r3, #1
 800720c:	2030      	movs	r0, #48	@ 0x30
 800720e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007212:	4422      	add	r2, r4
 8007214:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007218:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800721c:	3302      	adds	r3, #2
 800721e:	e7c7      	b.n	80071b0 <_printf_common+0x58>
 8007220:	2301      	movs	r3, #1
 8007222:	4622      	mov	r2, r4
 8007224:	4641      	mov	r1, r8
 8007226:	4638      	mov	r0, r7
 8007228:	47c8      	blx	r9
 800722a:	3001      	adds	r0, #1
 800722c:	d0e6      	beq.n	80071fc <_printf_common+0xa4>
 800722e:	3601      	adds	r6, #1
 8007230:	e7d9      	b.n	80071e6 <_printf_common+0x8e>
	...

08007234 <_printf_i>:
 8007234:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007238:	7e0f      	ldrb	r7, [r1, #24]
 800723a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800723c:	2f78      	cmp	r7, #120	@ 0x78
 800723e:	4691      	mov	r9, r2
 8007240:	4680      	mov	r8, r0
 8007242:	460c      	mov	r4, r1
 8007244:	469a      	mov	sl, r3
 8007246:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800724a:	d807      	bhi.n	800725c <_printf_i+0x28>
 800724c:	2f62      	cmp	r7, #98	@ 0x62
 800724e:	d80a      	bhi.n	8007266 <_printf_i+0x32>
 8007250:	2f00      	cmp	r7, #0
 8007252:	f000 80d1 	beq.w	80073f8 <_printf_i+0x1c4>
 8007256:	2f58      	cmp	r7, #88	@ 0x58
 8007258:	f000 80b8 	beq.w	80073cc <_printf_i+0x198>
 800725c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007260:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007264:	e03a      	b.n	80072dc <_printf_i+0xa8>
 8007266:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800726a:	2b15      	cmp	r3, #21
 800726c:	d8f6      	bhi.n	800725c <_printf_i+0x28>
 800726e:	a101      	add	r1, pc, #4	@ (adr r1, 8007274 <_printf_i+0x40>)
 8007270:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007274:	080072cd 	.word	0x080072cd
 8007278:	080072e1 	.word	0x080072e1
 800727c:	0800725d 	.word	0x0800725d
 8007280:	0800725d 	.word	0x0800725d
 8007284:	0800725d 	.word	0x0800725d
 8007288:	0800725d 	.word	0x0800725d
 800728c:	080072e1 	.word	0x080072e1
 8007290:	0800725d 	.word	0x0800725d
 8007294:	0800725d 	.word	0x0800725d
 8007298:	0800725d 	.word	0x0800725d
 800729c:	0800725d 	.word	0x0800725d
 80072a0:	080073df 	.word	0x080073df
 80072a4:	0800730b 	.word	0x0800730b
 80072a8:	08007399 	.word	0x08007399
 80072ac:	0800725d 	.word	0x0800725d
 80072b0:	0800725d 	.word	0x0800725d
 80072b4:	08007401 	.word	0x08007401
 80072b8:	0800725d 	.word	0x0800725d
 80072bc:	0800730b 	.word	0x0800730b
 80072c0:	0800725d 	.word	0x0800725d
 80072c4:	0800725d 	.word	0x0800725d
 80072c8:	080073a1 	.word	0x080073a1
 80072cc:	6833      	ldr	r3, [r6, #0]
 80072ce:	1d1a      	adds	r2, r3, #4
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	6032      	str	r2, [r6, #0]
 80072d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80072d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80072dc:	2301      	movs	r3, #1
 80072de:	e09c      	b.n	800741a <_printf_i+0x1e6>
 80072e0:	6833      	ldr	r3, [r6, #0]
 80072e2:	6820      	ldr	r0, [r4, #0]
 80072e4:	1d19      	adds	r1, r3, #4
 80072e6:	6031      	str	r1, [r6, #0]
 80072e8:	0606      	lsls	r6, r0, #24
 80072ea:	d501      	bpl.n	80072f0 <_printf_i+0xbc>
 80072ec:	681d      	ldr	r5, [r3, #0]
 80072ee:	e003      	b.n	80072f8 <_printf_i+0xc4>
 80072f0:	0645      	lsls	r5, r0, #25
 80072f2:	d5fb      	bpl.n	80072ec <_printf_i+0xb8>
 80072f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80072f8:	2d00      	cmp	r5, #0
 80072fa:	da03      	bge.n	8007304 <_printf_i+0xd0>
 80072fc:	232d      	movs	r3, #45	@ 0x2d
 80072fe:	426d      	negs	r5, r5
 8007300:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007304:	4858      	ldr	r0, [pc, #352]	@ (8007468 <_printf_i+0x234>)
 8007306:	230a      	movs	r3, #10
 8007308:	e011      	b.n	800732e <_printf_i+0xfa>
 800730a:	6821      	ldr	r1, [r4, #0]
 800730c:	6833      	ldr	r3, [r6, #0]
 800730e:	0608      	lsls	r0, r1, #24
 8007310:	f853 5b04 	ldr.w	r5, [r3], #4
 8007314:	d402      	bmi.n	800731c <_printf_i+0xe8>
 8007316:	0649      	lsls	r1, r1, #25
 8007318:	bf48      	it	mi
 800731a:	b2ad      	uxthmi	r5, r5
 800731c:	2f6f      	cmp	r7, #111	@ 0x6f
 800731e:	4852      	ldr	r0, [pc, #328]	@ (8007468 <_printf_i+0x234>)
 8007320:	6033      	str	r3, [r6, #0]
 8007322:	bf14      	ite	ne
 8007324:	230a      	movne	r3, #10
 8007326:	2308      	moveq	r3, #8
 8007328:	2100      	movs	r1, #0
 800732a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800732e:	6866      	ldr	r6, [r4, #4]
 8007330:	60a6      	str	r6, [r4, #8]
 8007332:	2e00      	cmp	r6, #0
 8007334:	db05      	blt.n	8007342 <_printf_i+0x10e>
 8007336:	6821      	ldr	r1, [r4, #0]
 8007338:	432e      	orrs	r6, r5
 800733a:	f021 0104 	bic.w	r1, r1, #4
 800733e:	6021      	str	r1, [r4, #0]
 8007340:	d04b      	beq.n	80073da <_printf_i+0x1a6>
 8007342:	4616      	mov	r6, r2
 8007344:	fbb5 f1f3 	udiv	r1, r5, r3
 8007348:	fb03 5711 	mls	r7, r3, r1, r5
 800734c:	5dc7      	ldrb	r7, [r0, r7]
 800734e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007352:	462f      	mov	r7, r5
 8007354:	42bb      	cmp	r3, r7
 8007356:	460d      	mov	r5, r1
 8007358:	d9f4      	bls.n	8007344 <_printf_i+0x110>
 800735a:	2b08      	cmp	r3, #8
 800735c:	d10b      	bne.n	8007376 <_printf_i+0x142>
 800735e:	6823      	ldr	r3, [r4, #0]
 8007360:	07df      	lsls	r7, r3, #31
 8007362:	d508      	bpl.n	8007376 <_printf_i+0x142>
 8007364:	6923      	ldr	r3, [r4, #16]
 8007366:	6861      	ldr	r1, [r4, #4]
 8007368:	4299      	cmp	r1, r3
 800736a:	bfde      	ittt	le
 800736c:	2330      	movle	r3, #48	@ 0x30
 800736e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007372:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007376:	1b92      	subs	r2, r2, r6
 8007378:	6122      	str	r2, [r4, #16]
 800737a:	f8cd a000 	str.w	sl, [sp]
 800737e:	464b      	mov	r3, r9
 8007380:	aa03      	add	r2, sp, #12
 8007382:	4621      	mov	r1, r4
 8007384:	4640      	mov	r0, r8
 8007386:	f7ff fee7 	bl	8007158 <_printf_common>
 800738a:	3001      	adds	r0, #1
 800738c:	d14a      	bne.n	8007424 <_printf_i+0x1f0>
 800738e:	f04f 30ff 	mov.w	r0, #4294967295
 8007392:	b004      	add	sp, #16
 8007394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007398:	6823      	ldr	r3, [r4, #0]
 800739a:	f043 0320 	orr.w	r3, r3, #32
 800739e:	6023      	str	r3, [r4, #0]
 80073a0:	4832      	ldr	r0, [pc, #200]	@ (800746c <_printf_i+0x238>)
 80073a2:	2778      	movs	r7, #120	@ 0x78
 80073a4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80073a8:	6823      	ldr	r3, [r4, #0]
 80073aa:	6831      	ldr	r1, [r6, #0]
 80073ac:	061f      	lsls	r7, r3, #24
 80073ae:	f851 5b04 	ldr.w	r5, [r1], #4
 80073b2:	d402      	bmi.n	80073ba <_printf_i+0x186>
 80073b4:	065f      	lsls	r7, r3, #25
 80073b6:	bf48      	it	mi
 80073b8:	b2ad      	uxthmi	r5, r5
 80073ba:	6031      	str	r1, [r6, #0]
 80073bc:	07d9      	lsls	r1, r3, #31
 80073be:	bf44      	itt	mi
 80073c0:	f043 0320 	orrmi.w	r3, r3, #32
 80073c4:	6023      	strmi	r3, [r4, #0]
 80073c6:	b11d      	cbz	r5, 80073d0 <_printf_i+0x19c>
 80073c8:	2310      	movs	r3, #16
 80073ca:	e7ad      	b.n	8007328 <_printf_i+0xf4>
 80073cc:	4826      	ldr	r0, [pc, #152]	@ (8007468 <_printf_i+0x234>)
 80073ce:	e7e9      	b.n	80073a4 <_printf_i+0x170>
 80073d0:	6823      	ldr	r3, [r4, #0]
 80073d2:	f023 0320 	bic.w	r3, r3, #32
 80073d6:	6023      	str	r3, [r4, #0]
 80073d8:	e7f6      	b.n	80073c8 <_printf_i+0x194>
 80073da:	4616      	mov	r6, r2
 80073dc:	e7bd      	b.n	800735a <_printf_i+0x126>
 80073de:	6833      	ldr	r3, [r6, #0]
 80073e0:	6825      	ldr	r5, [r4, #0]
 80073e2:	6961      	ldr	r1, [r4, #20]
 80073e4:	1d18      	adds	r0, r3, #4
 80073e6:	6030      	str	r0, [r6, #0]
 80073e8:	062e      	lsls	r6, r5, #24
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	d501      	bpl.n	80073f2 <_printf_i+0x1be>
 80073ee:	6019      	str	r1, [r3, #0]
 80073f0:	e002      	b.n	80073f8 <_printf_i+0x1c4>
 80073f2:	0668      	lsls	r0, r5, #25
 80073f4:	d5fb      	bpl.n	80073ee <_printf_i+0x1ba>
 80073f6:	8019      	strh	r1, [r3, #0]
 80073f8:	2300      	movs	r3, #0
 80073fa:	6123      	str	r3, [r4, #16]
 80073fc:	4616      	mov	r6, r2
 80073fe:	e7bc      	b.n	800737a <_printf_i+0x146>
 8007400:	6833      	ldr	r3, [r6, #0]
 8007402:	1d1a      	adds	r2, r3, #4
 8007404:	6032      	str	r2, [r6, #0]
 8007406:	681e      	ldr	r6, [r3, #0]
 8007408:	6862      	ldr	r2, [r4, #4]
 800740a:	2100      	movs	r1, #0
 800740c:	4630      	mov	r0, r6
 800740e:	f7f8 ff3f 	bl	8000290 <memchr>
 8007412:	b108      	cbz	r0, 8007418 <_printf_i+0x1e4>
 8007414:	1b80      	subs	r0, r0, r6
 8007416:	6060      	str	r0, [r4, #4]
 8007418:	6863      	ldr	r3, [r4, #4]
 800741a:	6123      	str	r3, [r4, #16]
 800741c:	2300      	movs	r3, #0
 800741e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007422:	e7aa      	b.n	800737a <_printf_i+0x146>
 8007424:	6923      	ldr	r3, [r4, #16]
 8007426:	4632      	mov	r2, r6
 8007428:	4649      	mov	r1, r9
 800742a:	4640      	mov	r0, r8
 800742c:	47d0      	blx	sl
 800742e:	3001      	adds	r0, #1
 8007430:	d0ad      	beq.n	800738e <_printf_i+0x15a>
 8007432:	6823      	ldr	r3, [r4, #0]
 8007434:	079b      	lsls	r3, r3, #30
 8007436:	d413      	bmi.n	8007460 <_printf_i+0x22c>
 8007438:	68e0      	ldr	r0, [r4, #12]
 800743a:	9b03      	ldr	r3, [sp, #12]
 800743c:	4298      	cmp	r0, r3
 800743e:	bfb8      	it	lt
 8007440:	4618      	movlt	r0, r3
 8007442:	e7a6      	b.n	8007392 <_printf_i+0x15e>
 8007444:	2301      	movs	r3, #1
 8007446:	4632      	mov	r2, r6
 8007448:	4649      	mov	r1, r9
 800744a:	4640      	mov	r0, r8
 800744c:	47d0      	blx	sl
 800744e:	3001      	adds	r0, #1
 8007450:	d09d      	beq.n	800738e <_printf_i+0x15a>
 8007452:	3501      	adds	r5, #1
 8007454:	68e3      	ldr	r3, [r4, #12]
 8007456:	9903      	ldr	r1, [sp, #12]
 8007458:	1a5b      	subs	r3, r3, r1
 800745a:	42ab      	cmp	r3, r5
 800745c:	dcf2      	bgt.n	8007444 <_printf_i+0x210>
 800745e:	e7eb      	b.n	8007438 <_printf_i+0x204>
 8007460:	2500      	movs	r5, #0
 8007462:	f104 0619 	add.w	r6, r4, #25
 8007466:	e7f5      	b.n	8007454 <_printf_i+0x220>
 8007468:	0801adf4 	.word	0x0801adf4
 800746c:	0801ae05 	.word	0x0801ae05

08007470 <__swbuf_r>:
 8007470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007472:	460e      	mov	r6, r1
 8007474:	4614      	mov	r4, r2
 8007476:	4605      	mov	r5, r0
 8007478:	b118      	cbz	r0, 8007482 <__swbuf_r+0x12>
 800747a:	6a03      	ldr	r3, [r0, #32]
 800747c:	b90b      	cbnz	r3, 8007482 <__swbuf_r+0x12>
 800747e:	f7ff fa41 	bl	8006904 <__sinit>
 8007482:	69a3      	ldr	r3, [r4, #24]
 8007484:	60a3      	str	r3, [r4, #8]
 8007486:	89a3      	ldrh	r3, [r4, #12]
 8007488:	071a      	lsls	r2, r3, #28
 800748a:	d501      	bpl.n	8007490 <__swbuf_r+0x20>
 800748c:	6923      	ldr	r3, [r4, #16]
 800748e:	b943      	cbnz	r3, 80074a2 <__swbuf_r+0x32>
 8007490:	4621      	mov	r1, r4
 8007492:	4628      	mov	r0, r5
 8007494:	f000 f82a 	bl	80074ec <__swsetup_r>
 8007498:	b118      	cbz	r0, 80074a2 <__swbuf_r+0x32>
 800749a:	f04f 37ff 	mov.w	r7, #4294967295
 800749e:	4638      	mov	r0, r7
 80074a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074a2:	6823      	ldr	r3, [r4, #0]
 80074a4:	6922      	ldr	r2, [r4, #16]
 80074a6:	1a98      	subs	r0, r3, r2
 80074a8:	6963      	ldr	r3, [r4, #20]
 80074aa:	b2f6      	uxtb	r6, r6
 80074ac:	4283      	cmp	r3, r0
 80074ae:	4637      	mov	r7, r6
 80074b0:	dc05      	bgt.n	80074be <__swbuf_r+0x4e>
 80074b2:	4621      	mov	r1, r4
 80074b4:	4628      	mov	r0, r5
 80074b6:	f7ff fcbd 	bl	8006e34 <_fflush_r>
 80074ba:	2800      	cmp	r0, #0
 80074bc:	d1ed      	bne.n	800749a <__swbuf_r+0x2a>
 80074be:	68a3      	ldr	r3, [r4, #8]
 80074c0:	3b01      	subs	r3, #1
 80074c2:	60a3      	str	r3, [r4, #8]
 80074c4:	6823      	ldr	r3, [r4, #0]
 80074c6:	1c5a      	adds	r2, r3, #1
 80074c8:	6022      	str	r2, [r4, #0]
 80074ca:	701e      	strb	r6, [r3, #0]
 80074cc:	6962      	ldr	r2, [r4, #20]
 80074ce:	1c43      	adds	r3, r0, #1
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d004      	beq.n	80074de <__swbuf_r+0x6e>
 80074d4:	89a3      	ldrh	r3, [r4, #12]
 80074d6:	07db      	lsls	r3, r3, #31
 80074d8:	d5e1      	bpl.n	800749e <__swbuf_r+0x2e>
 80074da:	2e0a      	cmp	r6, #10
 80074dc:	d1df      	bne.n	800749e <__swbuf_r+0x2e>
 80074de:	4621      	mov	r1, r4
 80074e0:	4628      	mov	r0, r5
 80074e2:	f7ff fca7 	bl	8006e34 <_fflush_r>
 80074e6:	2800      	cmp	r0, #0
 80074e8:	d0d9      	beq.n	800749e <__swbuf_r+0x2e>
 80074ea:	e7d6      	b.n	800749a <__swbuf_r+0x2a>

080074ec <__swsetup_r>:
 80074ec:	b538      	push	{r3, r4, r5, lr}
 80074ee:	4b29      	ldr	r3, [pc, #164]	@ (8007594 <__swsetup_r+0xa8>)
 80074f0:	4605      	mov	r5, r0
 80074f2:	6818      	ldr	r0, [r3, #0]
 80074f4:	460c      	mov	r4, r1
 80074f6:	b118      	cbz	r0, 8007500 <__swsetup_r+0x14>
 80074f8:	6a03      	ldr	r3, [r0, #32]
 80074fa:	b90b      	cbnz	r3, 8007500 <__swsetup_r+0x14>
 80074fc:	f7ff fa02 	bl	8006904 <__sinit>
 8007500:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007504:	0719      	lsls	r1, r3, #28
 8007506:	d422      	bmi.n	800754e <__swsetup_r+0x62>
 8007508:	06da      	lsls	r2, r3, #27
 800750a:	d407      	bmi.n	800751c <__swsetup_r+0x30>
 800750c:	2209      	movs	r2, #9
 800750e:	602a      	str	r2, [r5, #0]
 8007510:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007514:	81a3      	strh	r3, [r4, #12]
 8007516:	f04f 30ff 	mov.w	r0, #4294967295
 800751a:	e033      	b.n	8007584 <__swsetup_r+0x98>
 800751c:	0758      	lsls	r0, r3, #29
 800751e:	d512      	bpl.n	8007546 <__swsetup_r+0x5a>
 8007520:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007522:	b141      	cbz	r1, 8007536 <__swsetup_r+0x4a>
 8007524:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007528:	4299      	cmp	r1, r3
 800752a:	d002      	beq.n	8007532 <__swsetup_r+0x46>
 800752c:	4628      	mov	r0, r5
 800752e:	f7ff fafd 	bl	8006b2c <_free_r>
 8007532:	2300      	movs	r3, #0
 8007534:	6363      	str	r3, [r4, #52]	@ 0x34
 8007536:	89a3      	ldrh	r3, [r4, #12]
 8007538:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800753c:	81a3      	strh	r3, [r4, #12]
 800753e:	2300      	movs	r3, #0
 8007540:	6063      	str	r3, [r4, #4]
 8007542:	6923      	ldr	r3, [r4, #16]
 8007544:	6023      	str	r3, [r4, #0]
 8007546:	89a3      	ldrh	r3, [r4, #12]
 8007548:	f043 0308 	orr.w	r3, r3, #8
 800754c:	81a3      	strh	r3, [r4, #12]
 800754e:	6923      	ldr	r3, [r4, #16]
 8007550:	b94b      	cbnz	r3, 8007566 <__swsetup_r+0x7a>
 8007552:	89a3      	ldrh	r3, [r4, #12]
 8007554:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007558:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800755c:	d003      	beq.n	8007566 <__swsetup_r+0x7a>
 800755e:	4621      	mov	r1, r4
 8007560:	4628      	mov	r0, r5
 8007562:	f000 f883 	bl	800766c <__smakebuf_r>
 8007566:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800756a:	f013 0201 	ands.w	r2, r3, #1
 800756e:	d00a      	beq.n	8007586 <__swsetup_r+0x9a>
 8007570:	2200      	movs	r2, #0
 8007572:	60a2      	str	r2, [r4, #8]
 8007574:	6962      	ldr	r2, [r4, #20]
 8007576:	4252      	negs	r2, r2
 8007578:	61a2      	str	r2, [r4, #24]
 800757a:	6922      	ldr	r2, [r4, #16]
 800757c:	b942      	cbnz	r2, 8007590 <__swsetup_r+0xa4>
 800757e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007582:	d1c5      	bne.n	8007510 <__swsetup_r+0x24>
 8007584:	bd38      	pop	{r3, r4, r5, pc}
 8007586:	0799      	lsls	r1, r3, #30
 8007588:	bf58      	it	pl
 800758a:	6962      	ldrpl	r2, [r4, #20]
 800758c:	60a2      	str	r2, [r4, #8]
 800758e:	e7f4      	b.n	800757a <__swsetup_r+0x8e>
 8007590:	2000      	movs	r0, #0
 8007592:	e7f7      	b.n	8007584 <__swsetup_r+0x98>
 8007594:	20000020 	.word	0x20000020

08007598 <_raise_r>:
 8007598:	291f      	cmp	r1, #31
 800759a:	b538      	push	{r3, r4, r5, lr}
 800759c:	4605      	mov	r5, r0
 800759e:	460c      	mov	r4, r1
 80075a0:	d904      	bls.n	80075ac <_raise_r+0x14>
 80075a2:	2316      	movs	r3, #22
 80075a4:	6003      	str	r3, [r0, #0]
 80075a6:	f04f 30ff 	mov.w	r0, #4294967295
 80075aa:	bd38      	pop	{r3, r4, r5, pc}
 80075ac:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80075ae:	b112      	cbz	r2, 80075b6 <_raise_r+0x1e>
 80075b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80075b4:	b94b      	cbnz	r3, 80075ca <_raise_r+0x32>
 80075b6:	4628      	mov	r0, r5
 80075b8:	f000 f830 	bl	800761c <_getpid_r>
 80075bc:	4622      	mov	r2, r4
 80075be:	4601      	mov	r1, r0
 80075c0:	4628      	mov	r0, r5
 80075c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075c6:	f000 b817 	b.w	80075f8 <_kill_r>
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d00a      	beq.n	80075e4 <_raise_r+0x4c>
 80075ce:	1c59      	adds	r1, r3, #1
 80075d0:	d103      	bne.n	80075da <_raise_r+0x42>
 80075d2:	2316      	movs	r3, #22
 80075d4:	6003      	str	r3, [r0, #0]
 80075d6:	2001      	movs	r0, #1
 80075d8:	e7e7      	b.n	80075aa <_raise_r+0x12>
 80075da:	2100      	movs	r1, #0
 80075dc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80075e0:	4620      	mov	r0, r4
 80075e2:	4798      	blx	r3
 80075e4:	2000      	movs	r0, #0
 80075e6:	e7e0      	b.n	80075aa <_raise_r+0x12>

080075e8 <raise>:
 80075e8:	4b02      	ldr	r3, [pc, #8]	@ (80075f4 <raise+0xc>)
 80075ea:	4601      	mov	r1, r0
 80075ec:	6818      	ldr	r0, [r3, #0]
 80075ee:	f7ff bfd3 	b.w	8007598 <_raise_r>
 80075f2:	bf00      	nop
 80075f4:	20000020 	.word	0x20000020

080075f8 <_kill_r>:
 80075f8:	b538      	push	{r3, r4, r5, lr}
 80075fa:	4d07      	ldr	r5, [pc, #28]	@ (8007618 <_kill_r+0x20>)
 80075fc:	2300      	movs	r3, #0
 80075fe:	4604      	mov	r4, r0
 8007600:	4608      	mov	r0, r1
 8007602:	4611      	mov	r1, r2
 8007604:	602b      	str	r3, [r5, #0]
 8007606:	f7fa fcbf 	bl	8001f88 <_kill>
 800760a:	1c43      	adds	r3, r0, #1
 800760c:	d102      	bne.n	8007614 <_kill_r+0x1c>
 800760e:	682b      	ldr	r3, [r5, #0]
 8007610:	b103      	cbz	r3, 8007614 <_kill_r+0x1c>
 8007612:	6023      	str	r3, [r4, #0]
 8007614:	bd38      	pop	{r3, r4, r5, pc}
 8007616:	bf00      	nop
 8007618:	20004fe0 	.word	0x20004fe0

0800761c <_getpid_r>:
 800761c:	f7fa bcac 	b.w	8001f78 <_getpid>

08007620 <__swhatbuf_r>:
 8007620:	b570      	push	{r4, r5, r6, lr}
 8007622:	460c      	mov	r4, r1
 8007624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007628:	2900      	cmp	r1, #0
 800762a:	b096      	sub	sp, #88	@ 0x58
 800762c:	4615      	mov	r5, r2
 800762e:	461e      	mov	r6, r3
 8007630:	da0d      	bge.n	800764e <__swhatbuf_r+0x2e>
 8007632:	89a3      	ldrh	r3, [r4, #12]
 8007634:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007638:	f04f 0100 	mov.w	r1, #0
 800763c:	bf14      	ite	ne
 800763e:	2340      	movne	r3, #64	@ 0x40
 8007640:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007644:	2000      	movs	r0, #0
 8007646:	6031      	str	r1, [r6, #0]
 8007648:	602b      	str	r3, [r5, #0]
 800764a:	b016      	add	sp, #88	@ 0x58
 800764c:	bd70      	pop	{r4, r5, r6, pc}
 800764e:	466a      	mov	r2, sp
 8007650:	f000 f848 	bl	80076e4 <_fstat_r>
 8007654:	2800      	cmp	r0, #0
 8007656:	dbec      	blt.n	8007632 <__swhatbuf_r+0x12>
 8007658:	9901      	ldr	r1, [sp, #4]
 800765a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800765e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007662:	4259      	negs	r1, r3
 8007664:	4159      	adcs	r1, r3
 8007666:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800766a:	e7eb      	b.n	8007644 <__swhatbuf_r+0x24>

0800766c <__smakebuf_r>:
 800766c:	898b      	ldrh	r3, [r1, #12]
 800766e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007670:	079d      	lsls	r5, r3, #30
 8007672:	4606      	mov	r6, r0
 8007674:	460c      	mov	r4, r1
 8007676:	d507      	bpl.n	8007688 <__smakebuf_r+0x1c>
 8007678:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800767c:	6023      	str	r3, [r4, #0]
 800767e:	6123      	str	r3, [r4, #16]
 8007680:	2301      	movs	r3, #1
 8007682:	6163      	str	r3, [r4, #20]
 8007684:	b003      	add	sp, #12
 8007686:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007688:	ab01      	add	r3, sp, #4
 800768a:	466a      	mov	r2, sp
 800768c:	f7ff ffc8 	bl	8007620 <__swhatbuf_r>
 8007690:	9f00      	ldr	r7, [sp, #0]
 8007692:	4605      	mov	r5, r0
 8007694:	4639      	mov	r1, r7
 8007696:	4630      	mov	r0, r6
 8007698:	f7ff fabc 	bl	8006c14 <_malloc_r>
 800769c:	b948      	cbnz	r0, 80076b2 <__smakebuf_r+0x46>
 800769e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076a2:	059a      	lsls	r2, r3, #22
 80076a4:	d4ee      	bmi.n	8007684 <__smakebuf_r+0x18>
 80076a6:	f023 0303 	bic.w	r3, r3, #3
 80076aa:	f043 0302 	orr.w	r3, r3, #2
 80076ae:	81a3      	strh	r3, [r4, #12]
 80076b0:	e7e2      	b.n	8007678 <__smakebuf_r+0xc>
 80076b2:	89a3      	ldrh	r3, [r4, #12]
 80076b4:	6020      	str	r0, [r4, #0]
 80076b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076ba:	81a3      	strh	r3, [r4, #12]
 80076bc:	9b01      	ldr	r3, [sp, #4]
 80076be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80076c2:	b15b      	cbz	r3, 80076dc <__smakebuf_r+0x70>
 80076c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076c8:	4630      	mov	r0, r6
 80076ca:	f000 f81d 	bl	8007708 <_isatty_r>
 80076ce:	b128      	cbz	r0, 80076dc <__smakebuf_r+0x70>
 80076d0:	89a3      	ldrh	r3, [r4, #12]
 80076d2:	f023 0303 	bic.w	r3, r3, #3
 80076d6:	f043 0301 	orr.w	r3, r3, #1
 80076da:	81a3      	strh	r3, [r4, #12]
 80076dc:	89a3      	ldrh	r3, [r4, #12]
 80076de:	431d      	orrs	r5, r3
 80076e0:	81a5      	strh	r5, [r4, #12]
 80076e2:	e7cf      	b.n	8007684 <__smakebuf_r+0x18>

080076e4 <_fstat_r>:
 80076e4:	b538      	push	{r3, r4, r5, lr}
 80076e6:	4d07      	ldr	r5, [pc, #28]	@ (8007704 <_fstat_r+0x20>)
 80076e8:	2300      	movs	r3, #0
 80076ea:	4604      	mov	r4, r0
 80076ec:	4608      	mov	r0, r1
 80076ee:	4611      	mov	r1, r2
 80076f0:	602b      	str	r3, [r5, #0]
 80076f2:	f7fa fca9 	bl	8002048 <_fstat>
 80076f6:	1c43      	adds	r3, r0, #1
 80076f8:	d102      	bne.n	8007700 <_fstat_r+0x1c>
 80076fa:	682b      	ldr	r3, [r5, #0]
 80076fc:	b103      	cbz	r3, 8007700 <_fstat_r+0x1c>
 80076fe:	6023      	str	r3, [r4, #0]
 8007700:	bd38      	pop	{r3, r4, r5, pc}
 8007702:	bf00      	nop
 8007704:	20004fe0 	.word	0x20004fe0

08007708 <_isatty_r>:
 8007708:	b538      	push	{r3, r4, r5, lr}
 800770a:	4d06      	ldr	r5, [pc, #24]	@ (8007724 <_isatty_r+0x1c>)
 800770c:	2300      	movs	r3, #0
 800770e:	4604      	mov	r4, r0
 8007710:	4608      	mov	r0, r1
 8007712:	602b      	str	r3, [r5, #0]
 8007714:	f7fa fca8 	bl	8002068 <_isatty>
 8007718:	1c43      	adds	r3, r0, #1
 800771a:	d102      	bne.n	8007722 <_isatty_r+0x1a>
 800771c:	682b      	ldr	r3, [r5, #0]
 800771e:	b103      	cbz	r3, 8007722 <_isatty_r+0x1a>
 8007720:	6023      	str	r3, [r4, #0]
 8007722:	bd38      	pop	{r3, r4, r5, pc}
 8007724:	20004fe0 	.word	0x20004fe0

08007728 <fmodf>:
 8007728:	b508      	push	{r3, lr}
 800772a:	ed2d 8b02 	vpush	{d8}
 800772e:	eef0 8a40 	vmov.f32	s17, s0
 8007732:	eeb0 8a60 	vmov.f32	s16, s1
 8007736:	f000 f839 	bl	80077ac <__ieee754_fmodf>
 800773a:	eef4 8a48 	vcmp.f32	s17, s16
 800773e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007742:	d60c      	bvs.n	800775e <fmodf+0x36>
 8007744:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8007764 <fmodf+0x3c>
 8007748:	eeb4 8a68 	vcmp.f32	s16, s17
 800774c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007750:	d105      	bne.n	800775e <fmodf+0x36>
 8007752:	f7ff f99f 	bl	8006a94 <__errno>
 8007756:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800775a:	2321      	movs	r3, #33	@ 0x21
 800775c:	6003      	str	r3, [r0, #0]
 800775e:	ecbd 8b02 	vpop	{d8}
 8007762:	bd08      	pop	{r3, pc}
 8007764:	00000000 	.word	0x00000000

08007768 <sqrtf>:
 8007768:	b508      	push	{r3, lr}
 800776a:	ed2d 8b02 	vpush	{d8}
 800776e:	eeb0 8a40 	vmov.f32	s16, s0
 8007772:	f000 f817 	bl	80077a4 <__ieee754_sqrtf>
 8007776:	eeb4 8a48 	vcmp.f32	s16, s16
 800777a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800777e:	d60c      	bvs.n	800779a <sqrtf+0x32>
 8007780:	eddf 8a07 	vldr	s17, [pc, #28]	@ 80077a0 <sqrtf+0x38>
 8007784:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8007788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800778c:	d505      	bpl.n	800779a <sqrtf+0x32>
 800778e:	f7ff f981 	bl	8006a94 <__errno>
 8007792:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8007796:	2321      	movs	r3, #33	@ 0x21
 8007798:	6003      	str	r3, [r0, #0]
 800779a:	ecbd 8b02 	vpop	{d8}
 800779e:	bd08      	pop	{r3, pc}
 80077a0:	00000000 	.word	0x00000000

080077a4 <__ieee754_sqrtf>:
 80077a4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80077a8:	4770      	bx	lr
	...

080077ac <__ieee754_fmodf>:
 80077ac:	b570      	push	{r4, r5, r6, lr}
 80077ae:	ee10 6a90 	vmov	r6, s1
 80077b2:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80077b6:	1e5a      	subs	r2, r3, #1
 80077b8:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80077bc:	d206      	bcs.n	80077cc <__ieee754_fmodf+0x20>
 80077be:	ee10 4a10 	vmov	r4, s0
 80077c2:	f024 4100 	bic.w	r1, r4, #2147483648	@ 0x80000000
 80077c6:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80077ca:	d304      	bcc.n	80077d6 <__ieee754_fmodf+0x2a>
 80077cc:	ee60 0a20 	vmul.f32	s1, s0, s1
 80077d0:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 80077d4:	bd70      	pop	{r4, r5, r6, pc}
 80077d6:	4299      	cmp	r1, r3
 80077d8:	dbfc      	blt.n	80077d4 <__ieee754_fmodf+0x28>
 80077da:	f004 4500 	and.w	r5, r4, #2147483648	@ 0x80000000
 80077de:	d105      	bne.n	80077ec <__ieee754_fmodf+0x40>
 80077e0:	4b32      	ldr	r3, [pc, #200]	@ (80078ac <__ieee754_fmodf+0x100>)
 80077e2:	eb03 7355 	add.w	r3, r3, r5, lsr #29
 80077e6:	ed93 0a00 	vldr	s0, [r3]
 80077ea:	e7f3      	b.n	80077d4 <__ieee754_fmodf+0x28>
 80077ec:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 80077f0:	d146      	bne.n	8007880 <__ieee754_fmodf+0xd4>
 80077f2:	020a      	lsls	r2, r1, #8
 80077f4:	f06f 007d 	mvn.w	r0, #125	@ 0x7d
 80077f8:	2a00      	cmp	r2, #0
 80077fa:	dc3e      	bgt.n	800787a <__ieee754_fmodf+0xce>
 80077fc:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8007800:	bf01      	itttt	eq
 8007802:	021a      	lsleq	r2, r3, #8
 8007804:	fab2 f282 	clzeq	r2, r2
 8007808:	f1c2 22ff 	rsbeq	r2, r2, #4278255360	@ 0xff00ff00
 800780c:	f502 027f 	addeq.w	r2, r2, #16711680	@ 0xff0000
 8007810:	bf16      	itet	ne
 8007812:	15da      	asrne	r2, r3, #23
 8007814:	3282      	addeq	r2, #130	@ 0x82
 8007816:	3a7f      	subne	r2, #127	@ 0x7f
 8007818:	f110 0f7e 	cmn.w	r0, #126	@ 0x7e
 800781c:	bfbb      	ittet	lt
 800781e:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 8007822:	1a24      	sublt	r4, r4, r0
 8007824:	f3c4 0416 	ubfxge	r4, r4, #0, #23
 8007828:	40a1      	lsllt	r1, r4
 800782a:	bfa8      	it	ge
 800782c:	f444 0100 	orrge.w	r1, r4, #8388608	@ 0x800000
 8007830:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 8007834:	bfb5      	itete	lt
 8007836:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 800783a:	f3c6 0616 	ubfxge	r6, r6, #0, #23
 800783e:	1aa4      	sublt	r4, r4, r2
 8007840:	f446 0400 	orrge.w	r4, r6, #8388608	@ 0x800000
 8007844:	bfb8      	it	lt
 8007846:	fa03 f404 	lsllt.w	r4, r3, r4
 800784a:	1a80      	subs	r0, r0, r2
 800784c:	1b0b      	subs	r3, r1, r4
 800784e:	b9d0      	cbnz	r0, 8007886 <__ieee754_fmodf+0xda>
 8007850:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 8007854:	bf28      	it	cs
 8007856:	460b      	movcs	r3, r1
 8007858:	2b00      	cmp	r3, #0
 800785a:	d0c1      	beq.n	80077e0 <__ieee754_fmodf+0x34>
 800785c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007860:	db19      	blt.n	8007896 <__ieee754_fmodf+0xea>
 8007862:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 8007866:	db19      	blt.n	800789c <__ieee754_fmodf+0xf0>
 8007868:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800786c:	327f      	adds	r2, #127	@ 0x7f
 800786e:	432b      	orrs	r3, r5
 8007870:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8007874:	ee00 3a10 	vmov	s0, r3
 8007878:	e7ac      	b.n	80077d4 <__ieee754_fmodf+0x28>
 800787a:	3801      	subs	r0, #1
 800787c:	0052      	lsls	r2, r2, #1
 800787e:	e7bb      	b.n	80077f8 <__ieee754_fmodf+0x4c>
 8007880:	15c8      	asrs	r0, r1, #23
 8007882:	387f      	subs	r0, #127	@ 0x7f
 8007884:	e7ba      	b.n	80077fc <__ieee754_fmodf+0x50>
 8007886:	2b00      	cmp	r3, #0
 8007888:	da02      	bge.n	8007890 <__ieee754_fmodf+0xe4>
 800788a:	0049      	lsls	r1, r1, #1
 800788c:	3801      	subs	r0, #1
 800788e:	e7dd      	b.n	800784c <__ieee754_fmodf+0xa0>
 8007890:	d0a6      	beq.n	80077e0 <__ieee754_fmodf+0x34>
 8007892:	0059      	lsls	r1, r3, #1
 8007894:	e7fa      	b.n	800788c <__ieee754_fmodf+0xe0>
 8007896:	005b      	lsls	r3, r3, #1
 8007898:	3a01      	subs	r2, #1
 800789a:	e7df      	b.n	800785c <__ieee754_fmodf+0xb0>
 800789c:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 80078a0:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 80078a4:	3282      	adds	r2, #130	@ 0x82
 80078a6:	4113      	asrs	r3, r2
 80078a8:	432b      	orrs	r3, r5
 80078aa:	e7e3      	b.n	8007874 <__ieee754_fmodf+0xc8>
 80078ac:	0801ae18 	.word	0x0801ae18

080078b0 <_init>:
 80078b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078b2:	bf00      	nop
 80078b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078b6:	bc08      	pop	{r3}
 80078b8:	469e      	mov	lr, r3
 80078ba:	4770      	bx	lr

080078bc <_fini>:
 80078bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078be:	bf00      	nop
 80078c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078c2:	bc08      	pop	{r3}
 80078c4:	469e      	mov	lr, r3
 80078c6:	4770      	bx	lr
